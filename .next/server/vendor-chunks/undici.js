"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/undici";
exports.ids = ["vendor-chunks/undici"];
exports.modules = {

/***/ "(ssr)/./node_modules/undici/index.js":
/*!**************************************!*\
  !*** ./node_modules/undici/index.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst Client = __webpack_require__(/*! ./lib/dispatcher/client */ \"(ssr)/./node_modules/undici/lib/dispatcher/client.js\");\nconst Dispatcher = __webpack_require__(/*! ./lib/dispatcher/dispatcher */ \"(ssr)/./node_modules/undici/lib/dispatcher/dispatcher.js\");\nconst Pool = __webpack_require__(/*! ./lib/dispatcher/pool */ \"(ssr)/./node_modules/undici/lib/dispatcher/pool.js\");\nconst BalancedPool = __webpack_require__(/*! ./lib/dispatcher/balanced-pool */ \"(ssr)/./node_modules/undici/lib/dispatcher/balanced-pool.js\");\nconst Agent = __webpack_require__(/*! ./lib/dispatcher/agent */ \"(ssr)/./node_modules/undici/lib/dispatcher/agent.js\");\nconst ProxyAgent = __webpack_require__(/*! ./lib/dispatcher/proxy-agent */ \"(ssr)/./node_modules/undici/lib/dispatcher/proxy-agent.js\");\nconst EnvHttpProxyAgent = __webpack_require__(/*! ./lib/dispatcher/env-http-proxy-agent */ \"(ssr)/./node_modules/undici/lib/dispatcher/env-http-proxy-agent.js\");\nconst RetryAgent = __webpack_require__(/*! ./lib/dispatcher/retry-agent */ \"(ssr)/./node_modules/undici/lib/dispatcher/retry-agent.js\");\nconst errors = __webpack_require__(/*! ./lib/core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst util = __webpack_require__(/*! ./lib/core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst { InvalidArgumentError } = errors;\nconst api = __webpack_require__(/*! ./lib/api */ \"(ssr)/./node_modules/undici/lib/api/index.js\");\nconst buildConnector = __webpack_require__(/*! ./lib/core/connect */ \"(ssr)/./node_modules/undici/lib/core/connect.js\");\nconst MockClient = __webpack_require__(/*! ./lib/mock/mock-client */ \"(ssr)/./node_modules/undici/lib/mock/mock-client.js\");\nconst MockAgent = __webpack_require__(/*! ./lib/mock/mock-agent */ \"(ssr)/./node_modules/undici/lib/mock/mock-agent.js\");\nconst MockPool = __webpack_require__(/*! ./lib/mock/mock-pool */ \"(ssr)/./node_modules/undici/lib/mock/mock-pool.js\");\nconst mockErrors = __webpack_require__(/*! ./lib/mock/mock-errors */ \"(ssr)/./node_modules/undici/lib/mock/mock-errors.js\");\nconst RetryHandler = __webpack_require__(/*! ./lib/handler/retry-handler */ \"(ssr)/./node_modules/undici/lib/handler/retry-handler.js\");\nconst { getGlobalDispatcher, setGlobalDispatcher } = __webpack_require__(/*! ./lib/global */ \"(ssr)/./node_modules/undici/lib/global.js\");\nconst DecoratorHandler = __webpack_require__(/*! ./lib/handler/decorator-handler */ \"(ssr)/./node_modules/undici/lib/handler/decorator-handler.js\");\nconst RedirectHandler = __webpack_require__(/*! ./lib/handler/redirect-handler */ \"(ssr)/./node_modules/undici/lib/handler/redirect-handler.js\");\nconst createRedirectInterceptor = __webpack_require__(/*! ./lib/interceptor/redirect-interceptor */ \"(ssr)/./node_modules/undici/lib/interceptor/redirect-interceptor.js\");\nObject.assign(Dispatcher.prototype, api);\nmodule.exports.Dispatcher = Dispatcher;\nmodule.exports.Client = Client;\nmodule.exports.Pool = Pool;\nmodule.exports.BalancedPool = BalancedPool;\nmodule.exports.Agent = Agent;\nmodule.exports.ProxyAgent = ProxyAgent;\nmodule.exports.EnvHttpProxyAgent = EnvHttpProxyAgent;\nmodule.exports.RetryAgent = RetryAgent;\nmodule.exports.RetryHandler = RetryHandler;\nmodule.exports.DecoratorHandler = DecoratorHandler;\nmodule.exports.RedirectHandler = RedirectHandler;\nmodule.exports.createRedirectInterceptor = createRedirectInterceptor;\nmodule.exports.interceptors = {\n    redirect: __webpack_require__(/*! ./lib/interceptor/redirect */ \"(ssr)/./node_modules/undici/lib/interceptor/redirect.js\"),\n    retry: __webpack_require__(/*! ./lib/interceptor/retry */ \"(ssr)/./node_modules/undici/lib/interceptor/retry.js\"),\n    dump: __webpack_require__(/*! ./lib/interceptor/dump */ \"(ssr)/./node_modules/undici/lib/interceptor/dump.js\")\n};\nmodule.exports.buildConnector = buildConnector;\nmodule.exports.errors = errors;\nmodule.exports.util = {\n    parseHeaders: util.parseHeaders,\n    headerNameToString: util.headerNameToString\n};\nfunction makeDispatcher(fn) {\n    return (url, opts, handler)=>{\n        if (typeof opts === 'function') {\n            handler = opts;\n            opts = null;\n        }\n        if (!url || typeof url !== 'string' && typeof url !== 'object' && !(url instanceof URL)) {\n            throw new InvalidArgumentError('invalid url');\n        }\n        if (opts != null && typeof opts !== 'object') {\n            throw new InvalidArgumentError('invalid opts');\n        }\n        if (opts && opts.path != null) {\n            if (typeof opts.path !== 'string') {\n                throw new InvalidArgumentError('invalid opts.path');\n            }\n            let path = opts.path;\n            if (!opts.path.startsWith('/')) {\n                path = `/${path}`;\n            }\n            url = new URL(util.parseOrigin(url).origin + path);\n        } else {\n            if (!opts) {\n                opts = typeof url === 'object' ? url : {};\n            }\n            url = util.parseURL(url);\n        }\n        const { agent, dispatcher = getGlobalDispatcher() } = opts;\n        if (agent) {\n            throw new InvalidArgumentError('unsupported opts.agent. Did you mean opts.client?');\n        }\n        return fn.call(dispatcher, {\n            ...opts,\n            origin: url.origin,\n            path: url.search ? `${url.pathname}${url.search}` : url.pathname,\n            method: opts.method || (opts.body ? 'PUT' : 'GET')\n        }, handler);\n    };\n}\nmodule.exports.setGlobalDispatcher = setGlobalDispatcher;\nmodule.exports.getGlobalDispatcher = getGlobalDispatcher;\nconst fetchImpl = (__webpack_require__(/*! ./lib/web/fetch */ \"(ssr)/./node_modules/undici/lib/web/fetch/index.js\").fetch);\nmodule.exports.fetch = async function fetch(init, options = undefined) {\n    try {\n        return await fetchImpl(init, options);\n    } catch (err) {\n        if (err && typeof err === 'object') {\n            Error.captureStackTrace(err);\n        }\n        throw err;\n    }\n};\nmodule.exports.Headers = __webpack_require__(/*! ./lib/web/fetch/headers */ \"(ssr)/./node_modules/undici/lib/web/fetch/headers.js\").Headers;\nmodule.exports.Response = __webpack_require__(/*! ./lib/web/fetch/response */ \"(ssr)/./node_modules/undici/lib/web/fetch/response.js\").Response;\nmodule.exports.Request = __webpack_require__(/*! ./lib/web/fetch/request */ \"(ssr)/./node_modules/undici/lib/web/fetch/request.js\").Request;\nmodule.exports.FormData = __webpack_require__(/*! ./lib/web/fetch/formdata */ \"(ssr)/./node_modules/undici/lib/web/fetch/formdata.js\").FormData;\nmodule.exports.File = globalThis.File ?? (__webpack_require__(/*! node:buffer */ \"node:buffer\").File);\nmodule.exports.FileReader = __webpack_require__(/*! ./lib/web/fileapi/filereader */ \"(ssr)/./node_modules/undici/lib/web/fileapi/filereader.js\").FileReader;\nconst { setGlobalOrigin, getGlobalOrigin } = __webpack_require__(/*! ./lib/web/fetch/global */ \"(ssr)/./node_modules/undici/lib/web/fetch/global.js\");\nmodule.exports.setGlobalOrigin = setGlobalOrigin;\nmodule.exports.getGlobalOrigin = getGlobalOrigin;\nconst { CacheStorage } = __webpack_require__(/*! ./lib/web/cache/cachestorage */ \"(ssr)/./node_modules/undici/lib/web/cache/cachestorage.js\");\nconst { kConstruct } = __webpack_require__(/*! ./lib/web/cache/symbols */ \"(ssr)/./node_modules/undici/lib/web/cache/symbols.js\");\n// Cache & CacheStorage are tightly coupled with fetch. Even if it may run\n// in an older version of Node, it doesn't have any use without fetch.\nmodule.exports.caches = new CacheStorage(kConstruct);\nconst { deleteCookie, getCookies, getSetCookies, setCookie } = __webpack_require__(/*! ./lib/web/cookies */ \"(ssr)/./node_modules/undici/lib/web/cookies/index.js\");\nmodule.exports.deleteCookie = deleteCookie;\nmodule.exports.getCookies = getCookies;\nmodule.exports.getSetCookies = getSetCookies;\nmodule.exports.setCookie = setCookie;\nconst { parseMIMEType, serializeAMimeType } = __webpack_require__(/*! ./lib/web/fetch/data-url */ \"(ssr)/./node_modules/undici/lib/web/fetch/data-url.js\");\nmodule.exports.parseMIMEType = parseMIMEType;\nmodule.exports.serializeAMimeType = serializeAMimeType;\nconst { CloseEvent, ErrorEvent, MessageEvent } = __webpack_require__(/*! ./lib/web/websocket/events */ \"(ssr)/./node_modules/undici/lib/web/websocket/events.js\");\nmodule.exports.WebSocket = __webpack_require__(/*! ./lib/web/websocket/websocket */ \"(ssr)/./node_modules/undici/lib/web/websocket/websocket.js\").WebSocket;\nmodule.exports.CloseEvent = CloseEvent;\nmodule.exports.ErrorEvent = ErrorEvent;\nmodule.exports.MessageEvent = MessageEvent;\nmodule.exports.request = makeDispatcher(api.request);\nmodule.exports.stream = makeDispatcher(api.stream);\nmodule.exports.pipeline = makeDispatcher(api.pipeline);\nmodule.exports.connect = makeDispatcher(api.connect);\nmodule.exports.upgrade = makeDispatcher(api.upgrade);\nmodule.exports.MockClient = MockClient;\nmodule.exports.MockPool = MockPool;\nmodule.exports.MockAgent = MockAgent;\nmodule.exports.mockErrors = mockErrors;\nconst { EventSource } = __webpack_require__(/*! ./lib/web/eventsource/eventsource */ \"(ssr)/./node_modules/undici/lib/web/eventsource/eventsource.js\");\nmodule.exports.EventSource = EventSource;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/api/abort-signal.js":
/*!*****************************************************!*\
  !*** ./node_modules/undici/lib/api/abort-signal.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { addAbortListener } = __webpack_require__(/*! ../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst { RequestAbortedError } = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst kListener = Symbol('kListener');\nconst kSignal = Symbol('kSignal');\nfunction abort(self) {\n    if (self.abort) {\n        self.abort(self[kSignal]?.reason);\n    } else {\n        self.reason = self[kSignal]?.reason ?? new RequestAbortedError();\n    }\n    removeSignal(self);\n}\nfunction addSignal(self, signal) {\n    self.reason = null;\n    self[kSignal] = null;\n    self[kListener] = null;\n    if (!signal) {\n        return;\n    }\n    if (signal.aborted) {\n        abort(self);\n        return;\n    }\n    self[kSignal] = signal;\n    self[kListener] = ()=>{\n        abort(self);\n    };\n    addAbortListener(self[kSignal], self[kListener]);\n}\nfunction removeSignal(self) {\n    if (!self[kSignal]) {\n        return;\n    }\n    if ('removeEventListener' in self[kSignal]) {\n        self[kSignal].removeEventListener('abort', self[kListener]);\n    } else {\n        self[kSignal].removeListener('abort', self[kListener]);\n    }\n    self[kSignal] = null;\n    self[kListener] = null;\n}\nmodule.exports = {\n    addSignal,\n    removeSignal\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9hcGkvYWJvcnQtc2lnbmFsLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxNQUFNLEVBQUVBLGdCQUFnQixFQUFFLEdBQUdDLG1CQUFPQSxDQUFDLGtFQUFjO0FBQ25ELE1BQU0sRUFBRUMsbUJBQW1CLEVBQUUsR0FBR0QsbUJBQU9BLENBQUMsc0VBQWdCO0FBRXhELE1BQU1FLFlBQVlDLE9BQU87QUFDekIsTUFBTUMsVUFBVUQsT0FBTztBQUV2QixTQUFTRSxNQUFPQyxJQUFJO0lBQ2xCLElBQUlBLEtBQUtELEtBQUssRUFBRTtRQUNkQyxLQUFLRCxLQUFLLENBQUNDLElBQUksQ0FBQ0YsUUFBUSxFQUFFRztJQUM1QixPQUFPO1FBQ0xELEtBQUtDLE1BQU0sR0FBR0QsSUFBSSxDQUFDRixRQUFRLEVBQUVHLFVBQVUsSUFBSU47SUFDN0M7SUFDQU8sYUFBYUY7QUFDZjtBQUVBLFNBQVNHLFVBQVdILElBQUksRUFBRUksTUFBTTtJQUM5QkosS0FBS0MsTUFBTSxHQUFHO0lBRWRELElBQUksQ0FBQ0YsUUFBUSxHQUFHO0lBQ2hCRSxJQUFJLENBQUNKLFVBQVUsR0FBRztJQUVsQixJQUFJLENBQUNRLFFBQVE7UUFDWDtJQUNGO0lBRUEsSUFBSUEsT0FBT0MsT0FBTyxFQUFFO1FBQ2xCTixNQUFNQztRQUNOO0lBQ0Y7SUFFQUEsSUFBSSxDQUFDRixRQUFRLEdBQUdNO0lBQ2hCSixJQUFJLENBQUNKLFVBQVUsR0FBRztRQUNoQkcsTUFBTUM7SUFDUjtJQUVBUCxpQkFBaUJPLElBQUksQ0FBQ0YsUUFBUSxFQUFFRSxJQUFJLENBQUNKLFVBQVU7QUFDakQ7QUFFQSxTQUFTTSxhQUFjRixJQUFJO0lBQ3pCLElBQUksQ0FBQ0EsSUFBSSxDQUFDRixRQUFRLEVBQUU7UUFDbEI7SUFDRjtJQUVBLElBQUkseUJBQXlCRSxJQUFJLENBQUNGLFFBQVEsRUFBRTtRQUMxQ0UsSUFBSSxDQUFDRixRQUFRLENBQUNRLG1CQUFtQixDQUFDLFNBQVNOLElBQUksQ0FBQ0osVUFBVTtJQUM1RCxPQUFPO1FBQ0xJLElBQUksQ0FBQ0YsUUFBUSxDQUFDUyxjQUFjLENBQUMsU0FBU1AsSUFBSSxDQUFDSixVQUFVO0lBQ3ZEO0lBRUFJLElBQUksQ0FBQ0YsUUFBUSxHQUFHO0lBQ2hCRSxJQUFJLENBQUNKLFVBQVUsR0FBRztBQUNwQjtBQUVBWSxPQUFPQyxPQUFPLEdBQUc7SUFDZk47SUFDQUQ7QUFDRiIsInNvdXJjZXMiOlsiRDpcXEhlbGl4XFxub2RlX21vZHVsZXNcXHVuZGljaVxcbGliXFxhcGlcXGFib3J0LXNpZ25hbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IGFkZEFib3J0TGlzdGVuZXIgfSA9IHJlcXVpcmUoJy4uL2NvcmUvdXRpbCcpXG5jb25zdCB7IFJlcXVlc3RBYm9ydGVkRXJyb3IgfSA9IHJlcXVpcmUoJy4uL2NvcmUvZXJyb3JzJylcblxuY29uc3Qga0xpc3RlbmVyID0gU3ltYm9sKCdrTGlzdGVuZXInKVxuY29uc3Qga1NpZ25hbCA9IFN5bWJvbCgna1NpZ25hbCcpXG5cbmZ1bmN0aW9uIGFib3J0IChzZWxmKSB7XG4gIGlmIChzZWxmLmFib3J0KSB7XG4gICAgc2VsZi5hYm9ydChzZWxmW2tTaWduYWxdPy5yZWFzb24pXG4gIH0gZWxzZSB7XG4gICAgc2VsZi5yZWFzb24gPSBzZWxmW2tTaWduYWxdPy5yZWFzb24gPz8gbmV3IFJlcXVlc3RBYm9ydGVkRXJyb3IoKVxuICB9XG4gIHJlbW92ZVNpZ25hbChzZWxmKVxufVxuXG5mdW5jdGlvbiBhZGRTaWduYWwgKHNlbGYsIHNpZ25hbCkge1xuICBzZWxmLnJlYXNvbiA9IG51bGxcblxuICBzZWxmW2tTaWduYWxdID0gbnVsbFxuICBzZWxmW2tMaXN0ZW5lcl0gPSBudWxsXG5cbiAgaWYgKCFzaWduYWwpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIGlmIChzaWduYWwuYWJvcnRlZCkge1xuICAgIGFib3J0KHNlbGYpXG4gICAgcmV0dXJuXG4gIH1cblxuICBzZWxmW2tTaWduYWxdID0gc2lnbmFsXG4gIHNlbGZba0xpc3RlbmVyXSA9ICgpID0+IHtcbiAgICBhYm9ydChzZWxmKVxuICB9XG5cbiAgYWRkQWJvcnRMaXN0ZW5lcihzZWxmW2tTaWduYWxdLCBzZWxmW2tMaXN0ZW5lcl0pXG59XG5cbmZ1bmN0aW9uIHJlbW92ZVNpZ25hbCAoc2VsZikge1xuICBpZiAoIXNlbGZba1NpZ25hbF0pIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIGlmICgncmVtb3ZlRXZlbnRMaXN0ZW5lcicgaW4gc2VsZltrU2lnbmFsXSkge1xuICAgIHNlbGZba1NpZ25hbF0ucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBzZWxmW2tMaXN0ZW5lcl0pXG4gIH0gZWxzZSB7XG4gICAgc2VsZltrU2lnbmFsXS5yZW1vdmVMaXN0ZW5lcignYWJvcnQnLCBzZWxmW2tMaXN0ZW5lcl0pXG4gIH1cblxuICBzZWxmW2tTaWduYWxdID0gbnVsbFxuICBzZWxmW2tMaXN0ZW5lcl0gPSBudWxsXG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBhZGRTaWduYWwsXG4gIHJlbW92ZVNpZ25hbFxufVxuIl0sIm5hbWVzIjpbImFkZEFib3J0TGlzdGVuZXIiLCJyZXF1aXJlIiwiUmVxdWVzdEFib3J0ZWRFcnJvciIsImtMaXN0ZW5lciIsIlN5bWJvbCIsImtTaWduYWwiLCJhYm9ydCIsInNlbGYiLCJyZWFzb24iLCJyZW1vdmVTaWduYWwiLCJhZGRTaWduYWwiLCJzaWduYWwiLCJhYm9ydGVkIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJlbW92ZUxpc3RlbmVyIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/api/abort-signal.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/api/api-connect.js":
/*!****************************************************!*\
  !*** ./node_modules/undici/lib/api/api-connect.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst assert = __webpack_require__(/*! node:assert */ \"node:assert\");\nconst { AsyncResource } = __webpack_require__(/*! node:async_hooks */ \"node:async_hooks\");\nconst { InvalidArgumentError, SocketError } = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst util = __webpack_require__(/*! ../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst { addSignal, removeSignal } = __webpack_require__(/*! ./abort-signal */ \"(ssr)/./node_modules/undici/lib/api/abort-signal.js\");\nclass ConnectHandler extends AsyncResource {\n    constructor(opts, callback){\n        if (!opts || typeof opts !== 'object') {\n            throw new InvalidArgumentError('invalid opts');\n        }\n        if (typeof callback !== 'function') {\n            throw new InvalidArgumentError('invalid callback');\n        }\n        const { signal, opaque, responseHeaders } = opts;\n        if (signal && typeof signal.on !== 'function' && typeof signal.addEventListener !== 'function') {\n            throw new InvalidArgumentError('signal must be an EventEmitter or EventTarget');\n        }\n        super('UNDICI_CONNECT');\n        this.opaque = opaque || null;\n        this.responseHeaders = responseHeaders || null;\n        this.callback = callback;\n        this.abort = null;\n        addSignal(this, signal);\n    }\n    onConnect(abort, context) {\n        if (this.reason) {\n            abort(this.reason);\n            return;\n        }\n        assert(this.callback);\n        this.abort = abort;\n        this.context = context;\n    }\n    onHeaders() {\n        throw new SocketError('bad connect', null);\n    }\n    onUpgrade(statusCode, rawHeaders, socket) {\n        const { callback, opaque, context } = this;\n        removeSignal(this);\n        this.callback = null;\n        let headers = rawHeaders;\n        // Indicates is an HTTP2Session\n        if (headers != null) {\n            headers = this.responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);\n        }\n        this.runInAsyncScope(callback, null, null, {\n            statusCode,\n            headers,\n            socket,\n            opaque,\n            context\n        });\n    }\n    onError(err) {\n        const { callback, opaque } = this;\n        removeSignal(this);\n        if (callback) {\n            this.callback = null;\n            queueMicrotask(()=>{\n                this.runInAsyncScope(callback, null, err, {\n                    opaque\n                });\n            });\n        }\n    }\n}\nfunction connect(opts, callback) {\n    if (callback === undefined) {\n        return new Promise((resolve, reject)=>{\n            connect.call(this, opts, (err, data)=>{\n                return err ? reject(err) : resolve(data);\n            });\n        });\n    }\n    try {\n        const connectHandler = new ConnectHandler(opts, callback);\n        this.dispatch({\n            ...opts,\n            method: 'CONNECT'\n        }, connectHandler);\n    } catch (err) {\n        if (typeof callback !== 'function') {\n            throw err;\n        }\n        const opaque = opts?.opaque;\n        queueMicrotask(()=>callback(err, {\n                opaque\n            }));\n    }\n}\nmodule.exports = connect;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9hcGkvYXBpLWNvbm5lY3QuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQSxTQUFTQyxtQkFBT0EsQ0FBQyxnQ0FBYTtBQUNwQyxNQUFNLEVBQUVDLGFBQWEsRUFBRSxHQUFHRCxtQkFBT0EsQ0FBQywwQ0FBa0I7QUFDcEQsTUFBTSxFQUFFRSxvQkFBb0IsRUFBRUMsV0FBVyxFQUFFLEdBQUdILG1CQUFPQSxDQUFDLHNFQUFnQjtBQUN0RSxNQUFNSSxPQUFPSixtQkFBT0EsQ0FBQyxrRUFBYztBQUNuQyxNQUFNLEVBQUVLLFNBQVMsRUFBRUMsWUFBWSxFQUFFLEdBQUdOLG1CQUFPQSxDQUFDLDJFQUFnQjtBQUU1RCxNQUFNTyx1QkFBdUJOO0lBQzNCLFlBQWFPLElBQUksRUFBRUMsUUFBUSxDQUFFO1FBQzNCLElBQUksQ0FBQ0QsUUFBUSxPQUFPQSxTQUFTLFVBQVU7WUFDckMsTUFBTSxJQUFJTixxQkFBcUI7UUFDakM7UUFFQSxJQUFJLE9BQU9PLGFBQWEsWUFBWTtZQUNsQyxNQUFNLElBQUlQLHFCQUFxQjtRQUNqQztRQUVBLE1BQU0sRUFBRVEsTUFBTSxFQUFFQyxNQUFNLEVBQUVDLGVBQWUsRUFBRSxHQUFHSjtRQUU1QyxJQUFJRSxVQUFVLE9BQU9BLE9BQU9HLEVBQUUsS0FBSyxjQUFjLE9BQU9ILE9BQU9JLGdCQUFnQixLQUFLLFlBQVk7WUFDOUYsTUFBTSxJQUFJWixxQkFBcUI7UUFDakM7UUFFQSxLQUFLLENBQUM7UUFFTixJQUFJLENBQUNTLE1BQU0sR0FBR0EsVUFBVTtRQUN4QixJQUFJLENBQUNDLGVBQWUsR0FBR0EsbUJBQW1CO1FBQzFDLElBQUksQ0FBQ0gsUUFBUSxHQUFHQTtRQUNoQixJQUFJLENBQUNNLEtBQUssR0FBRztRQUViVixVQUFVLElBQUksRUFBRUs7SUFDbEI7SUFFQU0sVUFBV0QsS0FBSyxFQUFFRSxPQUFPLEVBQUU7UUFDekIsSUFBSSxJQUFJLENBQUNDLE1BQU0sRUFBRTtZQUNmSCxNQUFNLElBQUksQ0FBQ0csTUFBTTtZQUNqQjtRQUNGO1FBRUFuQixPQUFPLElBQUksQ0FBQ1UsUUFBUTtRQUVwQixJQUFJLENBQUNNLEtBQUssR0FBR0E7UUFDYixJQUFJLENBQUNFLE9BQU8sR0FBR0E7SUFDakI7SUFFQUUsWUFBYTtRQUNYLE1BQU0sSUFBSWhCLFlBQVksZUFBZTtJQUN2QztJQUVBaUIsVUFBV0MsVUFBVSxFQUFFQyxVQUFVLEVBQUVDLE1BQU0sRUFBRTtRQUN6QyxNQUFNLEVBQUVkLFFBQVEsRUFBRUUsTUFBTSxFQUFFTSxPQUFPLEVBQUUsR0FBRyxJQUFJO1FBRTFDWCxhQUFhLElBQUk7UUFFakIsSUFBSSxDQUFDRyxRQUFRLEdBQUc7UUFFaEIsSUFBSWUsVUFBVUY7UUFDZCwrQkFBK0I7UUFDL0IsSUFBSUUsV0FBVyxNQUFNO1lBQ25CQSxVQUFVLElBQUksQ0FBQ1osZUFBZSxLQUFLLFFBQVFSLEtBQUtxQixlQUFlLENBQUNILGNBQWNsQixLQUFLc0IsWUFBWSxDQUFDSjtRQUNsRztRQUVBLElBQUksQ0FBQ0ssZUFBZSxDQUFDbEIsVUFBVSxNQUFNLE1BQU07WUFDekNZO1lBQ0FHO1lBQ0FEO1lBQ0FaO1lBQ0FNO1FBQ0Y7SUFDRjtJQUVBVyxRQUFTQyxHQUFHLEVBQUU7UUFDWixNQUFNLEVBQUVwQixRQUFRLEVBQUVFLE1BQU0sRUFBRSxHQUFHLElBQUk7UUFFakNMLGFBQWEsSUFBSTtRQUVqQixJQUFJRyxVQUFVO1lBQ1osSUFBSSxDQUFDQSxRQUFRLEdBQUc7WUFDaEJxQixlQUFlO2dCQUNiLElBQUksQ0FBQ0gsZUFBZSxDQUFDbEIsVUFBVSxNQUFNb0IsS0FBSztvQkFBRWxCO2dCQUFPO1lBQ3JEO1FBQ0Y7SUFDRjtBQUNGO0FBRUEsU0FBU29CLFFBQVN2QixJQUFJLEVBQUVDLFFBQVE7SUFDOUIsSUFBSUEsYUFBYXVCLFdBQVc7UUFDMUIsT0FBTyxJQUFJQyxRQUFRLENBQUNDLFNBQVNDO1lBQzNCSixRQUFRSyxJQUFJLENBQUMsSUFBSSxFQUFFNUIsTUFBTSxDQUFDcUIsS0FBS1E7Z0JBQzdCLE9BQU9SLE1BQU1NLE9BQU9OLE9BQU9LLFFBQVFHO1lBQ3JDO1FBQ0Y7SUFDRjtJQUVBLElBQUk7UUFDRixNQUFNQyxpQkFBaUIsSUFBSS9CLGVBQWVDLE1BQU1DO1FBQ2hELElBQUksQ0FBQzhCLFFBQVEsQ0FBQztZQUFFLEdBQUcvQixJQUFJO1lBQUVnQyxRQUFRO1FBQVUsR0FBR0Y7SUFDaEQsRUFBRSxPQUFPVCxLQUFLO1FBQ1osSUFBSSxPQUFPcEIsYUFBYSxZQUFZO1lBQ2xDLE1BQU1vQjtRQUNSO1FBQ0EsTUFBTWxCLFNBQVNILE1BQU1HO1FBQ3JCbUIsZUFBZSxJQUFNckIsU0FBU29CLEtBQUs7Z0JBQUVsQjtZQUFPO0lBQzlDO0FBQ0Y7QUFFQThCLE9BQU9DLE9BQU8sR0FBR1giLCJzb3VyY2VzIjpbIkQ6XFxIZWxpeFxcbm9kZV9tb2R1bGVzXFx1bmRpY2lcXGxpYlxcYXBpXFxhcGktY29ubmVjdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgYXNzZXJ0ID0gcmVxdWlyZSgnbm9kZTphc3NlcnQnKVxuY29uc3QgeyBBc3luY1Jlc291cmNlIH0gPSByZXF1aXJlKCdub2RlOmFzeW5jX2hvb2tzJylcbmNvbnN0IHsgSW52YWxpZEFyZ3VtZW50RXJyb3IsIFNvY2tldEVycm9yIH0gPSByZXF1aXJlKCcuLi9jb3JlL2Vycm9ycycpXG5jb25zdCB1dGlsID0gcmVxdWlyZSgnLi4vY29yZS91dGlsJylcbmNvbnN0IHsgYWRkU2lnbmFsLCByZW1vdmVTaWduYWwgfSA9IHJlcXVpcmUoJy4vYWJvcnQtc2lnbmFsJylcblxuY2xhc3MgQ29ubmVjdEhhbmRsZXIgZXh0ZW5kcyBBc3luY1Jlc291cmNlIHtcbiAgY29uc3RydWN0b3IgKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgaWYgKCFvcHRzIHx8IHR5cGVvZiBvcHRzICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKCdpbnZhbGlkIG9wdHMnKVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcignaW52YWxpZCBjYWxsYmFjaycpXG4gICAgfVxuXG4gICAgY29uc3QgeyBzaWduYWwsIG9wYXF1ZSwgcmVzcG9uc2VIZWFkZXJzIH0gPSBvcHRzXG5cbiAgICBpZiAoc2lnbmFsICYmIHR5cGVvZiBzaWduYWwub24gIT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHNpZ25hbC5hZGRFdmVudExpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoJ3NpZ25hbCBtdXN0IGJlIGFuIEV2ZW50RW1pdHRlciBvciBFdmVudFRhcmdldCcpXG4gICAgfVxuXG4gICAgc3VwZXIoJ1VORElDSV9DT05ORUNUJylcblxuICAgIHRoaXMub3BhcXVlID0gb3BhcXVlIHx8IG51bGxcbiAgICB0aGlzLnJlc3BvbnNlSGVhZGVycyA9IHJlc3BvbnNlSGVhZGVycyB8fCBudWxsXG4gICAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrXG4gICAgdGhpcy5hYm9ydCA9IG51bGxcblxuICAgIGFkZFNpZ25hbCh0aGlzLCBzaWduYWwpXG4gIH1cblxuICBvbkNvbm5lY3QgKGFib3J0LCBjb250ZXh0KSB7XG4gICAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgICBhYm9ydCh0aGlzLnJlYXNvbilcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGFzc2VydCh0aGlzLmNhbGxiYWNrKVxuXG4gICAgdGhpcy5hYm9ydCA9IGFib3J0XG4gICAgdGhpcy5jb250ZXh0ID0gY29udGV4dFxuICB9XG5cbiAgb25IZWFkZXJzICgpIHtcbiAgICB0aHJvdyBuZXcgU29ja2V0RXJyb3IoJ2JhZCBjb25uZWN0JywgbnVsbClcbiAgfVxuXG4gIG9uVXBncmFkZSAoc3RhdHVzQ29kZSwgcmF3SGVhZGVycywgc29ja2V0KSB7XG4gICAgY29uc3QgeyBjYWxsYmFjaywgb3BhcXVlLCBjb250ZXh0IH0gPSB0aGlzXG5cbiAgICByZW1vdmVTaWduYWwodGhpcylcblxuICAgIHRoaXMuY2FsbGJhY2sgPSBudWxsXG5cbiAgICBsZXQgaGVhZGVycyA9IHJhd0hlYWRlcnNcbiAgICAvLyBJbmRpY2F0ZXMgaXMgYW4gSFRUUDJTZXNzaW9uXG4gICAgaWYgKGhlYWRlcnMgIT0gbnVsbCkge1xuICAgICAgaGVhZGVycyA9IHRoaXMucmVzcG9uc2VIZWFkZXJzID09PSAncmF3JyA/IHV0aWwucGFyc2VSYXdIZWFkZXJzKHJhd0hlYWRlcnMpIDogdXRpbC5wYXJzZUhlYWRlcnMocmF3SGVhZGVycylcbiAgICB9XG5cbiAgICB0aGlzLnJ1bkluQXN5bmNTY29wZShjYWxsYmFjaywgbnVsbCwgbnVsbCwge1xuICAgICAgc3RhdHVzQ29kZSxcbiAgICAgIGhlYWRlcnMsXG4gICAgICBzb2NrZXQsXG4gICAgICBvcGFxdWUsXG4gICAgICBjb250ZXh0XG4gICAgfSlcbiAgfVxuXG4gIG9uRXJyb3IgKGVycikge1xuICAgIGNvbnN0IHsgY2FsbGJhY2ssIG9wYXF1ZSB9ID0gdGhpc1xuXG4gICAgcmVtb3ZlU2lnbmFsKHRoaXMpXG5cbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIHRoaXMuY2FsbGJhY2sgPSBudWxsXG4gICAgICBxdWV1ZU1pY3JvdGFzaygoKSA9PiB7XG4gICAgICAgIHRoaXMucnVuSW5Bc3luY1Njb3BlKGNhbGxiYWNrLCBudWxsLCBlcnIsIHsgb3BhcXVlIH0pXG4gICAgICB9KVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjb25uZWN0IChvcHRzLCBjYWxsYmFjaykge1xuICBpZiAoY2FsbGJhY2sgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25uZWN0LmNhbGwodGhpcywgb3B0cywgKGVyciwgZGF0YSkgPT4ge1xuICAgICAgICByZXR1cm4gZXJyID8gcmVqZWN0KGVycikgOiByZXNvbHZlKGRhdGEpXG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICB0cnkge1xuICAgIGNvbnN0IGNvbm5lY3RIYW5kbGVyID0gbmV3IENvbm5lY3RIYW5kbGVyKG9wdHMsIGNhbGxiYWNrKVxuICAgIHRoaXMuZGlzcGF0Y2goeyAuLi5vcHRzLCBtZXRob2Q6ICdDT05ORUNUJyB9LCBjb25uZWN0SGFuZGxlcilcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgZXJyXG4gICAgfVxuICAgIGNvbnN0IG9wYXF1ZSA9IG9wdHM/Lm9wYXF1ZVxuICAgIHF1ZXVlTWljcm90YXNrKCgpID0+IGNhbGxiYWNrKGVyciwgeyBvcGFxdWUgfSkpXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb25uZWN0XG4iXSwibmFtZXMiOlsiYXNzZXJ0IiwicmVxdWlyZSIsIkFzeW5jUmVzb3VyY2UiLCJJbnZhbGlkQXJndW1lbnRFcnJvciIsIlNvY2tldEVycm9yIiwidXRpbCIsImFkZFNpZ25hbCIsInJlbW92ZVNpZ25hbCIsIkNvbm5lY3RIYW5kbGVyIiwib3B0cyIsImNhbGxiYWNrIiwic2lnbmFsIiwib3BhcXVlIiwicmVzcG9uc2VIZWFkZXJzIiwib24iLCJhZGRFdmVudExpc3RlbmVyIiwiYWJvcnQiLCJvbkNvbm5lY3QiLCJjb250ZXh0IiwicmVhc29uIiwib25IZWFkZXJzIiwib25VcGdyYWRlIiwic3RhdHVzQ29kZSIsInJhd0hlYWRlcnMiLCJzb2NrZXQiLCJoZWFkZXJzIiwicGFyc2VSYXdIZWFkZXJzIiwicGFyc2VIZWFkZXJzIiwicnVuSW5Bc3luY1Njb3BlIiwib25FcnJvciIsImVyciIsInF1ZXVlTWljcm90YXNrIiwiY29ubmVjdCIsInVuZGVmaW5lZCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiY2FsbCIsImRhdGEiLCJjb25uZWN0SGFuZGxlciIsImRpc3BhdGNoIiwibWV0aG9kIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/api/api-connect.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/api/api-pipeline.js":
/*!*****************************************************!*\
  !*** ./node_modules/undici/lib/api/api-pipeline.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { Readable, Duplex, PassThrough } = __webpack_require__(/*! node:stream */ \"node:stream\");\nconst { InvalidArgumentError, InvalidReturnValueError, RequestAbortedError } = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst util = __webpack_require__(/*! ../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst { AsyncResource } = __webpack_require__(/*! node:async_hooks */ \"node:async_hooks\");\nconst { addSignal, removeSignal } = __webpack_require__(/*! ./abort-signal */ \"(ssr)/./node_modules/undici/lib/api/abort-signal.js\");\nconst assert = __webpack_require__(/*! node:assert */ \"node:assert\");\nconst kResume = Symbol('resume');\nclass PipelineRequest extends Readable {\n    constructor(){\n        super({\n            autoDestroy: true\n        });\n        this[kResume] = null;\n    }\n    _read() {\n        const { [kResume]: resume } = this;\n        if (resume) {\n            this[kResume] = null;\n            resume();\n        }\n    }\n    _destroy(err, callback) {\n        this._read();\n        callback(err);\n    }\n}\nclass PipelineResponse extends Readable {\n    constructor(resume){\n        super({\n            autoDestroy: true\n        });\n        this[kResume] = resume;\n    }\n    _read() {\n        this[kResume]();\n    }\n    _destroy(err, callback) {\n        if (!err && !this._readableState.endEmitted) {\n            err = new RequestAbortedError();\n        }\n        callback(err);\n    }\n}\nclass PipelineHandler extends AsyncResource {\n    constructor(opts, handler){\n        if (!opts || typeof opts !== 'object') {\n            throw new InvalidArgumentError('invalid opts');\n        }\n        if (typeof handler !== 'function') {\n            throw new InvalidArgumentError('invalid handler');\n        }\n        const { signal, method, opaque, onInfo, responseHeaders } = opts;\n        if (signal && typeof signal.on !== 'function' && typeof signal.addEventListener !== 'function') {\n            throw new InvalidArgumentError('signal must be an EventEmitter or EventTarget');\n        }\n        if (method === 'CONNECT') {\n            throw new InvalidArgumentError('invalid method');\n        }\n        if (onInfo && typeof onInfo !== 'function') {\n            throw new InvalidArgumentError('invalid onInfo callback');\n        }\n        super('UNDICI_PIPELINE');\n        this.opaque = opaque || null;\n        this.responseHeaders = responseHeaders || null;\n        this.handler = handler;\n        this.abort = null;\n        this.context = null;\n        this.onInfo = onInfo || null;\n        this.req = new PipelineRequest().on('error', util.nop);\n        this.ret = new Duplex({\n            readableObjectMode: opts.objectMode,\n            autoDestroy: true,\n            read: ()=>{\n                const { body } = this;\n                if (body?.resume) {\n                    body.resume();\n                }\n            },\n            write: (chunk, encoding, callback)=>{\n                const { req } = this;\n                if (req.push(chunk, encoding) || req._readableState.destroyed) {\n                    callback();\n                } else {\n                    req[kResume] = callback;\n                }\n            },\n            destroy: (err, callback)=>{\n                const { body, req, res, ret, abort } = this;\n                if (!err && !ret._readableState.endEmitted) {\n                    err = new RequestAbortedError();\n                }\n                if (abort && err) {\n                    abort();\n                }\n                util.destroy(body, err);\n                util.destroy(req, err);\n                util.destroy(res, err);\n                removeSignal(this);\n                callback(err);\n            }\n        }).on('prefinish', ()=>{\n            const { req } = this;\n            // Node < 15 does not call _final in same tick.\n            req.push(null);\n        });\n        this.res = null;\n        addSignal(this, signal);\n    }\n    onConnect(abort, context) {\n        const { ret, res } = this;\n        if (this.reason) {\n            abort(this.reason);\n            return;\n        }\n        assert(!res, 'pipeline cannot be retried');\n        assert(!ret.destroyed);\n        this.abort = abort;\n        this.context = context;\n    }\n    onHeaders(statusCode, rawHeaders, resume) {\n        const { opaque, handler, context } = this;\n        if (statusCode < 200) {\n            if (this.onInfo) {\n                const headers = this.responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);\n                this.onInfo({\n                    statusCode,\n                    headers\n                });\n            }\n            return;\n        }\n        this.res = new PipelineResponse(resume);\n        let body;\n        try {\n            this.handler = null;\n            const headers = this.responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);\n            body = this.runInAsyncScope(handler, null, {\n                statusCode,\n                headers,\n                opaque,\n                body: this.res,\n                context\n            });\n        } catch (err) {\n            this.res.on('error', util.nop);\n            throw err;\n        }\n        if (!body || typeof body.on !== 'function') {\n            throw new InvalidReturnValueError('expected Readable');\n        }\n        body.on('data', (chunk)=>{\n            const { ret, body } = this;\n            if (!ret.push(chunk) && body.pause) {\n                body.pause();\n            }\n        }).on('error', (err)=>{\n            const { ret } = this;\n            util.destroy(ret, err);\n        }).on('end', ()=>{\n            const { ret } = this;\n            ret.push(null);\n        }).on('close', ()=>{\n            const { ret } = this;\n            if (!ret._readableState.ended) {\n                util.destroy(ret, new RequestAbortedError());\n            }\n        });\n        this.body = body;\n    }\n    onData(chunk) {\n        const { res } = this;\n        return res.push(chunk);\n    }\n    onComplete(trailers) {\n        const { res } = this;\n        res.push(null);\n    }\n    onError(err) {\n        const { ret } = this;\n        this.handler = null;\n        util.destroy(ret, err);\n    }\n}\nfunction pipeline(opts, handler) {\n    try {\n        const pipelineHandler = new PipelineHandler(opts, handler);\n        this.dispatch({\n            ...opts,\n            body: pipelineHandler.req\n        }, pipelineHandler);\n        return pipelineHandler.ret;\n    } catch (err) {\n        return new PassThrough().destroy(err);\n    }\n}\nmodule.exports = pipeline;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/api/api-pipeline.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/api/api-request.js":
/*!****************************************************!*\
  !*** ./node_modules/undici/lib/api/api-request.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst assert = __webpack_require__(/*! node:assert */ \"node:assert\");\nconst { Readable } = __webpack_require__(/*! ./readable */ \"(ssr)/./node_modules/undici/lib/api/readable.js\");\nconst { InvalidArgumentError, RequestAbortedError } = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst util = __webpack_require__(/*! ../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst { getResolveErrorBodyCallback } = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/api/util.js\");\nconst { AsyncResource } = __webpack_require__(/*! node:async_hooks */ \"node:async_hooks\");\nclass RequestHandler extends AsyncResource {\n    constructor(opts, callback){\n        if (!opts || typeof opts !== 'object') {\n            throw new InvalidArgumentError('invalid opts');\n        }\n        const { signal, method, opaque, body, onInfo, responseHeaders, throwOnError, highWaterMark } = opts;\n        try {\n            if (typeof callback !== 'function') {\n                throw new InvalidArgumentError('invalid callback');\n            }\n            if (highWaterMark && (typeof highWaterMark !== 'number' || highWaterMark < 0)) {\n                throw new InvalidArgumentError('invalid highWaterMark');\n            }\n            if (signal && typeof signal.on !== 'function' && typeof signal.addEventListener !== 'function') {\n                throw new InvalidArgumentError('signal must be an EventEmitter or EventTarget');\n            }\n            if (method === 'CONNECT') {\n                throw new InvalidArgumentError('invalid method');\n            }\n            if (onInfo && typeof onInfo !== 'function') {\n                throw new InvalidArgumentError('invalid onInfo callback');\n            }\n            super('UNDICI_REQUEST');\n        } catch (err) {\n            if (util.isStream(body)) {\n                util.destroy(body.on('error', util.nop), err);\n            }\n            throw err;\n        }\n        this.method = method;\n        this.responseHeaders = responseHeaders || null;\n        this.opaque = opaque || null;\n        this.callback = callback;\n        this.res = null;\n        this.abort = null;\n        this.body = body;\n        this.trailers = {};\n        this.context = null;\n        this.onInfo = onInfo || null;\n        this.throwOnError = throwOnError;\n        this.highWaterMark = highWaterMark;\n        this.signal = signal;\n        this.reason = null;\n        this.removeAbortListener = null;\n        if (util.isStream(body)) {\n            body.on('error', (err)=>{\n                this.onError(err);\n            });\n        }\n        if (this.signal) {\n            if (this.signal.aborted) {\n                this.reason = this.signal.reason ?? new RequestAbortedError();\n            } else {\n                this.removeAbortListener = util.addAbortListener(this.signal, ()=>{\n                    this.reason = this.signal.reason ?? new RequestAbortedError();\n                    if (this.res) {\n                        util.destroy(this.res, this.reason);\n                    } else if (this.abort) {\n                        this.abort(this.reason);\n                    }\n                    if (this.removeAbortListener) {\n                        this.res?.off('close', this.removeAbortListener);\n                        this.removeAbortListener();\n                        this.removeAbortListener = null;\n                    }\n                });\n            }\n        }\n    }\n    onConnect(abort, context) {\n        if (this.reason) {\n            abort(this.reason);\n            return;\n        }\n        assert(this.callback);\n        this.abort = abort;\n        this.context = context;\n    }\n    onHeaders(statusCode, rawHeaders, resume, statusMessage) {\n        const { callback, opaque, abort, context, responseHeaders, highWaterMark } = this;\n        const headers = responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);\n        if (statusCode < 200) {\n            if (this.onInfo) {\n                this.onInfo({\n                    statusCode,\n                    headers\n                });\n            }\n            return;\n        }\n        const parsedHeaders = responseHeaders === 'raw' ? util.parseHeaders(rawHeaders) : headers;\n        const contentType = parsedHeaders['content-type'];\n        const contentLength = parsedHeaders['content-length'];\n        const res = new Readable({\n            resume,\n            abort,\n            contentType,\n            contentLength: this.method !== 'HEAD' && contentLength ? Number(contentLength) : null,\n            highWaterMark\n        });\n        if (this.removeAbortListener) {\n            res.on('close', this.removeAbortListener);\n        }\n        this.callback = null;\n        this.res = res;\n        if (callback !== null) {\n            if (this.throwOnError && statusCode >= 400) {\n                this.runInAsyncScope(getResolveErrorBodyCallback, null, {\n                    callback,\n                    body: res,\n                    contentType,\n                    statusCode,\n                    statusMessage,\n                    headers\n                });\n            } else {\n                this.runInAsyncScope(callback, null, null, {\n                    statusCode,\n                    headers,\n                    trailers: this.trailers,\n                    opaque,\n                    body: res,\n                    context\n                });\n            }\n        }\n    }\n    onData(chunk) {\n        return this.res.push(chunk);\n    }\n    onComplete(trailers) {\n        util.parseHeaders(trailers, this.trailers);\n        this.res.push(null);\n    }\n    onError(err) {\n        const { res, callback, body, opaque } = this;\n        if (callback) {\n            // TODO: Does this need queueMicrotask?\n            this.callback = null;\n            queueMicrotask(()=>{\n                this.runInAsyncScope(callback, null, err, {\n                    opaque\n                });\n            });\n        }\n        if (res) {\n            this.res = null;\n            // Ensure all queued handlers are invoked before destroying res.\n            queueMicrotask(()=>{\n                util.destroy(res, err);\n            });\n        }\n        if (body) {\n            this.body = null;\n            util.destroy(body, err);\n        }\n        if (this.removeAbortListener) {\n            res?.off('close', this.removeAbortListener);\n            this.removeAbortListener();\n            this.removeAbortListener = null;\n        }\n    }\n}\nfunction request(opts, callback) {\n    if (callback === undefined) {\n        return new Promise((resolve, reject)=>{\n            request.call(this, opts, (err, data)=>{\n                return err ? reject(err) : resolve(data);\n            });\n        });\n    }\n    try {\n        this.dispatch(opts, new RequestHandler(opts, callback));\n    } catch (err) {\n        if (typeof callback !== 'function') {\n            throw err;\n        }\n        const opaque = opts?.opaque;\n        queueMicrotask(()=>callback(err, {\n                opaque\n            }));\n    }\n}\nmodule.exports = request;\nmodule.exports.RequestHandler = RequestHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/api/api-request.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/api/api-stream.js":
/*!***************************************************!*\
  !*** ./node_modules/undici/lib/api/api-stream.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst assert = __webpack_require__(/*! node:assert */ \"node:assert\");\nconst { finished, PassThrough } = __webpack_require__(/*! node:stream */ \"node:stream\");\nconst { InvalidArgumentError, InvalidReturnValueError } = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst util = __webpack_require__(/*! ../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst { getResolveErrorBodyCallback } = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/api/util.js\");\nconst { AsyncResource } = __webpack_require__(/*! node:async_hooks */ \"node:async_hooks\");\nconst { addSignal, removeSignal } = __webpack_require__(/*! ./abort-signal */ \"(ssr)/./node_modules/undici/lib/api/abort-signal.js\");\nclass StreamHandler extends AsyncResource {\n    constructor(opts, factory, callback){\n        if (!opts || typeof opts !== 'object') {\n            throw new InvalidArgumentError('invalid opts');\n        }\n        const { signal, method, opaque, body, onInfo, responseHeaders, throwOnError } = opts;\n        try {\n            if (typeof callback !== 'function') {\n                throw new InvalidArgumentError('invalid callback');\n            }\n            if (typeof factory !== 'function') {\n                throw new InvalidArgumentError('invalid factory');\n            }\n            if (signal && typeof signal.on !== 'function' && typeof signal.addEventListener !== 'function') {\n                throw new InvalidArgumentError('signal must be an EventEmitter or EventTarget');\n            }\n            if (method === 'CONNECT') {\n                throw new InvalidArgumentError('invalid method');\n            }\n            if (onInfo && typeof onInfo !== 'function') {\n                throw new InvalidArgumentError('invalid onInfo callback');\n            }\n            super('UNDICI_STREAM');\n        } catch (err) {\n            if (util.isStream(body)) {\n                util.destroy(body.on('error', util.nop), err);\n            }\n            throw err;\n        }\n        this.responseHeaders = responseHeaders || null;\n        this.opaque = opaque || null;\n        this.factory = factory;\n        this.callback = callback;\n        this.res = null;\n        this.abort = null;\n        this.context = null;\n        this.trailers = null;\n        this.body = body;\n        this.onInfo = onInfo || null;\n        this.throwOnError = throwOnError || false;\n        if (util.isStream(body)) {\n            body.on('error', (err)=>{\n                this.onError(err);\n            });\n        }\n        addSignal(this, signal);\n    }\n    onConnect(abort, context) {\n        if (this.reason) {\n            abort(this.reason);\n            return;\n        }\n        assert(this.callback);\n        this.abort = abort;\n        this.context = context;\n    }\n    onHeaders(statusCode, rawHeaders, resume, statusMessage) {\n        const { factory, opaque, context, callback, responseHeaders } = this;\n        const headers = responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);\n        if (statusCode < 200) {\n            if (this.onInfo) {\n                this.onInfo({\n                    statusCode,\n                    headers\n                });\n            }\n            return;\n        }\n        this.factory = null;\n        let res;\n        if (this.throwOnError && statusCode >= 400) {\n            const parsedHeaders = responseHeaders === 'raw' ? util.parseHeaders(rawHeaders) : headers;\n            const contentType = parsedHeaders['content-type'];\n            res = new PassThrough();\n            this.callback = null;\n            this.runInAsyncScope(getResolveErrorBodyCallback, null, {\n                callback,\n                body: res,\n                contentType,\n                statusCode,\n                statusMessage,\n                headers\n            });\n        } else {\n            if (factory === null) {\n                return;\n            }\n            res = this.runInAsyncScope(factory, null, {\n                statusCode,\n                headers,\n                opaque,\n                context\n            });\n            if (!res || typeof res.write !== 'function' || typeof res.end !== 'function' || typeof res.on !== 'function') {\n                throw new InvalidReturnValueError('expected Writable');\n            }\n            // TODO: Avoid finished. It registers an unnecessary amount of listeners.\n            finished(res, {\n                readable: false\n            }, (err)=>{\n                const { callback, res, opaque, trailers, abort } = this;\n                this.res = null;\n                if (err || !res.readable) {\n                    util.destroy(res, err);\n                }\n                this.callback = null;\n                this.runInAsyncScope(callback, null, err || null, {\n                    opaque,\n                    trailers\n                });\n                if (err) {\n                    abort();\n                }\n            });\n        }\n        res.on('drain', resume);\n        this.res = res;\n        const needDrain = res.writableNeedDrain !== undefined ? res.writableNeedDrain : res._writableState?.needDrain;\n        return needDrain !== true;\n    }\n    onData(chunk) {\n        const { res } = this;\n        return res ? res.write(chunk) : true;\n    }\n    onComplete(trailers) {\n        const { res } = this;\n        removeSignal(this);\n        if (!res) {\n            return;\n        }\n        this.trailers = util.parseHeaders(trailers);\n        res.end();\n    }\n    onError(err) {\n        const { res, callback, opaque, body } = this;\n        removeSignal(this);\n        this.factory = null;\n        if (res) {\n            this.res = null;\n            util.destroy(res, err);\n        } else if (callback) {\n            this.callback = null;\n            queueMicrotask(()=>{\n                this.runInAsyncScope(callback, null, err, {\n                    opaque\n                });\n            });\n        }\n        if (body) {\n            this.body = null;\n            util.destroy(body, err);\n        }\n    }\n}\nfunction stream(opts, factory, callback) {\n    if (callback === undefined) {\n        return new Promise((resolve, reject)=>{\n            stream.call(this, opts, factory, (err, data)=>{\n                return err ? reject(err) : resolve(data);\n            });\n        });\n    }\n    try {\n        this.dispatch(opts, new StreamHandler(opts, factory, callback));\n    } catch (err) {\n        if (typeof callback !== 'function') {\n            throw err;\n        }\n        const opaque = opts?.opaque;\n        queueMicrotask(()=>callback(err, {\n                opaque\n            }));\n    }\n}\nmodule.exports = stream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/api/api-stream.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/api/api-upgrade.js":
/*!****************************************************!*\
  !*** ./node_modules/undici/lib/api/api-upgrade.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { InvalidArgumentError, SocketError } = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst { AsyncResource } = __webpack_require__(/*! node:async_hooks */ \"node:async_hooks\");\nconst util = __webpack_require__(/*! ../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst { addSignal, removeSignal } = __webpack_require__(/*! ./abort-signal */ \"(ssr)/./node_modules/undici/lib/api/abort-signal.js\");\nconst assert = __webpack_require__(/*! node:assert */ \"node:assert\");\nclass UpgradeHandler extends AsyncResource {\n    constructor(opts, callback){\n        if (!opts || typeof opts !== 'object') {\n            throw new InvalidArgumentError('invalid opts');\n        }\n        if (typeof callback !== 'function') {\n            throw new InvalidArgumentError('invalid callback');\n        }\n        const { signal, opaque, responseHeaders } = opts;\n        if (signal && typeof signal.on !== 'function' && typeof signal.addEventListener !== 'function') {\n            throw new InvalidArgumentError('signal must be an EventEmitter or EventTarget');\n        }\n        super('UNDICI_UPGRADE');\n        this.responseHeaders = responseHeaders || null;\n        this.opaque = opaque || null;\n        this.callback = callback;\n        this.abort = null;\n        this.context = null;\n        addSignal(this, signal);\n    }\n    onConnect(abort, context) {\n        if (this.reason) {\n            abort(this.reason);\n            return;\n        }\n        assert(this.callback);\n        this.abort = abort;\n        this.context = null;\n    }\n    onHeaders() {\n        throw new SocketError('bad upgrade', null);\n    }\n    onUpgrade(statusCode, rawHeaders, socket) {\n        const { callback, opaque, context } = this;\n        assert.strictEqual(statusCode, 101);\n        removeSignal(this);\n        this.callback = null;\n        const headers = this.responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);\n        this.runInAsyncScope(callback, null, null, {\n            headers,\n            socket,\n            opaque,\n            context\n        });\n    }\n    onError(err) {\n        const { callback, opaque } = this;\n        removeSignal(this);\n        if (callback) {\n            this.callback = null;\n            queueMicrotask(()=>{\n                this.runInAsyncScope(callback, null, err, {\n                    opaque\n                });\n            });\n        }\n    }\n}\nfunction upgrade(opts, callback) {\n    if (callback === undefined) {\n        return new Promise((resolve, reject)=>{\n            upgrade.call(this, opts, (err, data)=>{\n                return err ? reject(err) : resolve(data);\n            });\n        });\n    }\n    try {\n        const upgradeHandler = new UpgradeHandler(opts, callback);\n        this.dispatch({\n            ...opts,\n            method: opts.method || 'GET',\n            upgrade: opts.protocol || 'Websocket'\n        }, upgradeHandler);\n    } catch (err) {\n        if (typeof callback !== 'function') {\n            throw err;\n        }\n        const opaque = opts?.opaque;\n        queueMicrotask(()=>callback(err, {\n                opaque\n            }));\n    }\n}\nmodule.exports = upgrade;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9hcGkvYXBpLXVwZ3JhZGUuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNLEVBQUVBLG9CQUFvQixFQUFFQyxXQUFXLEVBQUUsR0FBR0MsbUJBQU9BLENBQUMsc0VBQWdCO0FBQ3RFLE1BQU0sRUFBRUMsYUFBYSxFQUFFLEdBQUdELG1CQUFPQSxDQUFDLDBDQUFrQjtBQUNwRCxNQUFNRSxPQUFPRixtQkFBT0EsQ0FBQyxrRUFBYztBQUNuQyxNQUFNLEVBQUVHLFNBQVMsRUFBRUMsWUFBWSxFQUFFLEdBQUdKLG1CQUFPQSxDQUFDLDJFQUFnQjtBQUM1RCxNQUFNSyxTQUFTTCxtQkFBT0EsQ0FBQyxnQ0FBYTtBQUVwQyxNQUFNTSx1QkFBdUJMO0lBQzNCLFlBQWFNLElBQUksRUFBRUMsUUFBUSxDQUFFO1FBQzNCLElBQUksQ0FBQ0QsUUFBUSxPQUFPQSxTQUFTLFVBQVU7WUFDckMsTUFBTSxJQUFJVCxxQkFBcUI7UUFDakM7UUFFQSxJQUFJLE9BQU9VLGFBQWEsWUFBWTtZQUNsQyxNQUFNLElBQUlWLHFCQUFxQjtRQUNqQztRQUVBLE1BQU0sRUFBRVcsTUFBTSxFQUFFQyxNQUFNLEVBQUVDLGVBQWUsRUFBRSxHQUFHSjtRQUU1QyxJQUFJRSxVQUFVLE9BQU9BLE9BQU9HLEVBQUUsS0FBSyxjQUFjLE9BQU9ILE9BQU9JLGdCQUFnQixLQUFLLFlBQVk7WUFDOUYsTUFBTSxJQUFJZixxQkFBcUI7UUFDakM7UUFFQSxLQUFLLENBQUM7UUFFTixJQUFJLENBQUNhLGVBQWUsR0FBR0EsbUJBQW1CO1FBQzFDLElBQUksQ0FBQ0QsTUFBTSxHQUFHQSxVQUFVO1FBQ3hCLElBQUksQ0FBQ0YsUUFBUSxHQUFHQTtRQUNoQixJQUFJLENBQUNNLEtBQUssR0FBRztRQUNiLElBQUksQ0FBQ0MsT0FBTyxHQUFHO1FBRWZaLFVBQVUsSUFBSSxFQUFFTTtJQUNsQjtJQUVBTyxVQUFXRixLQUFLLEVBQUVDLE9BQU8sRUFBRTtRQUN6QixJQUFJLElBQUksQ0FBQ0UsTUFBTSxFQUFFO1lBQ2ZILE1BQU0sSUFBSSxDQUFDRyxNQUFNO1lBQ2pCO1FBQ0Y7UUFFQVosT0FBTyxJQUFJLENBQUNHLFFBQVE7UUFFcEIsSUFBSSxDQUFDTSxLQUFLLEdBQUdBO1FBQ2IsSUFBSSxDQUFDQyxPQUFPLEdBQUc7SUFDakI7SUFFQUcsWUFBYTtRQUNYLE1BQU0sSUFBSW5CLFlBQVksZUFBZTtJQUN2QztJQUVBb0IsVUFBV0MsVUFBVSxFQUFFQyxVQUFVLEVBQUVDLE1BQU0sRUFBRTtRQUN6QyxNQUFNLEVBQUVkLFFBQVEsRUFBRUUsTUFBTSxFQUFFSyxPQUFPLEVBQUUsR0FBRyxJQUFJO1FBRTFDVixPQUFPa0IsV0FBVyxDQUFDSCxZQUFZO1FBRS9CaEIsYUFBYSxJQUFJO1FBRWpCLElBQUksQ0FBQ0ksUUFBUSxHQUFHO1FBQ2hCLE1BQU1nQixVQUFVLElBQUksQ0FBQ2IsZUFBZSxLQUFLLFFBQVFULEtBQUt1QixlQUFlLENBQUNKLGNBQWNuQixLQUFLd0IsWUFBWSxDQUFDTDtRQUN0RyxJQUFJLENBQUNNLGVBQWUsQ0FBQ25CLFVBQVUsTUFBTSxNQUFNO1lBQ3pDZ0I7WUFDQUY7WUFDQVo7WUFDQUs7UUFDRjtJQUNGO0lBRUFhLFFBQVNDLEdBQUcsRUFBRTtRQUNaLE1BQU0sRUFBRXJCLFFBQVEsRUFBRUUsTUFBTSxFQUFFLEdBQUcsSUFBSTtRQUVqQ04sYUFBYSxJQUFJO1FBRWpCLElBQUlJLFVBQVU7WUFDWixJQUFJLENBQUNBLFFBQVEsR0FBRztZQUNoQnNCLGVBQWU7Z0JBQ2IsSUFBSSxDQUFDSCxlQUFlLENBQUNuQixVQUFVLE1BQU1xQixLQUFLO29CQUFFbkI7Z0JBQU87WUFDckQ7UUFDRjtJQUNGO0FBQ0Y7QUFFQSxTQUFTcUIsUUFBU3hCLElBQUksRUFBRUMsUUFBUTtJQUM5QixJQUFJQSxhQUFhd0IsV0FBVztRQUMxQixPQUFPLElBQUlDLFFBQVEsQ0FBQ0MsU0FBU0M7WUFDM0JKLFFBQVFLLElBQUksQ0FBQyxJQUFJLEVBQUU3QixNQUFNLENBQUNzQixLQUFLUTtnQkFDN0IsT0FBT1IsTUFBTU0sT0FBT04sT0FBT0ssUUFBUUc7WUFDckM7UUFDRjtJQUNGO0lBRUEsSUFBSTtRQUNGLE1BQU1DLGlCQUFpQixJQUFJaEMsZUFBZUMsTUFBTUM7UUFDaEQsSUFBSSxDQUFDK0IsUUFBUSxDQUFDO1lBQ1osR0FBR2hDLElBQUk7WUFDUGlDLFFBQVFqQyxLQUFLaUMsTUFBTSxJQUFJO1lBQ3ZCVCxTQUFTeEIsS0FBS2tDLFFBQVEsSUFBSTtRQUM1QixHQUFHSDtJQUNMLEVBQUUsT0FBT1QsS0FBSztRQUNaLElBQUksT0FBT3JCLGFBQWEsWUFBWTtZQUNsQyxNQUFNcUI7UUFDUjtRQUNBLE1BQU1uQixTQUFTSCxNQUFNRztRQUNyQm9CLGVBQWUsSUFBTXRCLFNBQVNxQixLQUFLO2dCQUFFbkI7WUFBTztJQUM5QztBQUNGO0FBRUFnQyxPQUFPQyxPQUFPLEdBQUdaIiwic291cmNlcyI6WyJEOlxcSGVsaXhcXG5vZGVfbW9kdWxlc1xcdW5kaWNpXFxsaWJcXGFwaVxcYXBpLXVwZ3JhZGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IHsgSW52YWxpZEFyZ3VtZW50RXJyb3IsIFNvY2tldEVycm9yIH0gPSByZXF1aXJlKCcuLi9jb3JlL2Vycm9ycycpXG5jb25zdCB7IEFzeW5jUmVzb3VyY2UgfSA9IHJlcXVpcmUoJ25vZGU6YXN5bmNfaG9va3MnKVxuY29uc3QgdXRpbCA9IHJlcXVpcmUoJy4uL2NvcmUvdXRpbCcpXG5jb25zdCB7IGFkZFNpZ25hbCwgcmVtb3ZlU2lnbmFsIH0gPSByZXF1aXJlKCcuL2Fib3J0LXNpZ25hbCcpXG5jb25zdCBhc3NlcnQgPSByZXF1aXJlKCdub2RlOmFzc2VydCcpXG5cbmNsYXNzIFVwZ3JhZGVIYW5kbGVyIGV4dGVuZHMgQXN5bmNSZXNvdXJjZSB7XG4gIGNvbnN0cnVjdG9yIChvcHRzLCBjYWxsYmFjaykge1xuICAgIGlmICghb3B0cyB8fCB0eXBlb2Ygb3B0cyAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcignaW52YWxpZCBvcHRzJylcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoJ2ludmFsaWQgY2FsbGJhY2snKVxuICAgIH1cblxuICAgIGNvbnN0IHsgc2lnbmFsLCBvcGFxdWUsIHJlc3BvbnNlSGVhZGVycyB9ID0gb3B0c1xuXG4gICAgaWYgKHNpZ25hbCAmJiB0eXBlb2Ygc2lnbmFsLm9uICE9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBzaWduYWwuYWRkRXZlbnRMaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKCdzaWduYWwgbXVzdCBiZSBhbiBFdmVudEVtaXR0ZXIgb3IgRXZlbnRUYXJnZXQnKVxuICAgIH1cblxuICAgIHN1cGVyKCdVTkRJQ0lfVVBHUkFERScpXG5cbiAgICB0aGlzLnJlc3BvbnNlSGVhZGVycyA9IHJlc3BvbnNlSGVhZGVycyB8fCBudWxsXG4gICAgdGhpcy5vcGFxdWUgPSBvcGFxdWUgfHwgbnVsbFxuICAgIHRoaXMuY2FsbGJhY2sgPSBjYWxsYmFja1xuICAgIHRoaXMuYWJvcnQgPSBudWxsXG4gICAgdGhpcy5jb250ZXh0ID0gbnVsbFxuXG4gICAgYWRkU2lnbmFsKHRoaXMsIHNpZ25hbClcbiAgfVxuXG4gIG9uQ29ubmVjdCAoYWJvcnQsIGNvbnRleHQpIHtcbiAgICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICAgIGFib3J0KHRoaXMucmVhc29uKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgYXNzZXJ0KHRoaXMuY2FsbGJhY2spXG5cbiAgICB0aGlzLmFib3J0ID0gYWJvcnRcbiAgICB0aGlzLmNvbnRleHQgPSBudWxsXG4gIH1cblxuICBvbkhlYWRlcnMgKCkge1xuICAgIHRocm93IG5ldyBTb2NrZXRFcnJvcignYmFkIHVwZ3JhZGUnLCBudWxsKVxuICB9XG5cbiAgb25VcGdyYWRlIChzdGF0dXNDb2RlLCByYXdIZWFkZXJzLCBzb2NrZXQpIHtcbiAgICBjb25zdCB7IGNhbGxiYWNrLCBvcGFxdWUsIGNvbnRleHQgfSA9IHRoaXNcblxuICAgIGFzc2VydC5zdHJpY3RFcXVhbChzdGF0dXNDb2RlLCAxMDEpXG5cbiAgICByZW1vdmVTaWduYWwodGhpcylcblxuICAgIHRoaXMuY2FsbGJhY2sgPSBudWxsXG4gICAgY29uc3QgaGVhZGVycyA9IHRoaXMucmVzcG9uc2VIZWFkZXJzID09PSAncmF3JyA/IHV0aWwucGFyc2VSYXdIZWFkZXJzKHJhd0hlYWRlcnMpIDogdXRpbC5wYXJzZUhlYWRlcnMocmF3SGVhZGVycylcbiAgICB0aGlzLnJ1bkluQXN5bmNTY29wZShjYWxsYmFjaywgbnVsbCwgbnVsbCwge1xuICAgICAgaGVhZGVycyxcbiAgICAgIHNvY2tldCxcbiAgICAgIG9wYXF1ZSxcbiAgICAgIGNvbnRleHRcbiAgICB9KVxuICB9XG5cbiAgb25FcnJvciAoZXJyKSB7XG4gICAgY29uc3QgeyBjYWxsYmFjaywgb3BhcXVlIH0gPSB0aGlzXG5cbiAgICByZW1vdmVTaWduYWwodGhpcylcblxuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgdGhpcy5jYWxsYmFjayA9IG51bGxcbiAgICAgIHF1ZXVlTWljcm90YXNrKCgpID0+IHtcbiAgICAgICAgdGhpcy5ydW5JbkFzeW5jU2NvcGUoY2FsbGJhY2ssIG51bGwsIGVyciwgeyBvcGFxdWUgfSlcbiAgICAgIH0pXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHVwZ3JhZGUgKG9wdHMsIGNhbGxiYWNrKSB7XG4gIGlmIChjYWxsYmFjayA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHVwZ3JhZGUuY2FsbCh0aGlzLCBvcHRzLCAoZXJyLCBkYXRhKSA9PiB7XG4gICAgICAgIHJldHVybiBlcnIgPyByZWplY3QoZXJyKSA6IHJlc29sdmUoZGF0YSlcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG4gIHRyeSB7XG4gICAgY29uc3QgdXBncmFkZUhhbmRsZXIgPSBuZXcgVXBncmFkZUhhbmRsZXIob3B0cywgY2FsbGJhY2spXG4gICAgdGhpcy5kaXNwYXRjaCh7XG4gICAgICAuLi5vcHRzLFxuICAgICAgbWV0aG9kOiBvcHRzLm1ldGhvZCB8fCAnR0VUJyxcbiAgICAgIHVwZ3JhZGU6IG9wdHMucHJvdG9jb2wgfHwgJ1dlYnNvY2tldCdcbiAgICB9LCB1cGdyYWRlSGFuZGxlcilcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgZXJyXG4gICAgfVxuICAgIGNvbnN0IG9wYXF1ZSA9IG9wdHM/Lm9wYXF1ZVxuICAgIHF1ZXVlTWljcm90YXNrKCgpID0+IGNhbGxiYWNrKGVyciwgeyBvcGFxdWUgfSkpXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB1cGdyYWRlXG4iXSwibmFtZXMiOlsiSW52YWxpZEFyZ3VtZW50RXJyb3IiLCJTb2NrZXRFcnJvciIsInJlcXVpcmUiLCJBc3luY1Jlc291cmNlIiwidXRpbCIsImFkZFNpZ25hbCIsInJlbW92ZVNpZ25hbCIsImFzc2VydCIsIlVwZ3JhZGVIYW5kbGVyIiwib3B0cyIsImNhbGxiYWNrIiwic2lnbmFsIiwib3BhcXVlIiwicmVzcG9uc2VIZWFkZXJzIiwib24iLCJhZGRFdmVudExpc3RlbmVyIiwiYWJvcnQiLCJjb250ZXh0Iiwib25Db25uZWN0IiwicmVhc29uIiwib25IZWFkZXJzIiwib25VcGdyYWRlIiwic3RhdHVzQ29kZSIsInJhd0hlYWRlcnMiLCJzb2NrZXQiLCJzdHJpY3RFcXVhbCIsImhlYWRlcnMiLCJwYXJzZVJhd0hlYWRlcnMiLCJwYXJzZUhlYWRlcnMiLCJydW5JbkFzeW5jU2NvcGUiLCJvbkVycm9yIiwiZXJyIiwicXVldWVNaWNyb3Rhc2siLCJ1cGdyYWRlIiwidW5kZWZpbmVkIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJjYWxsIiwiZGF0YSIsInVwZ3JhZGVIYW5kbGVyIiwiZGlzcGF0Y2giLCJtZXRob2QiLCJwcm90b2NvbCIsIm1vZHVsZSIsImV4cG9ydHMiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/api/api-upgrade.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/api/index.js":
/*!**********************************************!*\
  !*** ./node_modules/undici/lib/api/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports.request = __webpack_require__(/*! ./api-request */ \"(ssr)/./node_modules/undici/lib/api/api-request.js\");\nmodule.exports.stream = __webpack_require__(/*! ./api-stream */ \"(ssr)/./node_modules/undici/lib/api/api-stream.js\");\nmodule.exports.pipeline = __webpack_require__(/*! ./api-pipeline */ \"(ssr)/./node_modules/undici/lib/api/api-pipeline.js\");\nmodule.exports.upgrade = __webpack_require__(/*! ./api-upgrade */ \"(ssr)/./node_modules/undici/lib/api/api-upgrade.js\");\nmodule.exports.connect = __webpack_require__(/*! ./api-connect */ \"(ssr)/./node_modules/undici/lib/api/api-connect.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9hcGkvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQUEsdUhBQWlEO0FBQ2pEQSxvSEFBK0M7QUFDL0NBLDBIQUFtRDtBQUNuREEsdUhBQWlEO0FBQ2pEQSx1SEFBaUQiLCJzb3VyY2VzIjpbIkQ6XFxIZWxpeFxcbm9kZV9tb2R1bGVzXFx1bmRpY2lcXGxpYlxcYXBpXFxpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMucmVxdWVzdCA9IHJlcXVpcmUoJy4vYXBpLXJlcXVlc3QnKVxubW9kdWxlLmV4cG9ydHMuc3RyZWFtID0gcmVxdWlyZSgnLi9hcGktc3RyZWFtJylcbm1vZHVsZS5leHBvcnRzLnBpcGVsaW5lID0gcmVxdWlyZSgnLi9hcGktcGlwZWxpbmUnKVxubW9kdWxlLmV4cG9ydHMudXBncmFkZSA9IHJlcXVpcmUoJy4vYXBpLXVwZ3JhZGUnKVxubW9kdWxlLmV4cG9ydHMuY29ubmVjdCA9IHJlcXVpcmUoJy4vYXBpLWNvbm5lY3QnKVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1ZXN0IiwicmVxdWlyZSIsInN0cmVhbSIsInBpcGVsaW5lIiwidXBncmFkZSIsImNvbm5lY3QiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/api/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/api/readable.js":
/*!*************************************************!*\
  !*** ./node_modules/undici/lib/api/readable.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Ported from https://github.com/nodejs/undici/pull/907\n\nconst assert = __webpack_require__(/*! node:assert */ \"node:assert\");\nconst { Readable } = __webpack_require__(/*! node:stream */ \"node:stream\");\nconst { RequestAbortedError, NotSupportedError, InvalidArgumentError, AbortError } = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst util = __webpack_require__(/*! ../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst { ReadableStreamFrom } = __webpack_require__(/*! ../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst kConsume = Symbol('kConsume');\nconst kReading = Symbol('kReading');\nconst kBody = Symbol('kBody');\nconst kAbort = Symbol('kAbort');\nconst kContentType = Symbol('kContentType');\nconst kContentLength = Symbol('kContentLength');\nconst noop = ()=>{};\nclass BodyReadable extends Readable {\n    constructor({ resume, abort, contentType = '', contentLength, highWaterMark = 64 * 1024 // Same as nodejs fs streams.\n     }){\n        super({\n            autoDestroy: true,\n            read: resume,\n            highWaterMark\n        });\n        this._readableState.dataEmitted = false;\n        this[kAbort] = abort;\n        this[kConsume] = null;\n        this[kBody] = null;\n        this[kContentType] = contentType;\n        this[kContentLength] = contentLength;\n        // Is stream being consumed through Readable API?\n        // This is an optimization so that we avoid checking\n        // for 'data' and 'readable' listeners in the hot path\n        // inside push().\n        this[kReading] = false;\n    }\n    destroy(err) {\n        if (!err && !this._readableState.endEmitted) {\n            err = new RequestAbortedError();\n        }\n        if (err) {\n            this[kAbort]();\n        }\n        return super.destroy(err);\n    }\n    _destroy(err, callback) {\n        // Workaround for Node \"bug\". If the stream is destroyed in same\n        // tick as it is created, then a user who is waiting for a\n        // promise (i.e micro tick) for installing a 'error' listener will\n        // never get a chance and will always encounter an unhandled exception.\n        if (!this[kReading]) {\n            setImmediate(()=>{\n                callback(err);\n            });\n        } else {\n            callback(err);\n        }\n    }\n    on(ev, ...args) {\n        if (ev === 'data' || ev === 'readable') {\n            this[kReading] = true;\n        }\n        return super.on(ev, ...args);\n    }\n    addListener(ev, ...args) {\n        return this.on(ev, ...args);\n    }\n    off(ev, ...args) {\n        const ret = super.off(ev, ...args);\n        if (ev === 'data' || ev === 'readable') {\n            this[kReading] = this.listenerCount('data') > 0 || this.listenerCount('readable') > 0;\n        }\n        return ret;\n    }\n    removeListener(ev, ...args) {\n        return this.off(ev, ...args);\n    }\n    push(chunk) {\n        if (this[kConsume] && chunk !== null) {\n            consumePush(this[kConsume], chunk);\n            return this[kReading] ? super.push(chunk) : true;\n        }\n        return super.push(chunk);\n    }\n    // https://fetch.spec.whatwg.org/#dom-body-text\n    async text() {\n        return consume(this, 'text');\n    }\n    // https://fetch.spec.whatwg.org/#dom-body-json\n    async json() {\n        return consume(this, 'json');\n    }\n    // https://fetch.spec.whatwg.org/#dom-body-blob\n    async blob() {\n        return consume(this, 'blob');\n    }\n    // https://fetch.spec.whatwg.org/#dom-body-arraybuffer\n    async arrayBuffer() {\n        return consume(this, 'arrayBuffer');\n    }\n    // https://fetch.spec.whatwg.org/#dom-body-formdata\n    async formData() {\n        // TODO: Implement.\n        throw new NotSupportedError();\n    }\n    // https://fetch.spec.whatwg.org/#dom-body-bodyused\n    get bodyUsed() {\n        return util.isDisturbed(this);\n    }\n    // https://fetch.spec.whatwg.org/#dom-body-body\n    get body() {\n        if (!this[kBody]) {\n            this[kBody] = ReadableStreamFrom(this);\n            if (this[kConsume]) {\n                // TODO: Is this the best way to force a lock?\n                this[kBody].getReader(); // Ensure stream is locked.\n                assert(this[kBody].locked);\n            }\n        }\n        return this[kBody];\n    }\n    async dump(opts) {\n        let limit = Number.isFinite(opts?.limit) ? opts.limit : 128 * 1024;\n        const signal = opts?.signal;\n        if (signal != null && (typeof signal !== 'object' || !('aborted' in signal))) {\n            throw new InvalidArgumentError('signal must be an AbortSignal');\n        }\n        signal?.throwIfAborted();\n        if (this._readableState.closeEmitted) {\n            return null;\n        }\n        return await new Promise((resolve, reject)=>{\n            if (this[kContentLength] > limit) {\n                this.destroy(new AbortError());\n            }\n            const onAbort = ()=>{\n                this.destroy(signal.reason ?? new AbortError());\n            };\n            signal?.addEventListener('abort', onAbort);\n            this.on('close', function() {\n                signal?.removeEventListener('abort', onAbort);\n                if (signal?.aborted) {\n                    reject(signal.reason ?? new AbortError());\n                } else {\n                    resolve(null);\n                }\n            }).on('error', noop).on('data', function(chunk) {\n                limit -= chunk.length;\n                if (limit <= 0) {\n                    this.destroy();\n                }\n            }).resume();\n        });\n    }\n}\n// https://streams.spec.whatwg.org/#readablestream-locked\nfunction isLocked(self) {\n    // Consume is an implicit lock.\n    return self[kBody] && self[kBody].locked === true || self[kConsume];\n}\n// https://fetch.spec.whatwg.org/#body-unusable\nfunction isUnusable(self) {\n    return util.isDisturbed(self) || isLocked(self);\n}\nasync function consume(stream, type) {\n    assert(!stream[kConsume]);\n    return new Promise((resolve, reject)=>{\n        if (isUnusable(stream)) {\n            const rState = stream._readableState;\n            if (rState.destroyed && rState.closeEmitted === false) {\n                stream.on('error', (err)=>{\n                    reject(err);\n                }).on('close', ()=>{\n                    reject(new TypeError('unusable'));\n                });\n            } else {\n                reject(rState.errored ?? new TypeError('unusable'));\n            }\n        } else {\n            queueMicrotask(()=>{\n                stream[kConsume] = {\n                    type,\n                    stream,\n                    resolve,\n                    reject,\n                    length: 0,\n                    body: []\n                };\n                stream.on('error', function(err) {\n                    consumeFinish(this[kConsume], err);\n                }).on('close', function() {\n                    if (this[kConsume].body !== null) {\n                        consumeFinish(this[kConsume], new RequestAbortedError());\n                    }\n                });\n                consumeStart(stream[kConsume]);\n            });\n        }\n    });\n}\nfunction consumeStart(consume) {\n    if (consume.body === null) {\n        return;\n    }\n    const { _readableState: state } = consume.stream;\n    if (state.bufferIndex) {\n        const start = state.bufferIndex;\n        const end = state.buffer.length;\n        for(let n = start; n < end; n++){\n            consumePush(consume, state.buffer[n]);\n        }\n    } else {\n        for (const chunk of state.buffer){\n            consumePush(consume, chunk);\n        }\n    }\n    if (state.endEmitted) {\n        consumeEnd(this[kConsume]);\n    } else {\n        consume.stream.on('end', function() {\n            consumeEnd(this[kConsume]);\n        });\n    }\n    consume.stream.resume();\n    while(consume.stream.read() != null){\n    // Loop\n    }\n}\n/**\n * @param {Buffer[]} chunks\n * @param {number} length\n */ function chunksDecode(chunks, length) {\n    if (chunks.length === 0 || length === 0) {\n        return '';\n    }\n    const buffer = chunks.length === 1 ? chunks[0] : Buffer.concat(chunks, length);\n    const bufferLength = buffer.length;\n    // Skip BOM.\n    const start = bufferLength > 2 && buffer[0] === 0xef && buffer[1] === 0xbb && buffer[2] === 0xbf ? 3 : 0;\n    return buffer.utf8Slice(start, bufferLength);\n}\nfunction consumeEnd(consume) {\n    const { type, body, resolve, stream, length } = consume;\n    try {\n        if (type === 'text') {\n            resolve(chunksDecode(body, length));\n        } else if (type === 'json') {\n            resolve(JSON.parse(chunksDecode(body, length)));\n        } else if (type === 'arrayBuffer') {\n            const dst = new Uint8Array(length);\n            let pos = 0;\n            for (const buf of body){\n                dst.set(buf, pos);\n                pos += buf.byteLength;\n            }\n            resolve(dst.buffer);\n        } else if (type === 'blob') {\n            resolve(new Blob(body, {\n                type: stream[kContentType]\n            }));\n        }\n        consumeFinish(consume);\n    } catch (err) {\n        stream.destroy(err);\n    }\n}\nfunction consumePush(consume, chunk) {\n    consume.length += chunk.length;\n    consume.body.push(chunk);\n}\nfunction consumeFinish(consume, err) {\n    if (consume.body === null) {\n        return;\n    }\n    if (err) {\n        consume.reject(err);\n    } else {\n        consume.resolve();\n    }\n    consume.type = null;\n    consume.stream = null;\n    consume.resolve = null;\n    consume.reject = null;\n    consume.length = 0;\n    consume.body = null;\n}\nmodule.exports = {\n    Readable: BodyReadable,\n    chunksDecode\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/api/readable.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/api/util.js":
/*!*********************************************!*\
  !*** ./node_modules/undici/lib/api/util.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst assert = __webpack_require__(/*! node:assert */ \"node:assert\");\nconst { ResponseStatusCodeError } = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst { chunksDecode } = __webpack_require__(/*! ./readable */ \"(ssr)/./node_modules/undici/lib/api/readable.js\");\nconst CHUNK_LIMIT = 128 * 1024;\nasync function getResolveErrorBodyCallback({ callback, body, contentType, statusCode, statusMessage, headers }) {\n    assert(body);\n    let chunks = [];\n    let length = 0;\n    try {\n        for await (const chunk of body){\n            chunks.push(chunk);\n            length += chunk.length;\n            if (length > CHUNK_LIMIT) {\n                chunks = [];\n                length = 0;\n                break;\n            }\n        }\n    } catch  {\n        chunks = [];\n        length = 0;\n    // Do nothing....\n    }\n    const message = `Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ''}`;\n    if (statusCode === 204 || !contentType || !length) {\n        queueMicrotask(()=>callback(new ResponseStatusCodeError(message, statusCode, headers)));\n        return;\n    }\n    const stackTraceLimit = Error.stackTraceLimit;\n    Error.stackTraceLimit = 0;\n    let payload;\n    try {\n        if (isContentTypeApplicationJson(contentType)) {\n            payload = JSON.parse(chunksDecode(chunks, length));\n        } else if (isContentTypeText(contentType)) {\n            payload = chunksDecode(chunks, length);\n        }\n    } catch  {\n    // process in a callback to avoid throwing in the microtask queue\n    } finally{\n        Error.stackTraceLimit = stackTraceLimit;\n    }\n    queueMicrotask(()=>callback(new ResponseStatusCodeError(message, statusCode, headers, payload)));\n}\nconst isContentTypeApplicationJson = (contentType)=>{\n    return contentType.length > 15 && contentType[11] === '/' && contentType[0] === 'a' && contentType[1] === 'p' && contentType[2] === 'p' && contentType[3] === 'l' && contentType[4] === 'i' && contentType[5] === 'c' && contentType[6] === 'a' && contentType[7] === 't' && contentType[8] === 'i' && contentType[9] === 'o' && contentType[10] === 'n' && contentType[12] === 'j' && contentType[13] === 's' && contentType[14] === 'o' && contentType[15] === 'n';\n};\nconst isContentTypeText = (contentType)=>{\n    return contentType.length > 4 && contentType[4] === '/' && contentType[0] === 't' && contentType[1] === 'e' && contentType[2] === 'x' && contentType[3] === 't';\n};\nmodule.exports = {\n    getResolveErrorBodyCallback,\n    isContentTypeApplicationJson,\n    isContentTypeText\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9hcGkvdXRpbC5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsTUFBTUEsU0FBU0MsbUJBQU9BLENBQUMsZ0NBQWE7QUFDcEMsTUFBTSxFQUNKQyx1QkFBdUIsRUFDeEIsR0FBR0QsbUJBQU9BLENBQUMsc0VBQWdCO0FBRTVCLE1BQU0sRUFBRUUsWUFBWSxFQUFFLEdBQUdGLG1CQUFPQSxDQUFDLG1FQUFZO0FBQzdDLE1BQU1HLGNBQWMsTUFBTTtBQUUxQixlQUFlQyw0QkFBNkIsRUFBRUMsUUFBUSxFQUFFQyxJQUFJLEVBQUVDLFdBQVcsRUFBRUMsVUFBVSxFQUFFQyxhQUFhLEVBQUVDLE9BQU8sRUFBRTtJQUM3R1gsT0FBT087SUFFUCxJQUFJSyxTQUFTLEVBQUU7SUFDZixJQUFJQyxTQUFTO0lBRWIsSUFBSTtRQUNGLFdBQVcsTUFBTUMsU0FBU1AsS0FBTTtZQUM5QkssT0FBT0csSUFBSSxDQUFDRDtZQUNaRCxVQUFVQyxNQUFNRCxNQUFNO1lBQ3RCLElBQUlBLFNBQVNULGFBQWE7Z0JBQ3hCUSxTQUFTLEVBQUU7Z0JBQ1hDLFNBQVM7Z0JBQ1Q7WUFDRjtRQUNGO0lBQ0YsRUFBRSxPQUFNO1FBQ05ELFNBQVMsRUFBRTtRQUNYQyxTQUFTO0lBQ1QsaUJBQWlCO0lBQ25CO0lBRUEsTUFBTUcsVUFBVSxDQUFDLHFCQUFxQixFQUFFUCxhQUFhQyxnQkFBZ0IsQ0FBQyxFQUFFLEVBQUVBLGVBQWUsR0FBRyxJQUFJO0lBRWhHLElBQUlELGVBQWUsT0FBTyxDQUFDRCxlQUFlLENBQUNLLFFBQVE7UUFDakRJLGVBQWUsSUFBTVgsU0FBUyxJQUFJSix3QkFBd0JjLFNBQVNQLFlBQVlFO1FBQy9FO0lBQ0Y7SUFFQSxNQUFNTyxrQkFBa0JDLE1BQU1ELGVBQWU7SUFDN0NDLE1BQU1ELGVBQWUsR0FBRztJQUN4QixJQUFJRTtJQUVKLElBQUk7UUFDRixJQUFJQyw2QkFBNkJiLGNBQWM7WUFDN0NZLFVBQVVFLEtBQUtDLEtBQUssQ0FBQ3BCLGFBQWFTLFFBQVFDO1FBQzVDLE9BQU8sSUFBSVcsa0JBQWtCaEIsY0FBYztZQUN6Q1ksVUFBVWpCLGFBQWFTLFFBQVFDO1FBQ2pDO0lBQ0YsRUFBRSxPQUFNO0lBQ04saUVBQWlFO0lBQ25FLFNBQVU7UUFDUk0sTUFBTUQsZUFBZSxHQUFHQTtJQUMxQjtJQUNBRCxlQUFlLElBQU1YLFNBQVMsSUFBSUosd0JBQXdCYyxTQUFTUCxZQUFZRSxTQUFTUztBQUMxRjtBQUVBLE1BQU1DLCtCQUErQixDQUFDYjtJQUNwQyxPQUNFQSxZQUFZSyxNQUFNLEdBQUcsTUFDckJMLFdBQVcsQ0FBQyxHQUFHLEtBQUssT0FDcEJBLFdBQVcsQ0FBQyxFQUFFLEtBQUssT0FDbkJBLFdBQVcsQ0FBQyxFQUFFLEtBQUssT0FDbkJBLFdBQVcsQ0FBQyxFQUFFLEtBQUssT0FDbkJBLFdBQVcsQ0FBQyxFQUFFLEtBQUssT0FDbkJBLFdBQVcsQ0FBQyxFQUFFLEtBQUssT0FDbkJBLFdBQVcsQ0FBQyxFQUFFLEtBQUssT0FDbkJBLFdBQVcsQ0FBQyxFQUFFLEtBQUssT0FDbkJBLFdBQVcsQ0FBQyxFQUFFLEtBQUssT0FDbkJBLFdBQVcsQ0FBQyxFQUFFLEtBQUssT0FDbkJBLFdBQVcsQ0FBQyxFQUFFLEtBQUssT0FDbkJBLFdBQVcsQ0FBQyxHQUFHLEtBQUssT0FDcEJBLFdBQVcsQ0FBQyxHQUFHLEtBQUssT0FDcEJBLFdBQVcsQ0FBQyxHQUFHLEtBQUssT0FDcEJBLFdBQVcsQ0FBQyxHQUFHLEtBQUssT0FDcEJBLFdBQVcsQ0FBQyxHQUFHLEtBQUs7QUFFeEI7QUFFQSxNQUFNZ0Isb0JBQW9CLENBQUNoQjtJQUN6QixPQUNFQSxZQUFZSyxNQUFNLEdBQUcsS0FDckJMLFdBQVcsQ0FBQyxFQUFFLEtBQUssT0FDbkJBLFdBQVcsQ0FBQyxFQUFFLEtBQUssT0FDbkJBLFdBQVcsQ0FBQyxFQUFFLEtBQUssT0FDbkJBLFdBQVcsQ0FBQyxFQUFFLEtBQUssT0FDbkJBLFdBQVcsQ0FBQyxFQUFFLEtBQUs7QUFFdkI7QUFFQWlCLE9BQU9DLE9BQU8sR0FBRztJQUNmckI7SUFDQWdCO0lBQ0FHO0FBQ0YiLCJzb3VyY2VzIjpbIkQ6XFxIZWxpeFxcbm9kZV9tb2R1bGVzXFx1bmRpY2lcXGxpYlxcYXBpXFx1dGlsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGFzc2VydCA9IHJlcXVpcmUoJ25vZGU6YXNzZXJ0JylcbmNvbnN0IHtcbiAgUmVzcG9uc2VTdGF0dXNDb2RlRXJyb3Jcbn0gPSByZXF1aXJlKCcuLi9jb3JlL2Vycm9ycycpXG5cbmNvbnN0IHsgY2h1bmtzRGVjb2RlIH0gPSByZXF1aXJlKCcuL3JlYWRhYmxlJylcbmNvbnN0IENIVU5LX0xJTUlUID0gMTI4ICogMTAyNFxuXG5hc3luYyBmdW5jdGlvbiBnZXRSZXNvbHZlRXJyb3JCb2R5Q2FsbGJhY2sgKHsgY2FsbGJhY2ssIGJvZHksIGNvbnRlbnRUeXBlLCBzdGF0dXNDb2RlLCBzdGF0dXNNZXNzYWdlLCBoZWFkZXJzIH0pIHtcbiAgYXNzZXJ0KGJvZHkpXG5cbiAgbGV0IGNodW5rcyA9IFtdXG4gIGxldCBsZW5ndGggPSAwXG5cbiAgdHJ5IHtcbiAgICBmb3IgYXdhaXQgKGNvbnN0IGNodW5rIG9mIGJvZHkpIHtcbiAgICAgIGNodW5rcy5wdXNoKGNodW5rKVxuICAgICAgbGVuZ3RoICs9IGNodW5rLmxlbmd0aFxuICAgICAgaWYgKGxlbmd0aCA+IENIVU5LX0xJTUlUKSB7XG4gICAgICAgIGNodW5rcyA9IFtdXG4gICAgICAgIGxlbmd0aCA9IDBcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gIH0gY2F0Y2gge1xuICAgIGNodW5rcyA9IFtdXG4gICAgbGVuZ3RoID0gMFxuICAgIC8vIERvIG5vdGhpbmcuLi4uXG4gIH1cblxuICBjb25zdCBtZXNzYWdlID0gYFJlc3BvbnNlIHN0YXR1cyBjb2RlICR7c3RhdHVzQ29kZX0ke3N0YXR1c01lc3NhZ2UgPyBgOiAke3N0YXR1c01lc3NhZ2V9YCA6ICcnfWBcblxuICBpZiAoc3RhdHVzQ29kZSA9PT0gMjA0IHx8ICFjb250ZW50VHlwZSB8fCAhbGVuZ3RoKSB7XG4gICAgcXVldWVNaWNyb3Rhc2soKCkgPT4gY2FsbGJhY2sobmV3IFJlc3BvbnNlU3RhdHVzQ29kZUVycm9yKG1lc3NhZ2UsIHN0YXR1c0NvZGUsIGhlYWRlcnMpKSlcbiAgICByZXR1cm5cbiAgfVxuXG4gIGNvbnN0IHN0YWNrVHJhY2VMaW1pdCA9IEVycm9yLnN0YWNrVHJhY2VMaW1pdFxuICBFcnJvci5zdGFja1RyYWNlTGltaXQgPSAwXG4gIGxldCBwYXlsb2FkXG5cbiAgdHJ5IHtcbiAgICBpZiAoaXNDb250ZW50VHlwZUFwcGxpY2F0aW9uSnNvbihjb250ZW50VHlwZSkpIHtcbiAgICAgIHBheWxvYWQgPSBKU09OLnBhcnNlKGNodW5rc0RlY29kZShjaHVua3MsIGxlbmd0aCkpXG4gICAgfSBlbHNlIGlmIChpc0NvbnRlbnRUeXBlVGV4dChjb250ZW50VHlwZSkpIHtcbiAgICAgIHBheWxvYWQgPSBjaHVua3NEZWNvZGUoY2h1bmtzLCBsZW5ndGgpXG4gICAgfVxuICB9IGNhdGNoIHtcbiAgICAvLyBwcm9jZXNzIGluIGEgY2FsbGJhY2sgdG8gYXZvaWQgdGhyb3dpbmcgaW4gdGhlIG1pY3JvdGFzayBxdWV1ZVxuICB9IGZpbmFsbHkge1xuICAgIEVycm9yLnN0YWNrVHJhY2VMaW1pdCA9IHN0YWNrVHJhY2VMaW1pdFxuICB9XG4gIHF1ZXVlTWljcm90YXNrKCgpID0+IGNhbGxiYWNrKG5ldyBSZXNwb25zZVN0YXR1c0NvZGVFcnJvcihtZXNzYWdlLCBzdGF0dXNDb2RlLCBoZWFkZXJzLCBwYXlsb2FkKSkpXG59XG5cbmNvbnN0IGlzQ29udGVudFR5cGVBcHBsaWNhdGlvbkpzb24gPSAoY29udGVudFR5cGUpID0+IHtcbiAgcmV0dXJuIChcbiAgICBjb250ZW50VHlwZS5sZW5ndGggPiAxNSAmJlxuICAgIGNvbnRlbnRUeXBlWzExXSA9PT0gJy8nICYmXG4gICAgY29udGVudFR5cGVbMF0gPT09ICdhJyAmJlxuICAgIGNvbnRlbnRUeXBlWzFdID09PSAncCcgJiZcbiAgICBjb250ZW50VHlwZVsyXSA9PT0gJ3AnICYmXG4gICAgY29udGVudFR5cGVbM10gPT09ICdsJyAmJlxuICAgIGNvbnRlbnRUeXBlWzRdID09PSAnaScgJiZcbiAgICBjb250ZW50VHlwZVs1XSA9PT0gJ2MnICYmXG4gICAgY29udGVudFR5cGVbNl0gPT09ICdhJyAmJlxuICAgIGNvbnRlbnRUeXBlWzddID09PSAndCcgJiZcbiAgICBjb250ZW50VHlwZVs4XSA9PT0gJ2knICYmXG4gICAgY29udGVudFR5cGVbOV0gPT09ICdvJyAmJlxuICAgIGNvbnRlbnRUeXBlWzEwXSA9PT0gJ24nICYmXG4gICAgY29udGVudFR5cGVbMTJdID09PSAnaicgJiZcbiAgICBjb250ZW50VHlwZVsxM10gPT09ICdzJyAmJlxuICAgIGNvbnRlbnRUeXBlWzE0XSA9PT0gJ28nICYmXG4gICAgY29udGVudFR5cGVbMTVdID09PSAnbidcbiAgKVxufVxuXG5jb25zdCBpc0NvbnRlbnRUeXBlVGV4dCA9IChjb250ZW50VHlwZSkgPT4ge1xuICByZXR1cm4gKFxuICAgIGNvbnRlbnRUeXBlLmxlbmd0aCA+IDQgJiZcbiAgICBjb250ZW50VHlwZVs0XSA9PT0gJy8nICYmXG4gICAgY29udGVudFR5cGVbMF0gPT09ICd0JyAmJlxuICAgIGNvbnRlbnRUeXBlWzFdID09PSAnZScgJiZcbiAgICBjb250ZW50VHlwZVsyXSA9PT0gJ3gnICYmXG4gICAgY29udGVudFR5cGVbM10gPT09ICd0J1xuICApXG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRSZXNvbHZlRXJyb3JCb2R5Q2FsbGJhY2ssXG4gIGlzQ29udGVudFR5cGVBcHBsaWNhdGlvbkpzb24sXG4gIGlzQ29udGVudFR5cGVUZXh0XG59XG4iXSwibmFtZXMiOlsiYXNzZXJ0IiwicmVxdWlyZSIsIlJlc3BvbnNlU3RhdHVzQ29kZUVycm9yIiwiY2h1bmtzRGVjb2RlIiwiQ0hVTktfTElNSVQiLCJnZXRSZXNvbHZlRXJyb3JCb2R5Q2FsbGJhY2siLCJjYWxsYmFjayIsImJvZHkiLCJjb250ZW50VHlwZSIsInN0YXR1c0NvZGUiLCJzdGF0dXNNZXNzYWdlIiwiaGVhZGVycyIsImNodW5rcyIsImxlbmd0aCIsImNodW5rIiwicHVzaCIsIm1lc3NhZ2UiLCJxdWV1ZU1pY3JvdGFzayIsInN0YWNrVHJhY2VMaW1pdCIsIkVycm9yIiwicGF5bG9hZCIsImlzQ29udGVudFR5cGVBcHBsaWNhdGlvbkpzb24iLCJKU09OIiwicGFyc2UiLCJpc0NvbnRlbnRUeXBlVGV4dCIsIm1vZHVsZSIsImV4cG9ydHMiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/api/util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/core/connect.js":
/*!*************************************************!*\
  !*** ./node_modules/undici/lib/core/connect.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst net = __webpack_require__(/*! node:net */ \"node:net\");\nconst assert = __webpack_require__(/*! node:assert */ \"node:assert\");\nconst util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst { InvalidArgumentError, ConnectTimeoutError } = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nlet tls // include tls conditionally since it is not always available\n;\n// TODO: session re-use does not wait for the first\n// connection to resolve the session and might therefore\n// resolve the same servername multiple times even when\n// re-use is enabled.\nlet SessionCache;\n// FIXME: remove workaround when the Node bug is fixed\n// https://github.com/nodejs/node/issues/49344#issuecomment-1741776308\nif (global.FinalizationRegistry && !(process.env.NODE_V8_COVERAGE || process.env.UNDICI_NO_FG)) {\n    SessionCache = class WeakSessionCache {\n        constructor(maxCachedSessions){\n            this._maxCachedSessions = maxCachedSessions;\n            this._sessionCache = new Map();\n            this._sessionRegistry = new global.FinalizationRegistry((key)=>{\n                if (this._sessionCache.size < this._maxCachedSessions) {\n                    return;\n                }\n                const ref = this._sessionCache.get(key);\n                if (ref !== undefined && ref.deref() === undefined) {\n                    this._sessionCache.delete(key);\n                }\n            });\n        }\n        get(sessionKey) {\n            const ref = this._sessionCache.get(sessionKey);\n            return ref ? ref.deref() : null;\n        }\n        set(sessionKey, session) {\n            if (this._maxCachedSessions === 0) {\n                return;\n            }\n            this._sessionCache.set(sessionKey, new WeakRef(session));\n            this._sessionRegistry.register(session, sessionKey);\n        }\n    };\n} else {\n    SessionCache = class SimpleSessionCache {\n        constructor(maxCachedSessions){\n            this._maxCachedSessions = maxCachedSessions;\n            this._sessionCache = new Map();\n        }\n        get(sessionKey) {\n            return this._sessionCache.get(sessionKey);\n        }\n        set(sessionKey, session) {\n            if (this._maxCachedSessions === 0) {\n                return;\n            }\n            if (this._sessionCache.size >= this._maxCachedSessions) {\n                // remove the oldest session\n                const { value: oldestKey } = this._sessionCache.keys().next();\n                this._sessionCache.delete(oldestKey);\n            }\n            this._sessionCache.set(sessionKey, session);\n        }\n    };\n}\nfunction buildConnector({ allowH2, maxCachedSessions, socketPath, timeout, session: customSession, ...opts }) {\n    if (maxCachedSessions != null && (!Number.isInteger(maxCachedSessions) || maxCachedSessions < 0)) {\n        throw new InvalidArgumentError('maxCachedSessions must be a positive integer or zero');\n    }\n    const options = {\n        path: socketPath,\n        ...opts\n    };\n    const sessionCache = new SessionCache(maxCachedSessions == null ? 100 : maxCachedSessions);\n    timeout = timeout == null ? 10e3 : timeout;\n    allowH2 = allowH2 != null ? allowH2 : false;\n    return function connect({ hostname, host, protocol, port, servername, localAddress, httpSocket }, callback) {\n        let socket;\n        if (protocol === 'https:') {\n            if (!tls) {\n                tls = __webpack_require__(/*! node:tls */ \"node:tls\");\n            }\n            servername = servername || options.servername || util.getServerName(host) || null;\n            const sessionKey = servername || hostname;\n            const session = customSession || sessionCache.get(sessionKey) || null;\n            assert(sessionKey);\n            socket = tls.connect({\n                highWaterMark: 16384,\n                ...options,\n                servername,\n                session,\n                localAddress,\n                // TODO(HTTP/2): Add support for h2c\n                ALPNProtocols: allowH2 ? [\n                    'http/1.1',\n                    'h2'\n                ] : [\n                    'http/1.1'\n                ],\n                socket: httpSocket,\n                port: port || 443,\n                host: hostname\n            });\n            socket.on('session', function(session) {\n                // TODO (fix): Can a session become invalid once established? Don't think so?\n                sessionCache.set(sessionKey, session);\n            });\n        } else {\n            assert(!httpSocket, 'httpSocket can only be sent on TLS update');\n            socket = net.connect({\n                highWaterMark: 64 * 1024,\n                ...options,\n                localAddress,\n                port: port || 80,\n                host: hostname\n            });\n        }\n        // Set TCP keep alive options on the socket here instead of in connect() for the case of assigning the socket\n        if (options.keepAlive == null || options.keepAlive) {\n            const keepAliveInitialDelay = options.keepAliveInitialDelay === undefined ? 60e3 : options.keepAliveInitialDelay;\n            socket.setKeepAlive(true, keepAliveInitialDelay);\n        }\n        const cancelTimeout = setupTimeout(()=>onConnectTimeout(socket), timeout);\n        socket.setNoDelay(true).once(protocol === 'https:' ? 'secureConnect' : 'connect', function() {\n            cancelTimeout();\n            if (callback) {\n                const cb = callback;\n                callback = null;\n                cb(null, this);\n            }\n        }).on('error', function(err) {\n            cancelTimeout();\n            if (callback) {\n                const cb = callback;\n                callback = null;\n                cb(err);\n            }\n        });\n        return socket;\n    };\n}\nfunction setupTimeout(onConnectTimeout, timeout) {\n    if (!timeout) {\n        return ()=>{};\n    }\n    let s1 = null;\n    let s2 = null;\n    const timeoutId = setTimeout(()=>{\n        // setImmediate is added to make sure that we prioritize socket error events over timeouts\n        s1 = setImmediate(()=>{\n            if (process.platform === 'win32') {\n                // Windows needs an extra setImmediate probably due to implementation differences in the socket logic\n                s2 = setImmediate(()=>onConnectTimeout());\n            } else {\n                onConnectTimeout();\n            }\n        });\n    }, timeout);\n    return ()=>{\n        clearTimeout(timeoutId);\n        clearImmediate(s1);\n        clearImmediate(s2);\n    };\n}\nfunction onConnectTimeout(socket) {\n    let message = 'Connect Timeout Error';\n    if (Array.isArray(socket.autoSelectFamilyAttemptedAddresses)) {\n        message += ` (attempted addresses: ${socket.autoSelectFamilyAttemptedAddresses.join(', ')})`;\n    }\n    util.destroy(socket, new ConnectTimeoutError(message));\n}\nmodule.exports = buildConnector;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/core/connect.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/core/constants.js":
/*!***************************************************!*\
  !*** ./node_modules/undici/lib/core/constants.js ***!
  \***************************************************/
/***/ ((module) => {

eval("\n/** @type {Record<string, string | undefined>} */ const headerNameLowerCasedRecord = {};\n// https://developer.mozilla.org/docs/Web/HTTP/Headers\nconst wellknownHeaderNames = [\n    'Accept',\n    'Accept-Encoding',\n    'Accept-Language',\n    'Accept-Ranges',\n    'Access-Control-Allow-Credentials',\n    'Access-Control-Allow-Headers',\n    'Access-Control-Allow-Methods',\n    'Access-Control-Allow-Origin',\n    'Access-Control-Expose-Headers',\n    'Access-Control-Max-Age',\n    'Access-Control-Request-Headers',\n    'Access-Control-Request-Method',\n    'Age',\n    'Allow',\n    'Alt-Svc',\n    'Alt-Used',\n    'Authorization',\n    'Cache-Control',\n    'Clear-Site-Data',\n    'Connection',\n    'Content-Disposition',\n    'Content-Encoding',\n    'Content-Language',\n    'Content-Length',\n    'Content-Location',\n    'Content-Range',\n    'Content-Security-Policy',\n    'Content-Security-Policy-Report-Only',\n    'Content-Type',\n    'Cookie',\n    'Cross-Origin-Embedder-Policy',\n    'Cross-Origin-Opener-Policy',\n    'Cross-Origin-Resource-Policy',\n    'Date',\n    'Device-Memory',\n    'Downlink',\n    'ECT',\n    'ETag',\n    'Expect',\n    'Expect-CT',\n    'Expires',\n    'Forwarded',\n    'From',\n    'Host',\n    'If-Match',\n    'If-Modified-Since',\n    'If-None-Match',\n    'If-Range',\n    'If-Unmodified-Since',\n    'Keep-Alive',\n    'Last-Modified',\n    'Link',\n    'Location',\n    'Max-Forwards',\n    'Origin',\n    'Permissions-Policy',\n    'Pragma',\n    'Proxy-Authenticate',\n    'Proxy-Authorization',\n    'RTT',\n    'Range',\n    'Referer',\n    'Referrer-Policy',\n    'Refresh',\n    'Retry-After',\n    'Sec-WebSocket-Accept',\n    'Sec-WebSocket-Extensions',\n    'Sec-WebSocket-Key',\n    'Sec-WebSocket-Protocol',\n    'Sec-WebSocket-Version',\n    'Server',\n    'Server-Timing',\n    'Service-Worker-Allowed',\n    'Service-Worker-Navigation-Preload',\n    'Set-Cookie',\n    'SourceMap',\n    'Strict-Transport-Security',\n    'Supports-Loading-Mode',\n    'TE',\n    'Timing-Allow-Origin',\n    'Trailer',\n    'Transfer-Encoding',\n    'Upgrade',\n    'Upgrade-Insecure-Requests',\n    'User-Agent',\n    'Vary',\n    'Via',\n    'WWW-Authenticate',\n    'X-Content-Type-Options',\n    'X-DNS-Prefetch-Control',\n    'X-Frame-Options',\n    'X-Permitted-Cross-Domain-Policies',\n    'X-Powered-By',\n    'X-Requested-With',\n    'X-XSS-Protection'\n];\nfor(let i = 0; i < wellknownHeaderNames.length; ++i){\n    const key = wellknownHeaderNames[i];\n    const lowerCasedKey = key.toLowerCase();\n    headerNameLowerCasedRecord[key] = headerNameLowerCasedRecord[lowerCasedKey] = lowerCasedKey;\n}\n// Note: object prototypes should not be able to be referenced. e.g. `Object#hasOwnProperty`.\nObject.setPrototypeOf(headerNameLowerCasedRecord, null);\nmodule.exports = {\n    wellknownHeaderNames,\n    headerNameLowerCasedRecord\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9jb3JlL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLCtDQUErQyxHQUMvQyxNQUFNQSw2QkFBNkIsQ0FBQztBQUVwQyxzREFBc0Q7QUFDdEQsTUFBTUMsdUJBQXVCO0lBQzNCO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7Q0FDRDtBQUVELElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJRCxxQkFBcUJFLE1BQU0sRUFBRSxFQUFFRCxFQUFHO0lBQ3BELE1BQU1FLE1BQU1ILG9CQUFvQixDQUFDQyxFQUFFO0lBQ25DLE1BQU1HLGdCQUFnQkQsSUFBSUUsV0FBVztJQUNyQ04sMEJBQTBCLENBQUNJLElBQUksR0FBR0osMEJBQTBCLENBQUNLLGNBQWMsR0FDekVBO0FBQ0o7QUFFQSw2RkFBNkY7QUFDN0ZFLE9BQU9DLGNBQWMsQ0FBQ1IsNEJBQTRCO0FBRWxEUyxPQUFPQyxPQUFPLEdBQUc7SUFDZlQ7SUFDQUQ7QUFDRiIsInNvdXJjZXMiOlsiRDpcXEhlbGl4XFxub2RlX21vZHVsZXNcXHVuZGljaVxcbGliXFxjb3JlXFxjb25zdGFudHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbi8qKiBAdHlwZSB7UmVjb3JkPHN0cmluZywgc3RyaW5nIHwgdW5kZWZpbmVkPn0gKi9cbmNvbnN0IGhlYWRlck5hbWVMb3dlckNhc2VkUmVjb3JkID0ge31cblxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRUUC9IZWFkZXJzXG5jb25zdCB3ZWxsa25vd25IZWFkZXJOYW1lcyA9IFtcbiAgJ0FjY2VwdCcsXG4gICdBY2NlcHQtRW5jb2RpbmcnLFxuICAnQWNjZXB0LUxhbmd1YWdlJyxcbiAgJ0FjY2VwdC1SYW5nZXMnLFxuICAnQWNjZXNzLUNvbnRyb2wtQWxsb3ctQ3JlZGVudGlhbHMnLFxuICAnQWNjZXNzLUNvbnRyb2wtQWxsb3ctSGVhZGVycycsXG4gICdBY2Nlc3MtQ29udHJvbC1BbGxvdy1NZXRob2RzJyxcbiAgJ0FjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbicsXG4gICdBY2Nlc3MtQ29udHJvbC1FeHBvc2UtSGVhZGVycycsXG4gICdBY2Nlc3MtQ29udHJvbC1NYXgtQWdlJyxcbiAgJ0FjY2Vzcy1Db250cm9sLVJlcXVlc3QtSGVhZGVycycsXG4gICdBY2Nlc3MtQ29udHJvbC1SZXF1ZXN0LU1ldGhvZCcsXG4gICdBZ2UnLFxuICAnQWxsb3cnLFxuICAnQWx0LVN2YycsXG4gICdBbHQtVXNlZCcsXG4gICdBdXRob3JpemF0aW9uJyxcbiAgJ0NhY2hlLUNvbnRyb2wnLFxuICAnQ2xlYXItU2l0ZS1EYXRhJyxcbiAgJ0Nvbm5lY3Rpb24nLFxuICAnQ29udGVudC1EaXNwb3NpdGlvbicsXG4gICdDb250ZW50LUVuY29kaW5nJyxcbiAgJ0NvbnRlbnQtTGFuZ3VhZ2UnLFxuICAnQ29udGVudC1MZW5ndGgnLFxuICAnQ29udGVudC1Mb2NhdGlvbicsXG4gICdDb250ZW50LVJhbmdlJyxcbiAgJ0NvbnRlbnQtU2VjdXJpdHktUG9saWN5JyxcbiAgJ0NvbnRlbnQtU2VjdXJpdHktUG9saWN5LVJlcG9ydC1Pbmx5JyxcbiAgJ0NvbnRlbnQtVHlwZScsXG4gICdDb29raWUnLFxuICAnQ3Jvc3MtT3JpZ2luLUVtYmVkZGVyLVBvbGljeScsXG4gICdDcm9zcy1PcmlnaW4tT3BlbmVyLVBvbGljeScsXG4gICdDcm9zcy1PcmlnaW4tUmVzb3VyY2UtUG9saWN5JyxcbiAgJ0RhdGUnLFxuICAnRGV2aWNlLU1lbW9yeScsXG4gICdEb3dubGluaycsXG4gICdFQ1QnLFxuICAnRVRhZycsXG4gICdFeHBlY3QnLFxuICAnRXhwZWN0LUNUJyxcbiAgJ0V4cGlyZXMnLFxuICAnRm9yd2FyZGVkJyxcbiAgJ0Zyb20nLFxuICAnSG9zdCcsXG4gICdJZi1NYXRjaCcsXG4gICdJZi1Nb2RpZmllZC1TaW5jZScsXG4gICdJZi1Ob25lLU1hdGNoJyxcbiAgJ0lmLVJhbmdlJyxcbiAgJ0lmLVVubW9kaWZpZWQtU2luY2UnLFxuICAnS2VlcC1BbGl2ZScsXG4gICdMYXN0LU1vZGlmaWVkJyxcbiAgJ0xpbmsnLFxuICAnTG9jYXRpb24nLFxuICAnTWF4LUZvcndhcmRzJyxcbiAgJ09yaWdpbicsXG4gICdQZXJtaXNzaW9ucy1Qb2xpY3knLFxuICAnUHJhZ21hJyxcbiAgJ1Byb3h5LUF1dGhlbnRpY2F0ZScsXG4gICdQcm94eS1BdXRob3JpemF0aW9uJyxcbiAgJ1JUVCcsXG4gICdSYW5nZScsXG4gICdSZWZlcmVyJyxcbiAgJ1JlZmVycmVyLVBvbGljeScsXG4gICdSZWZyZXNoJyxcbiAgJ1JldHJ5LUFmdGVyJyxcbiAgJ1NlYy1XZWJTb2NrZXQtQWNjZXB0JyxcbiAgJ1NlYy1XZWJTb2NrZXQtRXh0ZW5zaW9ucycsXG4gICdTZWMtV2ViU29ja2V0LUtleScsXG4gICdTZWMtV2ViU29ja2V0LVByb3RvY29sJyxcbiAgJ1NlYy1XZWJTb2NrZXQtVmVyc2lvbicsXG4gICdTZXJ2ZXInLFxuICAnU2VydmVyLVRpbWluZycsXG4gICdTZXJ2aWNlLVdvcmtlci1BbGxvd2VkJyxcbiAgJ1NlcnZpY2UtV29ya2VyLU5hdmlnYXRpb24tUHJlbG9hZCcsXG4gICdTZXQtQ29va2llJyxcbiAgJ1NvdXJjZU1hcCcsXG4gICdTdHJpY3QtVHJhbnNwb3J0LVNlY3VyaXR5JyxcbiAgJ1N1cHBvcnRzLUxvYWRpbmctTW9kZScsXG4gICdURScsXG4gICdUaW1pbmctQWxsb3ctT3JpZ2luJyxcbiAgJ1RyYWlsZXInLFxuICAnVHJhbnNmZXItRW5jb2RpbmcnLFxuICAnVXBncmFkZScsXG4gICdVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzJyxcbiAgJ1VzZXItQWdlbnQnLFxuICAnVmFyeScsXG4gICdWaWEnLFxuICAnV1dXLUF1dGhlbnRpY2F0ZScsXG4gICdYLUNvbnRlbnQtVHlwZS1PcHRpb25zJyxcbiAgJ1gtRE5TLVByZWZldGNoLUNvbnRyb2wnLFxuICAnWC1GcmFtZS1PcHRpb25zJyxcbiAgJ1gtUGVybWl0dGVkLUNyb3NzLURvbWFpbi1Qb2xpY2llcycsXG4gICdYLVBvd2VyZWQtQnknLFxuICAnWC1SZXF1ZXN0ZWQtV2l0aCcsXG4gICdYLVhTUy1Qcm90ZWN0aW9uJ1xuXVxuXG5mb3IgKGxldCBpID0gMDsgaSA8IHdlbGxrbm93bkhlYWRlck5hbWVzLmxlbmd0aDsgKytpKSB7XG4gIGNvbnN0IGtleSA9IHdlbGxrbm93bkhlYWRlck5hbWVzW2ldXG4gIGNvbnN0IGxvd2VyQ2FzZWRLZXkgPSBrZXkudG9Mb3dlckNhc2UoKVxuICBoZWFkZXJOYW1lTG93ZXJDYXNlZFJlY29yZFtrZXldID0gaGVhZGVyTmFtZUxvd2VyQ2FzZWRSZWNvcmRbbG93ZXJDYXNlZEtleV0gPVxuICAgIGxvd2VyQ2FzZWRLZXlcbn1cblxuLy8gTm90ZTogb2JqZWN0IHByb3RvdHlwZXMgc2hvdWxkIG5vdCBiZSBhYmxlIHRvIGJlIHJlZmVyZW5jZWQuIGUuZy4gYE9iamVjdCNoYXNPd25Qcm9wZXJ0eWAuXG5PYmplY3Quc2V0UHJvdG90eXBlT2YoaGVhZGVyTmFtZUxvd2VyQ2FzZWRSZWNvcmQsIG51bGwpXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICB3ZWxsa25vd25IZWFkZXJOYW1lcyxcbiAgaGVhZGVyTmFtZUxvd2VyQ2FzZWRSZWNvcmRcbn1cbiJdLCJuYW1lcyI6WyJoZWFkZXJOYW1lTG93ZXJDYXNlZFJlY29yZCIsIndlbGxrbm93bkhlYWRlck5hbWVzIiwiaSIsImxlbmd0aCIsImtleSIsImxvd2VyQ2FzZWRLZXkiLCJ0b0xvd2VyQ2FzZSIsIk9iamVjdCIsInNldFByb3RvdHlwZU9mIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/core/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/core/diagnostics.js":
/*!*****************************************************!*\
  !*** ./node_modules/undici/lib/core/diagnostics.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst diagnosticsChannel = __webpack_require__(/*! node:diagnostics_channel */ \"node:diagnostics_channel\");\nconst util = __webpack_require__(/*! node:util */ \"node:util\");\nconst undiciDebugLog = util.debuglog('undici');\nconst fetchDebuglog = util.debuglog('fetch');\nconst websocketDebuglog = util.debuglog('websocket');\nlet isClientSet = false;\nconst channels = {\n    // Client\n    beforeConnect: diagnosticsChannel.channel('undici:client:beforeConnect'),\n    connected: diagnosticsChannel.channel('undici:client:connected'),\n    connectError: diagnosticsChannel.channel('undici:client:connectError'),\n    sendHeaders: diagnosticsChannel.channel('undici:client:sendHeaders'),\n    // Request\n    create: diagnosticsChannel.channel('undici:request:create'),\n    bodySent: diagnosticsChannel.channel('undici:request:bodySent'),\n    headers: diagnosticsChannel.channel('undici:request:headers'),\n    trailers: diagnosticsChannel.channel('undici:request:trailers'),\n    error: diagnosticsChannel.channel('undici:request:error'),\n    // WebSocket\n    open: diagnosticsChannel.channel('undici:websocket:open'),\n    close: diagnosticsChannel.channel('undici:websocket:close'),\n    socketError: diagnosticsChannel.channel('undici:websocket:socket_error'),\n    ping: diagnosticsChannel.channel('undici:websocket:ping'),\n    pong: diagnosticsChannel.channel('undici:websocket:pong')\n};\nif (undiciDebugLog.enabled || fetchDebuglog.enabled) {\n    const debuglog = fetchDebuglog.enabled ? fetchDebuglog : undiciDebugLog;\n    // Track all Client events\n    diagnosticsChannel.channel('undici:client:beforeConnect').subscribe((evt)=>{\n        const { connectParams: { version, protocol, port, host } } = evt;\n        debuglog('connecting to %s using %s%s', `${host}${port ? `:${port}` : ''}`, protocol, version);\n    });\n    diagnosticsChannel.channel('undici:client:connected').subscribe((evt)=>{\n        const { connectParams: { version, protocol, port, host } } = evt;\n        debuglog('connected to %s using %s%s', `${host}${port ? `:${port}` : ''}`, protocol, version);\n    });\n    diagnosticsChannel.channel('undici:client:connectError').subscribe((evt)=>{\n        const { connectParams: { version, protocol, port, host }, error } = evt;\n        debuglog('connection to %s using %s%s errored - %s', `${host}${port ? `:${port}` : ''}`, protocol, version, error.message);\n    });\n    diagnosticsChannel.channel('undici:client:sendHeaders').subscribe((evt)=>{\n        const { request: { method, path, origin } } = evt;\n        debuglog('sending request to %s %s/%s', method, origin, path);\n    });\n    // Track Request events\n    diagnosticsChannel.channel('undici:request:headers').subscribe((evt)=>{\n        const { request: { method, path, origin }, response: { statusCode } } = evt;\n        debuglog('received response to %s %s/%s - HTTP %d', method, origin, path, statusCode);\n    });\n    diagnosticsChannel.channel('undici:request:trailers').subscribe((evt)=>{\n        const { request: { method, path, origin } } = evt;\n        debuglog('trailers received from %s %s/%s', method, origin, path);\n    });\n    diagnosticsChannel.channel('undici:request:error').subscribe((evt)=>{\n        const { request: { method, path, origin }, error } = evt;\n        debuglog('request to %s %s/%s errored - %s', method, origin, path, error.message);\n    });\n    isClientSet = true;\n}\nif (websocketDebuglog.enabled) {\n    if (!isClientSet) {\n        const debuglog = undiciDebugLog.enabled ? undiciDebugLog : websocketDebuglog;\n        diagnosticsChannel.channel('undici:client:beforeConnect').subscribe((evt)=>{\n            const { connectParams: { version, protocol, port, host } } = evt;\n            debuglog('connecting to %s%s using %s%s', host, port ? `:${port}` : '', protocol, version);\n        });\n        diagnosticsChannel.channel('undici:client:connected').subscribe((evt)=>{\n            const { connectParams: { version, protocol, port, host } } = evt;\n            debuglog('connected to %s%s using %s%s', host, port ? `:${port}` : '', protocol, version);\n        });\n        diagnosticsChannel.channel('undici:client:connectError').subscribe((evt)=>{\n            const { connectParams: { version, protocol, port, host }, error } = evt;\n            debuglog('connection to %s%s using %s%s errored - %s', host, port ? `:${port}` : '', protocol, version, error.message);\n        });\n        diagnosticsChannel.channel('undici:client:sendHeaders').subscribe((evt)=>{\n            const { request: { method, path, origin } } = evt;\n            debuglog('sending request to %s %s/%s', method, origin, path);\n        });\n    }\n    // Track all WebSocket events\n    diagnosticsChannel.channel('undici:websocket:open').subscribe((evt)=>{\n        const { address: { address, port } } = evt;\n        websocketDebuglog('connection opened %s%s', address, port ? `:${port}` : '');\n    });\n    diagnosticsChannel.channel('undici:websocket:close').subscribe((evt)=>{\n        const { websocket, code, reason } = evt;\n        websocketDebuglog('closed connection to %s - %s %s', websocket.url, code, reason);\n    });\n    diagnosticsChannel.channel('undici:websocket:socket_error').subscribe((err)=>{\n        websocketDebuglog('connection errored - %s', err.message);\n    });\n    diagnosticsChannel.channel('undici:websocket:ping').subscribe((evt)=>{\n        websocketDebuglog('ping received');\n    });\n    diagnosticsChannel.channel('undici:websocket:pong').subscribe((evt)=>{\n        websocketDebuglog('pong received');\n    });\n}\nmodule.exports = {\n    channels\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/core/diagnostics.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/core/errors.js":
/*!************************************************!*\
  !*** ./node_modules/undici/lib/core/errors.js ***!
  \************************************************/
/***/ ((module) => {

eval("\nclass UndiciError extends Error {\n    constructor(message){\n        super(message);\n        this.name = 'UndiciError';\n        this.code = 'UND_ERR';\n    }\n}\nclass ConnectTimeoutError extends UndiciError {\n    constructor(message){\n        super(message);\n        this.name = 'ConnectTimeoutError';\n        this.message = message || 'Connect Timeout Error';\n        this.code = 'UND_ERR_CONNECT_TIMEOUT';\n    }\n}\nclass HeadersTimeoutError extends UndiciError {\n    constructor(message){\n        super(message);\n        this.name = 'HeadersTimeoutError';\n        this.message = message || 'Headers Timeout Error';\n        this.code = 'UND_ERR_HEADERS_TIMEOUT';\n    }\n}\nclass HeadersOverflowError extends UndiciError {\n    constructor(message){\n        super(message);\n        this.name = 'HeadersOverflowError';\n        this.message = message || 'Headers Overflow Error';\n        this.code = 'UND_ERR_HEADERS_OVERFLOW';\n    }\n}\nclass BodyTimeoutError extends UndiciError {\n    constructor(message){\n        super(message);\n        this.name = 'BodyTimeoutError';\n        this.message = message || 'Body Timeout Error';\n        this.code = 'UND_ERR_BODY_TIMEOUT';\n    }\n}\nclass ResponseStatusCodeError extends UndiciError {\n    constructor(message, statusCode, headers, body){\n        super(message);\n        this.name = 'ResponseStatusCodeError';\n        this.message = message || 'Response Status Code Error';\n        this.code = 'UND_ERR_RESPONSE_STATUS_CODE';\n        this.body = body;\n        this.status = statusCode;\n        this.statusCode = statusCode;\n        this.headers = headers;\n    }\n}\nclass InvalidArgumentError extends UndiciError {\n    constructor(message){\n        super(message);\n        this.name = 'InvalidArgumentError';\n        this.message = message || 'Invalid Argument Error';\n        this.code = 'UND_ERR_INVALID_ARG';\n    }\n}\nclass InvalidReturnValueError extends UndiciError {\n    constructor(message){\n        super(message);\n        this.name = 'InvalidReturnValueError';\n        this.message = message || 'Invalid Return Value Error';\n        this.code = 'UND_ERR_INVALID_RETURN_VALUE';\n    }\n}\nclass AbortError extends UndiciError {\n    constructor(message){\n        super(message);\n        this.name = 'AbortError';\n        this.message = message || 'The operation was aborted';\n    }\n}\nclass RequestAbortedError extends AbortError {\n    constructor(message){\n        super(message);\n        this.name = 'AbortError';\n        this.message = message || 'Request aborted';\n        this.code = 'UND_ERR_ABORTED';\n    }\n}\nclass InformationalError extends UndiciError {\n    constructor(message){\n        super(message);\n        this.name = 'InformationalError';\n        this.message = message || 'Request information';\n        this.code = 'UND_ERR_INFO';\n    }\n}\nclass RequestContentLengthMismatchError extends UndiciError {\n    constructor(message){\n        super(message);\n        this.name = 'RequestContentLengthMismatchError';\n        this.message = message || 'Request body length does not match content-length header';\n        this.code = 'UND_ERR_REQ_CONTENT_LENGTH_MISMATCH';\n    }\n}\nclass ResponseContentLengthMismatchError extends UndiciError {\n    constructor(message){\n        super(message);\n        this.name = 'ResponseContentLengthMismatchError';\n        this.message = message || 'Response body length does not match content-length header';\n        this.code = 'UND_ERR_RES_CONTENT_LENGTH_MISMATCH';\n    }\n}\nclass ClientDestroyedError extends UndiciError {\n    constructor(message){\n        super(message);\n        this.name = 'ClientDestroyedError';\n        this.message = message || 'The client is destroyed';\n        this.code = 'UND_ERR_DESTROYED';\n    }\n}\nclass ClientClosedError extends UndiciError {\n    constructor(message){\n        super(message);\n        this.name = 'ClientClosedError';\n        this.message = message || 'The client is closed';\n        this.code = 'UND_ERR_CLOSED';\n    }\n}\nclass SocketError extends UndiciError {\n    constructor(message, socket){\n        super(message);\n        this.name = 'SocketError';\n        this.message = message || 'Socket error';\n        this.code = 'UND_ERR_SOCKET';\n        this.socket = socket;\n    }\n}\nclass NotSupportedError extends UndiciError {\n    constructor(message){\n        super(message);\n        this.name = 'NotSupportedError';\n        this.message = message || 'Not supported error';\n        this.code = 'UND_ERR_NOT_SUPPORTED';\n    }\n}\nclass BalancedPoolMissingUpstreamError extends UndiciError {\n    constructor(message){\n        super(message);\n        this.name = 'MissingUpstreamError';\n        this.message = message || 'No upstream has been added to the BalancedPool';\n        this.code = 'UND_ERR_BPL_MISSING_UPSTREAM';\n    }\n}\nclass HTTPParserError extends Error {\n    constructor(message, code, data){\n        super(message);\n        this.name = 'HTTPParserError';\n        this.code = code ? `HPE_${code}` : undefined;\n        this.data = data ? data.toString() : undefined;\n    }\n}\nclass ResponseExceededMaxSizeError extends UndiciError {\n    constructor(message){\n        super(message);\n        this.name = 'ResponseExceededMaxSizeError';\n        this.message = message || 'Response content exceeded max size';\n        this.code = 'UND_ERR_RES_EXCEEDED_MAX_SIZE';\n    }\n}\nclass RequestRetryError extends UndiciError {\n    constructor(message, code, { headers, data }){\n        super(message);\n        this.name = 'RequestRetryError';\n        this.message = message || 'Request retry error';\n        this.code = 'UND_ERR_REQ_RETRY';\n        this.statusCode = code;\n        this.data = data;\n        this.headers = headers;\n    }\n}\nclass SecureProxyConnectionError extends UndiciError {\n    constructor(cause, message, options){\n        super(message, {\n            cause,\n            ...options ?? {}\n        });\n        this.name = 'SecureProxyConnectionError';\n        this.message = message || 'Secure Proxy Connection failed';\n        this.code = 'UND_ERR_PRX_TLS';\n        this.cause = cause;\n    }\n}\nmodule.exports = {\n    AbortError,\n    HTTPParserError,\n    UndiciError,\n    HeadersTimeoutError,\n    HeadersOverflowError,\n    BodyTimeoutError,\n    RequestContentLengthMismatchError,\n    ConnectTimeoutError,\n    ResponseStatusCodeError,\n    InvalidArgumentError,\n    InvalidReturnValueError,\n    RequestAbortedError,\n    ClientDestroyedError,\n    ClientClosedError,\n    InformationalError,\n    SocketError,\n    NotSupportedError,\n    ResponseContentLengthMismatchError,\n    BalancedPoolMissingUpstreamError,\n    ResponseExceededMaxSizeError,\n    RequestRetryError,\n    SecureProxyConnectionError\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/core/errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/core/request.js":
/*!*************************************************!*\
  !*** ./node_modules/undici/lib/core/request.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { InvalidArgumentError, NotSupportedError } = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst assert = __webpack_require__(/*! node:assert */ \"node:assert\");\nconst { isValidHTTPToken, isValidHeaderValue, isStream, destroy, isBuffer, isFormDataLike, isIterable, isBlobLike, buildURL, validateHandler, getServerName, normalizedMethodRecords } = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst { channels } = __webpack_require__(/*! ./diagnostics.js */ \"(ssr)/./node_modules/undici/lib/core/diagnostics.js\");\nconst { headerNameLowerCasedRecord } = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/undici/lib/core/constants.js\");\n// Verifies that a given path is valid does not contain control chars \\x00 to \\x20\nconst invalidPathRegex = /[^\\u0021-\\u00ff]/;\nconst kHandler = Symbol('handler');\nclass Request {\n    constructor(origin, { path, method, body, headers, query, idempotent, blocking, upgrade, headersTimeout, bodyTimeout, reset, throwOnError, expectContinue, servername }, handler){\n        if (typeof path !== 'string') {\n            throw new InvalidArgumentError('path must be a string');\n        } else if (path[0] !== '/' && !(path.startsWith('http://') || path.startsWith('https://')) && method !== 'CONNECT') {\n            throw new InvalidArgumentError('path must be an absolute URL or start with a slash');\n        } else if (invalidPathRegex.test(path)) {\n            throw new InvalidArgumentError('invalid request path');\n        }\n        if (typeof method !== 'string') {\n            throw new InvalidArgumentError('method must be a string');\n        } else if (normalizedMethodRecords[method] === undefined && !isValidHTTPToken(method)) {\n            throw new InvalidArgumentError('invalid request method');\n        }\n        if (upgrade && typeof upgrade !== 'string') {\n            throw new InvalidArgumentError('upgrade must be a string');\n        }\n        if (headersTimeout != null && (!Number.isFinite(headersTimeout) || headersTimeout < 0)) {\n            throw new InvalidArgumentError('invalid headersTimeout');\n        }\n        if (bodyTimeout != null && (!Number.isFinite(bodyTimeout) || bodyTimeout < 0)) {\n            throw new InvalidArgumentError('invalid bodyTimeout');\n        }\n        if (reset != null && typeof reset !== 'boolean') {\n            throw new InvalidArgumentError('invalid reset');\n        }\n        if (expectContinue != null && typeof expectContinue !== 'boolean') {\n            throw new InvalidArgumentError('invalid expectContinue');\n        }\n        this.headersTimeout = headersTimeout;\n        this.bodyTimeout = bodyTimeout;\n        this.throwOnError = throwOnError === true;\n        this.method = method;\n        this.abort = null;\n        if (body == null) {\n            this.body = null;\n        } else if (isStream(body)) {\n            this.body = body;\n            const rState = this.body._readableState;\n            if (!rState || !rState.autoDestroy) {\n                this.endHandler = function autoDestroy() {\n                    destroy(this);\n                };\n                this.body.on('end', this.endHandler);\n            }\n            this.errorHandler = (err)=>{\n                if (this.abort) {\n                    this.abort(err);\n                } else {\n                    this.error = err;\n                }\n            };\n            this.body.on('error', this.errorHandler);\n        } else if (isBuffer(body)) {\n            this.body = body.byteLength ? body : null;\n        } else if (ArrayBuffer.isView(body)) {\n            this.body = body.buffer.byteLength ? Buffer.from(body.buffer, body.byteOffset, body.byteLength) : null;\n        } else if (body instanceof ArrayBuffer) {\n            this.body = body.byteLength ? Buffer.from(body) : null;\n        } else if (typeof body === 'string') {\n            this.body = body.length ? Buffer.from(body) : null;\n        } else if (isFormDataLike(body) || isIterable(body) || isBlobLike(body)) {\n            this.body = body;\n        } else {\n            throw new InvalidArgumentError('body must be a string, a Buffer, a Readable stream, an iterable, or an async iterable');\n        }\n        this.completed = false;\n        this.aborted = false;\n        this.upgrade = upgrade || null;\n        this.path = query ? buildURL(path, query) : path;\n        this.origin = origin;\n        this.idempotent = idempotent == null ? method === 'HEAD' || method === 'GET' : idempotent;\n        this.blocking = blocking == null ? false : blocking;\n        this.reset = reset == null ? null : reset;\n        this.host = null;\n        this.contentLength = null;\n        this.contentType = null;\n        this.headers = [];\n        // Only for H2\n        this.expectContinue = expectContinue != null ? expectContinue : false;\n        if (Array.isArray(headers)) {\n            if (headers.length % 2 !== 0) {\n                throw new InvalidArgumentError('headers array must be even');\n            }\n            for(let i = 0; i < headers.length; i += 2){\n                processHeader(this, headers[i], headers[i + 1]);\n            }\n        } else if (headers && typeof headers === 'object') {\n            if (headers[Symbol.iterator]) {\n                for (const header of headers){\n                    if (!Array.isArray(header) || header.length !== 2) {\n                        throw new InvalidArgumentError('headers must be in key-value pair format');\n                    }\n                    processHeader(this, header[0], header[1]);\n                }\n            } else {\n                const keys = Object.keys(headers);\n                for(let i = 0; i < keys.length; ++i){\n                    processHeader(this, keys[i], headers[keys[i]]);\n                }\n            }\n        } else if (headers != null) {\n            throw new InvalidArgumentError('headers must be an object or an array');\n        }\n        validateHandler(handler, method, upgrade);\n        this.servername = servername || getServerName(this.host);\n        this[kHandler] = handler;\n        if (channels.create.hasSubscribers) {\n            channels.create.publish({\n                request: this\n            });\n        }\n    }\n    onBodySent(chunk) {\n        if (this[kHandler].onBodySent) {\n            try {\n                return this[kHandler].onBodySent(chunk);\n            } catch (err) {\n                this.abort(err);\n            }\n        }\n    }\n    onRequestSent() {\n        if (channels.bodySent.hasSubscribers) {\n            channels.bodySent.publish({\n                request: this\n            });\n        }\n        if (this[kHandler].onRequestSent) {\n            try {\n                return this[kHandler].onRequestSent();\n            } catch (err) {\n                this.abort(err);\n            }\n        }\n    }\n    onConnect(abort) {\n        assert(!this.aborted);\n        assert(!this.completed);\n        if (this.error) {\n            abort(this.error);\n        } else {\n            this.abort = abort;\n            return this[kHandler].onConnect(abort);\n        }\n    }\n    onResponseStarted() {\n        return this[kHandler].onResponseStarted?.();\n    }\n    onHeaders(statusCode, headers, resume, statusText) {\n        assert(!this.aborted);\n        assert(!this.completed);\n        if (channels.headers.hasSubscribers) {\n            channels.headers.publish({\n                request: this,\n                response: {\n                    statusCode,\n                    headers,\n                    statusText\n                }\n            });\n        }\n        try {\n            return this[kHandler].onHeaders(statusCode, headers, resume, statusText);\n        } catch (err) {\n            this.abort(err);\n        }\n    }\n    onData(chunk) {\n        assert(!this.aborted);\n        assert(!this.completed);\n        try {\n            return this[kHandler].onData(chunk);\n        } catch (err) {\n            this.abort(err);\n            return false;\n        }\n    }\n    onUpgrade(statusCode, headers, socket) {\n        assert(!this.aborted);\n        assert(!this.completed);\n        return this[kHandler].onUpgrade(statusCode, headers, socket);\n    }\n    onComplete(trailers) {\n        this.onFinally();\n        assert(!this.aborted);\n        this.completed = true;\n        if (channels.trailers.hasSubscribers) {\n            channels.trailers.publish({\n                request: this,\n                trailers\n            });\n        }\n        try {\n            return this[kHandler].onComplete(trailers);\n        } catch (err) {\n            // TODO (fix): This might be a bad idea?\n            this.onError(err);\n        }\n    }\n    onError(error) {\n        this.onFinally();\n        if (channels.error.hasSubscribers) {\n            channels.error.publish({\n                request: this,\n                error\n            });\n        }\n        if (this.aborted) {\n            return;\n        }\n        this.aborted = true;\n        return this[kHandler].onError(error);\n    }\n    onFinally() {\n        if (this.errorHandler) {\n            this.body.off('error', this.errorHandler);\n            this.errorHandler = null;\n        }\n        if (this.endHandler) {\n            this.body.off('end', this.endHandler);\n            this.endHandler = null;\n        }\n    }\n    addHeader(key, value) {\n        processHeader(this, key, value);\n        return this;\n    }\n}\nfunction processHeader(request, key, val) {\n    if (val && typeof val === 'object' && !Array.isArray(val)) {\n        throw new InvalidArgumentError(`invalid ${key} header`);\n    } else if (val === undefined) {\n        return;\n    }\n    let headerName = headerNameLowerCasedRecord[key];\n    if (headerName === undefined) {\n        headerName = key.toLowerCase();\n        if (headerNameLowerCasedRecord[headerName] === undefined && !isValidHTTPToken(headerName)) {\n            throw new InvalidArgumentError('invalid header key');\n        }\n    }\n    if (Array.isArray(val)) {\n        const arr = [];\n        for(let i = 0; i < val.length; i++){\n            if (typeof val[i] === 'string') {\n                if (!isValidHeaderValue(val[i])) {\n                    throw new InvalidArgumentError(`invalid ${key} header`);\n                }\n                arr.push(val[i]);\n            } else if (val[i] === null) {\n                arr.push('');\n            } else if (typeof val[i] === 'object') {\n                throw new InvalidArgumentError(`invalid ${key} header`);\n            } else {\n                arr.push(`${val[i]}`);\n            }\n        }\n        val = arr;\n    } else if (typeof val === 'string') {\n        if (!isValidHeaderValue(val)) {\n            throw new InvalidArgumentError(`invalid ${key} header`);\n        }\n    } else if (val === null) {\n        val = '';\n    } else {\n        val = `${val}`;\n    }\n    if (request.host === null && headerName === 'host') {\n        if (typeof val !== 'string') {\n            throw new InvalidArgumentError('invalid host header');\n        }\n        // Consumed by Client\n        request.host = val;\n    } else if (request.contentLength === null && headerName === 'content-length') {\n        request.contentLength = parseInt(val, 10);\n        if (!Number.isFinite(request.contentLength)) {\n            throw new InvalidArgumentError('invalid content-length header');\n        }\n    } else if (request.contentType === null && headerName === 'content-type') {\n        request.contentType = val;\n        request.headers.push(key, val);\n    } else if (headerName === 'transfer-encoding' || headerName === 'keep-alive' || headerName === 'upgrade') {\n        throw new InvalidArgumentError(`invalid ${headerName} header`);\n    } else if (headerName === 'connection') {\n        const value = typeof val === 'string' ? val.toLowerCase() : null;\n        if (value !== 'close' && value !== 'keep-alive') {\n            throw new InvalidArgumentError('invalid connection header');\n        }\n        if (value === 'close') {\n            request.reset = true;\n        }\n    } else if (headerName === 'expect') {\n        throw new NotSupportedError('expect header not supported');\n    } else {\n        request.headers.push(key, val);\n    }\n}\nmodule.exports = Request;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/core/request.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/core/symbols.js":
/*!*************************************************!*\
  !*** ./node_modules/undici/lib/core/symbols.js ***!
  \*************************************************/
/***/ ((module) => {

eval("\nmodule.exports = {\n    kClose: Symbol('close'),\n    kDestroy: Symbol('destroy'),\n    kDispatch: Symbol('dispatch'),\n    kUrl: Symbol('url'),\n    kWriting: Symbol('writing'),\n    kResuming: Symbol('resuming'),\n    kQueue: Symbol('queue'),\n    kConnect: Symbol('connect'),\n    kConnecting: Symbol('connecting'),\n    kKeepAliveDefaultTimeout: Symbol('default keep alive timeout'),\n    kKeepAliveMaxTimeout: Symbol('max keep alive timeout'),\n    kKeepAliveTimeoutThreshold: Symbol('keep alive timeout threshold'),\n    kKeepAliveTimeoutValue: Symbol('keep alive timeout'),\n    kKeepAlive: Symbol('keep alive'),\n    kHeadersTimeout: Symbol('headers timeout'),\n    kBodyTimeout: Symbol('body timeout'),\n    kServerName: Symbol('server name'),\n    kLocalAddress: Symbol('local address'),\n    kHost: Symbol('host'),\n    kNoRef: Symbol('no ref'),\n    kBodyUsed: Symbol('used'),\n    kBody: Symbol('abstracted request body'),\n    kRunning: Symbol('running'),\n    kBlocking: Symbol('blocking'),\n    kPending: Symbol('pending'),\n    kSize: Symbol('size'),\n    kBusy: Symbol('busy'),\n    kQueued: Symbol('queued'),\n    kFree: Symbol('free'),\n    kConnected: Symbol('connected'),\n    kClosed: Symbol('closed'),\n    kNeedDrain: Symbol('need drain'),\n    kReset: Symbol('reset'),\n    kDestroyed: Symbol.for('nodejs.stream.destroyed'),\n    kResume: Symbol('resume'),\n    kOnError: Symbol('on error'),\n    kMaxHeadersSize: Symbol('max headers size'),\n    kRunningIdx: Symbol('running index'),\n    kPendingIdx: Symbol('pending index'),\n    kError: Symbol('error'),\n    kClients: Symbol('clients'),\n    kClient: Symbol('client'),\n    kParser: Symbol('parser'),\n    kOnDestroyed: Symbol('destroy callbacks'),\n    kPipelining: Symbol('pipelining'),\n    kSocket: Symbol('socket'),\n    kHostHeader: Symbol('host header'),\n    kConnector: Symbol('connector'),\n    kStrictContentLength: Symbol('strict content length'),\n    kMaxRedirections: Symbol('maxRedirections'),\n    kMaxRequests: Symbol('maxRequestsPerClient'),\n    kProxy: Symbol('proxy agent options'),\n    kCounter: Symbol('socket request counter'),\n    kInterceptors: Symbol('dispatch interceptors'),\n    kMaxResponseSize: Symbol('max response size'),\n    kHTTP2Session: Symbol('http2Session'),\n    kHTTP2SessionState: Symbol('http2Session state'),\n    kRetryHandlerDefaultRetry: Symbol('retry agent default retry'),\n    kConstruct: Symbol('constructable'),\n    kListeners: Symbol('listeners'),\n    kHTTPContext: Symbol('http context'),\n    kMaxConcurrentStreams: Symbol('max concurrent streams'),\n    kNoProxyAgent: Symbol('no proxy agent'),\n    kHttpProxyAgent: Symbol('http proxy agent'),\n    kHttpsProxyAgent: Symbol('https proxy agent')\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9jb3JlL3N5bWJvbHMuanMiLCJtYXBwaW5ncyI6IjtBQUFBQSxPQUFPQyxPQUFPLEdBQUc7SUFDZkMsUUFBUUMsT0FBTztJQUNmQyxVQUFVRCxPQUFPO0lBQ2pCRSxXQUFXRixPQUFPO0lBQ2xCRyxNQUFNSCxPQUFPO0lBQ2JJLFVBQVVKLE9BQU87SUFDakJLLFdBQVdMLE9BQU87SUFDbEJNLFFBQVFOLE9BQU87SUFDZk8sVUFBVVAsT0FBTztJQUNqQlEsYUFBYVIsT0FBTztJQUNwQlMsMEJBQTBCVCxPQUFPO0lBQ2pDVSxzQkFBc0JWLE9BQU87SUFDN0JXLDRCQUE0QlgsT0FBTztJQUNuQ1ksd0JBQXdCWixPQUFPO0lBQy9CYSxZQUFZYixPQUFPO0lBQ25CYyxpQkFBaUJkLE9BQU87SUFDeEJlLGNBQWNmLE9BQU87SUFDckJnQixhQUFhaEIsT0FBTztJQUNwQmlCLGVBQWVqQixPQUFPO0lBQ3RCa0IsT0FBT2xCLE9BQU87SUFDZG1CLFFBQVFuQixPQUFPO0lBQ2ZvQixXQUFXcEIsT0FBTztJQUNsQnFCLE9BQU9yQixPQUFPO0lBQ2RzQixVQUFVdEIsT0FBTztJQUNqQnVCLFdBQVd2QixPQUFPO0lBQ2xCd0IsVUFBVXhCLE9BQU87SUFDakJ5QixPQUFPekIsT0FBTztJQUNkMEIsT0FBTzFCLE9BQU87SUFDZDJCLFNBQVMzQixPQUFPO0lBQ2hCNEIsT0FBTzVCLE9BQU87SUFDZDZCLFlBQVk3QixPQUFPO0lBQ25COEIsU0FBUzlCLE9BQU87SUFDaEIrQixZQUFZL0IsT0FBTztJQUNuQmdDLFFBQVFoQyxPQUFPO0lBQ2ZpQyxZQUFZakMsT0FBT2tDLEdBQUcsQ0FBQztJQUN2QkMsU0FBU25DLE9BQU87SUFDaEJvQyxVQUFVcEMsT0FBTztJQUNqQnFDLGlCQUFpQnJDLE9BQU87SUFDeEJzQyxhQUFhdEMsT0FBTztJQUNwQnVDLGFBQWF2QyxPQUFPO0lBQ3BCd0MsUUFBUXhDLE9BQU87SUFDZnlDLFVBQVV6QyxPQUFPO0lBQ2pCMEMsU0FBUzFDLE9BQU87SUFDaEIyQyxTQUFTM0MsT0FBTztJQUNoQjRDLGNBQWM1QyxPQUFPO0lBQ3JCNkMsYUFBYTdDLE9BQU87SUFDcEI4QyxTQUFTOUMsT0FBTztJQUNoQitDLGFBQWEvQyxPQUFPO0lBQ3BCZ0QsWUFBWWhELE9BQU87SUFDbkJpRCxzQkFBc0JqRCxPQUFPO0lBQzdCa0Qsa0JBQWtCbEQsT0FBTztJQUN6Qm1ELGNBQWNuRCxPQUFPO0lBQ3JCb0QsUUFBUXBELE9BQU87SUFDZnFELFVBQVVyRCxPQUFPO0lBQ2pCc0QsZUFBZXRELE9BQU87SUFDdEJ1RCxrQkFBa0J2RCxPQUFPO0lBQ3pCd0QsZUFBZXhELE9BQU87SUFDdEJ5RCxvQkFBb0J6RCxPQUFPO0lBQzNCMEQsMkJBQTJCMUQsT0FBTztJQUNsQzJELFlBQVkzRCxPQUFPO0lBQ25CNEQsWUFBWTVELE9BQU87SUFDbkI2RCxjQUFjN0QsT0FBTztJQUNyQjhELHVCQUF1QjlELE9BQU87SUFDOUIrRCxlQUFlL0QsT0FBTztJQUN0QmdFLGlCQUFpQmhFLE9BQU87SUFDeEJpRSxrQkFBa0JqRSxPQUFPO0FBQzNCIiwic291cmNlcyI6WyJEOlxcSGVsaXhcXG5vZGVfbW9kdWxlc1xcdW5kaWNpXFxsaWJcXGNvcmVcXHN5bWJvbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7XG4gIGtDbG9zZTogU3ltYm9sKCdjbG9zZScpLFxuICBrRGVzdHJveTogU3ltYm9sKCdkZXN0cm95JyksXG4gIGtEaXNwYXRjaDogU3ltYm9sKCdkaXNwYXRjaCcpLFxuICBrVXJsOiBTeW1ib2woJ3VybCcpLFxuICBrV3JpdGluZzogU3ltYm9sKCd3cml0aW5nJyksXG4gIGtSZXN1bWluZzogU3ltYm9sKCdyZXN1bWluZycpLFxuICBrUXVldWU6IFN5bWJvbCgncXVldWUnKSxcbiAga0Nvbm5lY3Q6IFN5bWJvbCgnY29ubmVjdCcpLFxuICBrQ29ubmVjdGluZzogU3ltYm9sKCdjb25uZWN0aW5nJyksXG4gIGtLZWVwQWxpdmVEZWZhdWx0VGltZW91dDogU3ltYm9sKCdkZWZhdWx0IGtlZXAgYWxpdmUgdGltZW91dCcpLFxuICBrS2VlcEFsaXZlTWF4VGltZW91dDogU3ltYm9sKCdtYXgga2VlcCBhbGl2ZSB0aW1lb3V0JyksXG4gIGtLZWVwQWxpdmVUaW1lb3V0VGhyZXNob2xkOiBTeW1ib2woJ2tlZXAgYWxpdmUgdGltZW91dCB0aHJlc2hvbGQnKSxcbiAga0tlZXBBbGl2ZVRpbWVvdXRWYWx1ZTogU3ltYm9sKCdrZWVwIGFsaXZlIHRpbWVvdXQnKSxcbiAga0tlZXBBbGl2ZTogU3ltYm9sKCdrZWVwIGFsaXZlJyksXG4gIGtIZWFkZXJzVGltZW91dDogU3ltYm9sKCdoZWFkZXJzIHRpbWVvdXQnKSxcbiAga0JvZHlUaW1lb3V0OiBTeW1ib2woJ2JvZHkgdGltZW91dCcpLFxuICBrU2VydmVyTmFtZTogU3ltYm9sKCdzZXJ2ZXIgbmFtZScpLFxuICBrTG9jYWxBZGRyZXNzOiBTeW1ib2woJ2xvY2FsIGFkZHJlc3MnKSxcbiAga0hvc3Q6IFN5bWJvbCgnaG9zdCcpLFxuICBrTm9SZWY6IFN5bWJvbCgnbm8gcmVmJyksXG4gIGtCb2R5VXNlZDogU3ltYm9sKCd1c2VkJyksXG4gIGtCb2R5OiBTeW1ib2woJ2Fic3RyYWN0ZWQgcmVxdWVzdCBib2R5JyksXG4gIGtSdW5uaW5nOiBTeW1ib2woJ3J1bm5pbmcnKSxcbiAga0Jsb2NraW5nOiBTeW1ib2woJ2Jsb2NraW5nJyksXG4gIGtQZW5kaW5nOiBTeW1ib2woJ3BlbmRpbmcnKSxcbiAga1NpemU6IFN5bWJvbCgnc2l6ZScpLFxuICBrQnVzeTogU3ltYm9sKCdidXN5JyksXG4gIGtRdWV1ZWQ6IFN5bWJvbCgncXVldWVkJyksXG4gIGtGcmVlOiBTeW1ib2woJ2ZyZWUnKSxcbiAga0Nvbm5lY3RlZDogU3ltYm9sKCdjb25uZWN0ZWQnKSxcbiAga0Nsb3NlZDogU3ltYm9sKCdjbG9zZWQnKSxcbiAga05lZWREcmFpbjogU3ltYm9sKCduZWVkIGRyYWluJyksXG4gIGtSZXNldDogU3ltYm9sKCdyZXNldCcpLFxuICBrRGVzdHJveWVkOiBTeW1ib2wuZm9yKCdub2RlanMuc3RyZWFtLmRlc3Ryb3llZCcpLFxuICBrUmVzdW1lOiBTeW1ib2woJ3Jlc3VtZScpLFxuICBrT25FcnJvcjogU3ltYm9sKCdvbiBlcnJvcicpLFxuICBrTWF4SGVhZGVyc1NpemU6IFN5bWJvbCgnbWF4IGhlYWRlcnMgc2l6ZScpLFxuICBrUnVubmluZ0lkeDogU3ltYm9sKCdydW5uaW5nIGluZGV4JyksXG4gIGtQZW5kaW5nSWR4OiBTeW1ib2woJ3BlbmRpbmcgaW5kZXgnKSxcbiAga0Vycm9yOiBTeW1ib2woJ2Vycm9yJyksXG4gIGtDbGllbnRzOiBTeW1ib2woJ2NsaWVudHMnKSxcbiAga0NsaWVudDogU3ltYm9sKCdjbGllbnQnKSxcbiAga1BhcnNlcjogU3ltYm9sKCdwYXJzZXInKSxcbiAga09uRGVzdHJveWVkOiBTeW1ib2woJ2Rlc3Ryb3kgY2FsbGJhY2tzJyksXG4gIGtQaXBlbGluaW5nOiBTeW1ib2woJ3BpcGVsaW5pbmcnKSxcbiAga1NvY2tldDogU3ltYm9sKCdzb2NrZXQnKSxcbiAga0hvc3RIZWFkZXI6IFN5bWJvbCgnaG9zdCBoZWFkZXInKSxcbiAga0Nvbm5lY3RvcjogU3ltYm9sKCdjb25uZWN0b3InKSxcbiAga1N0cmljdENvbnRlbnRMZW5ndGg6IFN5bWJvbCgnc3RyaWN0IGNvbnRlbnQgbGVuZ3RoJyksXG4gIGtNYXhSZWRpcmVjdGlvbnM6IFN5bWJvbCgnbWF4UmVkaXJlY3Rpb25zJyksXG4gIGtNYXhSZXF1ZXN0czogU3ltYm9sKCdtYXhSZXF1ZXN0c1BlckNsaWVudCcpLFxuICBrUHJveHk6IFN5bWJvbCgncHJveHkgYWdlbnQgb3B0aW9ucycpLFxuICBrQ291bnRlcjogU3ltYm9sKCdzb2NrZXQgcmVxdWVzdCBjb3VudGVyJyksXG4gIGtJbnRlcmNlcHRvcnM6IFN5bWJvbCgnZGlzcGF0Y2ggaW50ZXJjZXB0b3JzJyksXG4gIGtNYXhSZXNwb25zZVNpemU6IFN5bWJvbCgnbWF4IHJlc3BvbnNlIHNpemUnKSxcbiAga0hUVFAyU2Vzc2lvbjogU3ltYm9sKCdodHRwMlNlc3Npb24nKSxcbiAga0hUVFAyU2Vzc2lvblN0YXRlOiBTeW1ib2woJ2h0dHAyU2Vzc2lvbiBzdGF0ZScpLFxuICBrUmV0cnlIYW5kbGVyRGVmYXVsdFJldHJ5OiBTeW1ib2woJ3JldHJ5IGFnZW50IGRlZmF1bHQgcmV0cnknKSxcbiAga0NvbnN0cnVjdDogU3ltYm9sKCdjb25zdHJ1Y3RhYmxlJyksXG4gIGtMaXN0ZW5lcnM6IFN5bWJvbCgnbGlzdGVuZXJzJyksXG4gIGtIVFRQQ29udGV4dDogU3ltYm9sKCdodHRwIGNvbnRleHQnKSxcbiAga01heENvbmN1cnJlbnRTdHJlYW1zOiBTeW1ib2woJ21heCBjb25jdXJyZW50IHN0cmVhbXMnKSxcbiAga05vUHJveHlBZ2VudDogU3ltYm9sKCdubyBwcm94eSBhZ2VudCcpLFxuICBrSHR0cFByb3h5QWdlbnQ6IFN5bWJvbCgnaHR0cCBwcm94eSBhZ2VudCcpLFxuICBrSHR0cHNQcm94eUFnZW50OiBTeW1ib2woJ2h0dHBzIHByb3h5IGFnZW50Jylcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwia0Nsb3NlIiwiU3ltYm9sIiwia0Rlc3Ryb3kiLCJrRGlzcGF0Y2giLCJrVXJsIiwia1dyaXRpbmciLCJrUmVzdW1pbmciLCJrUXVldWUiLCJrQ29ubmVjdCIsImtDb25uZWN0aW5nIiwia0tlZXBBbGl2ZURlZmF1bHRUaW1lb3V0Iiwia0tlZXBBbGl2ZU1heFRpbWVvdXQiLCJrS2VlcEFsaXZlVGltZW91dFRocmVzaG9sZCIsImtLZWVwQWxpdmVUaW1lb3V0VmFsdWUiLCJrS2VlcEFsaXZlIiwia0hlYWRlcnNUaW1lb3V0Iiwia0JvZHlUaW1lb3V0Iiwia1NlcnZlck5hbWUiLCJrTG9jYWxBZGRyZXNzIiwia0hvc3QiLCJrTm9SZWYiLCJrQm9keVVzZWQiLCJrQm9keSIsImtSdW5uaW5nIiwia0Jsb2NraW5nIiwia1BlbmRpbmciLCJrU2l6ZSIsImtCdXN5Iiwia1F1ZXVlZCIsImtGcmVlIiwia0Nvbm5lY3RlZCIsImtDbG9zZWQiLCJrTmVlZERyYWluIiwia1Jlc2V0Iiwia0Rlc3Ryb3llZCIsImZvciIsImtSZXN1bWUiLCJrT25FcnJvciIsImtNYXhIZWFkZXJzU2l6ZSIsImtSdW5uaW5nSWR4Iiwia1BlbmRpbmdJZHgiLCJrRXJyb3IiLCJrQ2xpZW50cyIsImtDbGllbnQiLCJrUGFyc2VyIiwia09uRGVzdHJveWVkIiwia1BpcGVsaW5pbmciLCJrU29ja2V0Iiwia0hvc3RIZWFkZXIiLCJrQ29ubmVjdG9yIiwia1N0cmljdENvbnRlbnRMZW5ndGgiLCJrTWF4UmVkaXJlY3Rpb25zIiwia01heFJlcXVlc3RzIiwia1Byb3h5Iiwia0NvdW50ZXIiLCJrSW50ZXJjZXB0b3JzIiwia01heFJlc3BvbnNlU2l6ZSIsImtIVFRQMlNlc3Npb24iLCJrSFRUUDJTZXNzaW9uU3RhdGUiLCJrUmV0cnlIYW5kbGVyRGVmYXVsdFJldHJ5Iiwia0NvbnN0cnVjdCIsImtMaXN0ZW5lcnMiLCJrSFRUUENvbnRleHQiLCJrTWF4Q29uY3VycmVudFN0cmVhbXMiLCJrTm9Qcm94eUFnZW50Iiwia0h0dHBQcm94eUFnZW50Iiwia0h0dHBzUHJveHlBZ2VudCJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/core/symbols.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/core/tree.js":
/*!**********************************************!*\
  !*** ./node_modules/undici/lib/core/tree.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { wellknownHeaderNames, headerNameLowerCasedRecord } = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/undici/lib/core/constants.js\");\nclass TstNode {\n    /**\n   * @param {string} key\n   * @param {any} value\n   * @param {number} index\n   */ constructor(key, value, index){\n        /** @type {any} */ this.value = null;\n        /** @type {null | TstNode} */ this.left = null;\n        /** @type {null | TstNode} */ this.middle = null;\n        /** @type {null | TstNode} */ this.right = null;\n        if (index === undefined || index >= key.length) {\n            throw new TypeError('Unreachable');\n        }\n        const code = this.code = key.charCodeAt(index);\n        // check code is ascii string\n        if (code > 0x7F) {\n            throw new TypeError('key must be ascii string');\n        }\n        if (key.length !== ++index) {\n            this.middle = new TstNode(key, value, index);\n        } else {\n            this.value = value;\n        }\n    }\n    /**\n   * @param {string} key\n   * @param {any} value\n   */ add(key, value) {\n        const length = key.length;\n        if (length === 0) {\n            throw new TypeError('Unreachable');\n        }\n        let index = 0;\n        let node = this;\n        while(true){\n            const code = key.charCodeAt(index);\n            // check code is ascii string\n            if (code > 0x7F) {\n                throw new TypeError('key must be ascii string');\n            }\n            if (node.code === code) {\n                if (length === ++index) {\n                    node.value = value;\n                    break;\n                } else if (node.middle !== null) {\n                    node = node.middle;\n                } else {\n                    node.middle = new TstNode(key, value, index);\n                    break;\n                }\n            } else if (node.code < code) {\n                if (node.left !== null) {\n                    node = node.left;\n                } else {\n                    node.left = new TstNode(key, value, index);\n                    break;\n                }\n            } else if (node.right !== null) {\n                node = node.right;\n            } else {\n                node.right = new TstNode(key, value, index);\n                break;\n            }\n        }\n    }\n    /**\n   * @param {Uint8Array} key\n   * @return {TstNode | null}\n   */ search(key) {\n        const keylength = key.length;\n        let index = 0;\n        let node = this;\n        while(node !== null && index < keylength){\n            let code = key[index];\n            // A-Z\n            // First check if it is bigger than 0x5a.\n            // Lowercase letters have higher char codes than uppercase ones.\n            // Also we assume that headers will mostly contain lowercase characters.\n            if (code <= 0x5a && code >= 0x41) {\n                // Lowercase for uppercase.\n                code |= 32;\n            }\n            while(node !== null){\n                if (code === node.code) {\n                    if (keylength === ++index) {\n                        // Returns Node since it is the last key.\n                        return node;\n                    }\n                    node = node.middle;\n                    break;\n                }\n                node = node.code < code ? node.left : node.right;\n            }\n        }\n        return null;\n    }\n}\nclass TernarySearchTree {\n    /**\n   * @param {string} key\n   * @param {any} value\n   * */ insert(key, value) {\n        if (this.node === null) {\n            this.node = new TstNode(key, value, 0);\n        } else {\n            this.node.add(key, value);\n        }\n    }\n    /**\n   * @param {Uint8Array} key\n   * @return {any}\n   */ lookup(key) {\n        return this.node?.search(key)?.value ?? null;\n    }\n    constructor(){\n        /** @type {TstNode | null} */ this.node = null;\n    }\n}\nconst tree = new TernarySearchTree();\nfor(let i = 0; i < wellknownHeaderNames.length; ++i){\n    const key = headerNameLowerCasedRecord[wellknownHeaderNames[i]];\n    tree.insert(key, key);\n}\nmodule.exports = {\n    TernarySearchTree,\n    tree\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/core/tree.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/core/util.js":
/*!**********************************************!*\
  !*** ./node_modules/undici/lib/core/util.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst assert = __webpack_require__(/*! node:assert */ \"node:assert\");\nconst { kDestroyed, kBodyUsed, kListeners, kBody } = __webpack_require__(/*! ./symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst { IncomingMessage } = __webpack_require__(/*! node:http */ \"node:http\");\nconst stream = __webpack_require__(/*! node:stream */ \"node:stream\");\nconst net = __webpack_require__(/*! node:net */ \"node:net\");\nconst { Blob } = __webpack_require__(/*! node:buffer */ \"node:buffer\");\nconst nodeUtil = __webpack_require__(/*! node:util */ \"node:util\");\nconst { stringify } = __webpack_require__(/*! node:querystring */ \"node:querystring\");\nconst { EventEmitter: EE } = __webpack_require__(/*! node:events */ \"node:events\");\nconst { InvalidArgumentError } = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst { headerNameLowerCasedRecord } = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/undici/lib/core/constants.js\");\nconst { tree } = __webpack_require__(/*! ./tree */ \"(ssr)/./node_modules/undici/lib/core/tree.js\");\nconst [nodeMajor, nodeMinor] = process.versions.node.split('.').map((v)=>Number(v));\nclass BodyAsyncIterable {\n    constructor(body){\n        this[kBody] = body;\n        this[kBodyUsed] = false;\n    }\n    async *[Symbol.asyncIterator]() {\n        assert(!this[kBodyUsed], 'disturbed');\n        this[kBodyUsed] = true;\n        yield* this[kBody];\n    }\n}\nfunction wrapRequestBody(body) {\n    if (isStream(body)) {\n        // TODO (fix): Provide some way for the user to cache the file to e.g. /tmp\n        // so that it can be dispatched again?\n        // TODO (fix): Do we need 100-expect support to provide a way to do this properly?\n        if (bodyLength(body) === 0) {\n            body.on('data', function() {\n                assert(false);\n            });\n        }\n        if (typeof body.readableDidRead !== 'boolean') {\n            body[kBodyUsed] = false;\n            EE.prototype.on.call(body, 'data', function() {\n                this[kBodyUsed] = true;\n            });\n        }\n        return body;\n    } else if (body && typeof body.pipeTo === 'function') {\n        // TODO (fix): We can't access ReadableStream internal state\n        // to determine whether or not it has been disturbed. This is just\n        // a workaround.\n        return new BodyAsyncIterable(body);\n    } else if (body && typeof body !== 'string' && !ArrayBuffer.isView(body) && isIterable(body)) {\n        // TODO: Should we allow re-using iterable if !this.opts.idempotent\n        // or through some other flag?\n        return new BodyAsyncIterable(body);\n    } else {\n        return body;\n    }\n}\nfunction nop() {}\nfunction isStream(obj) {\n    return obj && typeof obj === 'object' && typeof obj.pipe === 'function' && typeof obj.on === 'function';\n}\n// based on https://github.com/node-fetch/fetch-blob/blob/8ab587d34080de94140b54f07168451e7d0b655e/index.js#L229-L241 (MIT License)\nfunction isBlobLike(object) {\n    if (object === null) {\n        return false;\n    } else if (object instanceof Blob) {\n        return true;\n    } else if (typeof object !== 'object') {\n        return false;\n    } else {\n        const sTag = object[Symbol.toStringTag];\n        return (sTag === 'Blob' || sTag === 'File') && ('stream' in object && typeof object.stream === 'function' || 'arrayBuffer' in object && typeof object.arrayBuffer === 'function');\n    }\n}\nfunction buildURL(url, queryParams) {\n    if (url.includes('?') || url.includes('#')) {\n        throw new Error('Query params cannot be passed when url already contains \"?\" or \"#\".');\n    }\n    const stringified = stringify(queryParams);\n    if (stringified) {\n        url += '?' + stringified;\n    }\n    return url;\n}\nfunction isValidPort(port) {\n    const value = parseInt(port, 10);\n    return value === Number(port) && value >= 0 && value <= 65535;\n}\nfunction isHttpOrHttpsPrefixed(value) {\n    return value != null && value[0] === 'h' && value[1] === 't' && value[2] === 't' && value[3] === 'p' && (value[4] === ':' || value[4] === 's' && value[5] === ':');\n}\nfunction parseURL(url) {\n    if (typeof url === 'string') {\n        url = new URL(url);\n        if (!isHttpOrHttpsPrefixed(url.origin || url.protocol)) {\n            throw new InvalidArgumentError('Invalid URL protocol: the URL must start with `http:` or `https:`.');\n        }\n        return url;\n    }\n    if (!url || typeof url !== 'object') {\n        throw new InvalidArgumentError('Invalid URL: The URL argument must be a non-null object.');\n    }\n    if (!(url instanceof URL)) {\n        if (url.port != null && url.port !== '' && isValidPort(url.port) === false) {\n            throw new InvalidArgumentError('Invalid URL: port must be a valid integer or a string representation of an integer.');\n        }\n        if (url.path != null && typeof url.path !== 'string') {\n            throw new InvalidArgumentError('Invalid URL path: the path must be a string or null/undefined.');\n        }\n        if (url.pathname != null && typeof url.pathname !== 'string') {\n            throw new InvalidArgumentError('Invalid URL pathname: the pathname must be a string or null/undefined.');\n        }\n        if (url.hostname != null && typeof url.hostname !== 'string') {\n            throw new InvalidArgumentError('Invalid URL hostname: the hostname must be a string or null/undefined.');\n        }\n        if (url.origin != null && typeof url.origin !== 'string') {\n            throw new InvalidArgumentError('Invalid URL origin: the origin must be a string or null/undefined.');\n        }\n        if (!isHttpOrHttpsPrefixed(url.origin || url.protocol)) {\n            throw new InvalidArgumentError('Invalid URL protocol: the URL must start with `http:` or `https:`.');\n        }\n        const port = url.port != null ? url.port : url.protocol === 'https:' ? 443 : 80;\n        let origin = url.origin != null ? url.origin : `${url.protocol || ''}//${url.hostname || ''}:${port}`;\n        let path = url.path != null ? url.path : `${url.pathname || ''}${url.search || ''}`;\n        if (origin[origin.length - 1] === '/') {\n            origin = origin.slice(0, origin.length - 1);\n        }\n        if (path && path[0] !== '/') {\n            path = `/${path}`;\n        }\n        // new URL(path, origin) is unsafe when `path` contains an absolute URL\n        // From https://developer.mozilla.org/en-US/docs/Web/API/URL/URL:\n        // If first parameter is a relative URL, second param is required, and will be used as the base URL.\n        // If first parameter is an absolute URL, a given second param will be ignored.\n        return new URL(`${origin}${path}`);\n    }\n    if (!isHttpOrHttpsPrefixed(url.origin || url.protocol)) {\n        throw new InvalidArgumentError('Invalid URL protocol: the URL must start with `http:` or `https:`.');\n    }\n    return url;\n}\nfunction parseOrigin(url) {\n    url = parseURL(url);\n    if (url.pathname !== '/' || url.search || url.hash) {\n        throw new InvalidArgumentError('invalid url');\n    }\n    return url;\n}\nfunction getHostname(host) {\n    if (host[0] === '[') {\n        const idx = host.indexOf(']');\n        assert(idx !== -1);\n        return host.substring(1, idx);\n    }\n    const idx = host.indexOf(':');\n    if (idx === -1) return host;\n    return host.substring(0, idx);\n}\n// IP addresses are not valid server names per RFC6066\n// > Currently, the only server names supported are DNS hostnames\nfunction getServerName(host) {\n    if (!host) {\n        return null;\n    }\n    assert.strictEqual(typeof host, 'string');\n    const servername = getHostname(host);\n    if (net.isIP(servername)) {\n        return '';\n    }\n    return servername;\n}\nfunction deepClone(obj) {\n    return JSON.parse(JSON.stringify(obj));\n}\nfunction isAsyncIterable(obj) {\n    return !!(obj != null && typeof obj[Symbol.asyncIterator] === 'function');\n}\nfunction isIterable(obj) {\n    return !!(obj != null && (typeof obj[Symbol.iterator] === 'function' || typeof obj[Symbol.asyncIterator] === 'function'));\n}\nfunction bodyLength(body) {\n    if (body == null) {\n        return 0;\n    } else if (isStream(body)) {\n        const state = body._readableState;\n        return state && state.objectMode === false && state.ended === true && Number.isFinite(state.length) ? state.length : null;\n    } else if (isBlobLike(body)) {\n        return body.size != null ? body.size : null;\n    } else if (isBuffer(body)) {\n        return body.byteLength;\n    }\n    return null;\n}\nfunction isDestroyed(body) {\n    return body && !!(body.destroyed || body[kDestroyed] || stream.isDestroyed?.(body));\n}\nfunction destroy(stream, err) {\n    if (stream == null || !isStream(stream) || isDestroyed(stream)) {\n        return;\n    }\n    if (typeof stream.destroy === 'function') {\n        if (Object.getPrototypeOf(stream).constructor === IncomingMessage) {\n            // See: https://github.com/nodejs/node/pull/38505/files\n            stream.socket = null;\n        }\n        stream.destroy(err);\n    } else if (err) {\n        queueMicrotask(()=>{\n            stream.emit('error', err);\n        });\n    }\n    if (stream.destroyed !== true) {\n        stream[kDestroyed] = true;\n    }\n}\nconst KEEPALIVE_TIMEOUT_EXPR = /timeout=(\\d+)/;\nfunction parseKeepAliveTimeout(val) {\n    const m = val.toString().match(KEEPALIVE_TIMEOUT_EXPR);\n    return m ? parseInt(m[1], 10) * 1000 : null;\n}\n/**\n * Retrieves a header name and returns its lowercase value.\n * @param {string | Buffer} value Header name\n * @returns {string}\n */ function headerNameToString(value) {\n    return typeof value === 'string' ? headerNameLowerCasedRecord[value] ?? value.toLowerCase() : tree.lookup(value) ?? value.toString('latin1').toLowerCase();\n}\n/**\n * Receive the buffer as a string and return its lowercase value.\n * @param {Buffer} value Header name\n * @returns {string}\n */ function bufferToLowerCasedHeaderName(value) {\n    return tree.lookup(value) ?? value.toString('latin1').toLowerCase();\n}\n/**\n * @param {Record<string, string | string[]> | (Buffer | string | (Buffer | string)[])[]} headers\n * @param {Record<string, string | string[]>} [obj]\n * @returns {Record<string, string | string[]>}\n */ function parseHeaders(headers, obj) {\n    if (obj === undefined) obj = {};\n    for(let i = 0; i < headers.length; i += 2){\n        const key = headerNameToString(headers[i]);\n        let val = obj[key];\n        if (val) {\n            if (typeof val === 'string') {\n                val = [\n                    val\n                ];\n                obj[key] = val;\n            }\n            val.push(headers[i + 1].toString('utf8'));\n        } else {\n            const headersValue = headers[i + 1];\n            if (typeof headersValue === 'string') {\n                obj[key] = headersValue;\n            } else {\n                obj[key] = Array.isArray(headersValue) ? headersValue.map((x)=>x.toString('utf8')) : headersValue.toString('utf8');\n            }\n        }\n    }\n    // See https://github.com/nodejs/node/pull/46528\n    if ('content-length' in obj && 'content-disposition' in obj) {\n        obj['content-disposition'] = Buffer.from(obj['content-disposition']).toString('latin1');\n    }\n    return obj;\n}\nfunction parseRawHeaders(headers) {\n    const len = headers.length;\n    const ret = new Array(len);\n    let hasContentLength = false;\n    let contentDispositionIdx = -1;\n    let key;\n    let val;\n    let kLen = 0;\n    for(let n = 0; n < headers.length; n += 2){\n        key = headers[n];\n        val = headers[n + 1];\n        typeof key !== 'string' && (key = key.toString());\n        typeof val !== 'string' && (val = val.toString('utf8'));\n        kLen = key.length;\n        if (kLen === 14 && key[7] === '-' && (key === 'content-length' || key.toLowerCase() === 'content-length')) {\n            hasContentLength = true;\n        } else if (kLen === 19 && key[7] === '-' && (key === 'content-disposition' || key.toLowerCase() === 'content-disposition')) {\n            contentDispositionIdx = n + 1;\n        }\n        ret[n] = key;\n        ret[n + 1] = val;\n    }\n    // See https://github.com/nodejs/node/pull/46528\n    if (hasContentLength && contentDispositionIdx !== -1) {\n        ret[contentDispositionIdx] = Buffer.from(ret[contentDispositionIdx]).toString('latin1');\n    }\n    return ret;\n}\nfunction isBuffer(buffer) {\n    // See, https://github.com/mcollina/undici/pull/319\n    return buffer instanceof Uint8Array || Buffer.isBuffer(buffer);\n}\nfunction validateHandler(handler, method, upgrade) {\n    if (!handler || typeof handler !== 'object') {\n        throw new InvalidArgumentError('handler must be an object');\n    }\n    if (typeof handler.onConnect !== 'function') {\n        throw new InvalidArgumentError('invalid onConnect method');\n    }\n    if (typeof handler.onError !== 'function') {\n        throw new InvalidArgumentError('invalid onError method');\n    }\n    if (typeof handler.onBodySent !== 'function' && handler.onBodySent !== undefined) {\n        throw new InvalidArgumentError('invalid onBodySent method');\n    }\n    if (upgrade || method === 'CONNECT') {\n        if (typeof handler.onUpgrade !== 'function') {\n            throw new InvalidArgumentError('invalid onUpgrade method');\n        }\n    } else {\n        if (typeof handler.onHeaders !== 'function') {\n            throw new InvalidArgumentError('invalid onHeaders method');\n        }\n        if (typeof handler.onData !== 'function') {\n            throw new InvalidArgumentError('invalid onData method');\n        }\n        if (typeof handler.onComplete !== 'function') {\n            throw new InvalidArgumentError('invalid onComplete method');\n        }\n    }\n}\n// A body is disturbed if it has been read from and it cannot\n// be re-used without losing state or data.\nfunction isDisturbed(body) {\n    // TODO (fix): Why is body[kBodyUsed] needed?\n    return !!(body && (stream.isDisturbed(body) || body[kBodyUsed]));\n}\nfunction isErrored(body) {\n    return !!(body && stream.isErrored(body));\n}\nfunction isReadable(body) {\n    return !!(body && stream.isReadable(body));\n}\nfunction getSocketInfo(socket) {\n    return {\n        localAddress: socket.localAddress,\n        localPort: socket.localPort,\n        remoteAddress: socket.remoteAddress,\n        remotePort: socket.remotePort,\n        remoteFamily: socket.remoteFamily,\n        timeout: socket.timeout,\n        bytesWritten: socket.bytesWritten,\n        bytesRead: socket.bytesRead\n    };\n}\n/** @type {globalThis['ReadableStream']} */ function ReadableStreamFrom(iterable) {\n    // We cannot use ReadableStream.from here because it does not return a byte stream.\n    let iterator;\n    return new ReadableStream({\n        async start () {\n            iterator = iterable[Symbol.asyncIterator]();\n        },\n        async pull (controller) {\n            const { done, value } = await iterator.next();\n            if (done) {\n                queueMicrotask(()=>{\n                    controller.close();\n                    controller.byobRequest?.respond(0);\n                });\n            } else {\n                const buf = Buffer.isBuffer(value) ? value : Buffer.from(value);\n                if (buf.byteLength) {\n                    controller.enqueue(new Uint8Array(buf));\n                }\n            }\n            return controller.desiredSize > 0;\n        },\n        async cancel (reason) {\n            await iterator.return();\n        },\n        type: 'bytes'\n    });\n}\n// The chunk should be a FormData instance and contains\n// all the required methods.\nfunction isFormDataLike(object) {\n    return object && typeof object === 'object' && typeof object.append === 'function' && typeof object.delete === 'function' && typeof object.get === 'function' && typeof object.getAll === 'function' && typeof object.has === 'function' && typeof object.set === 'function' && object[Symbol.toStringTag] === 'FormData';\n}\nfunction addAbortListener(signal, listener) {\n    if ('addEventListener' in signal) {\n        signal.addEventListener('abort', listener, {\n            once: true\n        });\n        return ()=>signal.removeEventListener('abort', listener);\n    }\n    signal.addListener('abort', listener);\n    return ()=>signal.removeListener('abort', listener);\n}\nconst hasToWellFormed = typeof String.prototype.toWellFormed === 'function';\nconst hasIsWellFormed = typeof String.prototype.isWellFormed === 'function';\n/**\n * @param {string} val\n */ function toUSVString(val) {\n    return hasToWellFormed ? `${val}`.toWellFormed() : nodeUtil.toUSVString(val);\n}\n/**\n * @param {string} val\n */ // TODO: move this to webidl\nfunction isUSVString(val) {\n    return hasIsWellFormed ? `${val}`.isWellFormed() : toUSVString(val) === `${val}`;\n}\n/**\n * @see https://tools.ietf.org/html/rfc7230#section-3.2.6\n * @param {number} c\n */ function isTokenCharCode(c) {\n    switch(c){\n        case 0x22:\n        case 0x28:\n        case 0x29:\n        case 0x2c:\n        case 0x2f:\n        case 0x3a:\n        case 0x3b:\n        case 0x3c:\n        case 0x3d:\n        case 0x3e:\n        case 0x3f:\n        case 0x40:\n        case 0x5b:\n        case 0x5c:\n        case 0x5d:\n        case 0x7b:\n        case 0x7d:\n            // DQUOTE and \"(),/:;<=>?@[\\]{}\"\n            return false;\n        default:\n            // VCHAR %x21-7E\n            return c >= 0x21 && c <= 0x7e;\n    }\n}\n/**\n * @param {string} characters\n */ function isValidHTTPToken(characters) {\n    if (characters.length === 0) {\n        return false;\n    }\n    for(let i = 0; i < characters.length; ++i){\n        if (!isTokenCharCode(characters.charCodeAt(i))) {\n            return false;\n        }\n    }\n    return true;\n}\n// headerCharRegex have been lifted from\n// https://github.com/nodejs/node/blob/main/lib/_http_common.js\n/**\n * Matches if val contains an invalid field-vchar\n *  field-value    = *( field-content / obs-fold )\n *  field-content  = field-vchar [ 1*( SP / HTAB ) field-vchar ]\n *  field-vchar    = VCHAR / obs-text\n */ const headerCharRegex = /[^\\t\\x20-\\x7e\\x80-\\xff]/;\n/**\n * @param {string} characters\n */ function isValidHeaderValue(characters) {\n    return !headerCharRegex.test(characters);\n}\n// Parsed accordingly to RFC 9110\n// https://www.rfc-editor.org/rfc/rfc9110#field.content-range\nfunction parseRangeHeader(range) {\n    if (range == null || range === '') return {\n        start: 0,\n        end: null,\n        size: null\n    };\n    const m = range ? range.match(/^bytes (\\d+)-(\\d+)\\/(\\d+)?$/) : null;\n    return m ? {\n        start: parseInt(m[1]),\n        end: m[2] ? parseInt(m[2]) : null,\n        size: m[3] ? parseInt(m[3]) : null\n    } : null;\n}\nfunction addListener(obj, name, listener) {\n    const listeners = obj[kListeners] ??= [];\n    listeners.push([\n        name,\n        listener\n    ]);\n    obj.on(name, listener);\n    return obj;\n}\nfunction removeAllListeners(obj) {\n    for (const [name, listener] of obj[kListeners] ?? []){\n        obj.removeListener(name, listener);\n    }\n    obj[kListeners] = null;\n}\nfunction errorRequest(client, request, err) {\n    try {\n        request.onError(err);\n        assert(request.aborted);\n    } catch (err) {\n        client.emit('error', err);\n    }\n}\nconst kEnumerableProperty = Object.create(null);\nkEnumerableProperty.enumerable = true;\nconst normalizedMethodRecordsBase = {\n    delete: 'DELETE',\n    DELETE: 'DELETE',\n    get: 'GET',\n    GET: 'GET',\n    head: 'HEAD',\n    HEAD: 'HEAD',\n    options: 'OPTIONS',\n    OPTIONS: 'OPTIONS',\n    post: 'POST',\n    POST: 'POST',\n    put: 'PUT',\n    PUT: 'PUT'\n};\nconst normalizedMethodRecords = {\n    ...normalizedMethodRecordsBase,\n    patch: 'patch',\n    PATCH: 'PATCH'\n};\n// Note: object prototypes should not be able to be referenced. e.g. `Object#hasOwnProperty`.\nObject.setPrototypeOf(normalizedMethodRecordsBase, null);\nObject.setPrototypeOf(normalizedMethodRecords, null);\nmodule.exports = {\n    kEnumerableProperty,\n    nop,\n    isDisturbed,\n    isErrored,\n    isReadable,\n    toUSVString,\n    isUSVString,\n    isBlobLike,\n    parseOrigin,\n    parseURL,\n    getServerName,\n    isStream,\n    isIterable,\n    isAsyncIterable,\n    isDestroyed,\n    headerNameToString,\n    bufferToLowerCasedHeaderName,\n    addListener,\n    removeAllListeners,\n    errorRequest,\n    parseRawHeaders,\n    parseHeaders,\n    parseKeepAliveTimeout,\n    destroy,\n    bodyLength,\n    deepClone,\n    ReadableStreamFrom,\n    isBuffer,\n    validateHandler,\n    getSocketInfo,\n    isFormDataLike,\n    buildURL,\n    addAbortListener,\n    isValidHTTPToken,\n    isValidHeaderValue,\n    isTokenCharCode,\n    parseRangeHeader,\n    normalizedMethodRecordsBase,\n    normalizedMethodRecords,\n    isValidPort,\n    isHttpOrHttpsPrefixed,\n    nodeMajor,\n    nodeMinor,\n    safeHTTPMethods: [\n        'GET',\n        'HEAD',\n        'OPTIONS',\n        'TRACE'\n    ],\n    wrapRequestBody\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/core/util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/dispatcher/agent.js":
/*!*****************************************************!*\
  !*** ./node_modules/undici/lib/dispatcher/agent.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { InvalidArgumentError } = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst { kClients, kRunning, kClose, kDestroy, kDispatch, kInterceptors } = __webpack_require__(/*! ../core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst DispatcherBase = __webpack_require__(/*! ./dispatcher-base */ \"(ssr)/./node_modules/undici/lib/dispatcher/dispatcher-base.js\");\nconst Pool = __webpack_require__(/*! ./pool */ \"(ssr)/./node_modules/undici/lib/dispatcher/pool.js\");\nconst Client = __webpack_require__(/*! ./client */ \"(ssr)/./node_modules/undici/lib/dispatcher/client.js\");\nconst util = __webpack_require__(/*! ../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst createRedirectInterceptor = __webpack_require__(/*! ../interceptor/redirect-interceptor */ \"(ssr)/./node_modules/undici/lib/interceptor/redirect-interceptor.js\");\nconst kOnConnect = Symbol('onConnect');\nconst kOnDisconnect = Symbol('onDisconnect');\nconst kOnConnectionError = Symbol('onConnectionError');\nconst kMaxRedirections = Symbol('maxRedirections');\nconst kOnDrain = Symbol('onDrain');\nconst kFactory = Symbol('factory');\nconst kOptions = Symbol('options');\nfunction defaultFactory(origin, opts) {\n    return opts && opts.connections === 1 ? new Client(origin, opts) : new Pool(origin, opts);\n}\nclass Agent extends DispatcherBase {\n    constructor({ factory = defaultFactory, maxRedirections = 0, connect, ...options } = {}){\n        super();\n        if (typeof factory !== 'function') {\n            throw new InvalidArgumentError('factory must be a function.');\n        }\n        if (connect != null && typeof connect !== 'function' && typeof connect !== 'object') {\n            throw new InvalidArgumentError('connect must be a function or an object');\n        }\n        if (!Number.isInteger(maxRedirections) || maxRedirections < 0) {\n            throw new InvalidArgumentError('maxRedirections must be a positive number');\n        }\n        if (connect && typeof connect !== 'function') {\n            connect = {\n                ...connect\n            };\n        }\n        this[kInterceptors] = options.interceptors?.Agent && Array.isArray(options.interceptors.Agent) ? options.interceptors.Agent : [\n            createRedirectInterceptor({\n                maxRedirections\n            })\n        ];\n        this[kOptions] = {\n            ...util.deepClone(options),\n            connect\n        };\n        this[kOptions].interceptors = options.interceptors ? {\n            ...options.interceptors\n        } : undefined;\n        this[kMaxRedirections] = maxRedirections;\n        this[kFactory] = factory;\n        this[kClients] = new Map();\n        this[kOnDrain] = (origin, targets)=>{\n            this.emit('drain', origin, [\n                this,\n                ...targets\n            ]);\n        };\n        this[kOnConnect] = (origin, targets)=>{\n            this.emit('connect', origin, [\n                this,\n                ...targets\n            ]);\n        };\n        this[kOnDisconnect] = (origin, targets, err)=>{\n            this.emit('disconnect', origin, [\n                this,\n                ...targets\n            ], err);\n        };\n        this[kOnConnectionError] = (origin, targets, err)=>{\n            this.emit('connectionError', origin, [\n                this,\n                ...targets\n            ], err);\n        };\n    }\n    get [kRunning]() {\n        let ret = 0;\n        for (const client of this[kClients].values()){\n            ret += client[kRunning];\n        }\n        return ret;\n    }\n    [kDispatch](opts, handler) {\n        let key;\n        if (opts.origin && (typeof opts.origin === 'string' || opts.origin instanceof URL)) {\n            key = String(opts.origin);\n        } else {\n            throw new InvalidArgumentError('opts.origin must be a non-empty string or URL.');\n        }\n        let dispatcher = this[kClients].get(key);\n        if (!dispatcher) {\n            dispatcher = this[kFactory](opts.origin, this[kOptions]).on('drain', this[kOnDrain]).on('connect', this[kOnConnect]).on('disconnect', this[kOnDisconnect]).on('connectionError', this[kOnConnectionError]);\n            // This introduces a tiny memory leak, as dispatchers are never removed from the map.\n            // TODO(mcollina): remove te timer when the client/pool do not have any more\n            // active connections.\n            this[kClients].set(key, dispatcher);\n        }\n        return dispatcher.dispatch(opts, handler);\n    }\n    async [kClose]() {\n        const closePromises = [];\n        for (const client of this[kClients].values()){\n            closePromises.push(client.close());\n        }\n        this[kClients].clear();\n        await Promise.all(closePromises);\n    }\n    async [kDestroy](err) {\n        const destroyPromises = [];\n        for (const client of this[kClients].values()){\n            destroyPromises.push(client.destroy(err));\n        }\n        this[kClients].clear();\n        await Promise.all(destroyPromises);\n    }\n}\nmodule.exports = Agent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/dispatcher/agent.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/dispatcher/balanced-pool.js":
/*!*************************************************************!*\
  !*** ./node_modules/undici/lib/dispatcher/balanced-pool.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { BalancedPoolMissingUpstreamError, InvalidArgumentError } = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst { PoolBase, kClients, kNeedDrain, kAddClient, kRemoveClient, kGetDispatcher } = __webpack_require__(/*! ./pool-base */ \"(ssr)/./node_modules/undici/lib/dispatcher/pool-base.js\");\nconst Pool = __webpack_require__(/*! ./pool */ \"(ssr)/./node_modules/undici/lib/dispatcher/pool.js\");\nconst { kUrl, kInterceptors } = __webpack_require__(/*! ../core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst { parseOrigin } = __webpack_require__(/*! ../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst kFactory = Symbol('factory');\nconst kOptions = Symbol('options');\nconst kGreatestCommonDivisor = Symbol('kGreatestCommonDivisor');\nconst kCurrentWeight = Symbol('kCurrentWeight');\nconst kIndex = Symbol('kIndex');\nconst kWeight = Symbol('kWeight');\nconst kMaxWeightPerServer = Symbol('kMaxWeightPerServer');\nconst kErrorPenalty = Symbol('kErrorPenalty');\nfunction getGreatestCommonDivisor(a, b) {\n    if (b === 0) return a;\n    return getGreatestCommonDivisor(b, a % b);\n}\nfunction defaultFactory(origin, opts) {\n    return new Pool(origin, opts);\n}\nclass BalancedPool extends PoolBase {\n    constructor(upstreams = [], { factory = defaultFactory, ...opts } = {}){\n        super();\n        this[kOptions] = opts;\n        this[kIndex] = -1;\n        this[kCurrentWeight] = 0;\n        this[kMaxWeightPerServer] = this[kOptions].maxWeightPerServer || 100;\n        this[kErrorPenalty] = this[kOptions].errorPenalty || 15;\n        if (!Array.isArray(upstreams)) {\n            upstreams = [\n                upstreams\n            ];\n        }\n        if (typeof factory !== 'function') {\n            throw new InvalidArgumentError('factory must be a function.');\n        }\n        this[kInterceptors] = opts.interceptors?.BalancedPool && Array.isArray(opts.interceptors.BalancedPool) ? opts.interceptors.BalancedPool : [];\n        this[kFactory] = factory;\n        for (const upstream of upstreams){\n            this.addUpstream(upstream);\n        }\n        this._updateBalancedPoolStats();\n    }\n    addUpstream(upstream) {\n        const upstreamOrigin = parseOrigin(upstream).origin;\n        if (this[kClients].find((pool)=>pool[kUrl].origin === upstreamOrigin && pool.closed !== true && pool.destroyed !== true)) {\n            return this;\n        }\n        const pool = this[kFactory](upstreamOrigin, Object.assign({}, this[kOptions]));\n        this[kAddClient](pool);\n        pool.on('connect', ()=>{\n            pool[kWeight] = Math.min(this[kMaxWeightPerServer], pool[kWeight] + this[kErrorPenalty]);\n        });\n        pool.on('connectionError', ()=>{\n            pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty]);\n            this._updateBalancedPoolStats();\n        });\n        pool.on('disconnect', (...args)=>{\n            const err = args[2];\n            if (err && err.code === 'UND_ERR_SOCKET') {\n                // decrease the weight of the pool.\n                pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty]);\n                this._updateBalancedPoolStats();\n            }\n        });\n        for (const client of this[kClients]){\n            client[kWeight] = this[kMaxWeightPerServer];\n        }\n        this._updateBalancedPoolStats();\n        return this;\n    }\n    _updateBalancedPoolStats() {\n        this[kGreatestCommonDivisor] = this[kClients].map((p)=>p[kWeight]).reduce(getGreatestCommonDivisor, 0);\n    }\n    removeUpstream(upstream) {\n        const upstreamOrigin = parseOrigin(upstream).origin;\n        const pool = this[kClients].find((pool)=>pool[kUrl].origin === upstreamOrigin && pool.closed !== true && pool.destroyed !== true);\n        if (pool) {\n            this[kRemoveClient](pool);\n        }\n        return this;\n    }\n    get upstreams() {\n        return this[kClients].filter((dispatcher)=>dispatcher.closed !== true && dispatcher.destroyed !== true).map((p)=>p[kUrl].origin);\n    }\n    [kGetDispatcher]() {\n        // We validate that pools is greater than 0,\n        // otherwise we would have to wait until an upstream\n        // is added, which might never happen.\n        if (this[kClients].length === 0) {\n            throw new BalancedPoolMissingUpstreamError();\n        }\n        const dispatcher = this[kClients].find((dispatcher)=>!dispatcher[kNeedDrain] && dispatcher.closed !== true && dispatcher.destroyed !== true);\n        if (!dispatcher) {\n            return;\n        }\n        const allClientsBusy = this[kClients].map((pool)=>pool[kNeedDrain]).reduce((a, b)=>a && b, true);\n        if (allClientsBusy) {\n            return;\n        }\n        let counter = 0;\n        let maxWeightIndex = this[kClients].findIndex((pool)=>!pool[kNeedDrain]);\n        while(counter++ < this[kClients].length){\n            this[kIndex] = (this[kIndex] + 1) % this[kClients].length;\n            const pool = this[kClients][this[kIndex]];\n            // find pool index with the largest weight\n            if (pool[kWeight] > this[kClients][maxWeightIndex][kWeight] && !pool[kNeedDrain]) {\n                maxWeightIndex = this[kIndex];\n            }\n            // decrease the current weight every `this[kClients].length`.\n            if (this[kIndex] === 0) {\n                // Set the current weight to the next lower weight.\n                this[kCurrentWeight] = this[kCurrentWeight] - this[kGreatestCommonDivisor];\n                if (this[kCurrentWeight] <= 0) {\n                    this[kCurrentWeight] = this[kMaxWeightPerServer];\n                }\n            }\n            if (pool[kWeight] >= this[kCurrentWeight] && !pool[kNeedDrain]) {\n                return pool;\n            }\n        }\n        this[kCurrentWeight] = this[kClients][maxWeightIndex][kWeight];\n        this[kIndex] = maxWeightIndex;\n        return this[kClients][maxWeightIndex];\n    }\n}\nmodule.exports = BalancedPool;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/dispatcher/balanced-pool.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/dispatcher/client-h1.js":
/*!*********************************************************!*\
  !*** ./node_modules/undici/lib/dispatcher/client-h1.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n/* global WebAssembly */ const assert = __webpack_require__(/*! node:assert */ \"node:assert\");\nconst util = __webpack_require__(/*! ../core/util.js */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst { channels } = __webpack_require__(/*! ../core/diagnostics.js */ \"(ssr)/./node_modules/undici/lib/core/diagnostics.js\");\nconst timers = __webpack_require__(/*! ../util/timers.js */ \"(ssr)/./node_modules/undici/lib/util/timers.js\");\nconst { RequestContentLengthMismatchError, ResponseContentLengthMismatchError, RequestAbortedError, HeadersTimeoutError, HeadersOverflowError, SocketError, InformationalError, BodyTimeoutError, HTTPParserError, ResponseExceededMaxSizeError } = __webpack_require__(/*! ../core/errors.js */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst { kUrl, kReset, kClient, kParser, kBlocking, kRunning, kPending, kSize, kWriting, kQueue, kNoRef, kKeepAliveDefaultTimeout, kHostHeader, kPendingIdx, kRunningIdx, kError, kPipelining, kSocket, kKeepAliveTimeoutValue, kMaxHeadersSize, kKeepAliveMaxTimeout, kKeepAliveTimeoutThreshold, kHeadersTimeout, kBodyTimeout, kStrictContentLength, kMaxRequests, kCounter, kMaxResponseSize, kOnError, kResume, kHTTPContext } = __webpack_require__(/*! ../core/symbols.js */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst constants = __webpack_require__(/*! ../llhttp/constants.js */ \"(ssr)/./node_modules/undici/lib/llhttp/constants.js\");\nconst EMPTY_BUF = Buffer.alloc(0);\nconst FastBuffer = Buffer[Symbol.species];\nconst addListener = util.addListener;\nconst removeAllListeners = util.removeAllListeners;\nlet extractBody;\nasync function lazyllhttp() {\n    const llhttpWasmData = process.env.JEST_WORKER_ID ? __webpack_require__(/*! ../llhttp/llhttp-wasm.js */ \"(ssr)/./node_modules/undici/lib/llhttp/llhttp-wasm.js\") : undefined;\n    let mod;\n    try {\n        mod = await WebAssembly.compile(__webpack_require__(/*! ../llhttp/llhttp_simd-wasm.js */ \"(ssr)/./node_modules/undici/lib/llhttp/llhttp_simd-wasm.js\"));\n    } catch (e) {\n        /* istanbul ignore next */ // We could check if the error was caused by the simd option not\n        // being enabled, but the occurring of this other error\n        // * https://github.com/emscripten-core/emscripten/issues/11495\n        // got me to remove that check to avoid breaking Node 12.\n        mod = await WebAssembly.compile(llhttpWasmData || __webpack_require__(/*! ../llhttp/llhttp-wasm.js */ \"(ssr)/./node_modules/undici/lib/llhttp/llhttp-wasm.js\"));\n    }\n    return await WebAssembly.instantiate(mod, {\n        env: {\n            /* eslint-disable camelcase */ wasm_on_url: (p, at, len)=>{\n                /* istanbul ignore next */ return 0;\n            },\n            wasm_on_status: (p, at, len)=>{\n                assert.strictEqual(currentParser.ptr, p);\n                const start = at - currentBufferPtr + currentBufferRef.byteOffset;\n                return currentParser.onStatus(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;\n            },\n            wasm_on_message_begin: (p)=>{\n                assert.strictEqual(currentParser.ptr, p);\n                return currentParser.onMessageBegin() || 0;\n            },\n            wasm_on_header_field: (p, at, len)=>{\n                assert.strictEqual(currentParser.ptr, p);\n                const start = at - currentBufferPtr + currentBufferRef.byteOffset;\n                return currentParser.onHeaderField(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;\n            },\n            wasm_on_header_value: (p, at, len)=>{\n                assert.strictEqual(currentParser.ptr, p);\n                const start = at - currentBufferPtr + currentBufferRef.byteOffset;\n                return currentParser.onHeaderValue(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;\n            },\n            wasm_on_headers_complete: (p, statusCode, upgrade, shouldKeepAlive)=>{\n                assert.strictEqual(currentParser.ptr, p);\n                return currentParser.onHeadersComplete(statusCode, Boolean(upgrade), Boolean(shouldKeepAlive)) || 0;\n            },\n            wasm_on_body: (p, at, len)=>{\n                assert.strictEqual(currentParser.ptr, p);\n                const start = at - currentBufferPtr + currentBufferRef.byteOffset;\n                return currentParser.onBody(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;\n            },\n            wasm_on_message_complete: (p)=>{\n                assert.strictEqual(currentParser.ptr, p);\n                return currentParser.onMessageComplete() || 0;\n            }\n        }\n    });\n}\nlet llhttpInstance = null;\nlet llhttpPromise = lazyllhttp();\nllhttpPromise.catch();\nlet currentParser = null;\nlet currentBufferRef = null;\nlet currentBufferSize = 0;\nlet currentBufferPtr = null;\nconst TIMEOUT_HEADERS = 1;\nconst TIMEOUT_BODY = 2;\nconst TIMEOUT_IDLE = 3;\nclass Parser {\n    constructor(client, socket, { exports }){\n        assert(Number.isFinite(client[kMaxHeadersSize]) && client[kMaxHeadersSize] > 0);\n        this.llhttp = exports;\n        this.ptr = this.llhttp.llhttp_alloc(constants.TYPE.RESPONSE);\n        this.client = client;\n        this.socket = socket;\n        this.timeout = null;\n        this.timeoutValue = null;\n        this.timeoutType = null;\n        this.statusCode = null;\n        this.statusText = '';\n        this.upgrade = false;\n        this.headers = [];\n        this.headersSize = 0;\n        this.headersMaxSize = client[kMaxHeadersSize];\n        this.shouldKeepAlive = false;\n        this.paused = false;\n        this.resume = this.resume.bind(this);\n        this.bytesRead = 0;\n        this.keepAlive = '';\n        this.contentLength = '';\n        this.connection = '';\n        this.maxResponseSize = client[kMaxResponseSize];\n    }\n    setTimeout(value, type) {\n        this.timeoutType = type;\n        if (value !== this.timeoutValue) {\n            timers.clearTimeout(this.timeout);\n            if (value) {\n                this.timeout = timers.setTimeout(onParserTimeout, value, this);\n                // istanbul ignore else: only for jest\n                if (this.timeout.unref) {\n                    this.timeout.unref();\n                }\n            } else {\n                this.timeout = null;\n            }\n            this.timeoutValue = value;\n        } else if (this.timeout) {\n            // istanbul ignore else: only for jest\n            if (this.timeout.refresh) {\n                this.timeout.refresh();\n            }\n        }\n    }\n    resume() {\n        if (this.socket.destroyed || !this.paused) {\n            return;\n        }\n        assert(this.ptr != null);\n        assert(currentParser == null);\n        this.llhttp.llhttp_resume(this.ptr);\n        assert(this.timeoutType === TIMEOUT_BODY);\n        if (this.timeout) {\n            // istanbul ignore else: only for jest\n            if (this.timeout.refresh) {\n                this.timeout.refresh();\n            }\n        }\n        this.paused = false;\n        this.execute(this.socket.read() || EMPTY_BUF); // Flush parser.\n        this.readMore();\n    }\n    readMore() {\n        while(!this.paused && this.ptr){\n            const chunk = this.socket.read();\n            if (chunk === null) {\n                break;\n            }\n            this.execute(chunk);\n        }\n    }\n    execute(data) {\n        assert(this.ptr != null);\n        assert(currentParser == null);\n        assert(!this.paused);\n        const { socket, llhttp } = this;\n        if (data.length > currentBufferSize) {\n            if (currentBufferPtr) {\n                llhttp.free(currentBufferPtr);\n            }\n            currentBufferSize = Math.ceil(data.length / 4096) * 4096;\n            currentBufferPtr = llhttp.malloc(currentBufferSize);\n        }\n        new Uint8Array(llhttp.memory.buffer, currentBufferPtr, currentBufferSize).set(data);\n        // Call `execute` on the wasm parser.\n        // We pass the `llhttp_parser` pointer address, the pointer address of buffer view data,\n        // and finally the length of bytes to parse.\n        // The return value is an error code or `constants.ERROR.OK`.\n        try {\n            let ret;\n            try {\n                currentBufferRef = data;\n                currentParser = this;\n                ret = llhttp.llhttp_execute(this.ptr, currentBufferPtr, data.length);\n            /* eslint-disable-next-line no-useless-catch */ } catch (err) {\n                /* istanbul ignore next: difficult to make a test case for */ throw err;\n            } finally{\n                currentParser = null;\n                currentBufferRef = null;\n            }\n            const offset = llhttp.llhttp_get_error_pos(this.ptr) - currentBufferPtr;\n            if (ret === constants.ERROR.PAUSED_UPGRADE) {\n                this.onUpgrade(data.slice(offset));\n            } else if (ret === constants.ERROR.PAUSED) {\n                this.paused = true;\n                socket.unshift(data.slice(offset));\n            } else if (ret !== constants.ERROR.OK) {\n                const ptr = llhttp.llhttp_get_error_reason(this.ptr);\n                let message = '';\n                /* istanbul ignore else: difficult to make a test case for */ if (ptr) {\n                    const len = new Uint8Array(llhttp.memory.buffer, ptr).indexOf(0);\n                    message = 'Response does not match the HTTP/1.1 protocol (' + Buffer.from(llhttp.memory.buffer, ptr, len).toString() + ')';\n                }\n                throw new HTTPParserError(message, constants.ERROR[ret], data.slice(offset));\n            }\n        } catch (err) {\n            util.destroy(socket, err);\n        }\n    }\n    destroy() {\n        assert(this.ptr != null);\n        assert(currentParser == null);\n        this.llhttp.llhttp_free(this.ptr);\n        this.ptr = null;\n        timers.clearTimeout(this.timeout);\n        this.timeout = null;\n        this.timeoutValue = null;\n        this.timeoutType = null;\n        this.paused = false;\n    }\n    onStatus(buf) {\n        this.statusText = buf.toString();\n    }\n    onMessageBegin() {\n        const { socket, client } = this;\n        /* istanbul ignore next: difficult to make a test case for */ if (socket.destroyed) {\n            return -1;\n        }\n        const request = client[kQueue][client[kRunningIdx]];\n        if (!request) {\n            return -1;\n        }\n        request.onResponseStarted();\n    }\n    onHeaderField(buf) {\n        const len = this.headers.length;\n        if ((len & 1) === 0) {\n            this.headers.push(buf);\n        } else {\n            this.headers[len - 1] = Buffer.concat([\n                this.headers[len - 1],\n                buf\n            ]);\n        }\n        this.trackHeader(buf.length);\n    }\n    onHeaderValue(buf) {\n        let len = this.headers.length;\n        if ((len & 1) === 1) {\n            this.headers.push(buf);\n            len += 1;\n        } else {\n            this.headers[len - 1] = Buffer.concat([\n                this.headers[len - 1],\n                buf\n            ]);\n        }\n        const key = this.headers[len - 2];\n        if (key.length === 10) {\n            const headerName = util.bufferToLowerCasedHeaderName(key);\n            if (headerName === 'keep-alive') {\n                this.keepAlive += buf.toString();\n            } else if (headerName === 'connection') {\n                this.connection += buf.toString();\n            }\n        } else if (key.length === 14 && util.bufferToLowerCasedHeaderName(key) === 'content-length') {\n            this.contentLength += buf.toString();\n        }\n        this.trackHeader(buf.length);\n    }\n    trackHeader(len) {\n        this.headersSize += len;\n        if (this.headersSize >= this.headersMaxSize) {\n            util.destroy(this.socket, new HeadersOverflowError());\n        }\n    }\n    onUpgrade(head) {\n        const { upgrade, client, socket, headers, statusCode } = this;\n        assert(upgrade);\n        const request = client[kQueue][client[kRunningIdx]];\n        assert(request);\n        assert(!socket.destroyed);\n        assert(socket === client[kSocket]);\n        assert(!this.paused);\n        assert(request.upgrade || request.method === 'CONNECT');\n        this.statusCode = null;\n        this.statusText = '';\n        this.shouldKeepAlive = null;\n        assert(this.headers.length % 2 === 0);\n        this.headers = [];\n        this.headersSize = 0;\n        socket.unshift(head);\n        socket[kParser].destroy();\n        socket[kParser] = null;\n        socket[kClient] = null;\n        socket[kError] = null;\n        removeAllListeners(socket);\n        client[kSocket] = null;\n        client[kHTTPContext] = null; // TODO (fix): This is hacky...\n        client[kQueue][client[kRunningIdx]++] = null;\n        client.emit('disconnect', client[kUrl], [\n            client\n        ], new InformationalError('upgrade'));\n        try {\n            request.onUpgrade(statusCode, headers, socket);\n        } catch (err) {\n            util.destroy(socket, err);\n        }\n        client[kResume]();\n    }\n    onHeadersComplete(statusCode, upgrade, shouldKeepAlive) {\n        const { client, socket, headers, statusText } = this;\n        /* istanbul ignore next: difficult to make a test case for */ if (socket.destroyed) {\n            return -1;\n        }\n        const request = client[kQueue][client[kRunningIdx]];\n        /* istanbul ignore next: difficult to make a test case for */ if (!request) {\n            return -1;\n        }\n        assert(!this.upgrade);\n        assert(this.statusCode < 200);\n        if (statusCode === 100) {\n            util.destroy(socket, new SocketError('bad response', util.getSocketInfo(socket)));\n            return -1;\n        }\n        /* this can only happen if server is misbehaving */ if (upgrade && !request.upgrade) {\n            util.destroy(socket, new SocketError('bad upgrade', util.getSocketInfo(socket)));\n            return -1;\n        }\n        assert.strictEqual(this.timeoutType, TIMEOUT_HEADERS);\n        this.statusCode = statusCode;\n        this.shouldKeepAlive = shouldKeepAlive || // Override llhttp value which does not allow keepAlive for HEAD.\n        request.method === 'HEAD' && !socket[kReset] && this.connection.toLowerCase() === 'keep-alive';\n        if (this.statusCode >= 200) {\n            const bodyTimeout = request.bodyTimeout != null ? request.bodyTimeout : client[kBodyTimeout];\n            this.setTimeout(bodyTimeout, TIMEOUT_BODY);\n        } else if (this.timeout) {\n            // istanbul ignore else: only for jest\n            if (this.timeout.refresh) {\n                this.timeout.refresh();\n            }\n        }\n        if (request.method === 'CONNECT') {\n            assert(client[kRunning] === 1);\n            this.upgrade = true;\n            return 2;\n        }\n        if (upgrade) {\n            assert(client[kRunning] === 1);\n            this.upgrade = true;\n            return 2;\n        }\n        assert(this.headers.length % 2 === 0);\n        this.headers = [];\n        this.headersSize = 0;\n        if (this.shouldKeepAlive && client[kPipelining]) {\n            const keepAliveTimeout = this.keepAlive ? util.parseKeepAliveTimeout(this.keepAlive) : null;\n            if (keepAliveTimeout != null) {\n                const timeout = Math.min(keepAliveTimeout - client[kKeepAliveTimeoutThreshold], client[kKeepAliveMaxTimeout]);\n                if (timeout <= 0) {\n                    socket[kReset] = true;\n                } else {\n                    client[kKeepAliveTimeoutValue] = timeout;\n                }\n            } else {\n                client[kKeepAliveTimeoutValue] = client[kKeepAliveDefaultTimeout];\n            }\n        } else {\n            // Stop more requests from being dispatched.\n            socket[kReset] = true;\n        }\n        const pause = request.onHeaders(statusCode, headers, this.resume, statusText) === false;\n        if (request.aborted) {\n            return -1;\n        }\n        if (request.method === 'HEAD') {\n            return 1;\n        }\n        if (statusCode < 200) {\n            return 1;\n        }\n        if (socket[kBlocking]) {\n            socket[kBlocking] = false;\n            client[kResume]();\n        }\n        return pause ? constants.ERROR.PAUSED : 0;\n    }\n    onBody(buf) {\n        const { client, socket, statusCode, maxResponseSize } = this;\n        if (socket.destroyed) {\n            return -1;\n        }\n        const request = client[kQueue][client[kRunningIdx]];\n        assert(request);\n        assert.strictEqual(this.timeoutType, TIMEOUT_BODY);\n        if (this.timeout) {\n            // istanbul ignore else: only for jest\n            if (this.timeout.refresh) {\n                this.timeout.refresh();\n            }\n        }\n        assert(statusCode >= 200);\n        if (maxResponseSize > -1 && this.bytesRead + buf.length > maxResponseSize) {\n            util.destroy(socket, new ResponseExceededMaxSizeError());\n            return -1;\n        }\n        this.bytesRead += buf.length;\n        if (request.onData(buf) === false) {\n            return constants.ERROR.PAUSED;\n        }\n    }\n    onMessageComplete() {\n        const { client, socket, statusCode, upgrade, headers, contentLength, bytesRead, shouldKeepAlive } = this;\n        if (socket.destroyed && (!statusCode || shouldKeepAlive)) {\n            return -1;\n        }\n        if (upgrade) {\n            return;\n        }\n        const request = client[kQueue][client[kRunningIdx]];\n        assert(request);\n        assert(statusCode >= 100);\n        this.statusCode = null;\n        this.statusText = '';\n        this.bytesRead = 0;\n        this.contentLength = '';\n        this.keepAlive = '';\n        this.connection = '';\n        assert(this.headers.length % 2 === 0);\n        this.headers = [];\n        this.headersSize = 0;\n        if (statusCode < 200) {\n            return;\n        }\n        /* istanbul ignore next: should be handled by llhttp? */ if (request.method !== 'HEAD' && contentLength && bytesRead !== parseInt(contentLength, 10)) {\n            util.destroy(socket, new ResponseContentLengthMismatchError());\n            return -1;\n        }\n        request.onComplete(headers);\n        client[kQueue][client[kRunningIdx]++] = null;\n        if (socket[kWriting]) {\n            assert.strictEqual(client[kRunning], 0);\n            // Response completed before request.\n            util.destroy(socket, new InformationalError('reset'));\n            return constants.ERROR.PAUSED;\n        } else if (!shouldKeepAlive) {\n            util.destroy(socket, new InformationalError('reset'));\n            return constants.ERROR.PAUSED;\n        } else if (socket[kReset] && client[kRunning] === 0) {\n            // Destroy socket once all requests have completed.\n            // The request at the tail of the pipeline is the one\n            // that requested reset and no further requests should\n            // have been queued since then.\n            util.destroy(socket, new InformationalError('reset'));\n            return constants.ERROR.PAUSED;\n        } else if (client[kPipelining] == null || client[kPipelining] === 1) {\n            // We must wait a full event loop cycle to reuse this socket to make sure\n            // that non-spec compliant servers are not closing the connection even if they\n            // said they won't.\n            setImmediate(()=>client[kResume]());\n        } else {\n            client[kResume]();\n        }\n    }\n}\nfunction onParserTimeout(parser) {\n    const { socket, timeoutType, client } = parser;\n    /* istanbul ignore else */ if (timeoutType === TIMEOUT_HEADERS) {\n        if (!socket[kWriting] || socket.writableNeedDrain || client[kRunning] > 1) {\n            assert(!parser.paused, 'cannot be paused while waiting for headers');\n            util.destroy(socket, new HeadersTimeoutError());\n        }\n    } else if (timeoutType === TIMEOUT_BODY) {\n        if (!parser.paused) {\n            util.destroy(socket, new BodyTimeoutError());\n        }\n    } else if (timeoutType === TIMEOUT_IDLE) {\n        assert(client[kRunning] === 0 && client[kKeepAliveTimeoutValue]);\n        util.destroy(socket, new InformationalError('socket idle timeout'));\n    }\n}\nasync function connectH1(client, socket) {\n    client[kSocket] = socket;\n    if (!llhttpInstance) {\n        llhttpInstance = await llhttpPromise;\n        llhttpPromise = null;\n    }\n    socket[kNoRef] = false;\n    socket[kWriting] = false;\n    socket[kReset] = false;\n    socket[kBlocking] = false;\n    socket[kParser] = new Parser(client, socket, llhttpInstance);\n    addListener(socket, 'error', function(err) {\n        const parser = this[kParser];\n        assert(err.code !== 'ERR_TLS_CERT_ALTNAME_INVALID');\n        // On Mac OS, we get an ECONNRESET even if there is a full body to be forwarded\n        // to the user.\n        if (err.code === 'ECONNRESET' && parser.statusCode && !parser.shouldKeepAlive) {\n            // We treat all incoming data so for as a valid response.\n            parser.onMessageComplete();\n            return;\n        }\n        this[kError] = err;\n        this[kClient][kOnError](err);\n    });\n    addListener(socket, 'readable', function() {\n        const parser = this[kParser];\n        if (parser) {\n            parser.readMore();\n        }\n    });\n    addListener(socket, 'end', function() {\n        const parser = this[kParser];\n        if (parser.statusCode && !parser.shouldKeepAlive) {\n            // We treat all incoming data so far as a valid response.\n            parser.onMessageComplete();\n            return;\n        }\n        util.destroy(this, new SocketError('other side closed', util.getSocketInfo(this)));\n    });\n    addListener(socket, 'close', function() {\n        const client = this[kClient];\n        const parser = this[kParser];\n        if (parser) {\n            if (!this[kError] && parser.statusCode && !parser.shouldKeepAlive) {\n                // We treat all incoming data so far as a valid response.\n                parser.onMessageComplete();\n            }\n            this[kParser].destroy();\n            this[kParser] = null;\n        }\n        const err = this[kError] || new SocketError('closed', util.getSocketInfo(this));\n        client[kSocket] = null;\n        client[kHTTPContext] = null; // TODO (fix): This is hacky...\n        if (client.destroyed) {\n            assert(client[kPending] === 0);\n            // Fail entire queue.\n            const requests = client[kQueue].splice(client[kRunningIdx]);\n            for(let i = 0; i < requests.length; i++){\n                const request = requests[i];\n                util.errorRequest(client, request, err);\n            }\n        } else if (client[kRunning] > 0 && err.code !== 'UND_ERR_INFO') {\n            // Fail head of pipeline.\n            const request = client[kQueue][client[kRunningIdx]];\n            client[kQueue][client[kRunningIdx]++] = null;\n            util.errorRequest(client, request, err);\n        }\n        client[kPendingIdx] = client[kRunningIdx];\n        assert(client[kRunning] === 0);\n        client.emit('disconnect', client[kUrl], [\n            client\n        ], err);\n        client[kResume]();\n    });\n    let closed = false;\n    socket.on('close', ()=>{\n        closed = true;\n    });\n    return {\n        version: 'h1',\n        defaultPipelining: 1,\n        write (...args) {\n            return writeH1(client, ...args);\n        },\n        resume () {\n            resumeH1(client);\n        },\n        destroy (err, callback) {\n            if (closed) {\n                queueMicrotask(callback);\n            } else {\n                socket.destroy(err).on('close', callback);\n            }\n        },\n        get destroyed () {\n            return socket.destroyed;\n        },\n        busy (request) {\n            if (socket[kWriting] || socket[kReset] || socket[kBlocking]) {\n                return true;\n            }\n            if (request) {\n                if (client[kRunning] > 0 && !request.idempotent) {\n                    // Non-idempotent request cannot be retried.\n                    // Ensure that no other requests are inflight and\n                    // could cause failure.\n                    return true;\n                }\n                if (client[kRunning] > 0 && (request.upgrade || request.method === 'CONNECT')) {\n                    // Don't dispatch an upgrade until all preceding requests have completed.\n                    // A misbehaving server might upgrade the connection before all pipelined\n                    // request has completed.\n                    return true;\n                }\n                if (client[kRunning] > 0 && util.bodyLength(request.body) !== 0 && (util.isStream(request.body) || util.isAsyncIterable(request.body) || util.isFormDataLike(request.body))) {\n                    // Request with stream or iterator body can error while other requests\n                    // are inflight and indirectly error those as well.\n                    // Ensure this doesn't happen by waiting for inflight\n                    // to complete before dispatching.\n                    // Request with stream or iterator body cannot be retried.\n                    // Ensure that no other requests are inflight and\n                    // could cause failure.\n                    return true;\n                }\n            }\n            return false;\n        }\n    };\n}\nfunction resumeH1(client) {\n    const socket = client[kSocket];\n    if (socket && !socket.destroyed) {\n        if (client[kSize] === 0) {\n            if (!socket[kNoRef] && socket.unref) {\n                socket.unref();\n                socket[kNoRef] = true;\n            }\n        } else if (socket[kNoRef] && socket.ref) {\n            socket.ref();\n            socket[kNoRef] = false;\n        }\n        if (client[kSize] === 0) {\n            if (socket[kParser].timeoutType !== TIMEOUT_IDLE) {\n                socket[kParser].setTimeout(client[kKeepAliveTimeoutValue], TIMEOUT_IDLE);\n            }\n        } else if (client[kRunning] > 0 && socket[kParser].statusCode < 200) {\n            if (socket[kParser].timeoutType !== TIMEOUT_HEADERS) {\n                const request = client[kQueue][client[kRunningIdx]];\n                const headersTimeout = request.headersTimeout != null ? request.headersTimeout : client[kHeadersTimeout];\n                socket[kParser].setTimeout(headersTimeout, TIMEOUT_HEADERS);\n            }\n        }\n    }\n}\n// https://www.rfc-editor.org/rfc/rfc7230#section-3.3.2\nfunction shouldSendContentLength(method) {\n    return method !== 'GET' && method !== 'HEAD' && method !== 'OPTIONS' && method !== 'TRACE' && method !== 'CONNECT';\n}\nfunction writeH1(client, request) {\n    const { method, path, host, upgrade, blocking, reset } = request;\n    let { body, headers, contentLength } = request;\n    // https://tools.ietf.org/html/rfc7231#section-4.3.1\n    // https://tools.ietf.org/html/rfc7231#section-4.3.2\n    // https://tools.ietf.org/html/rfc7231#section-4.3.5\n    // Sending a payload body on a request that does not\n    // expect it can cause undefined behavior on some\n    // servers and corrupt connection state. Do not\n    // re-use the connection for further requests.\n    const expectsPayload = method === 'PUT' || method === 'POST' || method === 'PATCH';\n    if (util.isFormDataLike(body)) {\n        if (!extractBody) {\n            extractBody = (__webpack_require__(/*! ../web/fetch/body.js */ \"(ssr)/./node_modules/undici/lib/web/fetch/body.js\").extractBody);\n        }\n        const [bodyStream, contentType] = extractBody(body);\n        if (request.contentType == null) {\n            headers.push('content-type', contentType);\n        }\n        body = bodyStream.stream;\n        contentLength = bodyStream.length;\n    } else if (util.isBlobLike(body) && request.contentType == null && body.type) {\n        headers.push('content-type', body.type);\n    }\n    if (body && typeof body.read === 'function') {\n        // Try to read EOF in order to get length.\n        body.read(0);\n    }\n    const bodyLength = util.bodyLength(body);\n    contentLength = bodyLength ?? contentLength;\n    if (contentLength === null) {\n        contentLength = request.contentLength;\n    }\n    if (contentLength === 0 && !expectsPayload) {\n        // https://tools.ietf.org/html/rfc7230#section-3.3.2\n        // A user agent SHOULD NOT send a Content-Length header field when\n        // the request message does not contain a payload body and the method\n        // semantics do not anticipate such a body.\n        contentLength = null;\n    }\n    // https://github.com/nodejs/undici/issues/2046\n    // A user agent may send a Content-Length header with 0 value, this should be allowed.\n    if (shouldSendContentLength(method) && contentLength > 0 && request.contentLength !== null && request.contentLength !== contentLength) {\n        if (client[kStrictContentLength]) {\n            util.errorRequest(client, request, new RequestContentLengthMismatchError());\n            return false;\n        }\n        process.emitWarning(new RequestContentLengthMismatchError());\n    }\n    const socket = client[kSocket];\n    const abort = (err)=>{\n        if (request.aborted || request.completed) {\n            return;\n        }\n        util.errorRequest(client, request, err || new RequestAbortedError());\n        util.destroy(body);\n        util.destroy(socket, new InformationalError('aborted'));\n    };\n    try {\n        request.onConnect(abort);\n    } catch (err) {\n        util.errorRequest(client, request, err);\n    }\n    if (request.aborted) {\n        return false;\n    }\n    if (method === 'HEAD') {\n        // https://github.com/mcollina/undici/issues/258\n        // Close after a HEAD request to interop with misbehaving servers\n        // that may send a body in the response.\n        socket[kReset] = true;\n    }\n    if (upgrade || method === 'CONNECT') {\n        // On CONNECT or upgrade, block pipeline from dispatching further\n        // requests on this connection.\n        socket[kReset] = true;\n    }\n    if (reset != null) {\n        socket[kReset] = reset;\n    }\n    if (client[kMaxRequests] && socket[kCounter]++ >= client[kMaxRequests]) {\n        socket[kReset] = true;\n    }\n    if (blocking) {\n        socket[kBlocking] = true;\n    }\n    let header = `${method} ${path} HTTP/1.1\\r\\n`;\n    if (typeof host === 'string') {\n        header += `host: ${host}\\r\\n`;\n    } else {\n        header += client[kHostHeader];\n    }\n    if (upgrade) {\n        header += `connection: upgrade\\r\\nupgrade: ${upgrade}\\r\\n`;\n    } else if (client[kPipelining] && !socket[kReset]) {\n        header += 'connection: keep-alive\\r\\n';\n    } else {\n        header += 'connection: close\\r\\n';\n    }\n    if (Array.isArray(headers)) {\n        for(let n = 0; n < headers.length; n += 2){\n            const key = headers[n + 0];\n            const val = headers[n + 1];\n            if (Array.isArray(val)) {\n                for(let i = 0; i < val.length; i++){\n                    header += `${key}: ${val[i]}\\r\\n`;\n                }\n            } else {\n                header += `${key}: ${val}\\r\\n`;\n            }\n        }\n    }\n    if (channels.sendHeaders.hasSubscribers) {\n        channels.sendHeaders.publish({\n            request,\n            headers: header,\n            socket\n        });\n    }\n    /* istanbul ignore else: assertion */ if (!body || bodyLength === 0) {\n        writeBuffer(abort, null, client, request, socket, contentLength, header, expectsPayload);\n    } else if (util.isBuffer(body)) {\n        writeBuffer(abort, body, client, request, socket, contentLength, header, expectsPayload);\n    } else if (util.isBlobLike(body)) {\n        if (typeof body.stream === 'function') {\n            writeIterable(abort, body.stream(), client, request, socket, contentLength, header, expectsPayload);\n        } else {\n            writeBlob(abort, body, client, request, socket, contentLength, header, expectsPayload);\n        }\n    } else if (util.isStream(body)) {\n        writeStream(abort, body, client, request, socket, contentLength, header, expectsPayload);\n    } else if (util.isIterable(body)) {\n        writeIterable(abort, body, client, request, socket, contentLength, header, expectsPayload);\n    } else {\n        assert(false);\n    }\n    return true;\n}\nfunction writeStream(abort, body, client, request, socket, contentLength, header, expectsPayload) {\n    assert(contentLength !== 0 || client[kRunning] === 0, 'stream body cannot be pipelined');\n    let finished = false;\n    const writer = new AsyncWriter({\n        abort,\n        socket,\n        request,\n        contentLength,\n        client,\n        expectsPayload,\n        header\n    });\n    const onData = function(chunk) {\n        if (finished) {\n            return;\n        }\n        try {\n            if (!writer.write(chunk) && this.pause) {\n                this.pause();\n            }\n        } catch (err) {\n            util.destroy(this, err);\n        }\n    };\n    const onDrain = function() {\n        if (finished) {\n            return;\n        }\n        if (body.resume) {\n            body.resume();\n        }\n    };\n    const onClose = function() {\n        // 'close' might be emitted *before* 'error' for\n        // broken streams. Wait a tick to avoid this case.\n        queueMicrotask(()=>{\n            // It's only safe to remove 'error' listener after\n            // 'close'.\n            body.removeListener('error', onFinished);\n        });\n        if (!finished) {\n            const err = new RequestAbortedError();\n            queueMicrotask(()=>onFinished(err));\n        }\n    };\n    const onFinished = function(err) {\n        if (finished) {\n            return;\n        }\n        finished = true;\n        assert(socket.destroyed || socket[kWriting] && client[kRunning] <= 1);\n        socket.off('drain', onDrain).off('error', onFinished);\n        body.removeListener('data', onData).removeListener('end', onFinished).removeListener('close', onClose);\n        if (!err) {\n            try {\n                writer.end();\n            } catch (er) {\n                err = er;\n            }\n        }\n        writer.destroy(err);\n        if (err && (err.code !== 'UND_ERR_INFO' || err.message !== 'reset')) {\n            util.destroy(body, err);\n        } else {\n            util.destroy(body);\n        }\n    };\n    body.on('data', onData).on('end', onFinished).on('error', onFinished).on('close', onClose);\n    if (body.resume) {\n        body.resume();\n    }\n    socket.on('drain', onDrain).on('error', onFinished);\n    if (body.errorEmitted ?? body.errored) {\n        setImmediate(()=>onFinished(body.errored));\n    } else if (body.endEmitted ?? body.readableEnded) {\n        setImmediate(()=>onFinished(null));\n    }\n    if (body.closeEmitted ?? body.closed) {\n        setImmediate(onClose);\n    }\n}\nfunction writeBuffer(abort, body, client, request, socket, contentLength, header, expectsPayload) {\n    try {\n        if (!body) {\n            if (contentLength === 0) {\n                socket.write(`${header}content-length: 0\\r\\n\\r\\n`, 'latin1');\n            } else {\n                assert(contentLength === null, 'no body must not have content length');\n                socket.write(`${header}\\r\\n`, 'latin1');\n            }\n        } else if (util.isBuffer(body)) {\n            assert(contentLength === body.byteLength, 'buffer body must have content length');\n            socket.cork();\n            socket.write(`${header}content-length: ${contentLength}\\r\\n\\r\\n`, 'latin1');\n            socket.write(body);\n            socket.uncork();\n            request.onBodySent(body);\n            if (!expectsPayload) {\n                socket[kReset] = true;\n            }\n        }\n        request.onRequestSent();\n        client[kResume]();\n    } catch (err) {\n        abort(err);\n    }\n}\nasync function writeBlob(abort, body, client, request, socket, contentLength, header, expectsPayload) {\n    assert(contentLength === body.size, 'blob body must have content length');\n    try {\n        if (contentLength != null && contentLength !== body.size) {\n            throw new RequestContentLengthMismatchError();\n        }\n        const buffer = Buffer.from(await body.arrayBuffer());\n        socket.cork();\n        socket.write(`${header}content-length: ${contentLength}\\r\\n\\r\\n`, 'latin1');\n        socket.write(buffer);\n        socket.uncork();\n        request.onBodySent(buffer);\n        request.onRequestSent();\n        if (!expectsPayload) {\n            socket[kReset] = true;\n        }\n        client[kResume]();\n    } catch (err) {\n        abort(err);\n    }\n}\nasync function writeIterable(abort, body, client, request, socket, contentLength, header, expectsPayload) {\n    assert(contentLength !== 0 || client[kRunning] === 0, 'iterator body cannot be pipelined');\n    let callback = null;\n    function onDrain() {\n        if (callback) {\n            const cb = callback;\n            callback = null;\n            cb();\n        }\n    }\n    const waitForDrain = ()=>new Promise((resolve, reject)=>{\n            assert(callback === null);\n            if (socket[kError]) {\n                reject(socket[kError]);\n            } else {\n                callback = resolve;\n            }\n        });\n    socket.on('close', onDrain).on('drain', onDrain);\n    const writer = new AsyncWriter({\n        abort,\n        socket,\n        request,\n        contentLength,\n        client,\n        expectsPayload,\n        header\n    });\n    try {\n        // It's up to the user to somehow abort the async iterable.\n        for await (const chunk of body){\n            if (socket[kError]) {\n                throw socket[kError];\n            }\n            if (!writer.write(chunk)) {\n                await waitForDrain();\n            }\n        }\n        writer.end();\n    } catch (err) {\n        writer.destroy(err);\n    } finally{\n        socket.off('close', onDrain).off('drain', onDrain);\n    }\n}\nclass AsyncWriter {\n    constructor({ abort, socket, request, contentLength, client, expectsPayload, header }){\n        this.socket = socket;\n        this.request = request;\n        this.contentLength = contentLength;\n        this.client = client;\n        this.bytesWritten = 0;\n        this.expectsPayload = expectsPayload;\n        this.header = header;\n        this.abort = abort;\n        socket[kWriting] = true;\n    }\n    write(chunk) {\n        const { socket, request, contentLength, client, bytesWritten, expectsPayload, header } = this;\n        if (socket[kError]) {\n            throw socket[kError];\n        }\n        if (socket.destroyed) {\n            return false;\n        }\n        const len = Buffer.byteLength(chunk);\n        if (!len) {\n            return true;\n        }\n        // We should defer writing chunks.\n        if (contentLength !== null && bytesWritten + len > contentLength) {\n            if (client[kStrictContentLength]) {\n                throw new RequestContentLengthMismatchError();\n            }\n            process.emitWarning(new RequestContentLengthMismatchError());\n        }\n        socket.cork();\n        if (bytesWritten === 0) {\n            if (!expectsPayload) {\n                socket[kReset] = true;\n            }\n            if (contentLength === null) {\n                socket.write(`${header}transfer-encoding: chunked\\r\\n`, 'latin1');\n            } else {\n                socket.write(`${header}content-length: ${contentLength}\\r\\n\\r\\n`, 'latin1');\n            }\n        }\n        if (contentLength === null) {\n            socket.write(`\\r\\n${len.toString(16)}\\r\\n`, 'latin1');\n        }\n        this.bytesWritten += len;\n        const ret = socket.write(chunk);\n        socket.uncork();\n        request.onBodySent(chunk);\n        if (!ret) {\n            if (socket[kParser].timeout && socket[kParser].timeoutType === TIMEOUT_HEADERS) {\n                // istanbul ignore else: only for jest\n                if (socket[kParser].timeout.refresh) {\n                    socket[kParser].timeout.refresh();\n                }\n            }\n        }\n        return ret;\n    }\n    end() {\n        const { socket, contentLength, client, bytesWritten, expectsPayload, header, request } = this;\n        request.onRequestSent();\n        socket[kWriting] = false;\n        if (socket[kError]) {\n            throw socket[kError];\n        }\n        if (socket.destroyed) {\n            return;\n        }\n        if (bytesWritten === 0) {\n            if (expectsPayload) {\n                // https://tools.ietf.org/html/rfc7230#section-3.3.2\n                // A user agent SHOULD send a Content-Length in a request message when\n                // no Transfer-Encoding is sent and the request method defines a meaning\n                // for an enclosed payload body.\n                socket.write(`${header}content-length: 0\\r\\n\\r\\n`, 'latin1');\n            } else {\n                socket.write(`${header}\\r\\n`, 'latin1');\n            }\n        } else if (contentLength === null) {\n            socket.write('\\r\\n0\\r\\n\\r\\n', 'latin1');\n        }\n        if (contentLength !== null && bytesWritten !== contentLength) {\n            if (client[kStrictContentLength]) {\n                throw new RequestContentLengthMismatchError();\n            } else {\n                process.emitWarning(new RequestContentLengthMismatchError());\n            }\n        }\n        if (socket[kParser].timeout && socket[kParser].timeoutType === TIMEOUT_HEADERS) {\n            // istanbul ignore else: only for jest\n            if (socket[kParser].timeout.refresh) {\n                socket[kParser].timeout.refresh();\n            }\n        }\n        client[kResume]();\n    }\n    destroy(err) {\n        const { socket, client, abort } = this;\n        socket[kWriting] = false;\n        if (err) {\n            assert(client[kRunning] <= 1, 'pipeline should only contain this request');\n            abort(err);\n        }\n    }\n}\nmodule.exports = connectH1;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/dispatcher/client-h1.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/dispatcher/client-h2.js":
/*!*********************************************************!*\
  !*** ./node_modules/undici/lib/dispatcher/client-h2.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst assert = __webpack_require__(/*! node:assert */ \"node:assert\");\nconst { pipeline } = __webpack_require__(/*! node:stream */ \"node:stream\");\nconst util = __webpack_require__(/*! ../core/util.js */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst { RequestContentLengthMismatchError, RequestAbortedError, SocketError, InformationalError } = __webpack_require__(/*! ../core/errors.js */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst { kUrl, kReset, kClient, kRunning, kPending, kQueue, kPendingIdx, kRunningIdx, kError, kSocket, kStrictContentLength, kOnError, kMaxConcurrentStreams, kHTTP2Session, kResume } = __webpack_require__(/*! ../core/symbols.js */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst kOpenStreams = Symbol('open streams');\n// Experimental\nlet h2ExperimentalWarned = false;\n/** @type {import('http2')} */ let http2;\ntry {\n    http2 = __webpack_require__(/*! node:http2 */ \"node:http2\");\n} catch  {\n    // @ts-ignore\n    http2 = {\n        constants: {}\n    };\n}\nconst { constants: { HTTP2_HEADER_AUTHORITY, HTTP2_HEADER_METHOD, HTTP2_HEADER_PATH, HTTP2_HEADER_SCHEME, HTTP2_HEADER_CONTENT_LENGTH, HTTP2_HEADER_EXPECT, HTTP2_HEADER_STATUS } } = http2;\nfunction parseH2Headers(headers) {\n    const result = [];\n    for (const [name, value] of Object.entries(headers)){\n        // h2 may concat the header value by array\n        // e.g. Set-Cookie\n        if (Array.isArray(value)) {\n            for (const subvalue of value){\n                // we need to provide each header value of header name\n                // because the headers handler expect name-value pair\n                result.push(Buffer.from(name), Buffer.from(subvalue));\n            }\n        } else {\n            result.push(Buffer.from(name), Buffer.from(value));\n        }\n    }\n    return result;\n}\nasync function connectH2(client, socket) {\n    client[kSocket] = socket;\n    if (!h2ExperimentalWarned) {\n        h2ExperimentalWarned = true;\n        process.emitWarning('H2 support is experimental, expect them to change at any time.', {\n            code: 'UNDICI-H2'\n        });\n    }\n    const session = http2.connect(client[kUrl], {\n        createConnection: ()=>socket,\n        peerMaxConcurrentStreams: client[kMaxConcurrentStreams]\n    });\n    session[kOpenStreams] = 0;\n    session[kClient] = client;\n    session[kSocket] = socket;\n    util.addListener(session, 'error', onHttp2SessionError);\n    util.addListener(session, 'frameError', onHttp2FrameError);\n    util.addListener(session, 'end', onHttp2SessionEnd);\n    util.addListener(session, 'goaway', onHTTP2GoAway);\n    util.addListener(session, 'close', function() {\n        const { [kClient]: client } = this;\n        const { [kSocket]: socket } = client;\n        const err = this[kSocket][kError] || this[kError] || new SocketError('closed', util.getSocketInfo(socket));\n        client[kHTTP2Session] = null;\n        if (client.destroyed) {\n            assert(client[kPending] === 0);\n            // Fail entire queue.\n            const requests = client[kQueue].splice(client[kRunningIdx]);\n            for(let i = 0; i < requests.length; i++){\n                const request = requests[i];\n                util.errorRequest(client, request, err);\n            }\n        }\n    });\n    session.unref();\n    client[kHTTP2Session] = session;\n    socket[kHTTP2Session] = session;\n    util.addListener(socket, 'error', function(err) {\n        assert(err.code !== 'ERR_TLS_CERT_ALTNAME_INVALID');\n        this[kError] = err;\n        this[kClient][kOnError](err);\n    });\n    util.addListener(socket, 'end', function() {\n        util.destroy(this, new SocketError('other side closed', util.getSocketInfo(this)));\n    });\n    util.addListener(socket, 'close', function() {\n        const err = this[kError] || new SocketError('closed', util.getSocketInfo(this));\n        client[kSocket] = null;\n        if (this[kHTTP2Session] != null) {\n            this[kHTTP2Session].destroy(err);\n        }\n        client[kPendingIdx] = client[kRunningIdx];\n        assert(client[kRunning] === 0);\n        client.emit('disconnect', client[kUrl], [\n            client\n        ], err);\n        client[kResume]();\n    });\n    let closed = false;\n    socket.on('close', ()=>{\n        closed = true;\n    });\n    return {\n        version: 'h2',\n        defaultPipelining: Infinity,\n        write (...args) {\n            // TODO (fix): return\n            writeH2(client, ...args);\n        },\n        resume () {},\n        destroy (err, callback) {\n            if (closed) {\n                queueMicrotask(callback);\n            } else {\n                // Destroying the socket will trigger the session close\n                socket.destroy(err).on('close', callback);\n            }\n        },\n        get destroyed () {\n            return socket.destroyed;\n        },\n        busy () {\n            return false;\n        }\n    };\n}\nfunction onHttp2SessionError(err) {\n    assert(err.code !== 'ERR_TLS_CERT_ALTNAME_INVALID');\n    this[kSocket][kError] = err;\n    this[kClient][kOnError](err);\n}\nfunction onHttp2FrameError(type, code, id) {\n    if (id === 0) {\n        const err = new InformationalError(`HTTP/2: \"frameError\" received - type ${type}, code ${code}`);\n        this[kSocket][kError] = err;\n        this[kClient][kOnError](err);\n    }\n}\nfunction onHttp2SessionEnd() {\n    const err = new SocketError('other side closed', util.getSocketInfo(this[kSocket]));\n    this.destroy(err);\n    util.destroy(this[kSocket], err);\n}\n/**\n * This is the root cause of #3011\n * We need to handle GOAWAY frames properly, and trigger the session close\n * along with the socket right away\n */ function onHTTP2GoAway(code) {\n    const err = new RequestAbortedError(`HTTP/2: \"GOAWAY\" frame received with code ${code}`);\n    // We need to trigger the close cycle right away\n    // We need to destroy the session and the socket\n    // Requests should be failed with the error after the current one is handled\n    this[kSocket][kError] = err;\n    this[kClient][kOnError](err);\n    this.unref();\n    util.destroy(this[kSocket], err);\n}\n// https://www.rfc-editor.org/rfc/rfc7230#section-3.3.2\nfunction shouldSendContentLength(method) {\n    return method !== 'GET' && method !== 'HEAD' && method !== 'OPTIONS' && method !== 'TRACE' && method !== 'CONNECT';\n}\nfunction writeH2(client, request) {\n    const session = client[kHTTP2Session];\n    const { body, method, path, host, upgrade, expectContinue, signal, headers: reqHeaders } = request;\n    if (upgrade) {\n        util.errorRequest(client, request, new Error('Upgrade not supported for H2'));\n        return false;\n    }\n    if (request.aborted) {\n        return false;\n    }\n    const headers = {};\n    for(let n = 0; n < reqHeaders.length; n += 2){\n        const key = reqHeaders[n + 0];\n        const val = reqHeaders[n + 1];\n        if (Array.isArray(val)) {\n            for(let i = 0; i < val.length; i++){\n                if (headers[key]) {\n                    headers[key] += `,${val[i]}`;\n                } else {\n                    headers[key] = val[i];\n                }\n            }\n        } else {\n            headers[key] = val;\n        }\n    }\n    /** @type {import('node:http2').ClientHttp2Stream} */ let stream;\n    const { hostname, port } = client[kUrl];\n    headers[HTTP2_HEADER_AUTHORITY] = host || `${hostname}${port ? `:${port}` : ''}`;\n    headers[HTTP2_HEADER_METHOD] = method;\n    const abort = (err)=>{\n        if (request.aborted || request.completed) {\n            return;\n        }\n        err = err || new RequestAbortedError();\n        util.errorRequest(client, request, err);\n        if (stream != null) {\n            util.destroy(stream, err);\n        }\n        // We do not destroy the socket as we can continue using the session\n        // the stream get's destroyed and the session remains to create new streams\n        util.destroy(body, err);\n    };\n    try {\n        // We are already connected, streams are pending.\n        // We can call on connect, and wait for abort\n        request.onConnect(abort);\n    } catch (err) {\n        util.errorRequest(client, request, err);\n    }\n    if (method === 'CONNECT') {\n        session.ref();\n        // We are already connected, streams are pending, first request\n        // will create a new stream. We trigger a request to create the stream and wait until\n        // `ready` event is triggered\n        // We disabled endStream to allow the user to write to the stream\n        stream = session.request(headers, {\n            endStream: false,\n            signal\n        });\n        if (stream.id && !stream.pending) {\n            request.onUpgrade(null, null, stream);\n            ++session[kOpenStreams];\n        } else {\n            stream.once('ready', ()=>{\n                request.onUpgrade(null, null, stream);\n                ++session[kOpenStreams];\n            });\n        }\n        stream.once('close', ()=>{\n            session[kOpenStreams] -= 1;\n            if (session[kOpenStreams] === 0) session.unref();\n        });\n        return true;\n    }\n    // https://tools.ietf.org/html/rfc7540#section-8.3\n    // :path and :scheme headers must be omitted when sending CONNECT\n    headers[HTTP2_HEADER_PATH] = path;\n    headers[HTTP2_HEADER_SCHEME] = 'https';\n    // https://tools.ietf.org/html/rfc7231#section-4.3.1\n    // https://tools.ietf.org/html/rfc7231#section-4.3.2\n    // https://tools.ietf.org/html/rfc7231#section-4.3.5\n    // Sending a payload body on a request that does not\n    // expect it can cause undefined behavior on some\n    // servers and corrupt connection state. Do not\n    // re-use the connection for further requests.\n    const expectsPayload = method === 'PUT' || method === 'POST' || method === 'PATCH';\n    if (body && typeof body.read === 'function') {\n        // Try to read EOF in order to get length.\n        body.read(0);\n    }\n    let contentLength = util.bodyLength(body);\n    if (contentLength == null) {\n        contentLength = request.contentLength;\n    }\n    if (contentLength === 0 || !expectsPayload) {\n        // https://tools.ietf.org/html/rfc7230#section-3.3.2\n        // A user agent SHOULD NOT send a Content-Length header field when\n        // the request message does not contain a payload body and the method\n        // semantics do not anticipate such a body.\n        contentLength = null;\n    }\n    // https://github.com/nodejs/undici/issues/2046\n    // A user agent may send a Content-Length header with 0 value, this should be allowed.\n    if (shouldSendContentLength(method) && contentLength > 0 && request.contentLength != null && request.contentLength !== contentLength) {\n        if (client[kStrictContentLength]) {\n            util.errorRequest(client, request, new RequestContentLengthMismatchError());\n            return false;\n        }\n        process.emitWarning(new RequestContentLengthMismatchError());\n    }\n    if (contentLength != null) {\n        assert(body, 'no body must not have content length');\n        headers[HTTP2_HEADER_CONTENT_LENGTH] = `${contentLength}`;\n    }\n    session.ref();\n    const shouldEndStream = method === 'GET' || method === 'HEAD' || body === null;\n    if (expectContinue) {\n        headers[HTTP2_HEADER_EXPECT] = '100-continue';\n        stream = session.request(headers, {\n            endStream: shouldEndStream,\n            signal\n        });\n        stream.once('continue', writeBodyH2);\n    } else {\n        stream = session.request(headers, {\n            endStream: shouldEndStream,\n            signal\n        });\n        writeBodyH2();\n    }\n    // Increment counter as we have new streams open\n    ++session[kOpenStreams];\n    stream.once('response', (headers)=>{\n        const { [HTTP2_HEADER_STATUS]: statusCode, ...realHeaders } = headers;\n        request.onResponseStarted();\n        // Due to the stream nature, it is possible we face a race condition\n        // where the stream has been assigned, but the request has been aborted\n        // the request remains in-flight and headers hasn't been received yet\n        // for those scenarios, best effort is to destroy the stream immediately\n        // as there's no value to keep it open.\n        if (request.aborted) {\n            const err = new RequestAbortedError();\n            util.errorRequest(client, request, err);\n            util.destroy(stream, err);\n            return;\n        }\n        if (request.onHeaders(Number(statusCode), parseH2Headers(realHeaders), stream.resume.bind(stream), '') === false) {\n            stream.pause();\n        }\n        stream.on('data', (chunk)=>{\n            if (request.onData(chunk) === false) {\n                stream.pause();\n            }\n        });\n    });\n    stream.once('end', ()=>{\n        // When state is null, it means we haven't consumed body and the stream still do not have\n        // a state.\n        // Present specially when using pipeline or stream\n        if (stream.state?.state == null || stream.state.state < 6) {\n            request.onComplete([]);\n            return;\n        }\n        // Stream is closed or half-closed-remote (6), decrement counter and cleanup\n        // It does not have sense to continue working with the stream as we do not\n        // have yet RST_STREAM support on client-side\n        if (session[kOpenStreams] === 0) {\n            session.unref();\n        }\n        abort(new InformationalError('HTTP/2: stream half-closed (remote)'));\n    });\n    stream.once('close', ()=>{\n        session[kOpenStreams] -= 1;\n        if (session[kOpenStreams] === 0) {\n            session.unref();\n        }\n    });\n    stream.once('error', function(err) {\n        abort(err);\n    });\n    stream.once('frameError', (type, code)=>{\n        abort(new InformationalError(`HTTP/2: \"frameError\" received - type ${type}, code ${code}`));\n    });\n    // stream.on('aborted', () => {\n    //   // TODO(HTTP/2): Support aborted\n    // })\n    // stream.on('timeout', () => {\n    //   // TODO(HTTP/2): Support timeout\n    // })\n    // stream.on('push', headers => {\n    //   // TODO(HTTP/2): Support push\n    // })\n    // stream.on('trailers', headers => {\n    //   // TODO(HTTP/2): Support trailers\n    // })\n    return true;\n    function writeBodyH2() {\n        /* istanbul ignore else: assertion */ if (!body || contentLength === 0) {\n            writeBuffer(abort, stream, null, client, request, client[kSocket], contentLength, expectsPayload);\n        } else if (util.isBuffer(body)) {\n            writeBuffer(abort, stream, body, client, request, client[kSocket], contentLength, expectsPayload);\n        } else if (util.isBlobLike(body)) {\n            if (typeof body.stream === 'function') {\n                writeIterable(abort, stream, body.stream(), client, request, client[kSocket], contentLength, expectsPayload);\n            } else {\n                writeBlob(abort, stream, body, client, request, client[kSocket], contentLength, expectsPayload);\n            }\n        } else if (util.isStream(body)) {\n            writeStream(abort, client[kSocket], expectsPayload, stream, body, client, request, contentLength);\n        } else if (util.isIterable(body)) {\n            writeIterable(abort, stream, body, client, request, client[kSocket], contentLength, expectsPayload);\n        } else {\n            assert(false);\n        }\n    }\n}\nfunction writeBuffer(abort, h2stream, body, client, request, socket, contentLength, expectsPayload) {\n    try {\n        if (body != null && util.isBuffer(body)) {\n            assert(contentLength === body.byteLength, 'buffer body must have content length');\n            h2stream.cork();\n            h2stream.write(body);\n            h2stream.uncork();\n            h2stream.end();\n            request.onBodySent(body);\n        }\n        if (!expectsPayload) {\n            socket[kReset] = true;\n        }\n        request.onRequestSent();\n        client[kResume]();\n    } catch (error) {\n        abort(error);\n    }\n}\nfunction writeStream(abort, socket, expectsPayload, h2stream, body, client, request, contentLength) {\n    assert(contentLength !== 0 || client[kRunning] === 0, 'stream body cannot be pipelined');\n    // For HTTP/2, is enough to pipe the stream\n    const pipe = pipeline(body, h2stream, (err)=>{\n        if (err) {\n            util.destroy(pipe, err);\n            abort(err);\n        } else {\n            util.removeAllListeners(pipe);\n            request.onRequestSent();\n            if (!expectsPayload) {\n                socket[kReset] = true;\n            }\n            client[kResume]();\n        }\n    });\n    util.addListener(pipe, 'data', onPipeData);\n    function onPipeData(chunk) {\n        request.onBodySent(chunk);\n    }\n}\nasync function writeBlob(abort, h2stream, body, client, request, socket, contentLength, expectsPayload) {\n    assert(contentLength === body.size, 'blob body must have content length');\n    try {\n        if (contentLength != null && contentLength !== body.size) {\n            throw new RequestContentLengthMismatchError();\n        }\n        const buffer = Buffer.from(await body.arrayBuffer());\n        h2stream.cork();\n        h2stream.write(buffer);\n        h2stream.uncork();\n        h2stream.end();\n        request.onBodySent(buffer);\n        request.onRequestSent();\n        if (!expectsPayload) {\n            socket[kReset] = true;\n        }\n        client[kResume]();\n    } catch (err) {\n        abort(err);\n    }\n}\nasync function writeIterable(abort, h2stream, body, client, request, socket, contentLength, expectsPayload) {\n    assert(contentLength !== 0 || client[kRunning] === 0, 'iterator body cannot be pipelined');\n    let callback = null;\n    function onDrain() {\n        if (callback) {\n            const cb = callback;\n            callback = null;\n            cb();\n        }\n    }\n    const waitForDrain = ()=>new Promise((resolve, reject)=>{\n            assert(callback === null);\n            if (socket[kError]) {\n                reject(socket[kError]);\n            } else {\n                callback = resolve;\n            }\n        });\n    h2stream.on('close', onDrain).on('drain', onDrain);\n    try {\n        // It's up to the user to somehow abort the async iterable.\n        for await (const chunk of body){\n            if (socket[kError]) {\n                throw socket[kError];\n            }\n            const res = h2stream.write(chunk);\n            request.onBodySent(chunk);\n            if (!res) {\n                await waitForDrain();\n            }\n        }\n        h2stream.end();\n        request.onRequestSent();\n        if (!expectsPayload) {\n            socket[kReset] = true;\n        }\n        client[kResume]();\n    } catch (err) {\n        abort(err);\n    } finally{\n        h2stream.off('close', onDrain).off('drain', onDrain);\n    }\n}\nmodule.exports = connectH2;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/dispatcher/client-h2.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/dispatcher/client.js":
/*!******************************************************!*\
  !*** ./node_modules/undici/lib/dispatcher/client.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// @ts-check\n\nconst assert = __webpack_require__(/*! node:assert */ \"node:assert\");\nconst net = __webpack_require__(/*! node:net */ \"node:net\");\nconst http = __webpack_require__(/*! node:http */ \"node:http\");\nconst util = __webpack_require__(/*! ../core/util.js */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst { channels } = __webpack_require__(/*! ../core/diagnostics.js */ \"(ssr)/./node_modules/undici/lib/core/diagnostics.js\");\nconst Request = __webpack_require__(/*! ../core/request.js */ \"(ssr)/./node_modules/undici/lib/core/request.js\");\nconst DispatcherBase = __webpack_require__(/*! ./dispatcher-base */ \"(ssr)/./node_modules/undici/lib/dispatcher/dispatcher-base.js\");\nconst { InvalidArgumentError, InformationalError, ClientDestroyedError } = __webpack_require__(/*! ../core/errors.js */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst buildConnector = __webpack_require__(/*! ../core/connect.js */ \"(ssr)/./node_modules/undici/lib/core/connect.js\");\nconst { kUrl, kServerName, kClient, kBusy, kConnect, kResuming, kRunning, kPending, kSize, kQueue, kConnected, kConnecting, kNeedDrain, kKeepAliveDefaultTimeout, kHostHeader, kPendingIdx, kRunningIdx, kError, kPipelining, kKeepAliveTimeoutValue, kMaxHeadersSize, kKeepAliveMaxTimeout, kKeepAliveTimeoutThreshold, kHeadersTimeout, kBodyTimeout, kStrictContentLength, kConnector, kMaxRedirections, kMaxRequests, kCounter, kClose, kDestroy, kDispatch, kInterceptors, kLocalAddress, kMaxResponseSize, kOnError, kHTTPContext, kMaxConcurrentStreams, kResume } = __webpack_require__(/*! ../core/symbols.js */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst connectH1 = __webpack_require__(/*! ./client-h1.js */ \"(ssr)/./node_modules/undici/lib/dispatcher/client-h1.js\");\nconst connectH2 = __webpack_require__(/*! ./client-h2.js */ \"(ssr)/./node_modules/undici/lib/dispatcher/client-h2.js\");\nlet deprecatedInterceptorWarned = false;\nconst kClosedResolve = Symbol('kClosedResolve');\nfunction getPipelining(client) {\n    return client[kPipelining] ?? client[kHTTPContext]?.defaultPipelining ?? 1;\n}\n/**\n * @type {import('../../types/client.js').default}\n */ class Client extends DispatcherBase {\n    /**\n   *\n   * @param {string|URL} url\n   * @param {import('../../types/client.js').Client.Options} options\n   */ constructor(url, { interceptors, maxHeaderSize, headersTimeout, socketTimeout, requestTimeout, connectTimeout, bodyTimeout, idleTimeout, keepAlive, keepAliveTimeout, maxKeepAliveTimeout, keepAliveMaxTimeout, keepAliveTimeoutThreshold, socketPath, pipelining, tls, strictContentLength, maxCachedSessions, maxRedirections, connect, maxRequestsPerClient, localAddress, maxResponseSize, autoSelectFamily, autoSelectFamilyAttemptTimeout, // h2\n    maxConcurrentStreams, allowH2 } = {}){\n        super();\n        if (keepAlive !== undefined) {\n            throw new InvalidArgumentError('unsupported keepAlive, use pipelining=0 instead');\n        }\n        if (socketTimeout !== undefined) {\n            throw new InvalidArgumentError('unsupported socketTimeout, use headersTimeout & bodyTimeout instead');\n        }\n        if (requestTimeout !== undefined) {\n            throw new InvalidArgumentError('unsupported requestTimeout, use headersTimeout & bodyTimeout instead');\n        }\n        if (idleTimeout !== undefined) {\n            throw new InvalidArgumentError('unsupported idleTimeout, use keepAliveTimeout instead');\n        }\n        if (maxKeepAliveTimeout !== undefined) {\n            throw new InvalidArgumentError('unsupported maxKeepAliveTimeout, use keepAliveMaxTimeout instead');\n        }\n        if (maxHeaderSize != null && !Number.isFinite(maxHeaderSize)) {\n            throw new InvalidArgumentError('invalid maxHeaderSize');\n        }\n        if (socketPath != null && typeof socketPath !== 'string') {\n            throw new InvalidArgumentError('invalid socketPath');\n        }\n        if (connectTimeout != null && (!Number.isFinite(connectTimeout) || connectTimeout < 0)) {\n            throw new InvalidArgumentError('invalid connectTimeout');\n        }\n        if (keepAliveTimeout != null && (!Number.isFinite(keepAliveTimeout) || keepAliveTimeout <= 0)) {\n            throw new InvalidArgumentError('invalid keepAliveTimeout');\n        }\n        if (keepAliveMaxTimeout != null && (!Number.isFinite(keepAliveMaxTimeout) || keepAliveMaxTimeout <= 0)) {\n            throw new InvalidArgumentError('invalid keepAliveMaxTimeout');\n        }\n        if (keepAliveTimeoutThreshold != null && !Number.isFinite(keepAliveTimeoutThreshold)) {\n            throw new InvalidArgumentError('invalid keepAliveTimeoutThreshold');\n        }\n        if (headersTimeout != null && (!Number.isInteger(headersTimeout) || headersTimeout < 0)) {\n            throw new InvalidArgumentError('headersTimeout must be a positive integer or zero');\n        }\n        if (bodyTimeout != null && (!Number.isInteger(bodyTimeout) || bodyTimeout < 0)) {\n            throw new InvalidArgumentError('bodyTimeout must be a positive integer or zero');\n        }\n        if (connect != null && typeof connect !== 'function' && typeof connect !== 'object') {\n            throw new InvalidArgumentError('connect must be a function or an object');\n        }\n        if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) {\n            throw new InvalidArgumentError('maxRedirections must be a positive number');\n        }\n        if (maxRequestsPerClient != null && (!Number.isInteger(maxRequestsPerClient) || maxRequestsPerClient < 0)) {\n            throw new InvalidArgumentError('maxRequestsPerClient must be a positive number');\n        }\n        if (localAddress != null && (typeof localAddress !== 'string' || net.isIP(localAddress) === 0)) {\n            throw new InvalidArgumentError('localAddress must be valid string IP address');\n        }\n        if (maxResponseSize != null && (!Number.isInteger(maxResponseSize) || maxResponseSize < -1)) {\n            throw new InvalidArgumentError('maxResponseSize must be a positive number');\n        }\n        if (autoSelectFamilyAttemptTimeout != null && (!Number.isInteger(autoSelectFamilyAttemptTimeout) || autoSelectFamilyAttemptTimeout < -1)) {\n            throw new InvalidArgumentError('autoSelectFamilyAttemptTimeout must be a positive number');\n        }\n        // h2\n        if (allowH2 != null && typeof allowH2 !== 'boolean') {\n            throw new InvalidArgumentError('allowH2 must be a valid boolean value');\n        }\n        if (maxConcurrentStreams != null && (typeof maxConcurrentStreams !== 'number' || maxConcurrentStreams < 1)) {\n            throw new InvalidArgumentError('maxConcurrentStreams must be a positive integer, greater than 0');\n        }\n        if (typeof connect !== 'function') {\n            connect = buildConnector({\n                ...tls,\n                maxCachedSessions,\n                allowH2,\n                socketPath,\n                timeout: connectTimeout,\n                ...autoSelectFamily ? {\n                    autoSelectFamily,\n                    autoSelectFamilyAttemptTimeout\n                } : undefined,\n                ...connect\n            });\n        }\n        if (interceptors?.Client && Array.isArray(interceptors.Client)) {\n            this[kInterceptors] = interceptors.Client;\n            if (!deprecatedInterceptorWarned) {\n                deprecatedInterceptorWarned = true;\n                process.emitWarning('Client.Options#interceptor is deprecated. Use Dispatcher#compose instead.', {\n                    code: 'UNDICI-CLIENT-INTERCEPTOR-DEPRECATED'\n                });\n            }\n        } else {\n            this[kInterceptors] = [\n                createRedirectInterceptor({\n                    maxRedirections\n                })\n            ];\n        }\n        this[kUrl] = util.parseOrigin(url);\n        this[kConnector] = connect;\n        this[kPipelining] = pipelining != null ? pipelining : 1;\n        this[kMaxHeadersSize] = maxHeaderSize || http.maxHeaderSize;\n        this[kKeepAliveDefaultTimeout] = keepAliveTimeout == null ? 4e3 : keepAliveTimeout;\n        this[kKeepAliveMaxTimeout] = keepAliveMaxTimeout == null ? 600e3 : keepAliveMaxTimeout;\n        this[kKeepAliveTimeoutThreshold] = keepAliveTimeoutThreshold == null ? 2e3 : keepAliveTimeoutThreshold;\n        this[kKeepAliveTimeoutValue] = this[kKeepAliveDefaultTimeout];\n        this[kServerName] = null;\n        this[kLocalAddress] = localAddress != null ? localAddress : null;\n        this[kResuming] = 0; // 0, idle, 1, scheduled, 2 resuming\n        this[kNeedDrain] = 0; // 0, idle, 1, scheduled, 2 resuming\n        this[kHostHeader] = `host: ${this[kUrl].hostname}${this[kUrl].port ? `:${this[kUrl].port}` : ''}\\r\\n`;\n        this[kBodyTimeout] = bodyTimeout != null ? bodyTimeout : 300e3;\n        this[kHeadersTimeout] = headersTimeout != null ? headersTimeout : 300e3;\n        this[kStrictContentLength] = strictContentLength == null ? true : strictContentLength;\n        this[kMaxRedirections] = maxRedirections;\n        this[kMaxRequests] = maxRequestsPerClient;\n        this[kClosedResolve] = null;\n        this[kMaxResponseSize] = maxResponseSize > -1 ? maxResponseSize : -1;\n        this[kMaxConcurrentStreams] = maxConcurrentStreams != null ? maxConcurrentStreams : 100; // Max peerConcurrentStreams for a Node h2 server\n        this[kHTTPContext] = null;\n        // kQueue is built up of 3 sections separated by\n        // the kRunningIdx and kPendingIdx indices.\n        // |   complete   |   running   |   pending   |\n        //                ^ kRunningIdx ^ kPendingIdx ^ kQueue.length\n        // kRunningIdx points to the first running element.\n        // kPendingIdx points to the first pending element.\n        // This implements a fast queue with an amortized\n        // time of O(1).\n        this[kQueue] = [];\n        this[kRunningIdx] = 0;\n        this[kPendingIdx] = 0;\n        this[kResume] = (sync)=>resume(this, sync);\n        this[kOnError] = (err)=>onError(this, err);\n    }\n    get pipelining() {\n        return this[kPipelining];\n    }\n    set pipelining(value) {\n        this[kPipelining] = value;\n        this[kResume](true);\n    }\n    get [kPending]() {\n        return this[kQueue].length - this[kPendingIdx];\n    }\n    get [kRunning]() {\n        return this[kPendingIdx] - this[kRunningIdx];\n    }\n    get [kSize]() {\n        return this[kQueue].length - this[kRunningIdx];\n    }\n    get [kConnected]() {\n        return !!this[kHTTPContext] && !this[kConnecting] && !this[kHTTPContext].destroyed;\n    }\n    get [kBusy]() {\n        return Boolean(this[kHTTPContext]?.busy(null) || this[kSize] >= (getPipelining(this) || 1) || this[kPending] > 0);\n    }\n    /* istanbul ignore: only used for test */ [kConnect](cb) {\n        connect(this);\n        this.once('connect', cb);\n    }\n    [kDispatch](opts, handler) {\n        const origin = opts.origin || this[kUrl].origin;\n        const request = new Request(origin, opts, handler);\n        this[kQueue].push(request);\n        if (this[kResuming]) {\n        // Do nothing.\n        } else if (util.bodyLength(request.body) == null && util.isIterable(request.body)) {\n            // Wait a tick in case stream/iterator is ended in the same tick.\n            this[kResuming] = 1;\n            queueMicrotask(()=>resume(this));\n        } else {\n            this[kResume](true);\n        }\n        if (this[kResuming] && this[kNeedDrain] !== 2 && this[kBusy]) {\n            this[kNeedDrain] = 2;\n        }\n        return this[kNeedDrain] < 2;\n    }\n    async [kClose]() {\n        // TODO: for H2 we need to gracefully flush the remaining enqueued\n        // request and close each stream.\n        return new Promise((resolve)=>{\n            if (this[kSize]) {\n                this[kClosedResolve] = resolve;\n            } else {\n                resolve(null);\n            }\n        });\n    }\n    async [kDestroy](err) {\n        return new Promise((resolve)=>{\n            const requests = this[kQueue].splice(this[kPendingIdx]);\n            for(let i = 0; i < requests.length; i++){\n                const request = requests[i];\n                util.errorRequest(this, request, err);\n            }\n            const callback = ()=>{\n                if (this[kClosedResolve]) {\n                    // TODO (fix): Should we error here with ClientDestroyedError?\n                    this[kClosedResolve]();\n                    this[kClosedResolve] = null;\n                }\n                resolve(null);\n            };\n            if (this[kHTTPContext]) {\n                this[kHTTPContext].destroy(err, callback);\n                this[kHTTPContext] = null;\n            } else {\n                queueMicrotask(callback);\n            }\n            this[kResume]();\n        });\n    }\n}\nconst createRedirectInterceptor = __webpack_require__(/*! ../interceptor/redirect-interceptor.js */ \"(ssr)/./node_modules/undici/lib/interceptor/redirect-interceptor.js\");\nfunction onError(client, err) {\n    if (client[kRunning] === 0 && err.code !== 'UND_ERR_INFO' && err.code !== 'UND_ERR_SOCKET') {\n        // Error is not caused by running request and not a recoverable\n        // socket error.\n        assert(client[kPendingIdx] === client[kRunningIdx]);\n        const requests = client[kQueue].splice(client[kRunningIdx]);\n        for(let i = 0; i < requests.length; i++){\n            const request = requests[i];\n            util.errorRequest(client, request, err);\n        }\n        assert(client[kSize] === 0);\n    }\n}\nasync function connect(client) {\n    assert(!client[kConnecting]);\n    assert(!client[kHTTPContext]);\n    let { host, hostname, protocol, port } = client[kUrl];\n    // Resolve ipv6\n    if (hostname[0] === '[') {\n        const idx = hostname.indexOf(']');\n        assert(idx !== -1);\n        const ip = hostname.substring(1, idx);\n        assert(net.isIP(ip));\n        hostname = ip;\n    }\n    client[kConnecting] = true;\n    if (channels.beforeConnect.hasSubscribers) {\n        channels.beforeConnect.publish({\n            connectParams: {\n                host,\n                hostname,\n                protocol,\n                port,\n                version: client[kHTTPContext]?.version,\n                servername: client[kServerName],\n                localAddress: client[kLocalAddress]\n            },\n            connector: client[kConnector]\n        });\n    }\n    try {\n        const socket = await new Promise((resolve, reject)=>{\n            client[kConnector]({\n                host,\n                hostname,\n                protocol,\n                port,\n                servername: client[kServerName],\n                localAddress: client[kLocalAddress]\n            }, (err, socket)=>{\n                if (err) {\n                    reject(err);\n                } else {\n                    resolve(socket);\n                }\n            });\n        });\n        if (client.destroyed) {\n            util.destroy(socket.on('error', ()=>{}), new ClientDestroyedError());\n            return;\n        }\n        assert(socket);\n        try {\n            client[kHTTPContext] = socket.alpnProtocol === 'h2' ? await connectH2(client, socket) : await connectH1(client, socket);\n        } catch (err) {\n            socket.destroy().on('error', ()=>{});\n            throw err;\n        }\n        client[kConnecting] = false;\n        socket[kCounter] = 0;\n        socket[kMaxRequests] = client[kMaxRequests];\n        socket[kClient] = client;\n        socket[kError] = null;\n        if (channels.connected.hasSubscribers) {\n            channels.connected.publish({\n                connectParams: {\n                    host,\n                    hostname,\n                    protocol,\n                    port,\n                    version: client[kHTTPContext]?.version,\n                    servername: client[kServerName],\n                    localAddress: client[kLocalAddress]\n                },\n                connector: client[kConnector],\n                socket\n            });\n        }\n        client.emit('connect', client[kUrl], [\n            client\n        ]);\n    } catch (err) {\n        if (client.destroyed) {\n            return;\n        }\n        client[kConnecting] = false;\n        if (channels.connectError.hasSubscribers) {\n            channels.connectError.publish({\n                connectParams: {\n                    host,\n                    hostname,\n                    protocol,\n                    port,\n                    version: client[kHTTPContext]?.version,\n                    servername: client[kServerName],\n                    localAddress: client[kLocalAddress]\n                },\n                connector: client[kConnector],\n                error: err\n            });\n        }\n        if (err.code === 'ERR_TLS_CERT_ALTNAME_INVALID') {\n            assert(client[kRunning] === 0);\n            while(client[kPending] > 0 && client[kQueue][client[kPendingIdx]].servername === client[kServerName]){\n                const request = client[kQueue][client[kPendingIdx]++];\n                util.errorRequest(client, request, err);\n            }\n        } else {\n            onError(client, err);\n        }\n        client.emit('connectionError', client[kUrl], [\n            client\n        ], err);\n    }\n    client[kResume]();\n}\nfunction emitDrain(client) {\n    client[kNeedDrain] = 0;\n    client.emit('drain', client[kUrl], [\n        client\n    ]);\n}\nfunction resume(client, sync) {\n    if (client[kResuming] === 2) {\n        return;\n    }\n    client[kResuming] = 2;\n    _resume(client, sync);\n    client[kResuming] = 0;\n    if (client[kRunningIdx] > 256) {\n        client[kQueue].splice(0, client[kRunningIdx]);\n        client[kPendingIdx] -= client[kRunningIdx];\n        client[kRunningIdx] = 0;\n    }\n}\nfunction _resume(client, sync) {\n    while(true){\n        if (client.destroyed) {\n            assert(client[kPending] === 0);\n            return;\n        }\n        if (client[kClosedResolve] && !client[kSize]) {\n            client[kClosedResolve]();\n            client[kClosedResolve] = null;\n            return;\n        }\n        if (client[kHTTPContext]) {\n            client[kHTTPContext].resume();\n        }\n        if (client[kBusy]) {\n            client[kNeedDrain] = 2;\n        } else if (client[kNeedDrain] === 2) {\n            if (sync) {\n                client[kNeedDrain] = 1;\n                queueMicrotask(()=>emitDrain(client));\n            } else {\n                emitDrain(client);\n            }\n            continue;\n        }\n        if (client[kPending] === 0) {\n            return;\n        }\n        if (client[kRunning] >= (getPipelining(client) || 1)) {\n            return;\n        }\n        const request = client[kQueue][client[kPendingIdx]];\n        if (client[kUrl].protocol === 'https:' && client[kServerName] !== request.servername) {\n            if (client[kRunning] > 0) {\n                return;\n            }\n            client[kServerName] = request.servername;\n            client[kHTTPContext]?.destroy(new InformationalError('servername changed'), ()=>{\n                client[kHTTPContext] = null;\n                resume(client);\n            });\n        }\n        if (client[kConnecting]) {\n            return;\n        }\n        if (!client[kHTTPContext]) {\n            connect(client);\n            return;\n        }\n        if (client[kHTTPContext].destroyed) {\n            return;\n        }\n        if (client[kHTTPContext].busy(request)) {\n            return;\n        }\n        if (!request.aborted && client[kHTTPContext].write(request)) {\n            client[kPendingIdx]++;\n        } else {\n            client[kQueue].splice(client[kPendingIdx], 1);\n        }\n    }\n}\nmodule.exports = Client;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/dispatcher/client.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/dispatcher/dispatcher-base.js":
/*!***************************************************************!*\
  !*** ./node_modules/undici/lib/dispatcher/dispatcher-base.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst Dispatcher = __webpack_require__(/*! ./dispatcher */ \"(ssr)/./node_modules/undici/lib/dispatcher/dispatcher.js\");\nconst { ClientDestroyedError, ClientClosedError, InvalidArgumentError } = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst { kDestroy, kClose, kClosed, kDestroyed, kDispatch, kInterceptors } = __webpack_require__(/*! ../core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst kOnDestroyed = Symbol('onDestroyed');\nconst kOnClosed = Symbol('onClosed');\nconst kInterceptedDispatch = Symbol('Intercepted Dispatch');\nclass DispatcherBase extends Dispatcher {\n    constructor(){\n        super();\n        this[kDestroyed] = false;\n        this[kOnDestroyed] = null;\n        this[kClosed] = false;\n        this[kOnClosed] = [];\n    }\n    get destroyed() {\n        return this[kDestroyed];\n    }\n    get closed() {\n        return this[kClosed];\n    }\n    get interceptors() {\n        return this[kInterceptors];\n    }\n    set interceptors(newInterceptors) {\n        if (newInterceptors) {\n            for(let i = newInterceptors.length - 1; i >= 0; i--){\n                const interceptor = this[kInterceptors][i];\n                if (typeof interceptor !== 'function') {\n                    throw new InvalidArgumentError('interceptor must be an function');\n                }\n            }\n        }\n        this[kInterceptors] = newInterceptors;\n    }\n    close(callback) {\n        if (callback === undefined) {\n            return new Promise((resolve, reject)=>{\n                this.close((err, data)=>{\n                    return err ? reject(err) : resolve(data);\n                });\n            });\n        }\n        if (typeof callback !== 'function') {\n            throw new InvalidArgumentError('invalid callback');\n        }\n        if (this[kDestroyed]) {\n            queueMicrotask(()=>callback(new ClientDestroyedError(), null));\n            return;\n        }\n        if (this[kClosed]) {\n            if (this[kOnClosed]) {\n                this[kOnClosed].push(callback);\n            } else {\n                queueMicrotask(()=>callback(null, null));\n            }\n            return;\n        }\n        this[kClosed] = true;\n        this[kOnClosed].push(callback);\n        const onClosed = ()=>{\n            const callbacks = this[kOnClosed];\n            this[kOnClosed] = null;\n            for(let i = 0; i < callbacks.length; i++){\n                callbacks[i](null, null);\n            }\n        };\n        // Should not error.\n        this[kClose]().then(()=>this.destroy()).then(()=>{\n            queueMicrotask(onClosed);\n        });\n    }\n    destroy(err, callback) {\n        if (typeof err === 'function') {\n            callback = err;\n            err = null;\n        }\n        if (callback === undefined) {\n            return new Promise((resolve, reject)=>{\n                this.destroy(err, (err, data)=>{\n                    return err ? /* istanbul ignore next: should never error */ reject(err) : resolve(data);\n                });\n            });\n        }\n        if (typeof callback !== 'function') {\n            throw new InvalidArgumentError('invalid callback');\n        }\n        if (this[kDestroyed]) {\n            if (this[kOnDestroyed]) {\n                this[kOnDestroyed].push(callback);\n            } else {\n                queueMicrotask(()=>callback(null, null));\n            }\n            return;\n        }\n        if (!err) {\n            err = new ClientDestroyedError();\n        }\n        this[kDestroyed] = true;\n        this[kOnDestroyed] = this[kOnDestroyed] || [];\n        this[kOnDestroyed].push(callback);\n        const onDestroyed = ()=>{\n            const callbacks = this[kOnDestroyed];\n            this[kOnDestroyed] = null;\n            for(let i = 0; i < callbacks.length; i++){\n                callbacks[i](null, null);\n            }\n        };\n        // Should not error.\n        this[kDestroy](err).then(()=>{\n            queueMicrotask(onDestroyed);\n        });\n    }\n    [kInterceptedDispatch](opts, handler) {\n        if (!this[kInterceptors] || this[kInterceptors].length === 0) {\n            this[kInterceptedDispatch] = this[kDispatch];\n            return this[kDispatch](opts, handler);\n        }\n        let dispatch = this[kDispatch].bind(this);\n        for(let i = this[kInterceptors].length - 1; i >= 0; i--){\n            dispatch = this[kInterceptors][i](dispatch);\n        }\n        this[kInterceptedDispatch] = dispatch;\n        return dispatch(opts, handler);\n    }\n    dispatch(opts, handler) {\n        if (!handler || typeof handler !== 'object') {\n            throw new InvalidArgumentError('handler must be an object');\n        }\n        try {\n            if (!opts || typeof opts !== 'object') {\n                throw new InvalidArgumentError('opts must be an object.');\n            }\n            if (this[kDestroyed] || this[kOnDestroyed]) {\n                throw new ClientDestroyedError();\n            }\n            if (this[kClosed]) {\n                throw new ClientClosedError();\n            }\n            return this[kInterceptedDispatch](opts, handler);\n        } catch (err) {\n            if (typeof handler.onError !== 'function') {\n                throw new InvalidArgumentError('invalid onError method');\n            }\n            handler.onError(err);\n            return false;\n        }\n    }\n}\nmodule.exports = DispatcherBase;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/dispatcher/dispatcher-base.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/dispatcher/dispatcher.js":
/*!**********************************************************!*\
  !*** ./node_modules/undici/lib/dispatcher/dispatcher.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst EventEmitter = __webpack_require__(/*! node:events */ \"node:events\");\nclass Dispatcher extends EventEmitter {\n    dispatch() {\n        throw new Error('not implemented');\n    }\n    close() {\n        throw new Error('not implemented');\n    }\n    destroy() {\n        throw new Error('not implemented');\n    }\n    compose(...args) {\n        // So we handle [interceptor1, interceptor2] or interceptor1, interceptor2, ...\n        const interceptors = Array.isArray(args[0]) ? args[0] : args;\n        let dispatch = this.dispatch.bind(this);\n        for (const interceptor of interceptors){\n            if (interceptor == null) {\n                continue;\n            }\n            if (typeof interceptor !== 'function') {\n                throw new TypeError(`invalid interceptor, expected function received ${typeof interceptor}`);\n            }\n            dispatch = interceptor(dispatch);\n            if (dispatch == null || typeof dispatch !== 'function' || dispatch.length !== 2) {\n                throw new TypeError('invalid interceptor');\n            }\n        }\n        return new ComposedDispatcher(this, dispatch);\n    }\n}\nclass ComposedDispatcher extends Dispatcher {\n    #dispatcher;\n    #dispatch;\n    constructor(dispatcher, dispatch){\n        super(), this.#dispatcher = null, this.#dispatch = null;\n        this.#dispatcher = dispatcher;\n        this.#dispatch = dispatch;\n    }\n    dispatch(...args) {\n        this.#dispatch(...args);\n    }\n    close(...args) {\n        return this.#dispatcher.close(...args);\n    }\n    destroy(...args) {\n        return this.#dispatcher.destroy(...args);\n    }\n}\nmodule.exports = Dispatcher;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9kaXNwYXRjaGVyL2Rpc3BhdGNoZXIuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxNQUFNQSxlQUFlQyxtQkFBT0EsQ0FBQyxnQ0FBYTtBQUUxQyxNQUFNQyxtQkFBbUJGO0lBQ3ZCRyxXQUFZO1FBQ1YsTUFBTSxJQUFJQyxNQUFNO0lBQ2xCO0lBRUFDLFFBQVM7UUFDUCxNQUFNLElBQUlELE1BQU07SUFDbEI7SUFFQUUsVUFBVztRQUNULE1BQU0sSUFBSUYsTUFBTTtJQUNsQjtJQUVBRyxRQUFTLEdBQUdDLElBQUksRUFBRTtRQUNoQiwrRUFBK0U7UUFDL0UsTUFBTUMsZUFBZUMsTUFBTUMsT0FBTyxDQUFDSCxJQUFJLENBQUMsRUFBRSxJQUFJQSxJQUFJLENBQUMsRUFBRSxHQUFHQTtRQUN4RCxJQUFJTCxXQUFXLElBQUksQ0FBQ0EsUUFBUSxDQUFDUyxJQUFJLENBQUMsSUFBSTtRQUV0QyxLQUFLLE1BQU1DLGVBQWVKLGFBQWM7WUFDdEMsSUFBSUksZUFBZSxNQUFNO2dCQUN2QjtZQUNGO1lBRUEsSUFBSSxPQUFPQSxnQkFBZ0IsWUFBWTtnQkFDckMsTUFBTSxJQUFJQyxVQUFVLENBQUMsZ0RBQWdELEVBQUUsT0FBT0QsYUFBYTtZQUM3RjtZQUVBVixXQUFXVSxZQUFZVjtZQUV2QixJQUFJQSxZQUFZLFFBQVEsT0FBT0EsYUFBYSxjQUFjQSxTQUFTWSxNQUFNLEtBQUssR0FBRztnQkFDL0UsTUFBTSxJQUFJRCxVQUFVO1lBQ3RCO1FBQ0Y7UUFFQSxPQUFPLElBQUlFLG1CQUFtQixJQUFJLEVBQUViO0lBQ3RDO0FBQ0Y7QUFFQSxNQUFNYSwyQkFBMkJkO0lBQy9CLFdBQVcsQ0FBTztJQUNsQixTQUFTLENBQU87SUFFaEIsWUFBYWUsVUFBVSxFQUFFZCxRQUFRLENBQUU7UUFDakMsS0FBSyxTQUpQLFdBQVcsR0FBRyxXQUNkLFNBQVMsR0FBRztRQUlWLElBQUksQ0FBQyxXQUFXLEdBQUdjO1FBQ25CLElBQUksQ0FBQyxTQUFTLEdBQUdkO0lBQ25CO0lBRUFBLFNBQVUsR0FBR0ssSUFBSSxFQUFFO1FBQ2pCLElBQUksQ0FBQyxTQUFTLElBQUlBO0lBQ3BCO0lBRUFILE1BQU8sR0FBR0csSUFBSSxFQUFFO1FBQ2QsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDSCxLQUFLLElBQUlHO0lBQ25DO0lBRUFGLFFBQVMsR0FBR0UsSUFBSSxFQUFFO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQ0YsT0FBTyxJQUFJRTtJQUNyQztBQUNGO0FBRUFVLE9BQU9DLE9BQU8sR0FBR2pCIiwic291cmNlcyI6WyJEOlxcSGVsaXhcXG5vZGVfbW9kdWxlc1xcdW5kaWNpXFxsaWJcXGRpc3BhdGNoZXJcXGRpc3BhdGNoZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5jb25zdCBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdub2RlOmV2ZW50cycpXG5cbmNsYXNzIERpc3BhdGNoZXIgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICBkaXNwYXRjaCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdub3QgaW1wbGVtZW50ZWQnKVxuICB9XG5cbiAgY2xvc2UgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignbm90IGltcGxlbWVudGVkJylcbiAgfVxuXG4gIGRlc3Ryb3kgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignbm90IGltcGxlbWVudGVkJylcbiAgfVxuXG4gIGNvbXBvc2UgKC4uLmFyZ3MpIHtcbiAgICAvLyBTbyB3ZSBoYW5kbGUgW2ludGVyY2VwdG9yMSwgaW50ZXJjZXB0b3IyXSBvciBpbnRlcmNlcHRvcjEsIGludGVyY2VwdG9yMiwgLi4uXG4gICAgY29uc3QgaW50ZXJjZXB0b3JzID0gQXJyYXkuaXNBcnJheShhcmdzWzBdKSA/IGFyZ3NbMF0gOiBhcmdzXG4gICAgbGV0IGRpc3BhdGNoID0gdGhpcy5kaXNwYXRjaC5iaW5kKHRoaXMpXG5cbiAgICBmb3IgKGNvbnN0IGludGVyY2VwdG9yIG9mIGludGVyY2VwdG9ycykge1xuICAgICAgaWYgKGludGVyY2VwdG9yID09IG51bGwpIHtcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpbnRlcmNlcHRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBpbnZhbGlkIGludGVyY2VwdG9yLCBleHBlY3RlZCBmdW5jdGlvbiByZWNlaXZlZCAke3R5cGVvZiBpbnRlcmNlcHRvcn1gKVxuICAgICAgfVxuXG4gICAgICBkaXNwYXRjaCA9IGludGVyY2VwdG9yKGRpc3BhdGNoKVxuXG4gICAgICBpZiAoZGlzcGF0Y2ggPT0gbnVsbCB8fCB0eXBlb2YgZGlzcGF0Y2ggIT09ICdmdW5jdGlvbicgfHwgZGlzcGF0Y2gubGVuZ3RoICE9PSAyKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgaW50ZXJjZXB0b3InKVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgQ29tcG9zZWREaXNwYXRjaGVyKHRoaXMsIGRpc3BhdGNoKVxuICB9XG59XG5cbmNsYXNzIENvbXBvc2VkRGlzcGF0Y2hlciBleHRlbmRzIERpc3BhdGNoZXIge1xuICAjZGlzcGF0Y2hlciA9IG51bGxcbiAgI2Rpc3BhdGNoID0gbnVsbFxuXG4gIGNvbnN0cnVjdG9yIChkaXNwYXRjaGVyLCBkaXNwYXRjaCkge1xuICAgIHN1cGVyKClcbiAgICB0aGlzLiNkaXNwYXRjaGVyID0gZGlzcGF0Y2hlclxuICAgIHRoaXMuI2Rpc3BhdGNoID0gZGlzcGF0Y2hcbiAgfVxuXG4gIGRpc3BhdGNoICguLi5hcmdzKSB7XG4gICAgdGhpcy4jZGlzcGF0Y2goLi4uYXJncylcbiAgfVxuXG4gIGNsb3NlICguLi5hcmdzKSB7XG4gICAgcmV0dXJuIHRoaXMuI2Rpc3BhdGNoZXIuY2xvc2UoLi4uYXJncylcbiAgfVxuXG4gIGRlc3Ryb3kgKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gdGhpcy4jZGlzcGF0Y2hlci5kZXN0cm95KC4uLmFyZ3MpXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBEaXNwYXRjaGVyXG4iXSwibmFtZXMiOlsiRXZlbnRFbWl0dGVyIiwicmVxdWlyZSIsIkRpc3BhdGNoZXIiLCJkaXNwYXRjaCIsIkVycm9yIiwiY2xvc2UiLCJkZXN0cm95IiwiY29tcG9zZSIsImFyZ3MiLCJpbnRlcmNlcHRvcnMiLCJBcnJheSIsImlzQXJyYXkiLCJiaW5kIiwiaW50ZXJjZXB0b3IiLCJUeXBlRXJyb3IiLCJsZW5ndGgiLCJDb21wb3NlZERpc3BhdGNoZXIiLCJkaXNwYXRjaGVyIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/dispatcher/dispatcher.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/dispatcher/env-http-proxy-agent.js":
/*!********************************************************************!*\
  !*** ./node_modules/undici/lib/dispatcher/env-http-proxy-agent.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst DispatcherBase = __webpack_require__(/*! ./dispatcher-base */ \"(ssr)/./node_modules/undici/lib/dispatcher/dispatcher-base.js\");\nconst { kClose, kDestroy, kClosed, kDestroyed, kDispatch, kNoProxyAgent, kHttpProxyAgent, kHttpsProxyAgent } = __webpack_require__(/*! ../core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst ProxyAgent = __webpack_require__(/*! ./proxy-agent */ \"(ssr)/./node_modules/undici/lib/dispatcher/proxy-agent.js\");\nconst Agent = __webpack_require__(/*! ./agent */ \"(ssr)/./node_modules/undici/lib/dispatcher/agent.js\");\nconst DEFAULT_PORTS = {\n    'http:': 80,\n    'https:': 443\n};\nlet experimentalWarned = false;\nclass EnvHttpProxyAgent extends DispatcherBase {\n    #noProxyValue;\n    #noProxyEntries;\n    #opts;\n    constructor(opts = {}){\n        super(), this.#noProxyValue = null, this.#noProxyEntries = null, this.#opts = null;\n        this.#opts = opts;\n        if (!experimentalWarned) {\n            experimentalWarned = true;\n            process.emitWarning('EnvHttpProxyAgent is experimental, expect them to change at any time.', {\n                code: 'UNDICI-EHPA'\n            });\n        }\n        const { httpProxy, httpsProxy, noProxy, ...agentOpts } = opts;\n        this[kNoProxyAgent] = new Agent(agentOpts);\n        const HTTP_PROXY = httpProxy ?? process.env.http_proxy ?? process.env.HTTP_PROXY;\n        if (HTTP_PROXY) {\n            this[kHttpProxyAgent] = new ProxyAgent({\n                ...agentOpts,\n                uri: HTTP_PROXY\n            });\n        } else {\n            this[kHttpProxyAgent] = this[kNoProxyAgent];\n        }\n        const HTTPS_PROXY = httpsProxy ?? process.env.https_proxy ?? process.env.HTTPS_PROXY;\n        if (HTTPS_PROXY) {\n            this[kHttpsProxyAgent] = new ProxyAgent({\n                ...agentOpts,\n                uri: HTTPS_PROXY\n            });\n        } else {\n            this[kHttpsProxyAgent] = this[kHttpProxyAgent];\n        }\n        this.#parseNoProxy();\n    }\n    [kDispatch](opts, handler) {\n        const url = new URL(opts.origin);\n        const agent = this.#getProxyAgentForUrl(url);\n        return agent.dispatch(opts, handler);\n    }\n    async [kClose]() {\n        await this[kNoProxyAgent].close();\n        if (!this[kHttpProxyAgent][kClosed]) {\n            await this[kHttpProxyAgent].close();\n        }\n        if (!this[kHttpsProxyAgent][kClosed]) {\n            await this[kHttpsProxyAgent].close();\n        }\n    }\n    async [kDestroy](err) {\n        await this[kNoProxyAgent].destroy(err);\n        if (!this[kHttpProxyAgent][kDestroyed]) {\n            await this[kHttpProxyAgent].destroy(err);\n        }\n        if (!this[kHttpsProxyAgent][kDestroyed]) {\n            await this[kHttpsProxyAgent].destroy(err);\n        }\n    }\n    #getProxyAgentForUrl(url) {\n        let { protocol, host: hostname, port } = url;\n        // Stripping ports in this way instead of using parsedUrl.hostname to make\n        // sure that the brackets around IPv6 addresses are kept.\n        hostname = hostname.replace(/:\\d*$/, '').toLowerCase();\n        port = Number.parseInt(port, 10) || DEFAULT_PORTS[protocol] || 0;\n        if (!this.#shouldProxy(hostname, port)) {\n            return this[kNoProxyAgent];\n        }\n        if (protocol === 'https:') {\n            return this[kHttpsProxyAgent];\n        }\n        return this[kHttpProxyAgent];\n    }\n    #shouldProxy(hostname, port) {\n        if (this.#noProxyChanged) {\n            this.#parseNoProxy();\n        }\n        if (this.#noProxyEntries.length === 0) {\n            return true // Always proxy if NO_PROXY is not set or empty.\n            ;\n        }\n        if (this.#noProxyValue === '*') {\n            return false // Never proxy if wildcard is set.\n            ;\n        }\n        for(let i = 0; i < this.#noProxyEntries.length; i++){\n            const entry = this.#noProxyEntries[i];\n            if (entry.port && entry.port !== port) {\n                continue; // Skip if ports don't match.\n            }\n            if (!/^[.*]/.test(entry.hostname)) {\n                // No wildcards, so don't proxy only if there is not an exact match.\n                if (hostname === entry.hostname) {\n                    return false;\n                }\n            } else {\n                // Don't proxy if the hostname ends with the no_proxy host.\n                if (hostname.endsWith(entry.hostname.replace(/^\\*/, ''))) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    #parseNoProxy() {\n        const noProxyValue = this.#opts.noProxy ?? this.#noProxyEnv;\n        const noProxySplit = noProxyValue.split(/[,\\s]/);\n        const noProxyEntries = [];\n        for(let i = 0; i < noProxySplit.length; i++){\n            const entry = noProxySplit[i];\n            if (!entry) {\n                continue;\n            }\n            const parsed = entry.match(/^(.+):(\\d+)$/);\n            noProxyEntries.push({\n                hostname: (parsed ? parsed[1] : entry).toLowerCase(),\n                port: parsed ? Number.parseInt(parsed[2], 10) : 0\n            });\n        }\n        this.#noProxyValue = noProxyValue;\n        this.#noProxyEntries = noProxyEntries;\n    }\n    get #noProxyChanged() {\n        if (this.#opts.noProxy !== undefined) {\n            return false;\n        }\n        return this.#noProxyValue !== this.#noProxyEnv;\n    }\n    get #noProxyEnv() {\n        return process.env.no_proxy ?? process.env.NO_PROXY ?? '';\n    }\n}\nmodule.exports = EnvHttpProxyAgent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/dispatcher/env-http-proxy-agent.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/dispatcher/fixed-queue.js":
/*!***********************************************************!*\
  !*** ./node_modules/undici/lib/dispatcher/fixed-queue.js ***!
  \***********************************************************/
/***/ ((module) => {

eval("/* eslint-disable */ \n// Extracted from node/lib/internal/fixed_queue.js\n// Currently optimal queue size, tested on V8 6.0 - 6.6. Must be power of two.\nconst kSize = 2048;\nconst kMask = kSize - 1;\n// The FixedQueue is implemented as a singly-linked list of fixed-size\n// circular buffers. It looks something like this:\n//\n//  head                                                       tail\n//    |                                                          |\n//    v                                                          v\n// +-----------+ <-----\\       +-----------+ <------\\         +-----------+\n// |  [null]   |        \\----- |   next    |         \\------- |   next    |\n// +-----------+               +-----------+                  +-----------+\n// |   item    | <-- bottom    |   item    | <-- bottom       |  [empty]  |\n// |   item    |               |   item    |                  |  [empty]  |\n// |   item    |               |   item    |                  |  [empty]  |\n// |   item    |               |   item    |                  |  [empty]  |\n// |   item    |               |   item    |       bottom --> |   item    |\n// |   item    |               |   item    |                  |   item    |\n// |    ...    |               |    ...    |                  |    ...    |\n// |   item    |               |   item    |                  |   item    |\n// |   item    |               |   item    |                  |   item    |\n// |  [empty]  | <-- top       |   item    |                  |   item    |\n// |  [empty]  |               |   item    |                  |   item    |\n// |  [empty]  |               |  [empty]  | <-- top  top --> |  [empty]  |\n// +-----------+               +-----------+                  +-----------+\n//\n// Or, if there is only one circular buffer, it looks something\n// like either of these:\n//\n//  head   tail                                 head   tail\n//    |     |                                     |     |\n//    v     v                                     v     v\n// +-----------+                               +-----------+\n// |  [null]   |                               |  [null]   |\n// +-----------+                               +-----------+\n// |  [empty]  |                               |   item    |\n// |  [empty]  |                               |   item    |\n// |   item    | <-- bottom            top --> |  [empty]  |\n// |   item    |                               |  [empty]  |\n// |  [empty]  | <-- top            bottom --> |   item    |\n// |  [empty]  |                               |   item    |\n// +-----------+                               +-----------+\n//\n// Adding a value means moving `top` forward by one, removing means\n// moving `bottom` forward by one. After reaching the end, the queue\n// wraps around.\n//\n// When `top === bottom` the current queue is empty and when\n// `top + 1 === bottom` it's full. This wastes a single space of storage\n// but allows much quicker checks.\nclass FixedCircularBuffer {\n    constructor(){\n        this.bottom = 0;\n        this.top = 0;\n        this.list = new Array(kSize);\n        this.next = null;\n    }\n    isEmpty() {\n        return this.top === this.bottom;\n    }\n    isFull() {\n        return (this.top + 1 & kMask) === this.bottom;\n    }\n    push(data) {\n        this.list[this.top] = data;\n        this.top = this.top + 1 & kMask;\n    }\n    shift() {\n        const nextItem = this.list[this.bottom];\n        if (nextItem === undefined) return null;\n        this.list[this.bottom] = undefined;\n        this.bottom = this.bottom + 1 & kMask;\n        return nextItem;\n    }\n}\nmodule.exports = class FixedQueue {\n    constructor(){\n        this.head = this.tail = new FixedCircularBuffer();\n    }\n    isEmpty() {\n        return this.head.isEmpty();\n    }\n    push(data) {\n        if (this.head.isFull()) {\n            // Head is full: Creates a new queue, sets the old queue's `.next` to it,\n            // and sets it as the new main queue.\n            this.head = this.head.next = new FixedCircularBuffer();\n        }\n        this.head.push(data);\n    }\n    shift() {\n        const tail = this.tail;\n        const next = tail.shift();\n        if (tail.isEmpty() && tail.next !== null) {\n            // If there is another queue, it forms the new tail.\n            this.tail = tail.next;\n        }\n        return next;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/dispatcher/fixed-queue.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/dispatcher/pool-base.js":
/*!*********************************************************!*\
  !*** ./node_modules/undici/lib/dispatcher/pool-base.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst DispatcherBase = __webpack_require__(/*! ./dispatcher-base */ \"(ssr)/./node_modules/undici/lib/dispatcher/dispatcher-base.js\");\nconst FixedQueue = __webpack_require__(/*! ./fixed-queue */ \"(ssr)/./node_modules/undici/lib/dispatcher/fixed-queue.js\");\nconst { kConnected, kSize, kRunning, kPending, kQueued, kBusy, kFree, kUrl, kClose, kDestroy, kDispatch } = __webpack_require__(/*! ../core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst PoolStats = __webpack_require__(/*! ./pool-stats */ \"(ssr)/./node_modules/undici/lib/dispatcher/pool-stats.js\");\nconst kClients = Symbol('clients');\nconst kNeedDrain = Symbol('needDrain');\nconst kQueue = Symbol('queue');\nconst kClosedResolve = Symbol('closed resolve');\nconst kOnDrain = Symbol('onDrain');\nconst kOnConnect = Symbol('onConnect');\nconst kOnDisconnect = Symbol('onDisconnect');\nconst kOnConnectionError = Symbol('onConnectionError');\nconst kGetDispatcher = Symbol('get dispatcher');\nconst kAddClient = Symbol('add client');\nconst kRemoveClient = Symbol('remove client');\nconst kStats = Symbol('stats');\nclass PoolBase extends DispatcherBase {\n    constructor(){\n        super();\n        this[kQueue] = new FixedQueue();\n        this[kClients] = [];\n        this[kQueued] = 0;\n        const pool = this;\n        this[kOnDrain] = function onDrain(origin, targets) {\n            const queue = pool[kQueue];\n            let needDrain = false;\n            while(!needDrain){\n                const item = queue.shift();\n                if (!item) {\n                    break;\n                }\n                pool[kQueued]--;\n                needDrain = !this.dispatch(item.opts, item.handler);\n            }\n            this[kNeedDrain] = needDrain;\n            if (!this[kNeedDrain] && pool[kNeedDrain]) {\n                pool[kNeedDrain] = false;\n                pool.emit('drain', origin, [\n                    pool,\n                    ...targets\n                ]);\n            }\n            if (pool[kClosedResolve] && queue.isEmpty()) {\n                Promise.all(pool[kClients].map((c)=>c.close())).then(pool[kClosedResolve]);\n            }\n        };\n        this[kOnConnect] = (origin, targets)=>{\n            pool.emit('connect', origin, [\n                pool,\n                ...targets\n            ]);\n        };\n        this[kOnDisconnect] = (origin, targets, err)=>{\n            pool.emit('disconnect', origin, [\n                pool,\n                ...targets\n            ], err);\n        };\n        this[kOnConnectionError] = (origin, targets, err)=>{\n            pool.emit('connectionError', origin, [\n                pool,\n                ...targets\n            ], err);\n        };\n        this[kStats] = new PoolStats(this);\n    }\n    get [kBusy]() {\n        return this[kNeedDrain];\n    }\n    get [kConnected]() {\n        return this[kClients].filter((client)=>client[kConnected]).length;\n    }\n    get [kFree]() {\n        return this[kClients].filter((client)=>client[kConnected] && !client[kNeedDrain]).length;\n    }\n    get [kPending]() {\n        let ret = this[kQueued];\n        for (const { [kPending]: pending } of this[kClients]){\n            ret += pending;\n        }\n        return ret;\n    }\n    get [kRunning]() {\n        let ret = 0;\n        for (const { [kRunning]: running } of this[kClients]){\n            ret += running;\n        }\n        return ret;\n    }\n    get [kSize]() {\n        let ret = this[kQueued];\n        for (const { [kSize]: size } of this[kClients]){\n            ret += size;\n        }\n        return ret;\n    }\n    get stats() {\n        return this[kStats];\n    }\n    async [kClose]() {\n        if (this[kQueue].isEmpty()) {\n            return Promise.all(this[kClients].map((c)=>c.close()));\n        } else {\n            return new Promise((resolve)=>{\n                this[kClosedResolve] = resolve;\n            });\n        }\n    }\n    async [kDestroy](err) {\n        while(true){\n            const item = this[kQueue].shift();\n            if (!item) {\n                break;\n            }\n            item.handler.onError(err);\n        }\n        return Promise.all(this[kClients].map((c)=>c.destroy(err)));\n    }\n    [kDispatch](opts, handler) {\n        const dispatcher = this[kGetDispatcher]();\n        if (!dispatcher) {\n            this[kNeedDrain] = true;\n            this[kQueue].push({\n                opts,\n                handler\n            });\n            this[kQueued]++;\n        } else if (!dispatcher.dispatch(opts, handler)) {\n            dispatcher[kNeedDrain] = true;\n            this[kNeedDrain] = !this[kGetDispatcher]();\n        }\n        return !this[kNeedDrain];\n    }\n    [kAddClient](client) {\n        client.on('drain', this[kOnDrain]).on('connect', this[kOnConnect]).on('disconnect', this[kOnDisconnect]).on('connectionError', this[kOnConnectionError]);\n        this[kClients].push(client);\n        if (this[kNeedDrain]) {\n            queueMicrotask(()=>{\n                if (this[kNeedDrain]) {\n                    this[kOnDrain](client[kUrl], [\n                        this,\n                        client\n                    ]);\n                }\n            });\n        }\n        return this;\n    }\n    [kRemoveClient](client) {\n        client.close(()=>{\n            const idx = this[kClients].indexOf(client);\n            if (idx !== -1) {\n                this[kClients].splice(idx, 1);\n            }\n        });\n        this[kNeedDrain] = this[kClients].some((dispatcher)=>!dispatcher[kNeedDrain] && dispatcher.closed !== true && dispatcher.destroyed !== true);\n    }\n}\nmodule.exports = {\n    PoolBase,\n    kClients,\n    kNeedDrain,\n    kAddClient,\n    kRemoveClient,\n    kGetDispatcher\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9kaXNwYXRjaGVyL3Bvb2wtYmFzZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU1BLGlCQUFpQkMsbUJBQU9BLENBQUMsd0ZBQW1CO0FBQ2xELE1BQU1DLGFBQWFELG1CQUFPQSxDQUFDLGdGQUFlO0FBQzFDLE1BQU0sRUFBRUUsVUFBVSxFQUFFQyxLQUFLLEVBQUVDLFFBQVEsRUFBRUMsUUFBUSxFQUFFQyxPQUFPLEVBQUVDLEtBQUssRUFBRUMsS0FBSyxFQUFFQyxJQUFJLEVBQUVDLE1BQU0sRUFBRUMsUUFBUSxFQUFFQyxTQUFTLEVBQUUsR0FBR1osbUJBQU9BLENBQUMsd0VBQWlCO0FBQ3JJLE1BQU1hLFlBQVliLG1CQUFPQSxDQUFDLDhFQUFjO0FBRXhDLE1BQU1jLFdBQVdDLE9BQU87QUFDeEIsTUFBTUMsYUFBYUQsT0FBTztBQUMxQixNQUFNRSxTQUFTRixPQUFPO0FBQ3RCLE1BQU1HLGlCQUFpQkgsT0FBTztBQUM5QixNQUFNSSxXQUFXSixPQUFPO0FBQ3hCLE1BQU1LLGFBQWFMLE9BQU87QUFDMUIsTUFBTU0sZ0JBQWdCTixPQUFPO0FBQzdCLE1BQU1PLHFCQUFxQlAsT0FBTztBQUNsQyxNQUFNUSxpQkFBaUJSLE9BQU87QUFDOUIsTUFBTVMsYUFBYVQsT0FBTztBQUMxQixNQUFNVSxnQkFBZ0JWLE9BQU87QUFDN0IsTUFBTVcsU0FBU1gsT0FBTztBQUV0QixNQUFNWSxpQkFBaUI1QjtJQUNyQixhQUFlO1FBQ2IsS0FBSztRQUVMLElBQUksQ0FBQ2tCLE9BQU8sR0FBRyxJQUFJaEI7UUFDbkIsSUFBSSxDQUFDYSxTQUFTLEdBQUcsRUFBRTtRQUNuQixJQUFJLENBQUNSLFFBQVEsR0FBRztRQUVoQixNQUFNc0IsT0FBTyxJQUFJO1FBRWpCLElBQUksQ0FBQ1QsU0FBUyxHQUFHLFNBQVNVLFFBQVNDLE1BQU0sRUFBRUMsT0FBTztZQUNoRCxNQUFNQyxRQUFRSixJQUFJLENBQUNYLE9BQU87WUFFMUIsSUFBSWdCLFlBQVk7WUFFaEIsTUFBTyxDQUFDQSxVQUFXO2dCQUNqQixNQUFNQyxPQUFPRixNQUFNRyxLQUFLO2dCQUN4QixJQUFJLENBQUNELE1BQU07b0JBQ1Q7Z0JBQ0Y7Z0JBQ0FOLElBQUksQ0FBQ3RCLFFBQVE7Z0JBQ2IyQixZQUFZLENBQUMsSUFBSSxDQUFDRyxRQUFRLENBQUNGLEtBQUtHLElBQUksRUFBRUgsS0FBS0ksT0FBTztZQUNwRDtZQUVBLElBQUksQ0FBQ3RCLFdBQVcsR0FBR2lCO1lBRW5CLElBQUksQ0FBQyxJQUFJLENBQUNqQixXQUFXLElBQUlZLElBQUksQ0FBQ1osV0FBVyxFQUFFO2dCQUN6Q1ksSUFBSSxDQUFDWixXQUFXLEdBQUc7Z0JBQ25CWSxLQUFLVyxJQUFJLENBQUMsU0FBU1QsUUFBUTtvQkFBQ0Y7dUJBQVNHO2lCQUFRO1lBQy9DO1lBRUEsSUFBSUgsSUFBSSxDQUFDVixlQUFlLElBQUljLE1BQU1RLE9BQU8sSUFBSTtnQkFDM0NDLFFBQ0dDLEdBQUcsQ0FBQ2QsSUFBSSxDQUFDZCxTQUFTLENBQUM2QixHQUFHLENBQUNDLENBQUFBLElBQUtBLEVBQUVDLEtBQUssS0FDbkNDLElBQUksQ0FBQ2xCLElBQUksQ0FBQ1YsZUFBZTtZQUM5QjtRQUNGO1FBRUEsSUFBSSxDQUFDRSxXQUFXLEdBQUcsQ0FBQ1UsUUFBUUM7WUFDMUJILEtBQUtXLElBQUksQ0FBQyxXQUFXVCxRQUFRO2dCQUFDRjttQkFBU0c7YUFBUTtRQUNqRDtRQUVBLElBQUksQ0FBQ1YsY0FBYyxHQUFHLENBQUNTLFFBQVFDLFNBQVNnQjtZQUN0Q25CLEtBQUtXLElBQUksQ0FBQyxjQUFjVCxRQUFRO2dCQUFDRjttQkFBU0c7YUFBUSxFQUFFZ0I7UUFDdEQ7UUFFQSxJQUFJLENBQUN6QixtQkFBbUIsR0FBRyxDQUFDUSxRQUFRQyxTQUFTZ0I7WUFDM0NuQixLQUFLVyxJQUFJLENBQUMsbUJBQW1CVCxRQUFRO2dCQUFDRjttQkFBU0c7YUFBUSxFQUFFZ0I7UUFDM0Q7UUFFQSxJQUFJLENBQUNyQixPQUFPLEdBQUcsSUFBSWIsVUFBVSxJQUFJO0lBQ25DO0lBRUEsSUFBSSxDQUFDTixNQUFNLEdBQUk7UUFDYixPQUFPLElBQUksQ0FBQ1MsV0FBVztJQUN6QjtJQUVBLElBQUksQ0FBQ2QsV0FBVyxHQUFJO1FBQ2xCLE9BQU8sSUFBSSxDQUFDWSxTQUFTLENBQUNrQyxNQUFNLENBQUNDLENBQUFBLFNBQVVBLE1BQU0sQ0FBQy9DLFdBQVcsRUFBRWdELE1BQU07SUFDbkU7SUFFQSxJQUFJLENBQUMxQyxNQUFNLEdBQUk7UUFDYixPQUFPLElBQUksQ0FBQ00sU0FBUyxDQUFDa0MsTUFBTSxDQUFDQyxDQUFBQSxTQUFVQSxNQUFNLENBQUMvQyxXQUFXLElBQUksQ0FBQytDLE1BQU0sQ0FBQ2pDLFdBQVcsRUFBRWtDLE1BQU07SUFDMUY7SUFFQSxJQUFJLENBQUM3QyxTQUFTLEdBQUk7UUFDaEIsSUFBSThDLE1BQU0sSUFBSSxDQUFDN0MsUUFBUTtRQUN2QixLQUFLLE1BQU0sRUFBRSxDQUFDRCxTQUFTLEVBQUUrQyxPQUFPLEVBQUUsSUFBSSxJQUFJLENBQUN0QyxTQUFTLENBQUU7WUFDcERxQyxPQUFPQztRQUNUO1FBQ0EsT0FBT0Q7SUFDVDtJQUVBLElBQUksQ0FBQy9DLFNBQVMsR0FBSTtRQUNoQixJQUFJK0MsTUFBTTtRQUNWLEtBQUssTUFBTSxFQUFFLENBQUMvQyxTQUFTLEVBQUVpRCxPQUFPLEVBQUUsSUFBSSxJQUFJLENBQUN2QyxTQUFTLENBQUU7WUFDcERxQyxPQUFPRTtRQUNUO1FBQ0EsT0FBT0Y7SUFDVDtJQUVBLElBQUksQ0FBQ2hELE1BQU0sR0FBSTtRQUNiLElBQUlnRCxNQUFNLElBQUksQ0FBQzdDLFFBQVE7UUFDdkIsS0FBSyxNQUFNLEVBQUUsQ0FBQ0gsTUFBTSxFQUFFbUQsSUFBSSxFQUFFLElBQUksSUFBSSxDQUFDeEMsU0FBUyxDQUFFO1lBQzlDcUMsT0FBT0c7UUFDVDtRQUNBLE9BQU9IO0lBQ1Q7SUFFQSxJQUFJSSxRQUFTO1FBQ1gsT0FBTyxJQUFJLENBQUM3QixPQUFPO0lBQ3JCO0lBRUEsTUFBTSxDQUFDaEIsT0FBTyxHQUFJO1FBQ2hCLElBQUksSUFBSSxDQUFDTyxPQUFPLENBQUN1QixPQUFPLElBQUk7WUFDMUIsT0FBT0MsUUFBUUMsR0FBRyxDQUFDLElBQUksQ0FBQzVCLFNBQVMsQ0FBQzZCLEdBQUcsQ0FBQ0MsQ0FBQUEsSUFBS0EsRUFBRUMsS0FBSztRQUNwRCxPQUFPO1lBQ0wsT0FBTyxJQUFJSixRQUFRLENBQUNlO2dCQUNsQixJQUFJLENBQUN0QyxlQUFlLEdBQUdzQztZQUN6QjtRQUNGO0lBQ0Y7SUFFQSxNQUFNLENBQUM3QyxTQUFTLENBQUVvQyxHQUFHLEVBQUU7UUFDckIsTUFBTyxLQUFNO1lBQ1gsTUFBTWIsT0FBTyxJQUFJLENBQUNqQixPQUFPLENBQUNrQixLQUFLO1lBQy9CLElBQUksQ0FBQ0QsTUFBTTtnQkFDVDtZQUNGO1lBQ0FBLEtBQUtJLE9BQU8sQ0FBQ21CLE9BQU8sQ0FBQ1Y7UUFDdkI7UUFFQSxPQUFPTixRQUFRQyxHQUFHLENBQUMsSUFBSSxDQUFDNUIsU0FBUyxDQUFDNkIsR0FBRyxDQUFDQyxDQUFBQSxJQUFLQSxFQUFFYyxPQUFPLENBQUNYO0lBQ3ZEO0lBRUEsQ0FBQ25DLFVBQVUsQ0FBRXlCLElBQUksRUFBRUMsT0FBTyxFQUFFO1FBQzFCLE1BQU1xQixhQUFhLElBQUksQ0FBQ3BDLGVBQWU7UUFFdkMsSUFBSSxDQUFDb0MsWUFBWTtZQUNmLElBQUksQ0FBQzNDLFdBQVcsR0FBRztZQUNuQixJQUFJLENBQUNDLE9BQU8sQ0FBQzJDLElBQUksQ0FBQztnQkFBRXZCO2dCQUFNQztZQUFRO1lBQ2xDLElBQUksQ0FBQ2hDLFFBQVE7UUFDZixPQUFPLElBQUksQ0FBQ3FELFdBQVd2QixRQUFRLENBQUNDLE1BQU1DLFVBQVU7WUFDOUNxQixVQUFVLENBQUMzQyxXQUFXLEdBQUc7WUFDekIsSUFBSSxDQUFDQSxXQUFXLEdBQUcsQ0FBQyxJQUFJLENBQUNPLGVBQWU7UUFDMUM7UUFFQSxPQUFPLENBQUMsSUFBSSxDQUFDUCxXQUFXO0lBQzFCO0lBRUEsQ0FBQ1EsV0FBVyxDQUFFeUIsTUFBTSxFQUFFO1FBQ3BCQSxPQUNHWSxFQUFFLENBQUMsU0FBUyxJQUFJLENBQUMxQyxTQUFTLEVBQzFCMEMsRUFBRSxDQUFDLFdBQVcsSUFBSSxDQUFDekMsV0FBVyxFQUM5QnlDLEVBQUUsQ0FBQyxjQUFjLElBQUksQ0FBQ3hDLGNBQWMsRUFDcEN3QyxFQUFFLENBQUMsbUJBQW1CLElBQUksQ0FBQ3ZDLG1CQUFtQjtRQUVqRCxJQUFJLENBQUNSLFNBQVMsQ0FBQzhDLElBQUksQ0FBQ1g7UUFFcEIsSUFBSSxJQUFJLENBQUNqQyxXQUFXLEVBQUU7WUFDcEI4QyxlQUFlO2dCQUNiLElBQUksSUFBSSxDQUFDOUMsV0FBVyxFQUFFO29CQUNwQixJQUFJLENBQUNHLFNBQVMsQ0FBQzhCLE1BQU0sQ0FBQ3hDLEtBQUssRUFBRTt3QkFBQyxJQUFJO3dCQUFFd0M7cUJBQU87Z0JBQzdDO1lBQ0Y7UUFDRjtRQUVBLE9BQU8sSUFBSTtJQUNiO0lBRUEsQ0FBQ3hCLGNBQWMsQ0FBRXdCLE1BQU0sRUFBRTtRQUN2QkEsT0FBT0osS0FBSyxDQUFDO1lBQ1gsTUFBTWtCLE1BQU0sSUFBSSxDQUFDakQsU0FBUyxDQUFDa0QsT0FBTyxDQUFDZjtZQUNuQyxJQUFJYyxRQUFRLENBQUMsR0FBRztnQkFDZCxJQUFJLENBQUNqRCxTQUFTLENBQUNtRCxNQUFNLENBQUNGLEtBQUs7WUFDN0I7UUFDRjtRQUVBLElBQUksQ0FBQy9DLFdBQVcsR0FBRyxJQUFJLENBQUNGLFNBQVMsQ0FBQ29ELElBQUksQ0FBQ1AsQ0FBQUEsYUFDckMsQ0FBQ0EsVUFBVSxDQUFDM0MsV0FBVyxJQUN2QjJDLFdBQVdRLE1BQU0sS0FBSyxRQUN0QlIsV0FBV1MsU0FBUyxLQUFLO0lBRTdCO0FBQ0Y7QUFFQUMsT0FBT0MsT0FBTyxHQUFHO0lBQ2YzQztJQUNBYjtJQUNBRTtJQUNBUTtJQUNBQztJQUNBRjtBQUNGIiwic291cmNlcyI6WyJEOlxcSGVsaXhcXG5vZGVfbW9kdWxlc1xcdW5kaWNpXFxsaWJcXGRpc3BhdGNoZXJcXHBvb2wtYmFzZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgRGlzcGF0Y2hlckJhc2UgPSByZXF1aXJlKCcuL2Rpc3BhdGNoZXItYmFzZScpXG5jb25zdCBGaXhlZFF1ZXVlID0gcmVxdWlyZSgnLi9maXhlZC1xdWV1ZScpXG5jb25zdCB7IGtDb25uZWN0ZWQsIGtTaXplLCBrUnVubmluZywga1BlbmRpbmcsIGtRdWV1ZWQsIGtCdXN5LCBrRnJlZSwga1VybCwga0Nsb3NlLCBrRGVzdHJveSwga0Rpc3BhdGNoIH0gPSByZXF1aXJlKCcuLi9jb3JlL3N5bWJvbHMnKVxuY29uc3QgUG9vbFN0YXRzID0gcmVxdWlyZSgnLi9wb29sLXN0YXRzJylcblxuY29uc3Qga0NsaWVudHMgPSBTeW1ib2woJ2NsaWVudHMnKVxuY29uc3Qga05lZWREcmFpbiA9IFN5bWJvbCgnbmVlZERyYWluJylcbmNvbnN0IGtRdWV1ZSA9IFN5bWJvbCgncXVldWUnKVxuY29uc3Qga0Nsb3NlZFJlc29sdmUgPSBTeW1ib2woJ2Nsb3NlZCByZXNvbHZlJylcbmNvbnN0IGtPbkRyYWluID0gU3ltYm9sKCdvbkRyYWluJylcbmNvbnN0IGtPbkNvbm5lY3QgPSBTeW1ib2woJ29uQ29ubmVjdCcpXG5jb25zdCBrT25EaXNjb25uZWN0ID0gU3ltYm9sKCdvbkRpc2Nvbm5lY3QnKVxuY29uc3Qga09uQ29ubmVjdGlvbkVycm9yID0gU3ltYm9sKCdvbkNvbm5lY3Rpb25FcnJvcicpXG5jb25zdCBrR2V0RGlzcGF0Y2hlciA9IFN5bWJvbCgnZ2V0IGRpc3BhdGNoZXInKVxuY29uc3Qga0FkZENsaWVudCA9IFN5bWJvbCgnYWRkIGNsaWVudCcpXG5jb25zdCBrUmVtb3ZlQ2xpZW50ID0gU3ltYm9sKCdyZW1vdmUgY2xpZW50JylcbmNvbnN0IGtTdGF0cyA9IFN5bWJvbCgnc3RhdHMnKVxuXG5jbGFzcyBQb29sQmFzZSBleHRlbmRzIERpc3BhdGNoZXJCYXNlIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHN1cGVyKClcblxuICAgIHRoaXNba1F1ZXVlXSA9IG5ldyBGaXhlZFF1ZXVlKClcbiAgICB0aGlzW2tDbGllbnRzXSA9IFtdXG4gICAgdGhpc1trUXVldWVkXSA9IDBcblxuICAgIGNvbnN0IHBvb2wgPSB0aGlzXG5cbiAgICB0aGlzW2tPbkRyYWluXSA9IGZ1bmN0aW9uIG9uRHJhaW4gKG9yaWdpbiwgdGFyZ2V0cykge1xuICAgICAgY29uc3QgcXVldWUgPSBwb29sW2tRdWV1ZV1cblxuICAgICAgbGV0IG5lZWREcmFpbiA9IGZhbHNlXG5cbiAgICAgIHdoaWxlICghbmVlZERyYWluKSB7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSBxdWV1ZS5zaGlmdCgpXG4gICAgICAgIGlmICghaXRlbSkge1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgcG9vbFtrUXVldWVkXS0tXG4gICAgICAgIG5lZWREcmFpbiA9ICF0aGlzLmRpc3BhdGNoKGl0ZW0ub3B0cywgaXRlbS5oYW5kbGVyKVxuICAgICAgfVxuXG4gICAgICB0aGlzW2tOZWVkRHJhaW5dID0gbmVlZERyYWluXG5cbiAgICAgIGlmICghdGhpc1trTmVlZERyYWluXSAmJiBwb29sW2tOZWVkRHJhaW5dKSB7XG4gICAgICAgIHBvb2xba05lZWREcmFpbl0gPSBmYWxzZVxuICAgICAgICBwb29sLmVtaXQoJ2RyYWluJywgb3JpZ2luLCBbcG9vbCwgLi4udGFyZ2V0c10pXG4gICAgICB9XG5cbiAgICAgIGlmIChwb29sW2tDbG9zZWRSZXNvbHZlXSAmJiBxdWV1ZS5pc0VtcHR5KCkpIHtcbiAgICAgICAgUHJvbWlzZVxuICAgICAgICAgIC5hbGwocG9vbFtrQ2xpZW50c10ubWFwKGMgPT4gYy5jbG9zZSgpKSlcbiAgICAgICAgICAudGhlbihwb29sW2tDbG9zZWRSZXNvbHZlXSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzW2tPbkNvbm5lY3RdID0gKG9yaWdpbiwgdGFyZ2V0cykgPT4ge1xuICAgICAgcG9vbC5lbWl0KCdjb25uZWN0Jywgb3JpZ2luLCBbcG9vbCwgLi4udGFyZ2V0c10pXG4gICAgfVxuXG4gICAgdGhpc1trT25EaXNjb25uZWN0XSA9IChvcmlnaW4sIHRhcmdldHMsIGVycikgPT4ge1xuICAgICAgcG9vbC5lbWl0KCdkaXNjb25uZWN0Jywgb3JpZ2luLCBbcG9vbCwgLi4udGFyZ2V0c10sIGVycilcbiAgICB9XG5cbiAgICB0aGlzW2tPbkNvbm5lY3Rpb25FcnJvcl0gPSAob3JpZ2luLCB0YXJnZXRzLCBlcnIpID0+IHtcbiAgICAgIHBvb2wuZW1pdCgnY29ubmVjdGlvbkVycm9yJywgb3JpZ2luLCBbcG9vbCwgLi4udGFyZ2V0c10sIGVycilcbiAgICB9XG5cbiAgICB0aGlzW2tTdGF0c10gPSBuZXcgUG9vbFN0YXRzKHRoaXMpXG4gIH1cblxuICBnZXQgW2tCdXN5XSAoKSB7XG4gICAgcmV0dXJuIHRoaXNba05lZWREcmFpbl1cbiAgfVxuXG4gIGdldCBba0Nvbm5lY3RlZF0gKCkge1xuICAgIHJldHVybiB0aGlzW2tDbGllbnRzXS5maWx0ZXIoY2xpZW50ID0+IGNsaWVudFtrQ29ubmVjdGVkXSkubGVuZ3RoXG4gIH1cblxuICBnZXQgW2tGcmVlXSAoKSB7XG4gICAgcmV0dXJuIHRoaXNba0NsaWVudHNdLmZpbHRlcihjbGllbnQgPT4gY2xpZW50W2tDb25uZWN0ZWRdICYmICFjbGllbnRba05lZWREcmFpbl0pLmxlbmd0aFxuICB9XG5cbiAgZ2V0IFtrUGVuZGluZ10gKCkge1xuICAgIGxldCByZXQgPSB0aGlzW2tRdWV1ZWRdXG4gICAgZm9yIChjb25zdCB7IFtrUGVuZGluZ106IHBlbmRpbmcgfSBvZiB0aGlzW2tDbGllbnRzXSkge1xuICAgICAgcmV0ICs9IHBlbmRpbmdcbiAgICB9XG4gICAgcmV0dXJuIHJldFxuICB9XG5cbiAgZ2V0IFtrUnVubmluZ10gKCkge1xuICAgIGxldCByZXQgPSAwXG4gICAgZm9yIChjb25zdCB7IFtrUnVubmluZ106IHJ1bm5pbmcgfSBvZiB0aGlzW2tDbGllbnRzXSkge1xuICAgICAgcmV0ICs9IHJ1bm5pbmdcbiAgICB9XG4gICAgcmV0dXJuIHJldFxuICB9XG5cbiAgZ2V0IFtrU2l6ZV0gKCkge1xuICAgIGxldCByZXQgPSB0aGlzW2tRdWV1ZWRdXG4gICAgZm9yIChjb25zdCB7IFtrU2l6ZV06IHNpemUgfSBvZiB0aGlzW2tDbGllbnRzXSkge1xuICAgICAgcmV0ICs9IHNpemVcbiAgICB9XG4gICAgcmV0dXJuIHJldFxuICB9XG5cbiAgZ2V0IHN0YXRzICgpIHtcbiAgICByZXR1cm4gdGhpc1trU3RhdHNdXG4gIH1cblxuICBhc3luYyBba0Nsb3NlXSAoKSB7XG4gICAgaWYgKHRoaXNba1F1ZXVlXS5pc0VtcHR5KCkpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLmFsbCh0aGlzW2tDbGllbnRzXS5tYXAoYyA9PiBjLmNsb3NlKCkpKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgdGhpc1trQ2xvc2VkUmVzb2x2ZV0gPSByZXNvbHZlXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIFtrRGVzdHJveV0gKGVycikge1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICBjb25zdCBpdGVtID0gdGhpc1trUXVldWVdLnNoaWZ0KClcbiAgICAgIGlmICghaXRlbSkge1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgICAgaXRlbS5oYW5kbGVyLm9uRXJyb3IoZXJyKVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLmFsbCh0aGlzW2tDbGllbnRzXS5tYXAoYyA9PiBjLmRlc3Ryb3koZXJyKSkpXG4gIH1cblxuICBba0Rpc3BhdGNoXSAob3B0cywgaGFuZGxlcikge1xuICAgIGNvbnN0IGRpc3BhdGNoZXIgPSB0aGlzW2tHZXREaXNwYXRjaGVyXSgpXG5cbiAgICBpZiAoIWRpc3BhdGNoZXIpIHtcbiAgICAgIHRoaXNba05lZWREcmFpbl0gPSB0cnVlXG4gICAgICB0aGlzW2tRdWV1ZV0ucHVzaCh7IG9wdHMsIGhhbmRsZXIgfSlcbiAgICAgIHRoaXNba1F1ZXVlZF0rK1xuICAgIH0gZWxzZSBpZiAoIWRpc3BhdGNoZXIuZGlzcGF0Y2gob3B0cywgaGFuZGxlcikpIHtcbiAgICAgIGRpc3BhdGNoZXJba05lZWREcmFpbl0gPSB0cnVlXG4gICAgICB0aGlzW2tOZWVkRHJhaW5dID0gIXRoaXNba0dldERpc3BhdGNoZXJdKClcbiAgICB9XG5cbiAgICByZXR1cm4gIXRoaXNba05lZWREcmFpbl1cbiAgfVxuXG4gIFtrQWRkQ2xpZW50XSAoY2xpZW50KSB7XG4gICAgY2xpZW50XG4gICAgICAub24oJ2RyYWluJywgdGhpc1trT25EcmFpbl0pXG4gICAgICAub24oJ2Nvbm5lY3QnLCB0aGlzW2tPbkNvbm5lY3RdKVxuICAgICAgLm9uKCdkaXNjb25uZWN0JywgdGhpc1trT25EaXNjb25uZWN0XSlcbiAgICAgIC5vbignY29ubmVjdGlvbkVycm9yJywgdGhpc1trT25Db25uZWN0aW9uRXJyb3JdKVxuXG4gICAgdGhpc1trQ2xpZW50c10ucHVzaChjbGllbnQpXG5cbiAgICBpZiAodGhpc1trTmVlZERyYWluXSkge1xuICAgICAgcXVldWVNaWNyb3Rhc2soKCkgPT4ge1xuICAgICAgICBpZiAodGhpc1trTmVlZERyYWluXSkge1xuICAgICAgICAgIHRoaXNba09uRHJhaW5dKGNsaWVudFtrVXJsXSwgW3RoaXMsIGNsaWVudF0pXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIFtrUmVtb3ZlQ2xpZW50XSAoY2xpZW50KSB7XG4gICAgY2xpZW50LmNsb3NlKCgpID0+IHtcbiAgICAgIGNvbnN0IGlkeCA9IHRoaXNba0NsaWVudHNdLmluZGV4T2YoY2xpZW50KVxuICAgICAgaWYgKGlkeCAhPT0gLTEpIHtcbiAgICAgICAgdGhpc1trQ2xpZW50c10uc3BsaWNlKGlkeCwgMSlcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgdGhpc1trTmVlZERyYWluXSA9IHRoaXNba0NsaWVudHNdLnNvbWUoZGlzcGF0Y2hlciA9PiAoXG4gICAgICAhZGlzcGF0Y2hlcltrTmVlZERyYWluXSAmJlxuICAgICAgZGlzcGF0Y2hlci5jbG9zZWQgIT09IHRydWUgJiZcbiAgICAgIGRpc3BhdGNoZXIuZGVzdHJveWVkICE9PSB0cnVlXG4gICAgKSlcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgUG9vbEJhc2UsXG4gIGtDbGllbnRzLFxuICBrTmVlZERyYWluLFxuICBrQWRkQ2xpZW50LFxuICBrUmVtb3ZlQ2xpZW50LFxuICBrR2V0RGlzcGF0Y2hlclxufVxuIl0sIm5hbWVzIjpbIkRpc3BhdGNoZXJCYXNlIiwicmVxdWlyZSIsIkZpeGVkUXVldWUiLCJrQ29ubmVjdGVkIiwia1NpemUiLCJrUnVubmluZyIsImtQZW5kaW5nIiwia1F1ZXVlZCIsImtCdXN5Iiwia0ZyZWUiLCJrVXJsIiwia0Nsb3NlIiwia0Rlc3Ryb3kiLCJrRGlzcGF0Y2giLCJQb29sU3RhdHMiLCJrQ2xpZW50cyIsIlN5bWJvbCIsImtOZWVkRHJhaW4iLCJrUXVldWUiLCJrQ2xvc2VkUmVzb2x2ZSIsImtPbkRyYWluIiwia09uQ29ubmVjdCIsImtPbkRpc2Nvbm5lY3QiLCJrT25Db25uZWN0aW9uRXJyb3IiLCJrR2V0RGlzcGF0Y2hlciIsImtBZGRDbGllbnQiLCJrUmVtb3ZlQ2xpZW50Iiwia1N0YXRzIiwiUG9vbEJhc2UiLCJwb29sIiwib25EcmFpbiIsIm9yaWdpbiIsInRhcmdldHMiLCJxdWV1ZSIsIm5lZWREcmFpbiIsIml0ZW0iLCJzaGlmdCIsImRpc3BhdGNoIiwib3B0cyIsImhhbmRsZXIiLCJlbWl0IiwiaXNFbXB0eSIsIlByb21pc2UiLCJhbGwiLCJtYXAiLCJjIiwiY2xvc2UiLCJ0aGVuIiwiZXJyIiwiZmlsdGVyIiwiY2xpZW50IiwibGVuZ3RoIiwicmV0IiwicGVuZGluZyIsInJ1bm5pbmciLCJzaXplIiwic3RhdHMiLCJyZXNvbHZlIiwib25FcnJvciIsImRlc3Ryb3kiLCJkaXNwYXRjaGVyIiwicHVzaCIsIm9uIiwicXVldWVNaWNyb3Rhc2siLCJpZHgiLCJpbmRleE9mIiwic3BsaWNlIiwic29tZSIsImNsb3NlZCIsImRlc3Ryb3llZCIsIm1vZHVsZSIsImV4cG9ydHMiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/dispatcher/pool-base.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/dispatcher/pool-stats.js":
/*!**********************************************************!*\
  !*** ./node_modules/undici/lib/dispatcher/pool-stats.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { kFree, kConnected, kPending, kQueued, kRunning, kSize } = __webpack_require__(/*! ../core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst kPool = Symbol('pool');\nclass PoolStats {\n    constructor(pool){\n        this[kPool] = pool;\n    }\n    get connected() {\n        return this[kPool][kConnected];\n    }\n    get free() {\n        return this[kPool][kFree];\n    }\n    get pending() {\n        return this[kPool][kPending];\n    }\n    get queued() {\n        return this[kPool][kQueued];\n    }\n    get running() {\n        return this[kPool][kRunning];\n    }\n    get size() {\n        return this[kPool][kSize];\n    }\n}\nmodule.exports = PoolStats;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9kaXNwYXRjaGVyL3Bvb2wtc3RhdHMuanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU0sRUFBRUEsS0FBSyxFQUFFQyxVQUFVLEVBQUVDLFFBQVEsRUFBRUMsT0FBTyxFQUFFQyxRQUFRLEVBQUVDLEtBQUssRUFBRSxHQUFHQyxtQkFBT0EsQ0FBQyx3RUFBaUI7QUFDM0YsTUFBTUMsUUFBUUMsT0FBTztBQUVyQixNQUFNQztJQUNKLFlBQWFDLElBQUksQ0FBRTtRQUNqQixJQUFJLENBQUNILE1BQU0sR0FBR0c7SUFDaEI7SUFFQSxJQUFJQyxZQUFhO1FBQ2YsT0FBTyxJQUFJLENBQUNKLE1BQU0sQ0FBQ04sV0FBVztJQUNoQztJQUVBLElBQUlXLE9BQVE7UUFDVixPQUFPLElBQUksQ0FBQ0wsTUFBTSxDQUFDUCxNQUFNO0lBQzNCO0lBRUEsSUFBSWEsVUFBVztRQUNiLE9BQU8sSUFBSSxDQUFDTixNQUFNLENBQUNMLFNBQVM7SUFDOUI7SUFFQSxJQUFJWSxTQUFVO1FBQ1osT0FBTyxJQUFJLENBQUNQLE1BQU0sQ0FBQ0osUUFBUTtJQUM3QjtJQUVBLElBQUlZLFVBQVc7UUFDYixPQUFPLElBQUksQ0FBQ1IsTUFBTSxDQUFDSCxTQUFTO0lBQzlCO0lBRUEsSUFBSVksT0FBUTtRQUNWLE9BQU8sSUFBSSxDQUFDVCxNQUFNLENBQUNGLE1BQU07SUFDM0I7QUFDRjtBQUVBWSxPQUFPQyxPQUFPLEdBQUdUIiwic291cmNlcyI6WyJEOlxcSGVsaXhcXG5vZGVfbW9kdWxlc1xcdW5kaWNpXFxsaWJcXGRpc3BhdGNoZXJcXHBvb2wtc3RhdHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBrRnJlZSwga0Nvbm5lY3RlZCwga1BlbmRpbmcsIGtRdWV1ZWQsIGtSdW5uaW5nLCBrU2l6ZSB9ID0gcmVxdWlyZSgnLi4vY29yZS9zeW1ib2xzJylcbmNvbnN0IGtQb29sID0gU3ltYm9sKCdwb29sJylcblxuY2xhc3MgUG9vbFN0YXRzIHtcbiAgY29uc3RydWN0b3IgKHBvb2wpIHtcbiAgICB0aGlzW2tQb29sXSA9IHBvb2xcbiAgfVxuXG4gIGdldCBjb25uZWN0ZWQgKCkge1xuICAgIHJldHVybiB0aGlzW2tQb29sXVtrQ29ubmVjdGVkXVxuICB9XG5cbiAgZ2V0IGZyZWUgKCkge1xuICAgIHJldHVybiB0aGlzW2tQb29sXVtrRnJlZV1cbiAgfVxuXG4gIGdldCBwZW5kaW5nICgpIHtcbiAgICByZXR1cm4gdGhpc1trUG9vbF1ba1BlbmRpbmddXG4gIH1cblxuICBnZXQgcXVldWVkICgpIHtcbiAgICByZXR1cm4gdGhpc1trUG9vbF1ba1F1ZXVlZF1cbiAgfVxuXG4gIGdldCBydW5uaW5nICgpIHtcbiAgICByZXR1cm4gdGhpc1trUG9vbF1ba1J1bm5pbmddXG4gIH1cblxuICBnZXQgc2l6ZSAoKSB7XG4gICAgcmV0dXJuIHRoaXNba1Bvb2xdW2tTaXplXVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUG9vbFN0YXRzXG4iXSwibmFtZXMiOlsia0ZyZWUiLCJrQ29ubmVjdGVkIiwia1BlbmRpbmciLCJrUXVldWVkIiwia1J1bm5pbmciLCJrU2l6ZSIsInJlcXVpcmUiLCJrUG9vbCIsIlN5bWJvbCIsIlBvb2xTdGF0cyIsInBvb2wiLCJjb25uZWN0ZWQiLCJmcmVlIiwicGVuZGluZyIsInF1ZXVlZCIsInJ1bm5pbmciLCJzaXplIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/dispatcher/pool-stats.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/dispatcher/pool.js":
/*!****************************************************!*\
  !*** ./node_modules/undici/lib/dispatcher/pool.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { PoolBase, kClients, kNeedDrain, kAddClient, kGetDispatcher } = __webpack_require__(/*! ./pool-base */ \"(ssr)/./node_modules/undici/lib/dispatcher/pool-base.js\");\nconst Client = __webpack_require__(/*! ./client */ \"(ssr)/./node_modules/undici/lib/dispatcher/client.js\");\nconst { InvalidArgumentError } = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst util = __webpack_require__(/*! ../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst { kUrl, kInterceptors } = __webpack_require__(/*! ../core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst buildConnector = __webpack_require__(/*! ../core/connect */ \"(ssr)/./node_modules/undici/lib/core/connect.js\");\nconst kOptions = Symbol('options');\nconst kConnections = Symbol('connections');\nconst kFactory = Symbol('factory');\nfunction defaultFactory(origin, opts) {\n    return new Client(origin, opts);\n}\nclass Pool extends PoolBase {\n    constructor(origin, { connections, factory = defaultFactory, connect, connectTimeout, tls, maxCachedSessions, socketPath, autoSelectFamily, autoSelectFamilyAttemptTimeout, allowH2, ...options } = {}){\n        super();\n        if (connections != null && (!Number.isFinite(connections) || connections < 0)) {\n            throw new InvalidArgumentError('invalid connections');\n        }\n        if (typeof factory !== 'function') {\n            throw new InvalidArgumentError('factory must be a function.');\n        }\n        if (connect != null && typeof connect !== 'function' && typeof connect !== 'object') {\n            throw new InvalidArgumentError('connect must be a function or an object');\n        }\n        if (typeof connect !== 'function') {\n            connect = buildConnector({\n                ...tls,\n                maxCachedSessions,\n                allowH2,\n                socketPath,\n                timeout: connectTimeout,\n                ...autoSelectFamily ? {\n                    autoSelectFamily,\n                    autoSelectFamilyAttemptTimeout\n                } : undefined,\n                ...connect\n            });\n        }\n        this[kInterceptors] = options.interceptors?.Pool && Array.isArray(options.interceptors.Pool) ? options.interceptors.Pool : [];\n        this[kConnections] = connections || null;\n        this[kUrl] = util.parseOrigin(origin);\n        this[kOptions] = {\n            ...util.deepClone(options),\n            connect,\n            allowH2\n        };\n        this[kOptions].interceptors = options.interceptors ? {\n            ...options.interceptors\n        } : undefined;\n        this[kFactory] = factory;\n    }\n    [kGetDispatcher]() {\n        for (const client of this[kClients]){\n            if (!client[kNeedDrain]) {\n                return client;\n            }\n        }\n        if (!this[kConnections] || this[kClients].length < this[kConnections]) {\n            const dispatcher = this[kFactory](this[kUrl], this[kOptions]);\n            this[kAddClient](dispatcher);\n            return dispatcher;\n        }\n    }\n}\nmodule.exports = Pool;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9kaXNwYXRjaGVyL3Bvb2wuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNLEVBQ0pBLFFBQVEsRUFDUkMsUUFBUSxFQUNSQyxVQUFVLEVBQ1ZDLFVBQVUsRUFDVkMsY0FBYyxFQUNmLEdBQUdDLG1CQUFPQSxDQUFDLDRFQUFhO0FBQ3pCLE1BQU1DLFNBQVNELG1CQUFPQSxDQUFDLHNFQUFVO0FBQ2pDLE1BQU0sRUFDSkUsb0JBQW9CLEVBQ3JCLEdBQUdGLG1CQUFPQSxDQUFDLHNFQUFnQjtBQUM1QixNQUFNRyxPQUFPSCxtQkFBT0EsQ0FBQyxrRUFBYztBQUNuQyxNQUFNLEVBQUVJLElBQUksRUFBRUMsYUFBYSxFQUFFLEdBQUdMLG1CQUFPQSxDQUFDLHdFQUFpQjtBQUN6RCxNQUFNTSxpQkFBaUJOLG1CQUFPQSxDQUFDLHdFQUFpQjtBQUVoRCxNQUFNTyxXQUFXQyxPQUFPO0FBQ3hCLE1BQU1DLGVBQWVELE9BQU87QUFDNUIsTUFBTUUsV0FBV0YsT0FBTztBQUV4QixTQUFTRyxlQUFnQkMsTUFBTSxFQUFFQyxJQUFJO0lBQ25DLE9BQU8sSUFBSVosT0FBT1csUUFBUUM7QUFDNUI7QUFFQSxNQUFNQyxhQUFhbkI7SUFDakIsWUFBYWlCLE1BQU0sRUFBRSxFQUNuQkcsV0FBVyxFQUNYQyxVQUFVTCxjQUFjLEVBQ3hCTSxPQUFPLEVBQ1BDLGNBQWMsRUFDZEMsR0FBRyxFQUNIQyxpQkFBaUIsRUFDakJDLFVBQVUsRUFDVkMsZ0JBQWdCLEVBQ2hCQyw4QkFBOEIsRUFDOUJDLE9BQU8sRUFDUCxHQUFHQyxTQUNKLEdBQUcsQ0FBQyxDQUFDLENBQUU7UUFDTixLQUFLO1FBRUwsSUFBSVYsZUFBZSxRQUFTLEVBQUNXLE9BQU9DLFFBQVEsQ0FBQ1osZ0JBQWdCQSxjQUFjLElBQUk7WUFDN0UsTUFBTSxJQUFJYixxQkFBcUI7UUFDakM7UUFFQSxJQUFJLE9BQU9jLFlBQVksWUFBWTtZQUNqQyxNQUFNLElBQUlkLHFCQUFxQjtRQUNqQztRQUVBLElBQUllLFdBQVcsUUFBUSxPQUFPQSxZQUFZLGNBQWMsT0FBT0EsWUFBWSxVQUFVO1lBQ25GLE1BQU0sSUFBSWYscUJBQXFCO1FBQ2pDO1FBRUEsSUFBSSxPQUFPZSxZQUFZLFlBQVk7WUFDakNBLFVBQVVYLGVBQWU7Z0JBQ3ZCLEdBQUdhLEdBQUc7Z0JBQ05DO2dCQUNBSTtnQkFDQUg7Z0JBQ0FPLFNBQVNWO2dCQUNULEdBQUlJLG1CQUFtQjtvQkFBRUE7b0JBQWtCQztnQkFBK0IsSUFBSU0sU0FBUztnQkFDdkYsR0FBR1osT0FBTztZQUNaO1FBQ0Y7UUFFQSxJQUFJLENBQUNaLGNBQWMsR0FBR29CLFFBQVFLLFlBQVksRUFBRWhCLFFBQVFpQixNQUFNQyxPQUFPLENBQUNQLFFBQVFLLFlBQVksQ0FBQ2hCLElBQUksSUFDdkZXLFFBQVFLLFlBQVksQ0FBQ2hCLElBQUksR0FDekIsRUFBRTtRQUNOLElBQUksQ0FBQ0wsYUFBYSxHQUFHTSxlQUFlO1FBQ3BDLElBQUksQ0FBQ1gsS0FBSyxHQUFHRCxLQUFLOEIsV0FBVyxDQUFDckI7UUFDOUIsSUFBSSxDQUFDTCxTQUFTLEdBQUc7WUFBRSxHQUFHSixLQUFLK0IsU0FBUyxDQUFDVCxRQUFRO1lBQUVSO1lBQVNPO1FBQVE7UUFDaEUsSUFBSSxDQUFDakIsU0FBUyxDQUFDdUIsWUFBWSxHQUFHTCxRQUFRSyxZQUFZLEdBQzlDO1lBQUUsR0FBR0wsUUFBUUssWUFBWTtRQUFDLElBQzFCRDtRQUNKLElBQUksQ0FBQ25CLFNBQVMsR0FBR007SUFDbkI7SUFFQSxDQUFDakIsZUFBZSxHQUFJO1FBQ2xCLEtBQUssTUFBTW9DLFVBQVUsSUFBSSxDQUFDdkMsU0FBUyxDQUFFO1lBQ25DLElBQUksQ0FBQ3VDLE1BQU0sQ0FBQ3RDLFdBQVcsRUFBRTtnQkFDdkIsT0FBT3NDO1lBQ1Q7UUFDRjtRQUVBLElBQUksQ0FBQyxJQUFJLENBQUMxQixhQUFhLElBQUksSUFBSSxDQUFDYixTQUFTLENBQUN3QyxNQUFNLEdBQUcsSUFBSSxDQUFDM0IsYUFBYSxFQUFFO1lBQ3JFLE1BQU00QixhQUFhLElBQUksQ0FBQzNCLFNBQVMsQ0FBQyxJQUFJLENBQUNOLEtBQUssRUFBRSxJQUFJLENBQUNHLFNBQVM7WUFDNUQsSUFBSSxDQUFDVCxXQUFXLENBQUN1QztZQUNqQixPQUFPQTtRQUNUO0lBQ0Y7QUFDRjtBQUVBQyxPQUFPQyxPQUFPLEdBQUd6QiIsInNvdXJjZXMiOlsiRDpcXEhlbGl4XFxub2RlX21vZHVsZXNcXHVuZGljaVxcbGliXFxkaXNwYXRjaGVyXFxwb29sLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jb25zdCB7XG4gIFBvb2xCYXNlLFxuICBrQ2xpZW50cyxcbiAga05lZWREcmFpbixcbiAga0FkZENsaWVudCxcbiAga0dldERpc3BhdGNoZXJcbn0gPSByZXF1aXJlKCcuL3Bvb2wtYmFzZScpXG5jb25zdCBDbGllbnQgPSByZXF1aXJlKCcuL2NsaWVudCcpXG5jb25zdCB7XG4gIEludmFsaWRBcmd1bWVudEVycm9yXG59ID0gcmVxdWlyZSgnLi4vY29yZS9lcnJvcnMnKVxuY29uc3QgdXRpbCA9IHJlcXVpcmUoJy4uL2NvcmUvdXRpbCcpXG5jb25zdCB7IGtVcmwsIGtJbnRlcmNlcHRvcnMgfSA9IHJlcXVpcmUoJy4uL2NvcmUvc3ltYm9scycpXG5jb25zdCBidWlsZENvbm5lY3RvciA9IHJlcXVpcmUoJy4uL2NvcmUvY29ubmVjdCcpXG5cbmNvbnN0IGtPcHRpb25zID0gU3ltYm9sKCdvcHRpb25zJylcbmNvbnN0IGtDb25uZWN0aW9ucyA9IFN5bWJvbCgnY29ubmVjdGlvbnMnKVxuY29uc3Qga0ZhY3RvcnkgPSBTeW1ib2woJ2ZhY3RvcnknKVxuXG5mdW5jdGlvbiBkZWZhdWx0RmFjdG9yeSAob3JpZ2luLCBvcHRzKSB7XG4gIHJldHVybiBuZXcgQ2xpZW50KG9yaWdpbiwgb3B0cylcbn1cblxuY2xhc3MgUG9vbCBleHRlbmRzIFBvb2xCYXNlIHtcbiAgY29uc3RydWN0b3IgKG9yaWdpbiwge1xuICAgIGNvbm5lY3Rpb25zLFxuICAgIGZhY3RvcnkgPSBkZWZhdWx0RmFjdG9yeSxcbiAgICBjb25uZWN0LFxuICAgIGNvbm5lY3RUaW1lb3V0LFxuICAgIHRscyxcbiAgICBtYXhDYWNoZWRTZXNzaW9ucyxcbiAgICBzb2NrZXRQYXRoLFxuICAgIGF1dG9TZWxlY3RGYW1pbHksXG4gICAgYXV0b1NlbGVjdEZhbWlseUF0dGVtcHRUaW1lb3V0LFxuICAgIGFsbG93SDIsXG4gICAgLi4ub3B0aW9uc1xuICB9ID0ge30pIHtcbiAgICBzdXBlcigpXG5cbiAgICBpZiAoY29ubmVjdGlvbnMgIT0gbnVsbCAmJiAoIU51bWJlci5pc0Zpbml0ZShjb25uZWN0aW9ucykgfHwgY29ubmVjdGlvbnMgPCAwKSkge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKCdpbnZhbGlkIGNvbm5lY3Rpb25zJylcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGZhY3RvcnkgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcignZmFjdG9yeSBtdXN0IGJlIGEgZnVuY3Rpb24uJylcbiAgICB9XG5cbiAgICBpZiAoY29ubmVjdCAhPSBudWxsICYmIHR5cGVvZiBjb25uZWN0ICE9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBjb25uZWN0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKCdjb25uZWN0IG11c3QgYmUgYSBmdW5jdGlvbiBvciBhbiBvYmplY3QnKVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgY29ubmVjdCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY29ubmVjdCA9IGJ1aWxkQ29ubmVjdG9yKHtcbiAgICAgICAgLi4udGxzLFxuICAgICAgICBtYXhDYWNoZWRTZXNzaW9ucyxcbiAgICAgICAgYWxsb3dIMixcbiAgICAgICAgc29ja2V0UGF0aCxcbiAgICAgICAgdGltZW91dDogY29ubmVjdFRpbWVvdXQsXG4gICAgICAgIC4uLihhdXRvU2VsZWN0RmFtaWx5ID8geyBhdXRvU2VsZWN0RmFtaWx5LCBhdXRvU2VsZWN0RmFtaWx5QXR0ZW1wdFRpbWVvdXQgfSA6IHVuZGVmaW5lZCksXG4gICAgICAgIC4uLmNvbm5lY3RcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgdGhpc1trSW50ZXJjZXB0b3JzXSA9IG9wdGlvbnMuaW50ZXJjZXB0b3JzPy5Qb29sICYmIEFycmF5LmlzQXJyYXkob3B0aW9ucy5pbnRlcmNlcHRvcnMuUG9vbClcbiAgICAgID8gb3B0aW9ucy5pbnRlcmNlcHRvcnMuUG9vbFxuICAgICAgOiBbXVxuICAgIHRoaXNba0Nvbm5lY3Rpb25zXSA9IGNvbm5lY3Rpb25zIHx8IG51bGxcbiAgICB0aGlzW2tVcmxdID0gdXRpbC5wYXJzZU9yaWdpbihvcmlnaW4pXG4gICAgdGhpc1trT3B0aW9uc10gPSB7IC4uLnV0aWwuZGVlcENsb25lKG9wdGlvbnMpLCBjb25uZWN0LCBhbGxvd0gyIH1cbiAgICB0aGlzW2tPcHRpb25zXS5pbnRlcmNlcHRvcnMgPSBvcHRpb25zLmludGVyY2VwdG9yc1xuICAgICAgPyB7IC4uLm9wdGlvbnMuaW50ZXJjZXB0b3JzIH1cbiAgICAgIDogdW5kZWZpbmVkXG4gICAgdGhpc1trRmFjdG9yeV0gPSBmYWN0b3J5XG4gIH1cblxuICBba0dldERpc3BhdGNoZXJdICgpIHtcbiAgICBmb3IgKGNvbnN0IGNsaWVudCBvZiB0aGlzW2tDbGllbnRzXSkge1xuICAgICAgaWYgKCFjbGllbnRba05lZWREcmFpbl0pIHtcbiAgICAgICAgcmV0dXJuIGNsaWVudFxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghdGhpc1trQ29ubmVjdGlvbnNdIHx8IHRoaXNba0NsaWVudHNdLmxlbmd0aCA8IHRoaXNba0Nvbm5lY3Rpb25zXSkge1xuICAgICAgY29uc3QgZGlzcGF0Y2hlciA9IHRoaXNba0ZhY3RvcnldKHRoaXNba1VybF0sIHRoaXNba09wdGlvbnNdKVxuICAgICAgdGhpc1trQWRkQ2xpZW50XShkaXNwYXRjaGVyKVxuICAgICAgcmV0dXJuIGRpc3BhdGNoZXJcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBQb29sXG4iXSwibmFtZXMiOlsiUG9vbEJhc2UiLCJrQ2xpZW50cyIsImtOZWVkRHJhaW4iLCJrQWRkQ2xpZW50Iiwia0dldERpc3BhdGNoZXIiLCJyZXF1aXJlIiwiQ2xpZW50IiwiSW52YWxpZEFyZ3VtZW50RXJyb3IiLCJ1dGlsIiwia1VybCIsImtJbnRlcmNlcHRvcnMiLCJidWlsZENvbm5lY3RvciIsImtPcHRpb25zIiwiU3ltYm9sIiwia0Nvbm5lY3Rpb25zIiwia0ZhY3RvcnkiLCJkZWZhdWx0RmFjdG9yeSIsIm9yaWdpbiIsIm9wdHMiLCJQb29sIiwiY29ubmVjdGlvbnMiLCJmYWN0b3J5IiwiY29ubmVjdCIsImNvbm5lY3RUaW1lb3V0IiwidGxzIiwibWF4Q2FjaGVkU2Vzc2lvbnMiLCJzb2NrZXRQYXRoIiwiYXV0b1NlbGVjdEZhbWlseSIsImF1dG9TZWxlY3RGYW1pbHlBdHRlbXB0VGltZW91dCIsImFsbG93SDIiLCJvcHRpb25zIiwiTnVtYmVyIiwiaXNGaW5pdGUiLCJ0aW1lb3V0IiwidW5kZWZpbmVkIiwiaW50ZXJjZXB0b3JzIiwiQXJyYXkiLCJpc0FycmF5IiwicGFyc2VPcmlnaW4iLCJkZWVwQ2xvbmUiLCJjbGllbnQiLCJsZW5ndGgiLCJkaXNwYXRjaGVyIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/dispatcher/pool.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/dispatcher/proxy-agent.js":
/*!***********************************************************!*\
  !*** ./node_modules/undici/lib/dispatcher/proxy-agent.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { kProxy, kClose, kDestroy, kInterceptors } = __webpack_require__(/*! ../core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst { URL } = __webpack_require__(/*! node:url */ \"node:url\");\nconst Agent = __webpack_require__(/*! ./agent */ \"(ssr)/./node_modules/undici/lib/dispatcher/agent.js\");\nconst Pool = __webpack_require__(/*! ./pool */ \"(ssr)/./node_modules/undici/lib/dispatcher/pool.js\");\nconst DispatcherBase = __webpack_require__(/*! ./dispatcher-base */ \"(ssr)/./node_modules/undici/lib/dispatcher/dispatcher-base.js\");\nconst { InvalidArgumentError, RequestAbortedError, SecureProxyConnectionError } = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst buildConnector = __webpack_require__(/*! ../core/connect */ \"(ssr)/./node_modules/undici/lib/core/connect.js\");\nconst kAgent = Symbol('proxy agent');\nconst kClient = Symbol('proxy client');\nconst kProxyHeaders = Symbol('proxy headers');\nconst kRequestTls = Symbol('request tls settings');\nconst kProxyTls = Symbol('proxy tls settings');\nconst kConnectEndpoint = Symbol('connect endpoint function');\nfunction defaultProtocolPort(protocol) {\n    return protocol === 'https:' ? 443 : 80;\n}\nfunction defaultFactory(origin, opts) {\n    return new Pool(origin, opts);\n}\nclass ProxyAgent extends DispatcherBase {\n    constructor(opts){\n        super();\n        if (!opts || typeof opts === 'object' && !(opts instanceof URL) && !opts.uri) {\n            throw new InvalidArgumentError('Proxy uri is mandatory');\n        }\n        const { clientFactory = defaultFactory } = opts;\n        if (typeof clientFactory !== 'function') {\n            throw new InvalidArgumentError('Proxy opts.clientFactory must be a function.');\n        }\n        const url = this.#getUrl(opts);\n        const { href, origin, port, protocol, username, password, hostname: proxyHostname } = url;\n        this[kProxy] = {\n            uri: href,\n            protocol\n        };\n        this[kInterceptors] = opts.interceptors?.ProxyAgent && Array.isArray(opts.interceptors.ProxyAgent) ? opts.interceptors.ProxyAgent : [];\n        this[kRequestTls] = opts.requestTls;\n        this[kProxyTls] = opts.proxyTls;\n        this[kProxyHeaders] = opts.headers || {};\n        if (opts.auth && opts.token) {\n            throw new InvalidArgumentError('opts.auth cannot be used in combination with opts.token');\n        } else if (opts.auth) {\n            /* @deprecated in favour of opts.token */ this[kProxyHeaders]['proxy-authorization'] = `Basic ${opts.auth}`;\n        } else if (opts.token) {\n            this[kProxyHeaders]['proxy-authorization'] = opts.token;\n        } else if (username && password) {\n            this[kProxyHeaders]['proxy-authorization'] = `Basic ${Buffer.from(`${decodeURIComponent(username)}:${decodeURIComponent(password)}`).toString('base64')}`;\n        }\n        const connect = buildConnector({\n            ...opts.proxyTls\n        });\n        this[kConnectEndpoint] = buildConnector({\n            ...opts.requestTls\n        });\n        this[kClient] = clientFactory(url, {\n            connect\n        });\n        this[kAgent] = new Agent({\n            ...opts,\n            connect: async (opts, callback)=>{\n                let requestedPath = opts.host;\n                if (!opts.port) {\n                    requestedPath += `:${defaultProtocolPort(opts.protocol)}`;\n                }\n                try {\n                    const { socket, statusCode } = await this[kClient].connect({\n                        origin,\n                        port,\n                        path: requestedPath,\n                        signal: opts.signal,\n                        headers: {\n                            ...this[kProxyHeaders],\n                            host: opts.host\n                        },\n                        servername: this[kProxyTls]?.servername || proxyHostname\n                    });\n                    if (statusCode !== 200) {\n                        socket.on('error', ()=>{}).destroy();\n                        callback(new RequestAbortedError(`Proxy response (${statusCode}) !== 200 when HTTP Tunneling`));\n                    }\n                    if (opts.protocol !== 'https:') {\n                        callback(null, socket);\n                        return;\n                    }\n                    let servername;\n                    if (this[kRequestTls]) {\n                        servername = this[kRequestTls].servername;\n                    } else {\n                        servername = opts.servername;\n                    }\n                    this[kConnectEndpoint]({\n                        ...opts,\n                        servername,\n                        httpSocket: socket\n                    }, callback);\n                } catch (err) {\n                    if (err.code === 'ERR_TLS_CERT_ALTNAME_INVALID') {\n                        // Throw a custom error to avoid loop in client.js#connect\n                        callback(new SecureProxyConnectionError(err));\n                    } else {\n                        callback(err);\n                    }\n                }\n            }\n        });\n    }\n    dispatch(opts, handler) {\n        const headers = buildHeaders(opts.headers);\n        throwIfProxyAuthIsSent(headers);\n        if (headers && !('host' in headers) && !('Host' in headers)) {\n            const { host } = new URL(opts.origin);\n            headers.host = host;\n        }\n        return this[kAgent].dispatch({\n            ...opts,\n            headers\n        }, handler);\n    }\n    /**\n   * @param {import('../types/proxy-agent').ProxyAgent.Options | string | URL} opts\n   * @returns {URL}\n   */ #getUrl(opts) {\n        if (typeof opts === 'string') {\n            return new URL(opts);\n        } else if (opts instanceof URL) {\n            return opts;\n        } else {\n            return new URL(opts.uri);\n        }\n    }\n    async [kClose]() {\n        await this[kAgent].close();\n        await this[kClient].close();\n    }\n    async [kDestroy]() {\n        await this[kAgent].destroy();\n        await this[kClient].destroy();\n    }\n}\n/**\n * @param {string[] | Record<string, string>} headers\n * @returns {Record<string, string>}\n */ function buildHeaders(headers) {\n    // When using undici.fetch, the headers list is stored\n    // as an array.\n    if (Array.isArray(headers)) {\n        /** @type {Record<string, string>} */ const headersPair = {};\n        for(let i = 0; i < headers.length; i += 2){\n            headersPair[headers[i]] = headers[i + 1];\n        }\n        return headersPair;\n    }\n    return headers;\n}\n/**\n * @param {Record<string, string>} headers\n *\n * Previous versions of ProxyAgent suggests the Proxy-Authorization in request headers\n * Nevertheless, it was changed and to avoid a security vulnerability by end users\n * this check was created.\n * It should be removed in the next major version for performance reasons\n */ function throwIfProxyAuthIsSent(headers) {\n    const existProxyAuth = headers && Object.keys(headers).find((key)=>key.toLowerCase() === 'proxy-authorization');\n    if (existProxyAuth) {\n        throw new InvalidArgumentError('Proxy-Authorization should be sent in ProxyAgent constructor');\n    }\n}\nmodule.exports = ProxyAgent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9kaXNwYXRjaGVyL3Byb3h5LWFnZW50LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTSxFQUFFQSxNQUFNLEVBQUVDLE1BQU0sRUFBRUMsUUFBUSxFQUFFQyxhQUFhLEVBQUUsR0FBR0MsbUJBQU9BLENBQUMsd0VBQWlCO0FBQzdFLE1BQU0sRUFBRUMsR0FBRyxFQUFFLEdBQUdELG1CQUFPQSxDQUFDLDBCQUFVO0FBQ2xDLE1BQU1FLFFBQVFGLG1CQUFPQSxDQUFDLG9FQUFTO0FBQy9CLE1BQU1HLE9BQU9ILG1CQUFPQSxDQUFDLGtFQUFRO0FBQzdCLE1BQU1JLGlCQUFpQkosbUJBQU9BLENBQUMsd0ZBQW1CO0FBQ2xELE1BQU0sRUFBRUssb0JBQW9CLEVBQUVDLG1CQUFtQixFQUFFQywwQkFBMEIsRUFBRSxHQUFHUCxtQkFBT0EsQ0FBQyxzRUFBZ0I7QUFDMUcsTUFBTVEsaUJBQWlCUixtQkFBT0EsQ0FBQyx3RUFBaUI7QUFFaEQsTUFBTVMsU0FBU0MsT0FBTztBQUN0QixNQUFNQyxVQUFVRCxPQUFPO0FBQ3ZCLE1BQU1FLGdCQUFnQkYsT0FBTztBQUM3QixNQUFNRyxjQUFjSCxPQUFPO0FBQzNCLE1BQU1JLFlBQVlKLE9BQU87QUFDekIsTUFBTUssbUJBQW1CTCxPQUFPO0FBRWhDLFNBQVNNLG9CQUFxQkMsUUFBUTtJQUNwQyxPQUFPQSxhQUFhLFdBQVcsTUFBTTtBQUN2QztBQUVBLFNBQVNDLGVBQWdCQyxNQUFNLEVBQUVDLElBQUk7SUFDbkMsT0FBTyxJQUFJakIsS0FBS2dCLFFBQVFDO0FBQzFCO0FBRUEsTUFBTUMsbUJBQW1CakI7SUFDdkIsWUFBYWdCLElBQUksQ0FBRTtRQUNqQixLQUFLO1FBRUwsSUFBSSxDQUFDQSxRQUFTLE9BQU9BLFNBQVMsWUFBWSxDQUFFQSxDQUFBQSxnQkFBZ0JuQixHQUFFLEtBQU0sQ0FBQ21CLEtBQUtFLEdBQUcsRUFBRztZQUM5RSxNQUFNLElBQUlqQixxQkFBcUI7UUFDakM7UUFFQSxNQUFNLEVBQUVrQixnQkFBZ0JMLGNBQWMsRUFBRSxHQUFHRTtRQUMzQyxJQUFJLE9BQU9HLGtCQUFrQixZQUFZO1lBQ3ZDLE1BQU0sSUFBSWxCLHFCQUFxQjtRQUNqQztRQUVBLE1BQU1tQixNQUFNLElBQUksQ0FBQyxPQUFPLENBQUNKO1FBQ3pCLE1BQU0sRUFBRUssSUFBSSxFQUFFTixNQUFNLEVBQUVPLElBQUksRUFBRVQsUUFBUSxFQUFFVSxRQUFRLEVBQUVDLFFBQVEsRUFBRUMsVUFBVUMsYUFBYSxFQUFFLEdBQUdOO1FBRXRGLElBQUksQ0FBQzVCLE9BQU8sR0FBRztZQUFFMEIsS0FBS0c7WUFBTVI7UUFBUztRQUNyQyxJQUFJLENBQUNsQixjQUFjLEdBQUdxQixLQUFLVyxZQUFZLEVBQUVWLGNBQWNXLE1BQU1DLE9BQU8sQ0FBQ2IsS0FBS1csWUFBWSxDQUFDVixVQUFVLElBQzdGRCxLQUFLVyxZQUFZLENBQUNWLFVBQVUsR0FDNUIsRUFBRTtRQUNOLElBQUksQ0FBQ1IsWUFBWSxHQUFHTyxLQUFLYyxVQUFVO1FBQ25DLElBQUksQ0FBQ3BCLFVBQVUsR0FBR00sS0FBS2UsUUFBUTtRQUMvQixJQUFJLENBQUN2QixjQUFjLEdBQUdRLEtBQUtnQixPQUFPLElBQUksQ0FBQztRQUV2QyxJQUFJaEIsS0FBS2lCLElBQUksSUFBSWpCLEtBQUtrQixLQUFLLEVBQUU7WUFDM0IsTUFBTSxJQUFJakMscUJBQXFCO1FBQ2pDLE9BQU8sSUFBSWUsS0FBS2lCLElBQUksRUFBRTtZQUNwQix1Q0FBdUMsR0FDdkMsSUFBSSxDQUFDekIsY0FBYyxDQUFDLHNCQUFzQixHQUFHLENBQUMsTUFBTSxFQUFFUSxLQUFLaUIsSUFBSSxFQUFFO1FBQ25FLE9BQU8sSUFBSWpCLEtBQUtrQixLQUFLLEVBQUU7WUFDckIsSUFBSSxDQUFDMUIsY0FBYyxDQUFDLHNCQUFzQixHQUFHUSxLQUFLa0IsS0FBSztRQUN6RCxPQUFPLElBQUlYLFlBQVlDLFVBQVU7WUFDL0IsSUFBSSxDQUFDaEIsY0FBYyxDQUFDLHNCQUFzQixHQUFHLENBQUMsTUFBTSxFQUFFMkIsT0FBT0MsSUFBSSxDQUFDLEdBQUdDLG1CQUFtQmQsVUFBVSxDQUFDLEVBQUVjLG1CQUFtQmIsV0FBVyxFQUFFYyxRQUFRLENBQUMsV0FBVztRQUMzSjtRQUVBLE1BQU1DLFVBQVVuQyxlQUFlO1lBQUUsR0FBR1ksS0FBS2UsUUFBUTtRQUFDO1FBQ2xELElBQUksQ0FBQ3BCLGlCQUFpQixHQUFHUCxlQUFlO1lBQUUsR0FBR1ksS0FBS2MsVUFBVTtRQUFDO1FBQzdELElBQUksQ0FBQ3ZCLFFBQVEsR0FBR1ksY0FBY0MsS0FBSztZQUFFbUI7UUFBUTtRQUM3QyxJQUFJLENBQUNsQyxPQUFPLEdBQUcsSUFBSVAsTUFBTTtZQUN2QixHQUFHa0IsSUFBSTtZQUNQdUIsU0FBUyxPQUFPdkIsTUFBTXdCO2dCQUNwQixJQUFJQyxnQkFBZ0J6QixLQUFLMEIsSUFBSTtnQkFDN0IsSUFBSSxDQUFDMUIsS0FBS00sSUFBSSxFQUFFO29CQUNkbUIsaUJBQWlCLENBQUMsQ0FBQyxFQUFFN0Isb0JBQW9CSSxLQUFLSCxRQUFRLEdBQUc7Z0JBQzNEO2dCQUNBLElBQUk7b0JBQ0YsTUFBTSxFQUFFOEIsTUFBTSxFQUFFQyxVQUFVLEVBQUUsR0FBRyxNQUFNLElBQUksQ0FBQ3JDLFFBQVEsQ0FBQ2dDLE9BQU8sQ0FBQzt3QkFDekR4Qjt3QkFDQU87d0JBQ0F1QixNQUFNSjt3QkFDTkssUUFBUTlCLEtBQUs4QixNQUFNO3dCQUNuQmQsU0FBUzs0QkFDUCxHQUFHLElBQUksQ0FBQ3hCLGNBQWM7NEJBQ3RCa0MsTUFBTTFCLEtBQUswQixJQUFJO3dCQUNqQjt3QkFDQUssWUFBWSxJQUFJLENBQUNyQyxVQUFVLEVBQUVxQyxjQUFjckI7b0JBQzdDO29CQUNBLElBQUlrQixlQUFlLEtBQUs7d0JBQ3RCRCxPQUFPSyxFQUFFLENBQUMsU0FBUyxLQUFPLEdBQUdDLE9BQU87d0JBQ3BDVCxTQUFTLElBQUl0QyxvQkFBb0IsQ0FBQyxnQkFBZ0IsRUFBRTBDLFdBQVcsNkJBQTZCLENBQUM7b0JBQy9GO29CQUNBLElBQUk1QixLQUFLSCxRQUFRLEtBQUssVUFBVTt3QkFDOUIyQixTQUFTLE1BQU1HO3dCQUNmO29CQUNGO29CQUNBLElBQUlJO29CQUNKLElBQUksSUFBSSxDQUFDdEMsWUFBWSxFQUFFO3dCQUNyQnNDLGFBQWEsSUFBSSxDQUFDdEMsWUFBWSxDQUFDc0MsVUFBVTtvQkFDM0MsT0FBTzt3QkFDTEEsYUFBYS9CLEtBQUsrQixVQUFVO29CQUM5QjtvQkFDQSxJQUFJLENBQUNwQyxpQkFBaUIsQ0FBQzt3QkFBRSxHQUFHSyxJQUFJO3dCQUFFK0I7d0JBQVlHLFlBQVlQO29CQUFPLEdBQUdIO2dCQUN0RSxFQUFFLE9BQU9XLEtBQUs7b0JBQ1osSUFBSUEsSUFBSUMsSUFBSSxLQUFLLGdDQUFnQzt3QkFDL0MsMERBQTBEO3dCQUMxRFosU0FBUyxJQUFJckMsMkJBQTJCZ0Q7b0JBQzFDLE9BQU87d0JBQ0xYLFNBQVNXO29CQUNYO2dCQUNGO1lBQ0Y7UUFDRjtJQUNGO0lBRUFFLFNBQVVyQyxJQUFJLEVBQUVzQyxPQUFPLEVBQUU7UUFDdkIsTUFBTXRCLFVBQVV1QixhQUFhdkMsS0FBS2dCLE9BQU87UUFDekN3Qix1QkFBdUJ4QjtRQUV2QixJQUFJQSxXQUFXLENBQUUsV0FBVUEsT0FBTSxLQUFNLENBQUUsV0FBVUEsT0FBTSxHQUFJO1lBQzNELE1BQU0sRUFBRVUsSUFBSSxFQUFFLEdBQUcsSUFBSTdDLElBQUltQixLQUFLRCxNQUFNO1lBQ3BDaUIsUUFBUVUsSUFBSSxHQUFHQTtRQUNqQjtRQUVBLE9BQU8sSUFBSSxDQUFDckMsT0FBTyxDQUFDZ0QsUUFBUSxDQUMxQjtZQUNFLEdBQUdyQyxJQUFJO1lBQ1BnQjtRQUNGLEdBQ0FzQjtJQUVKO0lBRUE7OztHQUdDLEdBQ0QsT0FBTyxDQUFFdEMsSUFBSTtRQUNYLElBQUksT0FBT0EsU0FBUyxVQUFVO1lBQzVCLE9BQU8sSUFBSW5CLElBQUltQjtRQUNqQixPQUFPLElBQUlBLGdCQUFnQm5CLEtBQUs7WUFDOUIsT0FBT21CO1FBQ1QsT0FBTztZQUNMLE9BQU8sSUFBSW5CLElBQUltQixLQUFLRSxHQUFHO1FBQ3pCO0lBQ0Y7SUFFQSxNQUFNLENBQUN6QixPQUFPLEdBQUk7UUFDaEIsTUFBTSxJQUFJLENBQUNZLE9BQU8sQ0FBQ29ELEtBQUs7UUFDeEIsTUFBTSxJQUFJLENBQUNsRCxRQUFRLENBQUNrRCxLQUFLO0lBQzNCO0lBRUEsTUFBTSxDQUFDL0QsU0FBUyxHQUFJO1FBQ2xCLE1BQU0sSUFBSSxDQUFDVyxPQUFPLENBQUM0QyxPQUFPO1FBQzFCLE1BQU0sSUFBSSxDQUFDMUMsUUFBUSxDQUFDMEMsT0FBTztJQUM3QjtBQUNGO0FBRUE7OztDQUdDLEdBQ0QsU0FBU00sYUFBY3ZCLE9BQU87SUFDNUIsc0RBQXNEO0lBQ3RELGVBQWU7SUFDZixJQUFJSixNQUFNQyxPQUFPLENBQUNHLFVBQVU7UUFDMUIsbUNBQW1DLEdBQ25DLE1BQU0wQixjQUFjLENBQUM7UUFFckIsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUkzQixRQUFRNEIsTUFBTSxFQUFFRCxLQUFLLEVBQUc7WUFDMUNELFdBQVcsQ0FBQzFCLE9BQU8sQ0FBQzJCLEVBQUUsQ0FBQyxHQUFHM0IsT0FBTyxDQUFDMkIsSUFBSSxFQUFFO1FBQzFDO1FBRUEsT0FBT0Q7SUFDVDtJQUVBLE9BQU8xQjtBQUNUO0FBRUE7Ozs7Ozs7Q0FPQyxHQUNELFNBQVN3Qix1QkFBd0J4QixPQUFPO0lBQ3RDLE1BQU02QixpQkFBaUI3QixXQUFXOEIsT0FBT0MsSUFBSSxDQUFDL0IsU0FDM0NnQyxJQUFJLENBQUMsQ0FBQ0MsTUFBUUEsSUFBSUMsV0FBVyxPQUFPO0lBQ3ZDLElBQUlMLGdCQUFnQjtRQUNsQixNQUFNLElBQUk1RCxxQkFBcUI7SUFDakM7QUFDRjtBQUVBa0UsT0FBT0MsT0FBTyxHQUFHbkQiLCJzb3VyY2VzIjpbIkQ6XFxIZWxpeFxcbm9kZV9tb2R1bGVzXFx1bmRpY2lcXGxpYlxcZGlzcGF0Y2hlclxccHJveHktYWdlbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IHsga1Byb3h5LCBrQ2xvc2UsIGtEZXN0cm95LCBrSW50ZXJjZXB0b3JzIH0gPSByZXF1aXJlKCcuLi9jb3JlL3N5bWJvbHMnKVxuY29uc3QgeyBVUkwgfSA9IHJlcXVpcmUoJ25vZGU6dXJsJylcbmNvbnN0IEFnZW50ID0gcmVxdWlyZSgnLi9hZ2VudCcpXG5jb25zdCBQb29sID0gcmVxdWlyZSgnLi9wb29sJylcbmNvbnN0IERpc3BhdGNoZXJCYXNlID0gcmVxdWlyZSgnLi9kaXNwYXRjaGVyLWJhc2UnKVxuY29uc3QgeyBJbnZhbGlkQXJndW1lbnRFcnJvciwgUmVxdWVzdEFib3J0ZWRFcnJvciwgU2VjdXJlUHJveHlDb25uZWN0aW9uRXJyb3IgfSA9IHJlcXVpcmUoJy4uL2NvcmUvZXJyb3JzJylcbmNvbnN0IGJ1aWxkQ29ubmVjdG9yID0gcmVxdWlyZSgnLi4vY29yZS9jb25uZWN0JylcblxuY29uc3Qga0FnZW50ID0gU3ltYm9sKCdwcm94eSBhZ2VudCcpXG5jb25zdCBrQ2xpZW50ID0gU3ltYm9sKCdwcm94eSBjbGllbnQnKVxuY29uc3Qga1Byb3h5SGVhZGVycyA9IFN5bWJvbCgncHJveHkgaGVhZGVycycpXG5jb25zdCBrUmVxdWVzdFRscyA9IFN5bWJvbCgncmVxdWVzdCB0bHMgc2V0dGluZ3MnKVxuY29uc3Qga1Byb3h5VGxzID0gU3ltYm9sKCdwcm94eSB0bHMgc2V0dGluZ3MnKVxuY29uc3Qga0Nvbm5lY3RFbmRwb2ludCA9IFN5bWJvbCgnY29ubmVjdCBlbmRwb2ludCBmdW5jdGlvbicpXG5cbmZ1bmN0aW9uIGRlZmF1bHRQcm90b2NvbFBvcnQgKHByb3RvY29sKSB7XG4gIHJldHVybiBwcm90b2NvbCA9PT0gJ2h0dHBzOicgPyA0NDMgOiA4MFxufVxuXG5mdW5jdGlvbiBkZWZhdWx0RmFjdG9yeSAob3JpZ2luLCBvcHRzKSB7XG4gIHJldHVybiBuZXcgUG9vbChvcmlnaW4sIG9wdHMpXG59XG5cbmNsYXNzIFByb3h5QWdlbnQgZXh0ZW5kcyBEaXNwYXRjaGVyQmFzZSB7XG4gIGNvbnN0cnVjdG9yIChvcHRzKSB7XG4gICAgc3VwZXIoKVxuXG4gICAgaWYgKCFvcHRzIHx8ICh0eXBlb2Ygb3B0cyA9PT0gJ29iamVjdCcgJiYgIShvcHRzIGluc3RhbmNlb2YgVVJMKSAmJiAhb3B0cy51cmkpKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoJ1Byb3h5IHVyaSBpcyBtYW5kYXRvcnknKVxuICAgIH1cblxuICAgIGNvbnN0IHsgY2xpZW50RmFjdG9yeSA9IGRlZmF1bHRGYWN0b3J5IH0gPSBvcHRzXG4gICAgaWYgKHR5cGVvZiBjbGllbnRGYWN0b3J5ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoJ1Byb3h5IG9wdHMuY2xpZW50RmFjdG9yeSBtdXN0IGJlIGEgZnVuY3Rpb24uJylcbiAgICB9XG5cbiAgICBjb25zdCB1cmwgPSB0aGlzLiNnZXRVcmwob3B0cylcbiAgICBjb25zdCB7IGhyZWYsIG9yaWdpbiwgcG9ydCwgcHJvdG9jb2wsIHVzZXJuYW1lLCBwYXNzd29yZCwgaG9zdG5hbWU6IHByb3h5SG9zdG5hbWUgfSA9IHVybFxuXG4gICAgdGhpc1trUHJveHldID0geyB1cmk6IGhyZWYsIHByb3RvY29sIH1cbiAgICB0aGlzW2tJbnRlcmNlcHRvcnNdID0gb3B0cy5pbnRlcmNlcHRvcnM/LlByb3h5QWdlbnQgJiYgQXJyYXkuaXNBcnJheShvcHRzLmludGVyY2VwdG9ycy5Qcm94eUFnZW50KVxuICAgICAgPyBvcHRzLmludGVyY2VwdG9ycy5Qcm94eUFnZW50XG4gICAgICA6IFtdXG4gICAgdGhpc1trUmVxdWVzdFRsc10gPSBvcHRzLnJlcXVlc3RUbHNcbiAgICB0aGlzW2tQcm94eVRsc10gPSBvcHRzLnByb3h5VGxzXG4gICAgdGhpc1trUHJveHlIZWFkZXJzXSA9IG9wdHMuaGVhZGVycyB8fCB7fVxuXG4gICAgaWYgKG9wdHMuYXV0aCAmJiBvcHRzLnRva2VuKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoJ29wdHMuYXV0aCBjYW5ub3QgYmUgdXNlZCBpbiBjb21iaW5hdGlvbiB3aXRoIG9wdHMudG9rZW4nKVxuICAgIH0gZWxzZSBpZiAob3B0cy5hdXRoKSB7XG4gICAgICAvKiBAZGVwcmVjYXRlZCBpbiBmYXZvdXIgb2Ygb3B0cy50b2tlbiAqL1xuICAgICAgdGhpc1trUHJveHlIZWFkZXJzXVsncHJveHktYXV0aG9yaXphdGlvbiddID0gYEJhc2ljICR7b3B0cy5hdXRofWBcbiAgICB9IGVsc2UgaWYgKG9wdHMudG9rZW4pIHtcbiAgICAgIHRoaXNba1Byb3h5SGVhZGVyc11bJ3Byb3h5LWF1dGhvcml6YXRpb24nXSA9IG9wdHMudG9rZW5cbiAgICB9IGVsc2UgaWYgKHVzZXJuYW1lICYmIHBhc3N3b3JkKSB7XG4gICAgICB0aGlzW2tQcm94eUhlYWRlcnNdWydwcm94eS1hdXRob3JpemF0aW9uJ10gPSBgQmFzaWMgJHtCdWZmZXIuZnJvbShgJHtkZWNvZGVVUklDb21wb25lbnQodXNlcm5hbWUpfToke2RlY29kZVVSSUNvbXBvbmVudChwYXNzd29yZCl9YCkudG9TdHJpbmcoJ2Jhc2U2NCcpfWBcbiAgICB9XG5cbiAgICBjb25zdCBjb25uZWN0ID0gYnVpbGRDb25uZWN0b3IoeyAuLi5vcHRzLnByb3h5VGxzIH0pXG4gICAgdGhpc1trQ29ubmVjdEVuZHBvaW50XSA9IGJ1aWxkQ29ubmVjdG9yKHsgLi4ub3B0cy5yZXF1ZXN0VGxzIH0pXG4gICAgdGhpc1trQ2xpZW50XSA9IGNsaWVudEZhY3RvcnkodXJsLCB7IGNvbm5lY3QgfSlcbiAgICB0aGlzW2tBZ2VudF0gPSBuZXcgQWdlbnQoe1xuICAgICAgLi4ub3B0cyxcbiAgICAgIGNvbm5lY3Q6IGFzeW5jIChvcHRzLCBjYWxsYmFjaykgPT4ge1xuICAgICAgICBsZXQgcmVxdWVzdGVkUGF0aCA9IG9wdHMuaG9zdFxuICAgICAgICBpZiAoIW9wdHMucG9ydCkge1xuICAgICAgICAgIHJlcXVlc3RlZFBhdGggKz0gYDoke2RlZmF1bHRQcm90b2NvbFBvcnQob3B0cy5wcm90b2NvbCl9YFxuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgeyBzb2NrZXQsIHN0YXR1c0NvZGUgfSA9IGF3YWl0IHRoaXNba0NsaWVudF0uY29ubmVjdCh7XG4gICAgICAgICAgICBvcmlnaW4sXG4gICAgICAgICAgICBwb3J0LFxuICAgICAgICAgICAgcGF0aDogcmVxdWVzdGVkUGF0aCxcbiAgICAgICAgICAgIHNpZ25hbDogb3B0cy5zaWduYWwsXG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgIC4uLnRoaXNba1Byb3h5SGVhZGVyc10sXG4gICAgICAgICAgICAgIGhvc3Q6IG9wdHMuaG9zdFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNlcnZlcm5hbWU6IHRoaXNba1Byb3h5VGxzXT8uc2VydmVybmFtZSB8fCBwcm94eUhvc3RuYW1lXG4gICAgICAgICAgfSlcbiAgICAgICAgICBpZiAoc3RhdHVzQ29kZSAhPT0gMjAwKSB7XG4gICAgICAgICAgICBzb2NrZXQub24oJ2Vycm9yJywgKCkgPT4ge30pLmRlc3Ryb3koKVxuICAgICAgICAgICAgY2FsbGJhY2sobmV3IFJlcXVlc3RBYm9ydGVkRXJyb3IoYFByb3h5IHJlc3BvbnNlICgke3N0YXR1c0NvZGV9KSAhPT0gMjAwIHdoZW4gSFRUUCBUdW5uZWxpbmdgKSlcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG9wdHMucHJvdG9jb2wgIT09ICdodHRwczonKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCBzb2NrZXQpXG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICB9XG4gICAgICAgICAgbGV0IHNlcnZlcm5hbWVcbiAgICAgICAgICBpZiAodGhpc1trUmVxdWVzdFRsc10pIHtcbiAgICAgICAgICAgIHNlcnZlcm5hbWUgPSB0aGlzW2tSZXF1ZXN0VGxzXS5zZXJ2ZXJuYW1lXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNlcnZlcm5hbWUgPSBvcHRzLnNlcnZlcm5hbWVcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpc1trQ29ubmVjdEVuZHBvaW50XSh7IC4uLm9wdHMsIHNlcnZlcm5hbWUsIGh0dHBTb2NrZXQ6IHNvY2tldCB9LCBjYWxsYmFjaylcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgaWYgKGVyci5jb2RlID09PSAnRVJSX1RMU19DRVJUX0FMVE5BTUVfSU5WQUxJRCcpIHtcbiAgICAgICAgICAgIC8vIFRocm93IGEgY3VzdG9tIGVycm9yIHRvIGF2b2lkIGxvb3AgaW4gY2xpZW50LmpzI2Nvbm5lY3RcbiAgICAgICAgICAgIGNhbGxiYWNrKG5ldyBTZWN1cmVQcm94eUNvbm5lY3Rpb25FcnJvcihlcnIpKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWxsYmFjayhlcnIpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGRpc3BhdGNoIChvcHRzLCBoYW5kbGVyKSB7XG4gICAgY29uc3QgaGVhZGVycyA9IGJ1aWxkSGVhZGVycyhvcHRzLmhlYWRlcnMpXG4gICAgdGhyb3dJZlByb3h5QXV0aElzU2VudChoZWFkZXJzKVxuXG4gICAgaWYgKGhlYWRlcnMgJiYgISgnaG9zdCcgaW4gaGVhZGVycykgJiYgISgnSG9zdCcgaW4gaGVhZGVycykpIHtcbiAgICAgIGNvbnN0IHsgaG9zdCB9ID0gbmV3IFVSTChvcHRzLm9yaWdpbilcbiAgICAgIGhlYWRlcnMuaG9zdCA9IGhvc3RcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpc1trQWdlbnRdLmRpc3BhdGNoKFxuICAgICAge1xuICAgICAgICAuLi5vcHRzLFxuICAgICAgICBoZWFkZXJzXG4gICAgICB9LFxuICAgICAgaGFuZGxlclxuICAgIClcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2ltcG9ydCgnLi4vdHlwZXMvcHJveHktYWdlbnQnKS5Qcm94eUFnZW50Lk9wdGlvbnMgfCBzdHJpbmcgfCBVUkx9IG9wdHNcbiAgICogQHJldHVybnMge1VSTH1cbiAgICovXG4gICNnZXRVcmwgKG9wdHMpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gbmV3IFVSTChvcHRzKVxuICAgIH0gZWxzZSBpZiAob3B0cyBpbnN0YW5jZW9mIFVSTCkge1xuICAgICAgcmV0dXJuIG9wdHNcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBVUkwob3B0cy51cmkpXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgW2tDbG9zZV0gKCkge1xuICAgIGF3YWl0IHRoaXNba0FnZW50XS5jbG9zZSgpXG4gICAgYXdhaXQgdGhpc1trQ2xpZW50XS5jbG9zZSgpXG4gIH1cblxuICBhc3luYyBba0Rlc3Ryb3ldICgpIHtcbiAgICBhd2FpdCB0aGlzW2tBZ2VudF0uZGVzdHJveSgpXG4gICAgYXdhaXQgdGhpc1trQ2xpZW50XS5kZXN0cm95KClcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nW10gfCBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+fSBoZWFkZXJzXG4gKiBAcmV0dXJucyB7UmVjb3JkPHN0cmluZywgc3RyaW5nPn1cbiAqL1xuZnVuY3Rpb24gYnVpbGRIZWFkZXJzIChoZWFkZXJzKSB7XG4gIC8vIFdoZW4gdXNpbmcgdW5kaWNpLmZldGNoLCB0aGUgaGVhZGVycyBsaXN0IGlzIHN0b3JlZFxuICAvLyBhcyBhbiBhcnJheS5cbiAgaWYgKEFycmF5LmlzQXJyYXkoaGVhZGVycykpIHtcbiAgICAvKiogQHR5cGUge1JlY29yZDxzdHJpbmcsIHN0cmluZz59ICovXG4gICAgY29uc3QgaGVhZGVyc1BhaXIgPSB7fVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBoZWFkZXJzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICBoZWFkZXJzUGFpcltoZWFkZXJzW2ldXSA9IGhlYWRlcnNbaSArIDFdXG4gICAgfVxuXG4gICAgcmV0dXJuIGhlYWRlcnNQYWlyXG4gIH1cblxuICByZXR1cm4gaGVhZGVyc1xufVxuXG4vKipcbiAqIEBwYXJhbSB7UmVjb3JkPHN0cmluZywgc3RyaW5nPn0gaGVhZGVyc1xuICpcbiAqIFByZXZpb3VzIHZlcnNpb25zIG9mIFByb3h5QWdlbnQgc3VnZ2VzdHMgdGhlIFByb3h5LUF1dGhvcml6YXRpb24gaW4gcmVxdWVzdCBoZWFkZXJzXG4gKiBOZXZlcnRoZWxlc3MsIGl0IHdhcyBjaGFuZ2VkIGFuZCB0byBhdm9pZCBhIHNlY3VyaXR5IHZ1bG5lcmFiaWxpdHkgYnkgZW5kIHVzZXJzXG4gKiB0aGlzIGNoZWNrIHdhcyBjcmVhdGVkLlxuICogSXQgc2hvdWxkIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvbiBmb3IgcGVyZm9ybWFuY2UgcmVhc29uc1xuICovXG5mdW5jdGlvbiB0aHJvd0lmUHJveHlBdXRoSXNTZW50IChoZWFkZXJzKSB7XG4gIGNvbnN0IGV4aXN0UHJveHlBdXRoID0gaGVhZGVycyAmJiBPYmplY3Qua2V5cyhoZWFkZXJzKVxuICAgIC5maW5kKChrZXkpID0+IGtleS50b0xvd2VyQ2FzZSgpID09PSAncHJveHktYXV0aG9yaXphdGlvbicpXG4gIGlmIChleGlzdFByb3h5QXV0aCkge1xuICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcignUHJveHktQXV0aG9yaXphdGlvbiBzaG91bGQgYmUgc2VudCBpbiBQcm94eUFnZW50IGNvbnN0cnVjdG9yJylcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFByb3h5QWdlbnRcbiJdLCJuYW1lcyI6WyJrUHJveHkiLCJrQ2xvc2UiLCJrRGVzdHJveSIsImtJbnRlcmNlcHRvcnMiLCJyZXF1aXJlIiwiVVJMIiwiQWdlbnQiLCJQb29sIiwiRGlzcGF0Y2hlckJhc2UiLCJJbnZhbGlkQXJndW1lbnRFcnJvciIsIlJlcXVlc3RBYm9ydGVkRXJyb3IiLCJTZWN1cmVQcm94eUNvbm5lY3Rpb25FcnJvciIsImJ1aWxkQ29ubmVjdG9yIiwia0FnZW50IiwiU3ltYm9sIiwia0NsaWVudCIsImtQcm94eUhlYWRlcnMiLCJrUmVxdWVzdFRscyIsImtQcm94eVRscyIsImtDb25uZWN0RW5kcG9pbnQiLCJkZWZhdWx0UHJvdG9jb2xQb3J0IiwicHJvdG9jb2wiLCJkZWZhdWx0RmFjdG9yeSIsIm9yaWdpbiIsIm9wdHMiLCJQcm94eUFnZW50IiwidXJpIiwiY2xpZW50RmFjdG9yeSIsInVybCIsImhyZWYiLCJwb3J0IiwidXNlcm5hbWUiLCJwYXNzd29yZCIsImhvc3RuYW1lIiwicHJveHlIb3N0bmFtZSIsImludGVyY2VwdG9ycyIsIkFycmF5IiwiaXNBcnJheSIsInJlcXVlc3RUbHMiLCJwcm94eVRscyIsImhlYWRlcnMiLCJhdXRoIiwidG9rZW4iLCJCdWZmZXIiLCJmcm9tIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwidG9TdHJpbmciLCJjb25uZWN0IiwiY2FsbGJhY2siLCJyZXF1ZXN0ZWRQYXRoIiwiaG9zdCIsInNvY2tldCIsInN0YXR1c0NvZGUiLCJwYXRoIiwic2lnbmFsIiwic2VydmVybmFtZSIsIm9uIiwiZGVzdHJveSIsImh0dHBTb2NrZXQiLCJlcnIiLCJjb2RlIiwiZGlzcGF0Y2giLCJoYW5kbGVyIiwiYnVpbGRIZWFkZXJzIiwidGhyb3dJZlByb3h5QXV0aElzU2VudCIsImNsb3NlIiwiaGVhZGVyc1BhaXIiLCJpIiwibGVuZ3RoIiwiZXhpc3RQcm94eUF1dGgiLCJPYmplY3QiLCJrZXlzIiwiZmluZCIsImtleSIsInRvTG93ZXJDYXNlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/dispatcher/proxy-agent.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/dispatcher/retry-agent.js":
/*!***********************************************************!*\
  !*** ./node_modules/undici/lib/dispatcher/retry-agent.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst Dispatcher = __webpack_require__(/*! ./dispatcher */ \"(ssr)/./node_modules/undici/lib/dispatcher/dispatcher.js\");\nconst RetryHandler = __webpack_require__(/*! ../handler/retry-handler */ \"(ssr)/./node_modules/undici/lib/handler/retry-handler.js\");\nclass RetryAgent extends Dispatcher {\n    #agent;\n    #options;\n    constructor(agent, options = {}){\n        super(options), this.#agent = null, this.#options = null;\n        this.#agent = agent;\n        this.#options = options;\n    }\n    dispatch(opts, handler) {\n        const retry = new RetryHandler({\n            ...opts,\n            retryOptions: this.#options\n        }, {\n            dispatch: this.#agent.dispatch.bind(this.#agent),\n            handler\n        });\n        return this.#agent.dispatch(opts, retry);\n    }\n    close() {\n        return this.#agent.close();\n    }\n    destroy() {\n        return this.#agent.destroy();\n    }\n}\nmodule.exports = RetryAgent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9kaXNwYXRjaGVyL3JldHJ5LWFnZW50LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTUEsYUFBYUMsbUJBQU9BLENBQUMsOEVBQWM7QUFDekMsTUFBTUMsZUFBZUQsbUJBQU9BLENBQUMsMEZBQTBCO0FBRXZELE1BQU1FLG1CQUFtQkg7SUFDdkIsTUFBTSxDQUFPO0lBQ2IsUUFBUSxDQUFPO0lBQ2YsWUFBYUksS0FBSyxFQUFFQyxVQUFVLENBQUMsQ0FBQyxDQUFFO1FBQ2hDLEtBQUssQ0FBQ0EsZUFIUixNQUFNLEdBQUcsV0FDVCxRQUFRLEdBQUc7UUFHVCxJQUFJLENBQUMsTUFBTSxHQUFHRDtRQUNkLElBQUksQ0FBQyxRQUFRLEdBQUdDO0lBQ2xCO0lBRUFDLFNBQVVDLElBQUksRUFBRUMsT0FBTyxFQUFFO1FBQ3ZCLE1BQU1DLFFBQVEsSUFBSVAsYUFBYTtZQUM3QixHQUFHSyxJQUFJO1lBQ1BHLGNBQWMsSUFBSSxDQUFDLFFBQVE7UUFDN0IsR0FBRztZQUNESixVQUFVLElBQUksQ0FBQyxNQUFNLENBQUNBLFFBQVEsQ0FBQ0ssSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNO1lBQy9DSDtRQUNGO1FBQ0EsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDRixRQUFRLENBQUNDLE1BQU1FO0lBQ3BDO0lBRUFHLFFBQVM7UUFDUCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUNBLEtBQUs7SUFDMUI7SUFFQUMsVUFBVztRQUNULE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQ0EsT0FBTztJQUM1QjtBQUNGO0FBRUFDLE9BQU9DLE9BQU8sR0FBR1oiLCJzb3VyY2VzIjpbIkQ6XFxIZWxpeFxcbm9kZV9tb2R1bGVzXFx1bmRpY2lcXGxpYlxcZGlzcGF0Y2hlclxccmV0cnktYWdlbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IERpc3BhdGNoZXIgPSByZXF1aXJlKCcuL2Rpc3BhdGNoZXInKVxuY29uc3QgUmV0cnlIYW5kbGVyID0gcmVxdWlyZSgnLi4vaGFuZGxlci9yZXRyeS1oYW5kbGVyJylcblxuY2xhc3MgUmV0cnlBZ2VudCBleHRlbmRzIERpc3BhdGNoZXIge1xuICAjYWdlbnQgPSBudWxsXG4gICNvcHRpb25zID0gbnVsbFxuICBjb25zdHJ1Y3RvciAoYWdlbnQsIG9wdGlvbnMgPSB7fSkge1xuICAgIHN1cGVyKG9wdGlvbnMpXG4gICAgdGhpcy4jYWdlbnQgPSBhZ2VudFxuICAgIHRoaXMuI29wdGlvbnMgPSBvcHRpb25zXG4gIH1cblxuICBkaXNwYXRjaCAob3B0cywgaGFuZGxlcikge1xuICAgIGNvbnN0IHJldHJ5ID0gbmV3IFJldHJ5SGFuZGxlcih7XG4gICAgICAuLi5vcHRzLFxuICAgICAgcmV0cnlPcHRpb25zOiB0aGlzLiNvcHRpb25zXG4gICAgfSwge1xuICAgICAgZGlzcGF0Y2g6IHRoaXMuI2FnZW50LmRpc3BhdGNoLmJpbmQodGhpcy4jYWdlbnQpLFxuICAgICAgaGFuZGxlclxuICAgIH0pXG4gICAgcmV0dXJuIHRoaXMuI2FnZW50LmRpc3BhdGNoKG9wdHMsIHJldHJ5KVxuICB9XG5cbiAgY2xvc2UgKCkge1xuICAgIHJldHVybiB0aGlzLiNhZ2VudC5jbG9zZSgpXG4gIH1cblxuICBkZXN0cm95ICgpIHtcbiAgICByZXR1cm4gdGhpcy4jYWdlbnQuZGVzdHJveSgpXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSZXRyeUFnZW50XG4iXSwibmFtZXMiOlsiRGlzcGF0Y2hlciIsInJlcXVpcmUiLCJSZXRyeUhhbmRsZXIiLCJSZXRyeUFnZW50IiwiYWdlbnQiLCJvcHRpb25zIiwiZGlzcGF0Y2giLCJvcHRzIiwiaGFuZGxlciIsInJldHJ5IiwicmV0cnlPcHRpb25zIiwiYmluZCIsImNsb3NlIiwiZGVzdHJveSIsIm1vZHVsZSIsImV4cG9ydHMiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/dispatcher/retry-agent.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/global.js":
/*!*******************************************!*\
  !*** ./node_modules/undici/lib/global.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n// We include a version number for the Dispatcher API. In case of breaking changes,\n// this version number must be increased to avoid conflicts.\nconst globalDispatcher = Symbol.for('undici.globalDispatcher.1');\nconst { InvalidArgumentError } = __webpack_require__(/*! ./core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst Agent = __webpack_require__(/*! ./dispatcher/agent */ \"(ssr)/./node_modules/undici/lib/dispatcher/agent.js\");\nif (getGlobalDispatcher() === undefined) {\n    setGlobalDispatcher(new Agent());\n}\nfunction setGlobalDispatcher(agent) {\n    if (!agent || typeof agent.dispatch !== 'function') {\n        throw new InvalidArgumentError('Argument agent must implement Agent');\n    }\n    Object.defineProperty(globalThis, globalDispatcher, {\n        value: agent,\n        writable: true,\n        enumerable: false,\n        configurable: false\n    });\n}\nfunction getGlobalDispatcher() {\n    return globalThis[globalDispatcher];\n}\nmodule.exports = {\n    setGlobalDispatcher,\n    getGlobalDispatcher\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9nbG9iYWwuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxtRkFBbUY7QUFDbkYsNERBQTREO0FBQzVELE1BQU1BLG1CQUFtQkMsT0FBT0MsR0FBRyxDQUFDO0FBQ3BDLE1BQU0sRUFBRUMsb0JBQW9CLEVBQUUsR0FBR0MsbUJBQU9BLENBQUMscUVBQWU7QUFDeEQsTUFBTUMsUUFBUUQsbUJBQU9BLENBQUMsK0VBQW9CO0FBRTFDLElBQUlFLDBCQUEwQkMsV0FBVztJQUN2Q0Msb0JBQW9CLElBQUlIO0FBQzFCO0FBRUEsU0FBU0csb0JBQXFCQyxLQUFLO0lBQ2pDLElBQUksQ0FBQ0EsU0FBUyxPQUFPQSxNQUFNQyxRQUFRLEtBQUssWUFBWTtRQUNsRCxNQUFNLElBQUlQLHFCQUFxQjtJQUNqQztJQUNBUSxPQUFPQyxjQUFjLENBQUNDLFlBQVliLGtCQUFrQjtRQUNsRGMsT0FBT0w7UUFDUE0sVUFBVTtRQUNWQyxZQUFZO1FBQ1pDLGNBQWM7SUFDaEI7QUFDRjtBQUVBLFNBQVNYO0lBQ1AsT0FBT08sVUFBVSxDQUFDYixpQkFBaUI7QUFDckM7QUFFQWtCLE9BQU9DLE9BQU8sR0FBRztJQUNmWDtJQUNBRjtBQUNGIiwic291cmNlcyI6WyJEOlxcSGVsaXhcXG5vZGVfbW9kdWxlc1xcdW5kaWNpXFxsaWJcXGdsb2JhbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuLy8gV2UgaW5jbHVkZSBhIHZlcnNpb24gbnVtYmVyIGZvciB0aGUgRGlzcGF0Y2hlciBBUEkuIEluIGNhc2Ugb2YgYnJlYWtpbmcgY2hhbmdlcyxcbi8vIHRoaXMgdmVyc2lvbiBudW1iZXIgbXVzdCBiZSBpbmNyZWFzZWQgdG8gYXZvaWQgY29uZmxpY3RzLlxuY29uc3QgZ2xvYmFsRGlzcGF0Y2hlciA9IFN5bWJvbC5mb3IoJ3VuZGljaS5nbG9iYWxEaXNwYXRjaGVyLjEnKVxuY29uc3QgeyBJbnZhbGlkQXJndW1lbnRFcnJvciB9ID0gcmVxdWlyZSgnLi9jb3JlL2Vycm9ycycpXG5jb25zdCBBZ2VudCA9IHJlcXVpcmUoJy4vZGlzcGF0Y2hlci9hZ2VudCcpXG5cbmlmIChnZXRHbG9iYWxEaXNwYXRjaGVyKCkgPT09IHVuZGVmaW5lZCkge1xuICBzZXRHbG9iYWxEaXNwYXRjaGVyKG5ldyBBZ2VudCgpKVxufVxuXG5mdW5jdGlvbiBzZXRHbG9iYWxEaXNwYXRjaGVyIChhZ2VudCkge1xuICBpZiAoIWFnZW50IHx8IHR5cGVvZiBhZ2VudC5kaXNwYXRjaCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcignQXJndW1lbnQgYWdlbnQgbXVzdCBpbXBsZW1lbnQgQWdlbnQnKVxuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShnbG9iYWxUaGlzLCBnbG9iYWxEaXNwYXRjaGVyLCB7XG4gICAgdmFsdWU6IGFnZW50LFxuICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIGNvbmZpZ3VyYWJsZTogZmFsc2VcbiAgfSlcbn1cblxuZnVuY3Rpb24gZ2V0R2xvYmFsRGlzcGF0Y2hlciAoKSB7XG4gIHJldHVybiBnbG9iYWxUaGlzW2dsb2JhbERpc3BhdGNoZXJdXG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXRHbG9iYWxEaXNwYXRjaGVyLFxuICBnZXRHbG9iYWxEaXNwYXRjaGVyXG59XG4iXSwibmFtZXMiOlsiZ2xvYmFsRGlzcGF0Y2hlciIsIlN5bWJvbCIsImZvciIsIkludmFsaWRBcmd1bWVudEVycm9yIiwicmVxdWlyZSIsIkFnZW50IiwiZ2V0R2xvYmFsRGlzcGF0Y2hlciIsInVuZGVmaW5lZCIsInNldEdsb2JhbERpc3BhdGNoZXIiLCJhZ2VudCIsImRpc3BhdGNoIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnbG9iYWxUaGlzIiwidmFsdWUiLCJ3cml0YWJsZSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/global.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/handler/decorator-handler.js":
/*!**************************************************************!*\
  !*** ./node_modules/undici/lib/handler/decorator-handler.js ***!
  \**************************************************************/
/***/ ((module) => {

eval("\nmodule.exports = class DecoratorHandler {\n    #handler;\n    constructor(handler){\n        if (typeof handler !== 'object' || handler === null) {\n            throw new TypeError('handler must be an object');\n        }\n        this.#handler = handler;\n    }\n    onConnect(...args) {\n        return this.#handler.onConnect?.(...args);\n    }\n    onError(...args) {\n        return this.#handler.onError?.(...args);\n    }\n    onUpgrade(...args) {\n        return this.#handler.onUpgrade?.(...args);\n    }\n    onResponseStarted(...args) {\n        return this.#handler.onResponseStarted?.(...args);\n    }\n    onHeaders(...args) {\n        return this.#handler.onHeaders?.(...args);\n    }\n    onData(...args) {\n        return this.#handler.onData?.(...args);\n    }\n    onComplete(...args) {\n        return this.#handler.onComplete?.(...args);\n    }\n    onBodySent(...args) {\n        return this.#handler.onBodySent?.(...args);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9oYW5kbGVyL2RlY29yYXRvci1oYW5kbGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLE9BQU9DLE9BQU8sR0FBRyxNQUFNQztJQUNyQixRQUFRO0lBRVIsWUFBYUMsT0FBTyxDQUFFO1FBQ3BCLElBQUksT0FBT0EsWUFBWSxZQUFZQSxZQUFZLE1BQU07WUFDbkQsTUFBTSxJQUFJQyxVQUFVO1FBQ3RCO1FBQ0EsSUFBSSxDQUFDLFFBQVEsR0FBR0Q7SUFDbEI7SUFFQUUsVUFBVyxHQUFHQyxJQUFJLEVBQUU7UUFDbEIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDRCxTQUFTLE1BQU1DO0lBQ3RDO0lBRUFDLFFBQVMsR0FBR0QsSUFBSSxFQUFFO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQ0MsT0FBTyxNQUFNRDtJQUNwQztJQUVBRSxVQUFXLEdBQUdGLElBQUksRUFBRTtRQUNsQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUNFLFNBQVMsTUFBTUY7SUFDdEM7SUFFQUcsa0JBQW1CLEdBQUdILElBQUksRUFBRTtRQUMxQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUNHLGlCQUFpQixNQUFNSDtJQUM5QztJQUVBSSxVQUFXLEdBQUdKLElBQUksRUFBRTtRQUNsQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUNJLFNBQVMsTUFBTUo7SUFDdEM7SUFFQUssT0FBUSxHQUFHTCxJQUFJLEVBQUU7UUFDZixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUNLLE1BQU0sTUFBTUw7SUFDbkM7SUFFQU0sV0FBWSxHQUFHTixJQUFJLEVBQUU7UUFDbkIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDTSxVQUFVLE1BQU1OO0lBQ3ZDO0lBRUFPLFdBQVksR0FBR1AsSUFBSSxFQUFFO1FBQ25CLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQ08sVUFBVSxNQUFNUDtJQUN2QztBQUNGIiwic291cmNlcyI6WyJEOlxcSGVsaXhcXG5vZGVfbW9kdWxlc1xcdW5kaWNpXFxsaWJcXGhhbmRsZXJcXGRlY29yYXRvci1oYW5kbGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzIERlY29yYXRvckhhbmRsZXIge1xuICAjaGFuZGxlclxuXG4gIGNvbnN0cnVjdG9yIChoYW5kbGVyKSB7XG4gICAgaWYgKHR5cGVvZiBoYW5kbGVyICE9PSAnb2JqZWN0JyB8fCBoYW5kbGVyID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdoYW5kbGVyIG11c3QgYmUgYW4gb2JqZWN0JylcbiAgICB9XG4gICAgdGhpcy4jaGFuZGxlciA9IGhhbmRsZXJcbiAgfVxuXG4gIG9uQ29ubmVjdCAoLi4uYXJncykge1xuICAgIHJldHVybiB0aGlzLiNoYW5kbGVyLm9uQ29ubmVjdD8uKC4uLmFyZ3MpXG4gIH1cblxuICBvbkVycm9yICguLi5hcmdzKSB7XG4gICAgcmV0dXJuIHRoaXMuI2hhbmRsZXIub25FcnJvcj8uKC4uLmFyZ3MpXG4gIH1cblxuICBvblVwZ3JhZGUgKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gdGhpcy4jaGFuZGxlci5vblVwZ3JhZGU/LiguLi5hcmdzKVxuICB9XG5cbiAgb25SZXNwb25zZVN0YXJ0ZWQgKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gdGhpcy4jaGFuZGxlci5vblJlc3BvbnNlU3RhcnRlZD8uKC4uLmFyZ3MpXG4gIH1cblxuICBvbkhlYWRlcnMgKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gdGhpcy4jaGFuZGxlci5vbkhlYWRlcnM/LiguLi5hcmdzKVxuICB9XG5cbiAgb25EYXRhICguLi5hcmdzKSB7XG4gICAgcmV0dXJuIHRoaXMuI2hhbmRsZXIub25EYXRhPy4oLi4uYXJncylcbiAgfVxuXG4gIG9uQ29tcGxldGUgKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gdGhpcy4jaGFuZGxlci5vbkNvbXBsZXRlPy4oLi4uYXJncylcbiAgfVxuXG4gIG9uQm9keVNlbnQgKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gdGhpcy4jaGFuZGxlci5vbkJvZHlTZW50Py4oLi4uYXJncylcbiAgfVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJEZWNvcmF0b3JIYW5kbGVyIiwiaGFuZGxlciIsIlR5cGVFcnJvciIsIm9uQ29ubmVjdCIsImFyZ3MiLCJvbkVycm9yIiwib25VcGdyYWRlIiwib25SZXNwb25zZVN0YXJ0ZWQiLCJvbkhlYWRlcnMiLCJvbkRhdGEiLCJvbkNvbXBsZXRlIiwib25Cb2R5U2VudCJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/handler/decorator-handler.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/handler/redirect-handler.js":
/*!*************************************************************!*\
  !*** ./node_modules/undici/lib/handler/redirect-handler.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst util = __webpack_require__(/*! ../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst { kBodyUsed } = __webpack_require__(/*! ../core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst assert = __webpack_require__(/*! node:assert */ \"node:assert\");\nconst { InvalidArgumentError } = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst EE = __webpack_require__(/*! node:events */ \"node:events\");\nconst redirectableStatusCodes = [\n    300,\n    301,\n    302,\n    303,\n    307,\n    308\n];\nconst kBody = Symbol('body');\nclass BodyAsyncIterable {\n    constructor(body){\n        this[kBody] = body;\n        this[kBodyUsed] = false;\n    }\n    async *[Symbol.asyncIterator]() {\n        assert(!this[kBodyUsed], 'disturbed');\n        this[kBodyUsed] = true;\n        yield* this[kBody];\n    }\n}\nclass RedirectHandler {\n    constructor(dispatch, maxRedirections, opts, handler){\n        if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) {\n            throw new InvalidArgumentError('maxRedirections must be a positive number');\n        }\n        util.validateHandler(handler, opts.method, opts.upgrade);\n        this.dispatch = dispatch;\n        this.location = null;\n        this.abort = null;\n        this.opts = {\n            ...opts,\n            maxRedirections: 0\n        }; // opts must be a copy\n        this.maxRedirections = maxRedirections;\n        this.handler = handler;\n        this.history = [];\n        this.redirectionLimitReached = false;\n        if (util.isStream(this.opts.body)) {\n            // TODO (fix): Provide some way for the user to cache the file to e.g. /tmp\n            // so that it can be dispatched again?\n            // TODO (fix): Do we need 100-expect support to provide a way to do this properly?\n            if (util.bodyLength(this.opts.body) === 0) {\n                this.opts.body.on('data', function() {\n                    assert(false);\n                });\n            }\n            if (typeof this.opts.body.readableDidRead !== 'boolean') {\n                this.opts.body[kBodyUsed] = false;\n                EE.prototype.on.call(this.opts.body, 'data', function() {\n                    this[kBodyUsed] = true;\n                });\n            }\n        } else if (this.opts.body && typeof this.opts.body.pipeTo === 'function') {\n            // TODO (fix): We can't access ReadableStream internal state\n            // to determine whether or not it has been disturbed. This is just\n            // a workaround.\n            this.opts.body = new BodyAsyncIterable(this.opts.body);\n        } else if (this.opts.body && typeof this.opts.body !== 'string' && !ArrayBuffer.isView(this.opts.body) && util.isIterable(this.opts.body)) {\n            // TODO: Should we allow re-using iterable if !this.opts.idempotent\n            // or through some other flag?\n            this.opts.body = new BodyAsyncIterable(this.opts.body);\n        }\n    }\n    onConnect(abort) {\n        this.abort = abort;\n        this.handler.onConnect(abort, {\n            history: this.history\n        });\n    }\n    onUpgrade(statusCode, headers, socket) {\n        this.handler.onUpgrade(statusCode, headers, socket);\n    }\n    onError(error) {\n        this.handler.onError(error);\n    }\n    onHeaders(statusCode, headers, resume, statusText) {\n        this.location = this.history.length >= this.maxRedirections || util.isDisturbed(this.opts.body) ? null : parseLocation(statusCode, headers);\n        if (this.opts.throwOnMaxRedirect && this.history.length >= this.maxRedirections) {\n            if (this.request) {\n                this.request.abort(new Error('max redirects'));\n            }\n            this.redirectionLimitReached = true;\n            this.abort(new Error('max redirects'));\n            return;\n        }\n        if (this.opts.origin) {\n            this.history.push(new URL(this.opts.path, this.opts.origin));\n        }\n        if (!this.location) {\n            return this.handler.onHeaders(statusCode, headers, resume, statusText);\n        }\n        const { origin, pathname, search } = util.parseURL(new URL(this.location, this.opts.origin && new URL(this.opts.path, this.opts.origin)));\n        const path = search ? `${pathname}${search}` : pathname;\n        // Remove headers referring to the original URL.\n        // By default it is Host only, unless it's a 303 (see below), which removes also all Content-* headers.\n        // https://tools.ietf.org/html/rfc7231#section-6.4\n        this.opts.headers = cleanRequestHeaders(this.opts.headers, statusCode === 303, this.opts.origin !== origin);\n        this.opts.path = path;\n        this.opts.origin = origin;\n        this.opts.maxRedirections = 0;\n        this.opts.query = null;\n        // https://tools.ietf.org/html/rfc7231#section-6.4.4\n        // In case of HTTP 303, always replace method to be either HEAD or GET\n        if (statusCode === 303 && this.opts.method !== 'HEAD') {\n            this.opts.method = 'GET';\n            this.opts.body = null;\n        }\n    }\n    onData(chunk) {\n        if (this.location) {\n        /*\n        https://tools.ietf.org/html/rfc7231#section-6.4\n\n        TLDR: undici always ignores 3xx response bodies.\n\n        Redirection is used to serve the requested resource from another URL, so it is assumes that\n        no body is generated (and thus can be ignored). Even though generating a body is not prohibited.\n\n        For status 301, 302, 303, 307 and 308 (the latter from RFC 7238), the specs mention that the body usually\n        (which means it's optional and not mandated) contain just an hyperlink to the value of\n        the Location response header, so the body can be ignored safely.\n\n        For status 300, which is \"Multiple Choices\", the spec mentions both generating a Location\n        response header AND a response body with the other possible location to follow.\n        Since the spec explicitly chooses not to specify a format for such body and leave it to\n        servers and browsers implementors, we ignore the body as there is no specified way to eventually parse it.\n      */ } else {\n            return this.handler.onData(chunk);\n        }\n    }\n    onComplete(trailers) {\n        if (this.location) {\n            /*\n        https://tools.ietf.org/html/rfc7231#section-6.4\n\n        TLDR: undici always ignores 3xx response trailers as they are not expected in case of redirections\n        and neither are useful if present.\n\n        See comment on onData method above for more detailed information.\n      */ this.location = null;\n            this.abort = null;\n            this.dispatch(this.opts, this);\n        } else {\n            this.handler.onComplete(trailers);\n        }\n    }\n    onBodySent(chunk) {\n        if (this.handler.onBodySent) {\n            this.handler.onBodySent(chunk);\n        }\n    }\n}\nfunction parseLocation(statusCode, headers) {\n    if (redirectableStatusCodes.indexOf(statusCode) === -1) {\n        return null;\n    }\n    for(let i = 0; i < headers.length; i += 2){\n        if (headers[i].length === 8 && util.headerNameToString(headers[i]) === 'location') {\n            return headers[i + 1];\n        }\n    }\n}\n// https://tools.ietf.org/html/rfc7231#section-6.4.4\nfunction shouldRemoveHeader(header, removeContent, unknownOrigin) {\n    if (header.length === 4) {\n        return util.headerNameToString(header) === 'host';\n    }\n    if (removeContent && util.headerNameToString(header).startsWith('content-')) {\n        return true;\n    }\n    if (unknownOrigin && (header.length === 13 || header.length === 6 || header.length === 19)) {\n        const name = util.headerNameToString(header);\n        return name === 'authorization' || name === 'cookie' || name === 'proxy-authorization';\n    }\n    return false;\n}\n// https://tools.ietf.org/html/rfc7231#section-6.4\nfunction cleanRequestHeaders(headers, removeContent, unknownOrigin) {\n    const ret = [];\n    if (Array.isArray(headers)) {\n        for(let i = 0; i < headers.length; i += 2){\n            if (!shouldRemoveHeader(headers[i], removeContent, unknownOrigin)) {\n                ret.push(headers[i], headers[i + 1]);\n            }\n        }\n    } else if (headers && typeof headers === 'object') {\n        for (const key of Object.keys(headers)){\n            if (!shouldRemoveHeader(key, removeContent, unknownOrigin)) {\n                ret.push(key, headers[key]);\n            }\n        }\n    } else {\n        assert(headers == null, 'headers must be an object or an array');\n    }\n    return ret;\n}\nmodule.exports = RedirectHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/handler/redirect-handler.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/handler/retry-handler.js":
/*!**********************************************************!*\
  !*** ./node_modules/undici/lib/handler/retry-handler.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst assert = __webpack_require__(/*! node:assert */ \"node:assert\");\nconst { kRetryHandlerDefaultRetry } = __webpack_require__(/*! ../core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst { RequestRetryError } = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst { isDisturbed, parseHeaders, parseRangeHeader, wrapRequestBody } = __webpack_require__(/*! ../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nfunction calculateRetryAfterHeader(retryAfter) {\n    const current = Date.now();\n    return new Date(retryAfter).getTime() - current;\n}\nclass RetryHandler {\n    constructor(opts, handlers){\n        const { retryOptions, ...dispatchOpts } = opts;\n        const { // Retry scoped\n        retry: retryFn, maxRetries, maxTimeout, minTimeout, timeoutFactor, // Response scoped\n        methods, errorCodes, retryAfter, statusCodes } = retryOptions ?? {};\n        this.dispatch = handlers.dispatch;\n        this.handler = handlers.handler;\n        this.opts = {\n            ...dispatchOpts,\n            body: wrapRequestBody(opts.body)\n        };\n        this.abort = null;\n        this.aborted = false;\n        this.retryOpts = {\n            retry: retryFn ?? RetryHandler[kRetryHandlerDefaultRetry],\n            retryAfter: retryAfter ?? true,\n            maxTimeout: maxTimeout ?? 30 * 1000,\n            minTimeout: minTimeout ?? 500,\n            timeoutFactor: timeoutFactor ?? 2,\n            maxRetries: maxRetries ?? 5,\n            // What errors we should retry\n            methods: methods ?? [\n                'GET',\n                'HEAD',\n                'OPTIONS',\n                'PUT',\n                'DELETE',\n                'TRACE'\n            ],\n            // Indicates which errors to retry\n            statusCodes: statusCodes ?? [\n                500,\n                502,\n                503,\n                504,\n                429\n            ],\n            // List of errors to retry\n            errorCodes: errorCodes ?? [\n                'ECONNRESET',\n                'ECONNREFUSED',\n                'ENOTFOUND',\n                'ENETDOWN',\n                'ENETUNREACH',\n                'EHOSTDOWN',\n                'EHOSTUNREACH',\n                'EPIPE',\n                'UND_ERR_SOCKET'\n            ]\n        };\n        this.retryCount = 0;\n        this.retryCountCheckpoint = 0;\n        this.start = 0;\n        this.end = null;\n        this.etag = null;\n        this.resume = null;\n        // Handle possible onConnect duplication\n        this.handler.onConnect((reason)=>{\n            this.aborted = true;\n            if (this.abort) {\n                this.abort(reason);\n            } else {\n                this.reason = reason;\n            }\n        });\n    }\n    onRequestSent() {\n        if (this.handler.onRequestSent) {\n            this.handler.onRequestSent();\n        }\n    }\n    onUpgrade(statusCode, headers, socket) {\n        if (this.handler.onUpgrade) {\n            this.handler.onUpgrade(statusCode, headers, socket);\n        }\n    }\n    onConnect(abort) {\n        if (this.aborted) {\n            abort(this.reason);\n        } else {\n            this.abort = abort;\n        }\n    }\n    onBodySent(chunk) {\n        if (this.handler.onBodySent) return this.handler.onBodySent(chunk);\n    }\n    static [kRetryHandlerDefaultRetry](err, { state, opts }, cb) {\n        const { statusCode, code, headers } = err;\n        const { method, retryOptions } = opts;\n        const { maxRetries, minTimeout, maxTimeout, timeoutFactor, statusCodes, errorCodes, methods } = retryOptions;\n        const { counter } = state;\n        // Any code that is not a Undici's originated and allowed to retry\n        if (code && code !== 'UND_ERR_REQ_RETRY' && !errorCodes.includes(code)) {\n            cb(err);\n            return;\n        }\n        // If a set of method are provided and the current method is not in the list\n        if (Array.isArray(methods) && !methods.includes(method)) {\n            cb(err);\n            return;\n        }\n        // If a set of status code are provided and the current status code is not in the list\n        if (statusCode != null && Array.isArray(statusCodes) && !statusCodes.includes(statusCode)) {\n            cb(err);\n            return;\n        }\n        // If we reached the max number of retries\n        if (counter > maxRetries) {\n            cb(err);\n            return;\n        }\n        let retryAfterHeader = headers?.['retry-after'];\n        if (retryAfterHeader) {\n            retryAfterHeader = Number(retryAfterHeader);\n            retryAfterHeader = Number.isNaN(retryAfterHeader) ? calculateRetryAfterHeader(retryAfterHeader) : retryAfterHeader * 1e3; // Retry-After is in seconds\n        }\n        const retryTimeout = retryAfterHeader > 0 ? Math.min(retryAfterHeader, maxTimeout) : Math.min(minTimeout * timeoutFactor ** (counter - 1), maxTimeout);\n        setTimeout(()=>cb(null), retryTimeout);\n    }\n    onHeaders(statusCode, rawHeaders, resume, statusMessage) {\n        const headers = parseHeaders(rawHeaders);\n        this.retryCount += 1;\n        if (statusCode >= 300) {\n            if (this.retryOpts.statusCodes.includes(statusCode) === false) {\n                return this.handler.onHeaders(statusCode, rawHeaders, resume, statusMessage);\n            } else {\n                this.abort(new RequestRetryError('Request failed', statusCode, {\n                    headers,\n                    data: {\n                        count: this.retryCount\n                    }\n                }));\n                return false;\n            }\n        }\n        // Checkpoint for resume from where we left it\n        if (this.resume != null) {\n            this.resume = null;\n            if (statusCode !== 206) {\n                return true;\n            }\n            const contentRange = parseRangeHeader(headers['content-range']);\n            // If no content range\n            if (!contentRange) {\n                this.abort(new RequestRetryError('Content-Range mismatch', statusCode, {\n                    headers,\n                    data: {\n                        count: this.retryCount\n                    }\n                }));\n                return false;\n            }\n            // Let's start with a weak etag check\n            if (this.etag != null && this.etag !== headers.etag) {\n                this.abort(new RequestRetryError('ETag mismatch', statusCode, {\n                    headers,\n                    data: {\n                        count: this.retryCount\n                    }\n                }));\n                return false;\n            }\n            const { start, size, end = size } = contentRange;\n            assert(this.start === start, 'content-range mismatch');\n            assert(this.end == null || this.end === end, 'content-range mismatch');\n            this.resume = resume;\n            return true;\n        }\n        if (this.end == null) {\n            if (statusCode === 206) {\n                // First time we receive 206\n                const range = parseRangeHeader(headers['content-range']);\n                if (range == null) {\n                    return this.handler.onHeaders(statusCode, rawHeaders, resume, statusMessage);\n                }\n                const { start, size, end = size } = range;\n                assert(start != null && Number.isFinite(start), 'content-range mismatch');\n                assert(end != null && Number.isFinite(end), 'invalid content-length');\n                this.start = start;\n                this.end = end;\n            }\n            // We make our best to checkpoint the body for further range headers\n            if (this.end == null) {\n                const contentLength = headers['content-length'];\n                this.end = contentLength != null ? Number(contentLength) : null;\n            }\n            assert(Number.isFinite(this.start));\n            assert(this.end == null || Number.isFinite(this.end), 'invalid content-length');\n            this.resume = resume;\n            this.etag = headers.etag != null ? headers.etag : null;\n            // Weak etags are not useful for comparison nor cache\n            // for instance not safe to assume if the response is byte-per-byte\n            // equal\n            if (this.etag != null && this.etag.startsWith('W/')) {\n                this.etag = null;\n            }\n            return this.handler.onHeaders(statusCode, rawHeaders, resume, statusMessage);\n        }\n        const err = new RequestRetryError('Request failed', statusCode, {\n            headers,\n            data: {\n                count: this.retryCount\n            }\n        });\n        this.abort(err);\n        return false;\n    }\n    onData(chunk) {\n        this.start += chunk.length;\n        return this.handler.onData(chunk);\n    }\n    onComplete(rawTrailers) {\n        this.retryCount = 0;\n        return this.handler.onComplete(rawTrailers);\n    }\n    onError(err) {\n        if (this.aborted || isDisturbed(this.opts.body)) {\n            return this.handler.onError(err);\n        }\n        // We reconcile in case of a mix between network errors\n        // and server error response\n        if (this.retryCount - this.retryCountCheckpoint > 0) {\n            // We count the difference between the last checkpoint and the current retry count\n            this.retryCount = this.retryCountCheckpoint + (this.retryCount - this.retryCountCheckpoint);\n        } else {\n            this.retryCount += 1;\n        }\n        this.retryOpts.retry(err, {\n            state: {\n                counter: this.retryCount\n            },\n            opts: {\n                retryOptions: this.retryOpts,\n                ...this.opts\n            }\n        }, onRetry.bind(this));\n        function onRetry(err) {\n            if (err != null || this.aborted || isDisturbed(this.opts.body)) {\n                return this.handler.onError(err);\n            }\n            if (this.start !== 0) {\n                const headers = {\n                    range: `bytes=${this.start}-${this.end ?? ''}`\n                };\n                // Weak etag check - weak etags will make comparison algorithms never match\n                if (this.etag != null) {\n                    headers['if-match'] = this.etag;\n                }\n                this.opts = {\n                    ...this.opts,\n                    headers: {\n                        ...this.opts.headers,\n                        ...headers\n                    }\n                };\n            }\n            try {\n                this.retryCountCheckpoint = this.retryCount;\n                this.dispatch(this.opts, this);\n            } catch (err) {\n                this.handler.onError(err);\n            }\n        }\n    }\n}\nmodule.exports = RetryHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9oYW5kbGVyL3JldHJ5LWhhbmRsZXIuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxNQUFNQSxTQUFTQyxtQkFBT0EsQ0FBQyxnQ0FBYTtBQUVwQyxNQUFNLEVBQUVDLHlCQUF5QixFQUFFLEdBQUdELG1CQUFPQSxDQUFDLHdFQUFpQjtBQUMvRCxNQUFNLEVBQUVFLGlCQUFpQixFQUFFLEdBQUdGLG1CQUFPQSxDQUFDLHNFQUFnQjtBQUN0RCxNQUFNLEVBQ0pHLFdBQVcsRUFDWEMsWUFBWSxFQUNaQyxnQkFBZ0IsRUFDaEJDLGVBQWUsRUFDaEIsR0FBR04sbUJBQU9BLENBQUMsa0VBQWM7QUFFMUIsU0FBU08sMEJBQTJCQyxVQUFVO0lBQzVDLE1BQU1DLFVBQVVDLEtBQUtDLEdBQUc7SUFDeEIsT0FBTyxJQUFJRCxLQUFLRixZQUFZSSxPQUFPLEtBQUtIO0FBQzFDO0FBRUEsTUFBTUk7SUFDSixZQUFhQyxJQUFJLEVBQUVDLFFBQVEsQ0FBRTtRQUMzQixNQUFNLEVBQUVDLFlBQVksRUFBRSxHQUFHQyxjQUFjLEdBQUdIO1FBQzFDLE1BQU0sRUFDSixlQUFlO1FBQ2ZJLE9BQU9DLE9BQU8sRUFDZEMsVUFBVSxFQUNWQyxVQUFVLEVBQ1ZDLFVBQVUsRUFDVkMsYUFBYSxFQUNiLGtCQUFrQjtRQUNsQkMsT0FBTyxFQUNQQyxVQUFVLEVBQ1ZqQixVQUFVLEVBQ1ZrQixXQUFXLEVBQ1osR0FBR1YsZ0JBQWdCLENBQUM7UUFFckIsSUFBSSxDQUFDVyxRQUFRLEdBQUdaLFNBQVNZLFFBQVE7UUFDakMsSUFBSSxDQUFDQyxPQUFPLEdBQUdiLFNBQVNhLE9BQU87UUFDL0IsSUFBSSxDQUFDZCxJQUFJLEdBQUc7WUFBRSxHQUFHRyxZQUFZO1lBQUVZLE1BQU12QixnQkFBZ0JRLEtBQUtlLElBQUk7UUFBRTtRQUNoRSxJQUFJLENBQUNDLEtBQUssR0FBRztRQUNiLElBQUksQ0FBQ0MsT0FBTyxHQUFHO1FBQ2YsSUFBSSxDQUFDQyxTQUFTLEdBQUc7WUFDZmQsT0FBT0MsV0FBV04sWUFBWSxDQUFDWiwwQkFBMEI7WUFDekRPLFlBQVlBLGNBQWM7WUFDMUJhLFlBQVlBLGNBQWMsS0FBSztZQUMvQkMsWUFBWUEsY0FBYztZQUMxQkMsZUFBZUEsaUJBQWlCO1lBQ2hDSCxZQUFZQSxjQUFjO1lBQzFCLDhCQUE4QjtZQUM5QkksU0FBU0EsV0FBVztnQkFBQztnQkFBTztnQkFBUTtnQkFBVztnQkFBTztnQkFBVTthQUFRO1lBQ3hFLGtDQUFrQztZQUNsQ0UsYUFBYUEsZUFBZTtnQkFBQztnQkFBSztnQkFBSztnQkFBSztnQkFBSzthQUFJO1lBQ3JELDBCQUEwQjtZQUMxQkQsWUFBWUEsY0FBYztnQkFDeEI7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7YUFDRDtRQUNIO1FBRUEsSUFBSSxDQUFDUSxVQUFVLEdBQUc7UUFDbEIsSUFBSSxDQUFDQyxvQkFBb0IsR0FBRztRQUM1QixJQUFJLENBQUNDLEtBQUssR0FBRztRQUNiLElBQUksQ0FBQ0MsR0FBRyxHQUFHO1FBQ1gsSUFBSSxDQUFDQyxJQUFJLEdBQUc7UUFDWixJQUFJLENBQUNDLE1BQU0sR0FBRztRQUVkLHdDQUF3QztRQUN4QyxJQUFJLENBQUNWLE9BQU8sQ0FBQ1csU0FBUyxDQUFDQyxDQUFBQTtZQUNyQixJQUFJLENBQUNULE9BQU8sR0FBRztZQUNmLElBQUksSUFBSSxDQUFDRCxLQUFLLEVBQUU7Z0JBQ2QsSUFBSSxDQUFDQSxLQUFLLENBQUNVO1lBQ2IsT0FBTztnQkFDTCxJQUFJLENBQUNBLE1BQU0sR0FBR0E7WUFDaEI7UUFDRjtJQUNGO0lBRUFDLGdCQUFpQjtRQUNmLElBQUksSUFBSSxDQUFDYixPQUFPLENBQUNhLGFBQWEsRUFBRTtZQUM5QixJQUFJLENBQUNiLE9BQU8sQ0FBQ2EsYUFBYTtRQUM1QjtJQUNGO0lBRUFDLFVBQVdDLFVBQVUsRUFBRUMsT0FBTyxFQUFFQyxNQUFNLEVBQUU7UUFDdEMsSUFBSSxJQUFJLENBQUNqQixPQUFPLENBQUNjLFNBQVMsRUFBRTtZQUMxQixJQUFJLENBQUNkLE9BQU8sQ0FBQ2MsU0FBUyxDQUFDQyxZQUFZQyxTQUFTQztRQUM5QztJQUNGO0lBRUFOLFVBQVdULEtBQUssRUFBRTtRQUNoQixJQUFJLElBQUksQ0FBQ0MsT0FBTyxFQUFFO1lBQ2hCRCxNQUFNLElBQUksQ0FBQ1UsTUFBTTtRQUNuQixPQUFPO1lBQ0wsSUFBSSxDQUFDVixLQUFLLEdBQUdBO1FBQ2Y7SUFDRjtJQUVBZ0IsV0FBWUMsS0FBSyxFQUFFO1FBQ2pCLElBQUksSUFBSSxDQUFDbkIsT0FBTyxDQUFDa0IsVUFBVSxFQUFFLE9BQU8sSUFBSSxDQUFDbEIsT0FBTyxDQUFDa0IsVUFBVSxDQUFDQztJQUM5RDtJQUVBLE9BQU8sQ0FBQzlDLDBCQUEwQixDQUFFK0MsR0FBRyxFQUFFLEVBQUVDLEtBQUssRUFBRW5DLElBQUksRUFBRSxFQUFFb0MsRUFBRSxFQUFFO1FBQzVELE1BQU0sRUFBRVAsVUFBVSxFQUFFUSxJQUFJLEVBQUVQLE9BQU8sRUFBRSxHQUFHSTtRQUN0QyxNQUFNLEVBQUVJLE1BQU0sRUFBRXBDLFlBQVksRUFBRSxHQUFHRjtRQUNqQyxNQUFNLEVBQ0pNLFVBQVUsRUFDVkUsVUFBVSxFQUNWRCxVQUFVLEVBQ1ZFLGFBQWEsRUFDYkcsV0FBVyxFQUNYRCxVQUFVLEVBQ1ZELE9BQU8sRUFDUixHQUFHUjtRQUNKLE1BQU0sRUFBRXFDLE9BQU8sRUFBRSxHQUFHSjtRQUVwQixrRUFBa0U7UUFDbEUsSUFBSUUsUUFBUUEsU0FBUyx1QkFBdUIsQ0FBQzFCLFdBQVc2QixRQUFRLENBQUNILE9BQU87WUFDdEVELEdBQUdGO1lBQ0g7UUFDRjtRQUVBLDRFQUE0RTtRQUM1RSxJQUFJTyxNQUFNQyxPQUFPLENBQUNoQyxZQUFZLENBQUNBLFFBQVE4QixRQUFRLENBQUNGLFNBQVM7WUFDdkRGLEdBQUdGO1lBQ0g7UUFDRjtRQUVBLHNGQUFzRjtRQUN0RixJQUNFTCxjQUFjLFFBQ2RZLE1BQU1DLE9BQU8sQ0FBQzlCLGdCQUNkLENBQUNBLFlBQVk0QixRQUFRLENBQUNYLGFBQ3RCO1lBQ0FPLEdBQUdGO1lBQ0g7UUFDRjtRQUVBLDBDQUEwQztRQUMxQyxJQUFJSyxVQUFVakMsWUFBWTtZQUN4QjhCLEdBQUdGO1lBQ0g7UUFDRjtRQUVBLElBQUlTLG1CQUFtQmIsU0FBUyxDQUFDLGNBQWM7UUFDL0MsSUFBSWEsa0JBQWtCO1lBQ3BCQSxtQkFBbUJDLE9BQU9EO1lBQzFCQSxtQkFBbUJDLE9BQU9DLEtBQUssQ0FBQ0Ysb0JBQzVCbEQsMEJBQTBCa0Qsb0JBQzFCQSxtQkFBbUIsS0FBSSw0QkFBNEI7UUFDekQ7UUFFQSxNQUFNRyxlQUNKSCxtQkFBbUIsSUFDZkksS0FBS0MsR0FBRyxDQUFDTCxrQkFBa0JwQyxjQUMzQndDLEtBQUtDLEdBQUcsQ0FBQ3hDLGFBQWFDLGlCQUFrQjhCLENBQUFBLFVBQVUsSUFBSWhDO1FBRTVEMEMsV0FBVyxJQUFNYixHQUFHLE9BQU9VO0lBQzdCO0lBRUFJLFVBQVdyQixVQUFVLEVBQUVzQixVQUFVLEVBQUUzQixNQUFNLEVBQUU0QixhQUFhLEVBQUU7UUFDeEQsTUFBTXRCLFVBQVV4QyxhQUFhNkQ7UUFFN0IsSUFBSSxDQUFDaEMsVUFBVSxJQUFJO1FBRW5CLElBQUlVLGNBQWMsS0FBSztZQUNyQixJQUFJLElBQUksQ0FBQ1gsU0FBUyxDQUFDTixXQUFXLENBQUM0QixRQUFRLENBQUNYLGdCQUFnQixPQUFPO2dCQUM3RCxPQUFPLElBQUksQ0FBQ2YsT0FBTyxDQUFDb0MsU0FBUyxDQUMzQnJCLFlBQ0FzQixZQUNBM0IsUUFDQTRCO1lBRUosT0FBTztnQkFDTCxJQUFJLENBQUNwQyxLQUFLLENBQ1IsSUFBSTVCLGtCQUFrQixrQkFBa0J5QyxZQUFZO29CQUNsREM7b0JBQ0F1QixNQUFNO3dCQUNKQyxPQUFPLElBQUksQ0FBQ25DLFVBQVU7b0JBQ3hCO2dCQUNGO2dCQUVGLE9BQU87WUFDVDtRQUNGO1FBRUEsOENBQThDO1FBQzlDLElBQUksSUFBSSxDQUFDSyxNQUFNLElBQUksTUFBTTtZQUN2QixJQUFJLENBQUNBLE1BQU0sR0FBRztZQUVkLElBQUlLLGVBQWUsS0FBSztnQkFDdEIsT0FBTztZQUNUO1lBRUEsTUFBTTBCLGVBQWVoRSxpQkFBaUJ1QyxPQUFPLENBQUMsZ0JBQWdCO1lBQzlELHNCQUFzQjtZQUN0QixJQUFJLENBQUN5QixjQUFjO2dCQUNqQixJQUFJLENBQUN2QyxLQUFLLENBQ1IsSUFBSTVCLGtCQUFrQiwwQkFBMEJ5QyxZQUFZO29CQUMxREM7b0JBQ0F1QixNQUFNO3dCQUFFQyxPQUFPLElBQUksQ0FBQ25DLFVBQVU7b0JBQUM7Z0JBQ2pDO2dCQUVGLE9BQU87WUFDVDtZQUVBLHFDQUFxQztZQUNyQyxJQUFJLElBQUksQ0FBQ0ksSUFBSSxJQUFJLFFBQVEsSUFBSSxDQUFDQSxJQUFJLEtBQUtPLFFBQVFQLElBQUksRUFBRTtnQkFDbkQsSUFBSSxDQUFDUCxLQUFLLENBQ1IsSUFBSTVCLGtCQUFrQixpQkFBaUJ5QyxZQUFZO29CQUNqREM7b0JBQ0F1QixNQUFNO3dCQUFFQyxPQUFPLElBQUksQ0FBQ25DLFVBQVU7b0JBQUM7Z0JBQ2pDO2dCQUVGLE9BQU87WUFDVDtZQUVBLE1BQU0sRUFBRUUsS0FBSyxFQUFFbUMsSUFBSSxFQUFFbEMsTUFBTWtDLElBQUksRUFBRSxHQUFHRDtZQUVwQ3RFLE9BQU8sSUFBSSxDQUFDb0MsS0FBSyxLQUFLQSxPQUFPO1lBQzdCcEMsT0FBTyxJQUFJLENBQUNxQyxHQUFHLElBQUksUUFBUSxJQUFJLENBQUNBLEdBQUcsS0FBS0EsS0FBSztZQUU3QyxJQUFJLENBQUNFLE1BQU0sR0FBR0E7WUFDZCxPQUFPO1FBQ1Q7UUFFQSxJQUFJLElBQUksQ0FBQ0YsR0FBRyxJQUFJLE1BQU07WUFDcEIsSUFBSU8sZUFBZSxLQUFLO2dCQUN0Qiw0QkFBNEI7Z0JBQzVCLE1BQU00QixRQUFRbEUsaUJBQWlCdUMsT0FBTyxDQUFDLGdCQUFnQjtnQkFFdkQsSUFBSTJCLFNBQVMsTUFBTTtvQkFDakIsT0FBTyxJQUFJLENBQUMzQyxPQUFPLENBQUNvQyxTQUFTLENBQzNCckIsWUFDQXNCLFlBQ0EzQixRQUNBNEI7Z0JBRUo7Z0JBRUEsTUFBTSxFQUFFL0IsS0FBSyxFQUFFbUMsSUFBSSxFQUFFbEMsTUFBTWtDLElBQUksRUFBRSxHQUFHQztnQkFDcEN4RSxPQUNFb0MsU0FBUyxRQUFRdUIsT0FBT2MsUUFBUSxDQUFDckMsUUFDakM7Z0JBRUZwQyxPQUFPcUMsT0FBTyxRQUFRc0IsT0FBT2MsUUFBUSxDQUFDcEMsTUFBTTtnQkFFNUMsSUFBSSxDQUFDRCxLQUFLLEdBQUdBO2dCQUNiLElBQUksQ0FBQ0MsR0FBRyxHQUFHQTtZQUNiO1lBRUEsb0VBQW9FO1lBQ3BFLElBQUksSUFBSSxDQUFDQSxHQUFHLElBQUksTUFBTTtnQkFDcEIsTUFBTXFDLGdCQUFnQjdCLE9BQU8sQ0FBQyxpQkFBaUI7Z0JBQy9DLElBQUksQ0FBQ1IsR0FBRyxHQUFHcUMsaUJBQWlCLE9BQU9mLE9BQU9lLGlCQUFpQjtZQUM3RDtZQUVBMUUsT0FBTzJELE9BQU9jLFFBQVEsQ0FBQyxJQUFJLENBQUNyQyxLQUFLO1lBQ2pDcEMsT0FDRSxJQUFJLENBQUNxQyxHQUFHLElBQUksUUFBUXNCLE9BQU9jLFFBQVEsQ0FBQyxJQUFJLENBQUNwQyxHQUFHLEdBQzVDO1lBR0YsSUFBSSxDQUFDRSxNQUFNLEdBQUdBO1lBQ2QsSUFBSSxDQUFDRCxJQUFJLEdBQUdPLFFBQVFQLElBQUksSUFBSSxPQUFPTyxRQUFRUCxJQUFJLEdBQUc7WUFFbEQscURBQXFEO1lBQ3JELG1FQUFtRTtZQUNuRSxRQUFRO1lBQ1IsSUFBSSxJQUFJLENBQUNBLElBQUksSUFBSSxRQUFRLElBQUksQ0FBQ0EsSUFBSSxDQUFDcUMsVUFBVSxDQUFDLE9BQU87Z0JBQ25ELElBQUksQ0FBQ3JDLElBQUksR0FBRztZQUNkO1lBRUEsT0FBTyxJQUFJLENBQUNULE9BQU8sQ0FBQ29DLFNBQVMsQ0FDM0JyQixZQUNBc0IsWUFDQTNCLFFBQ0E0QjtRQUVKO1FBRUEsTUFBTWxCLE1BQU0sSUFBSTlDLGtCQUFrQixrQkFBa0J5QyxZQUFZO1lBQzlEQztZQUNBdUIsTUFBTTtnQkFBRUMsT0FBTyxJQUFJLENBQUNuQyxVQUFVO1lBQUM7UUFDakM7UUFFQSxJQUFJLENBQUNILEtBQUssQ0FBQ2tCO1FBRVgsT0FBTztJQUNUO0lBRUEyQixPQUFRNUIsS0FBSyxFQUFFO1FBQ2IsSUFBSSxDQUFDWixLQUFLLElBQUlZLE1BQU02QixNQUFNO1FBRTFCLE9BQU8sSUFBSSxDQUFDaEQsT0FBTyxDQUFDK0MsTUFBTSxDQUFDNUI7SUFDN0I7SUFFQThCLFdBQVlDLFdBQVcsRUFBRTtRQUN2QixJQUFJLENBQUM3QyxVQUFVLEdBQUc7UUFDbEIsT0FBTyxJQUFJLENBQUNMLE9BQU8sQ0FBQ2lELFVBQVUsQ0FBQ0M7SUFDakM7SUFFQUMsUUFBUy9CLEdBQUcsRUFBRTtRQUNaLElBQUksSUFBSSxDQUFDakIsT0FBTyxJQUFJNUIsWUFBWSxJQUFJLENBQUNXLElBQUksQ0FBQ2UsSUFBSSxHQUFHO1lBQy9DLE9BQU8sSUFBSSxDQUFDRCxPQUFPLENBQUNtRCxPQUFPLENBQUMvQjtRQUM5QjtRQUVBLHVEQUF1RDtRQUN2RCw0QkFBNEI7UUFDNUIsSUFBSSxJQUFJLENBQUNmLFVBQVUsR0FBRyxJQUFJLENBQUNDLG9CQUFvQixHQUFHLEdBQUc7WUFDbkQsa0ZBQWtGO1lBQ2xGLElBQUksQ0FBQ0QsVUFBVSxHQUNiLElBQUksQ0FBQ0Msb0JBQW9CLEdBQ3hCLEtBQUksQ0FBQ0QsVUFBVSxHQUFHLElBQUksQ0FBQ0Msb0JBQW9CO1FBQ2hELE9BQU87WUFDTCxJQUFJLENBQUNELFVBQVUsSUFBSTtRQUNyQjtRQUVBLElBQUksQ0FBQ0QsU0FBUyxDQUFDZCxLQUFLLENBQ2xCOEIsS0FDQTtZQUNFQyxPQUFPO2dCQUFFSSxTQUFTLElBQUksQ0FBQ3BCLFVBQVU7WUFBQztZQUNsQ25CLE1BQU07Z0JBQUVFLGNBQWMsSUFBSSxDQUFDZ0IsU0FBUztnQkFBRSxHQUFHLElBQUksQ0FBQ2xCLElBQUk7WUFBQztRQUNyRCxHQUNBa0UsUUFBUUMsSUFBSSxDQUFDLElBQUk7UUFHbkIsU0FBU0QsUUFBU2hDLEdBQUc7WUFDbkIsSUFBSUEsT0FBTyxRQUFRLElBQUksQ0FBQ2pCLE9BQU8sSUFBSTVCLFlBQVksSUFBSSxDQUFDVyxJQUFJLENBQUNlLElBQUksR0FBRztnQkFDOUQsT0FBTyxJQUFJLENBQUNELE9BQU8sQ0FBQ21ELE9BQU8sQ0FBQy9CO1lBQzlCO1lBRUEsSUFBSSxJQUFJLENBQUNiLEtBQUssS0FBSyxHQUFHO2dCQUNwQixNQUFNUyxVQUFVO29CQUFFMkIsT0FBTyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUNwQyxLQUFLLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQ0MsR0FBRyxJQUFJLElBQUk7Z0JBQUM7Z0JBRWpFLDJFQUEyRTtnQkFDM0UsSUFBSSxJQUFJLENBQUNDLElBQUksSUFBSSxNQUFNO29CQUNyQk8sT0FBTyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUNQLElBQUk7Z0JBQ2pDO2dCQUVBLElBQUksQ0FBQ3ZCLElBQUksR0FBRztvQkFDVixHQUFHLElBQUksQ0FBQ0EsSUFBSTtvQkFDWjhCLFNBQVM7d0JBQ1AsR0FBRyxJQUFJLENBQUM5QixJQUFJLENBQUM4QixPQUFPO3dCQUNwQixHQUFHQSxPQUFPO29CQUNaO2dCQUNGO1lBQ0Y7WUFFQSxJQUFJO2dCQUNGLElBQUksQ0FBQ1Ysb0JBQW9CLEdBQUcsSUFBSSxDQUFDRCxVQUFVO2dCQUMzQyxJQUFJLENBQUNOLFFBQVEsQ0FBQyxJQUFJLENBQUNiLElBQUksRUFBRSxJQUFJO1lBQy9CLEVBQUUsT0FBT2tDLEtBQUs7Z0JBQ1osSUFBSSxDQUFDcEIsT0FBTyxDQUFDbUQsT0FBTyxDQUFDL0I7WUFDdkI7UUFDRjtJQUNGO0FBQ0Y7QUFFQWtDLE9BQU9DLE9BQU8sR0FBR3RFIiwic291cmNlcyI6WyJEOlxcSGVsaXhcXG5vZGVfbW9kdWxlc1xcdW5kaWNpXFxsaWJcXGhhbmRsZXJcXHJldHJ5LWhhbmRsZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5jb25zdCBhc3NlcnQgPSByZXF1aXJlKCdub2RlOmFzc2VydCcpXG5cbmNvbnN0IHsga1JldHJ5SGFuZGxlckRlZmF1bHRSZXRyeSB9ID0gcmVxdWlyZSgnLi4vY29yZS9zeW1ib2xzJylcbmNvbnN0IHsgUmVxdWVzdFJldHJ5RXJyb3IgfSA9IHJlcXVpcmUoJy4uL2NvcmUvZXJyb3JzJylcbmNvbnN0IHtcbiAgaXNEaXN0dXJiZWQsXG4gIHBhcnNlSGVhZGVycyxcbiAgcGFyc2VSYW5nZUhlYWRlcixcbiAgd3JhcFJlcXVlc3RCb2R5XG59ID0gcmVxdWlyZSgnLi4vY29yZS91dGlsJylcblxuZnVuY3Rpb24gY2FsY3VsYXRlUmV0cnlBZnRlckhlYWRlciAocmV0cnlBZnRlcikge1xuICBjb25zdCBjdXJyZW50ID0gRGF0ZS5ub3coKVxuICByZXR1cm4gbmV3IERhdGUocmV0cnlBZnRlcikuZ2V0VGltZSgpIC0gY3VycmVudFxufVxuXG5jbGFzcyBSZXRyeUhhbmRsZXIge1xuICBjb25zdHJ1Y3RvciAob3B0cywgaGFuZGxlcnMpIHtcbiAgICBjb25zdCB7IHJldHJ5T3B0aW9ucywgLi4uZGlzcGF0Y2hPcHRzIH0gPSBvcHRzXG4gICAgY29uc3Qge1xuICAgICAgLy8gUmV0cnkgc2NvcGVkXG4gICAgICByZXRyeTogcmV0cnlGbixcbiAgICAgIG1heFJldHJpZXMsXG4gICAgICBtYXhUaW1lb3V0LFxuICAgICAgbWluVGltZW91dCxcbiAgICAgIHRpbWVvdXRGYWN0b3IsXG4gICAgICAvLyBSZXNwb25zZSBzY29wZWRcbiAgICAgIG1ldGhvZHMsXG4gICAgICBlcnJvckNvZGVzLFxuICAgICAgcmV0cnlBZnRlcixcbiAgICAgIHN0YXR1c0NvZGVzXG4gICAgfSA9IHJldHJ5T3B0aW9ucyA/PyB7fVxuXG4gICAgdGhpcy5kaXNwYXRjaCA9IGhhbmRsZXJzLmRpc3BhdGNoXG4gICAgdGhpcy5oYW5kbGVyID0gaGFuZGxlcnMuaGFuZGxlclxuICAgIHRoaXMub3B0cyA9IHsgLi4uZGlzcGF0Y2hPcHRzLCBib2R5OiB3cmFwUmVxdWVzdEJvZHkob3B0cy5ib2R5KSB9XG4gICAgdGhpcy5hYm9ydCA9IG51bGxcbiAgICB0aGlzLmFib3J0ZWQgPSBmYWxzZVxuICAgIHRoaXMucmV0cnlPcHRzID0ge1xuICAgICAgcmV0cnk6IHJldHJ5Rm4gPz8gUmV0cnlIYW5kbGVyW2tSZXRyeUhhbmRsZXJEZWZhdWx0UmV0cnldLFxuICAgICAgcmV0cnlBZnRlcjogcmV0cnlBZnRlciA/PyB0cnVlLFxuICAgICAgbWF4VGltZW91dDogbWF4VGltZW91dCA/PyAzMCAqIDEwMDAsIC8vIDMwcyxcbiAgICAgIG1pblRpbWVvdXQ6IG1pblRpbWVvdXQgPz8gNTAwLCAvLyAuNXNcbiAgICAgIHRpbWVvdXRGYWN0b3I6IHRpbWVvdXRGYWN0b3IgPz8gMixcbiAgICAgIG1heFJldHJpZXM6IG1heFJldHJpZXMgPz8gNSxcbiAgICAgIC8vIFdoYXQgZXJyb3JzIHdlIHNob3VsZCByZXRyeVxuICAgICAgbWV0aG9kczogbWV0aG9kcyA/PyBbJ0dFVCcsICdIRUFEJywgJ09QVElPTlMnLCAnUFVUJywgJ0RFTEVURScsICdUUkFDRSddLFxuICAgICAgLy8gSW5kaWNhdGVzIHdoaWNoIGVycm9ycyB0byByZXRyeVxuICAgICAgc3RhdHVzQ29kZXM6IHN0YXR1c0NvZGVzID8/IFs1MDAsIDUwMiwgNTAzLCA1MDQsIDQyOV0sXG4gICAgICAvLyBMaXN0IG9mIGVycm9ycyB0byByZXRyeVxuICAgICAgZXJyb3JDb2RlczogZXJyb3JDb2RlcyA/PyBbXG4gICAgICAgICdFQ09OTlJFU0VUJyxcbiAgICAgICAgJ0VDT05OUkVGVVNFRCcsXG4gICAgICAgICdFTk9URk9VTkQnLFxuICAgICAgICAnRU5FVERPV04nLFxuICAgICAgICAnRU5FVFVOUkVBQ0gnLFxuICAgICAgICAnRUhPU1RET1dOJyxcbiAgICAgICAgJ0VIT1NUVU5SRUFDSCcsXG4gICAgICAgICdFUElQRScsXG4gICAgICAgICdVTkRfRVJSX1NPQ0tFVCdcbiAgICAgIF1cbiAgICB9XG5cbiAgICB0aGlzLnJldHJ5Q291bnQgPSAwXG4gICAgdGhpcy5yZXRyeUNvdW50Q2hlY2twb2ludCA9IDBcbiAgICB0aGlzLnN0YXJ0ID0gMFxuICAgIHRoaXMuZW5kID0gbnVsbFxuICAgIHRoaXMuZXRhZyA9IG51bGxcbiAgICB0aGlzLnJlc3VtZSA9IG51bGxcblxuICAgIC8vIEhhbmRsZSBwb3NzaWJsZSBvbkNvbm5lY3QgZHVwbGljYXRpb25cbiAgICB0aGlzLmhhbmRsZXIub25Db25uZWN0KHJlYXNvbiA9PiB7XG4gICAgICB0aGlzLmFib3J0ZWQgPSB0cnVlXG4gICAgICBpZiAodGhpcy5hYm9ydCkge1xuICAgICAgICB0aGlzLmFib3J0KHJlYXNvbilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVhc29uID0gcmVhc29uXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIG9uUmVxdWVzdFNlbnQgKCkge1xuICAgIGlmICh0aGlzLmhhbmRsZXIub25SZXF1ZXN0U2VudCkge1xuICAgICAgdGhpcy5oYW5kbGVyLm9uUmVxdWVzdFNlbnQoKVxuICAgIH1cbiAgfVxuXG4gIG9uVXBncmFkZSAoc3RhdHVzQ29kZSwgaGVhZGVycywgc29ja2V0KSB7XG4gICAgaWYgKHRoaXMuaGFuZGxlci5vblVwZ3JhZGUpIHtcbiAgICAgIHRoaXMuaGFuZGxlci5vblVwZ3JhZGUoc3RhdHVzQ29kZSwgaGVhZGVycywgc29ja2V0KVxuICAgIH1cbiAgfVxuXG4gIG9uQ29ubmVjdCAoYWJvcnQpIHtcbiAgICBpZiAodGhpcy5hYm9ydGVkKSB7XG4gICAgICBhYm9ydCh0aGlzLnJlYXNvbilcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hYm9ydCA9IGFib3J0XG4gICAgfVxuICB9XG5cbiAgb25Cb2R5U2VudCAoY2h1bmspIHtcbiAgICBpZiAodGhpcy5oYW5kbGVyLm9uQm9keVNlbnQpIHJldHVybiB0aGlzLmhhbmRsZXIub25Cb2R5U2VudChjaHVuaylcbiAgfVxuXG4gIHN0YXRpYyBba1JldHJ5SGFuZGxlckRlZmF1bHRSZXRyeV0gKGVyciwgeyBzdGF0ZSwgb3B0cyB9LCBjYikge1xuICAgIGNvbnN0IHsgc3RhdHVzQ29kZSwgY29kZSwgaGVhZGVycyB9ID0gZXJyXG4gICAgY29uc3QgeyBtZXRob2QsIHJldHJ5T3B0aW9ucyB9ID0gb3B0c1xuICAgIGNvbnN0IHtcbiAgICAgIG1heFJldHJpZXMsXG4gICAgICBtaW5UaW1lb3V0LFxuICAgICAgbWF4VGltZW91dCxcbiAgICAgIHRpbWVvdXRGYWN0b3IsXG4gICAgICBzdGF0dXNDb2RlcyxcbiAgICAgIGVycm9yQ29kZXMsXG4gICAgICBtZXRob2RzXG4gICAgfSA9IHJldHJ5T3B0aW9uc1xuICAgIGNvbnN0IHsgY291bnRlciB9ID0gc3RhdGVcblxuICAgIC8vIEFueSBjb2RlIHRoYXQgaXMgbm90IGEgVW5kaWNpJ3Mgb3JpZ2luYXRlZCBhbmQgYWxsb3dlZCB0byByZXRyeVxuICAgIGlmIChjb2RlICYmIGNvZGUgIT09ICdVTkRfRVJSX1JFUV9SRVRSWScgJiYgIWVycm9yQ29kZXMuaW5jbHVkZXMoY29kZSkpIHtcbiAgICAgIGNiKGVycilcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIElmIGEgc2V0IG9mIG1ldGhvZCBhcmUgcHJvdmlkZWQgYW5kIHRoZSBjdXJyZW50IG1ldGhvZCBpcyBub3QgaW4gdGhlIGxpc3RcbiAgICBpZiAoQXJyYXkuaXNBcnJheShtZXRob2RzKSAmJiAhbWV0aG9kcy5pbmNsdWRlcyhtZXRob2QpKSB7XG4gICAgICBjYihlcnIpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBJZiBhIHNldCBvZiBzdGF0dXMgY29kZSBhcmUgcHJvdmlkZWQgYW5kIHRoZSBjdXJyZW50IHN0YXR1cyBjb2RlIGlzIG5vdCBpbiB0aGUgbGlzdFxuICAgIGlmIChcbiAgICAgIHN0YXR1c0NvZGUgIT0gbnVsbCAmJlxuICAgICAgQXJyYXkuaXNBcnJheShzdGF0dXNDb2RlcykgJiZcbiAgICAgICFzdGF0dXNDb2Rlcy5pbmNsdWRlcyhzdGF0dXNDb2RlKVxuICAgICkge1xuICAgICAgY2IoZXJyKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gSWYgd2UgcmVhY2hlZCB0aGUgbWF4IG51bWJlciBvZiByZXRyaWVzXG4gICAgaWYgKGNvdW50ZXIgPiBtYXhSZXRyaWVzKSB7XG4gICAgICBjYihlcnIpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBsZXQgcmV0cnlBZnRlckhlYWRlciA9IGhlYWRlcnM/LlsncmV0cnktYWZ0ZXInXVxuICAgIGlmIChyZXRyeUFmdGVySGVhZGVyKSB7XG4gICAgICByZXRyeUFmdGVySGVhZGVyID0gTnVtYmVyKHJldHJ5QWZ0ZXJIZWFkZXIpXG4gICAgICByZXRyeUFmdGVySGVhZGVyID0gTnVtYmVyLmlzTmFOKHJldHJ5QWZ0ZXJIZWFkZXIpXG4gICAgICAgID8gY2FsY3VsYXRlUmV0cnlBZnRlckhlYWRlcihyZXRyeUFmdGVySGVhZGVyKVxuICAgICAgICA6IHJldHJ5QWZ0ZXJIZWFkZXIgKiAxZTMgLy8gUmV0cnktQWZ0ZXIgaXMgaW4gc2Vjb25kc1xuICAgIH1cblxuICAgIGNvbnN0IHJldHJ5VGltZW91dCA9XG4gICAgICByZXRyeUFmdGVySGVhZGVyID4gMFxuICAgICAgICA/IE1hdGgubWluKHJldHJ5QWZ0ZXJIZWFkZXIsIG1heFRpbWVvdXQpXG4gICAgICAgIDogTWF0aC5taW4obWluVGltZW91dCAqIHRpbWVvdXRGYWN0b3IgKiogKGNvdW50ZXIgLSAxKSwgbWF4VGltZW91dClcblxuICAgIHNldFRpbWVvdXQoKCkgPT4gY2IobnVsbCksIHJldHJ5VGltZW91dClcbiAgfVxuXG4gIG9uSGVhZGVycyAoc3RhdHVzQ29kZSwgcmF3SGVhZGVycywgcmVzdW1lLCBzdGF0dXNNZXNzYWdlKSB7XG4gICAgY29uc3QgaGVhZGVycyA9IHBhcnNlSGVhZGVycyhyYXdIZWFkZXJzKVxuXG4gICAgdGhpcy5yZXRyeUNvdW50ICs9IDFcblxuICAgIGlmIChzdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgaWYgKHRoaXMucmV0cnlPcHRzLnN0YXR1c0NvZGVzLmluY2x1ZGVzKHN0YXR1c0NvZGUpID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5oYW5kbGVyLm9uSGVhZGVycyhcbiAgICAgICAgICBzdGF0dXNDb2RlLFxuICAgICAgICAgIHJhd0hlYWRlcnMsXG4gICAgICAgICAgcmVzdW1lLFxuICAgICAgICAgIHN0YXR1c01lc3NhZ2VcbiAgICAgICAgKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5hYm9ydChcbiAgICAgICAgICBuZXcgUmVxdWVzdFJldHJ5RXJyb3IoJ1JlcXVlc3QgZmFpbGVkJywgc3RhdHVzQ29kZSwge1xuICAgICAgICAgICAgaGVhZGVycyxcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgY291bnQ6IHRoaXMucmV0cnlDb3VudFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIClcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ2hlY2twb2ludCBmb3IgcmVzdW1lIGZyb20gd2hlcmUgd2UgbGVmdCBpdFxuICAgIGlmICh0aGlzLnJlc3VtZSAhPSBudWxsKSB7XG4gICAgICB0aGlzLnJlc3VtZSA9IG51bGxcblxuICAgICAgaWYgKHN0YXR1c0NvZGUgIT09IDIwNikge1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuXG4gICAgICBjb25zdCBjb250ZW50UmFuZ2UgPSBwYXJzZVJhbmdlSGVhZGVyKGhlYWRlcnNbJ2NvbnRlbnQtcmFuZ2UnXSlcbiAgICAgIC8vIElmIG5vIGNvbnRlbnQgcmFuZ2VcbiAgICAgIGlmICghY29udGVudFJhbmdlKSB7XG4gICAgICAgIHRoaXMuYWJvcnQoXG4gICAgICAgICAgbmV3IFJlcXVlc3RSZXRyeUVycm9yKCdDb250ZW50LVJhbmdlIG1pc21hdGNoJywgc3RhdHVzQ29kZSwge1xuICAgICAgICAgICAgaGVhZGVycyxcbiAgICAgICAgICAgIGRhdGE6IHsgY291bnQ6IHRoaXMucmV0cnlDb3VudCB9XG4gICAgICAgICAgfSlcbiAgICAgICAgKVxuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cblxuICAgICAgLy8gTGV0J3Mgc3RhcnQgd2l0aCBhIHdlYWsgZXRhZyBjaGVja1xuICAgICAgaWYgKHRoaXMuZXRhZyAhPSBudWxsICYmIHRoaXMuZXRhZyAhPT0gaGVhZGVycy5ldGFnKSB7XG4gICAgICAgIHRoaXMuYWJvcnQoXG4gICAgICAgICAgbmV3IFJlcXVlc3RSZXRyeUVycm9yKCdFVGFnIG1pc21hdGNoJywgc3RhdHVzQ29kZSwge1xuICAgICAgICAgICAgaGVhZGVycyxcbiAgICAgICAgICAgIGRhdGE6IHsgY291bnQ6IHRoaXMucmV0cnlDb3VudCB9XG4gICAgICAgICAgfSlcbiAgICAgICAgKVxuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cblxuICAgICAgY29uc3QgeyBzdGFydCwgc2l6ZSwgZW5kID0gc2l6ZSB9ID0gY29udGVudFJhbmdlXG5cbiAgICAgIGFzc2VydCh0aGlzLnN0YXJ0ID09PSBzdGFydCwgJ2NvbnRlbnQtcmFuZ2UgbWlzbWF0Y2gnKVxuICAgICAgYXNzZXJ0KHRoaXMuZW5kID09IG51bGwgfHwgdGhpcy5lbmQgPT09IGVuZCwgJ2NvbnRlbnQtcmFuZ2UgbWlzbWF0Y2gnKVxuXG4gICAgICB0aGlzLnJlc3VtZSA9IHJlc3VtZVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICBpZiAodGhpcy5lbmQgPT0gbnVsbCkge1xuICAgICAgaWYgKHN0YXR1c0NvZGUgPT09IDIwNikge1xuICAgICAgICAvLyBGaXJzdCB0aW1lIHdlIHJlY2VpdmUgMjA2XG4gICAgICAgIGNvbnN0IHJhbmdlID0gcGFyc2VSYW5nZUhlYWRlcihoZWFkZXJzWydjb250ZW50LXJhbmdlJ10pXG5cbiAgICAgICAgaWYgKHJhbmdlID09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5oYW5kbGVyLm9uSGVhZGVycyhcbiAgICAgICAgICAgIHN0YXR1c0NvZGUsXG4gICAgICAgICAgICByYXdIZWFkZXJzLFxuICAgICAgICAgICAgcmVzdW1lLFxuICAgICAgICAgICAgc3RhdHVzTWVzc2FnZVxuICAgICAgICAgIClcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHsgc3RhcnQsIHNpemUsIGVuZCA9IHNpemUgfSA9IHJhbmdlXG4gICAgICAgIGFzc2VydChcbiAgICAgICAgICBzdGFydCAhPSBudWxsICYmIE51bWJlci5pc0Zpbml0ZShzdGFydCksXG4gICAgICAgICAgJ2NvbnRlbnQtcmFuZ2UgbWlzbWF0Y2gnXG4gICAgICAgIClcbiAgICAgICAgYXNzZXJ0KGVuZCAhPSBudWxsICYmIE51bWJlci5pc0Zpbml0ZShlbmQpLCAnaW52YWxpZCBjb250ZW50LWxlbmd0aCcpXG5cbiAgICAgICAgdGhpcy5zdGFydCA9IHN0YXJ0XG4gICAgICAgIHRoaXMuZW5kID0gZW5kXG4gICAgICB9XG5cbiAgICAgIC8vIFdlIG1ha2Ugb3VyIGJlc3QgdG8gY2hlY2twb2ludCB0aGUgYm9keSBmb3IgZnVydGhlciByYW5nZSBoZWFkZXJzXG4gICAgICBpZiAodGhpcy5lbmQgPT0gbnVsbCkge1xuICAgICAgICBjb25zdCBjb250ZW50TGVuZ3RoID0gaGVhZGVyc1snY29udGVudC1sZW5ndGgnXVxuICAgICAgICB0aGlzLmVuZCA9IGNvbnRlbnRMZW5ndGggIT0gbnVsbCA/IE51bWJlcihjb250ZW50TGVuZ3RoKSA6IG51bGxcbiAgICAgIH1cblxuICAgICAgYXNzZXJ0KE51bWJlci5pc0Zpbml0ZSh0aGlzLnN0YXJ0KSlcbiAgICAgIGFzc2VydChcbiAgICAgICAgdGhpcy5lbmQgPT0gbnVsbCB8fCBOdW1iZXIuaXNGaW5pdGUodGhpcy5lbmQpLFxuICAgICAgICAnaW52YWxpZCBjb250ZW50LWxlbmd0aCdcbiAgICAgIClcblxuICAgICAgdGhpcy5yZXN1bWUgPSByZXN1bWVcbiAgICAgIHRoaXMuZXRhZyA9IGhlYWRlcnMuZXRhZyAhPSBudWxsID8gaGVhZGVycy5ldGFnIDogbnVsbFxuXG4gICAgICAvLyBXZWFrIGV0YWdzIGFyZSBub3QgdXNlZnVsIGZvciBjb21wYXJpc29uIG5vciBjYWNoZVxuICAgICAgLy8gZm9yIGluc3RhbmNlIG5vdCBzYWZlIHRvIGFzc3VtZSBpZiB0aGUgcmVzcG9uc2UgaXMgYnl0ZS1wZXItYnl0ZVxuICAgICAgLy8gZXF1YWxcbiAgICAgIGlmICh0aGlzLmV0YWcgIT0gbnVsbCAmJiB0aGlzLmV0YWcuc3RhcnRzV2l0aCgnVy8nKSkge1xuICAgICAgICB0aGlzLmV0YWcgPSBudWxsXG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmhhbmRsZXIub25IZWFkZXJzKFxuICAgICAgICBzdGF0dXNDb2RlLFxuICAgICAgICByYXdIZWFkZXJzLFxuICAgICAgICByZXN1bWUsXG4gICAgICAgIHN0YXR1c01lc3NhZ2VcbiAgICAgIClcbiAgICB9XG5cbiAgICBjb25zdCBlcnIgPSBuZXcgUmVxdWVzdFJldHJ5RXJyb3IoJ1JlcXVlc3QgZmFpbGVkJywgc3RhdHVzQ29kZSwge1xuICAgICAgaGVhZGVycyxcbiAgICAgIGRhdGE6IHsgY291bnQ6IHRoaXMucmV0cnlDb3VudCB9XG4gICAgfSlcblxuICAgIHRoaXMuYWJvcnQoZXJyKVxuXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBvbkRhdGEgKGNodW5rKSB7XG4gICAgdGhpcy5zdGFydCArPSBjaHVuay5sZW5ndGhcblxuICAgIHJldHVybiB0aGlzLmhhbmRsZXIub25EYXRhKGNodW5rKVxuICB9XG5cbiAgb25Db21wbGV0ZSAocmF3VHJhaWxlcnMpIHtcbiAgICB0aGlzLnJldHJ5Q291bnQgPSAwXG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlci5vbkNvbXBsZXRlKHJhd1RyYWlsZXJzKVxuICB9XG5cbiAgb25FcnJvciAoZXJyKSB7XG4gICAgaWYgKHRoaXMuYWJvcnRlZCB8fCBpc0Rpc3R1cmJlZCh0aGlzLm9wdHMuYm9keSkpIHtcbiAgICAgIHJldHVybiB0aGlzLmhhbmRsZXIub25FcnJvcihlcnIpXG4gICAgfVxuXG4gICAgLy8gV2UgcmVjb25jaWxlIGluIGNhc2Ugb2YgYSBtaXggYmV0d2VlbiBuZXR3b3JrIGVycm9yc1xuICAgIC8vIGFuZCBzZXJ2ZXIgZXJyb3IgcmVzcG9uc2VcbiAgICBpZiAodGhpcy5yZXRyeUNvdW50IC0gdGhpcy5yZXRyeUNvdW50Q2hlY2twb2ludCA+IDApIHtcbiAgICAgIC8vIFdlIGNvdW50IHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gdGhlIGxhc3QgY2hlY2twb2ludCBhbmQgdGhlIGN1cnJlbnQgcmV0cnkgY291bnRcbiAgICAgIHRoaXMucmV0cnlDb3VudCA9XG4gICAgICAgIHRoaXMucmV0cnlDb3VudENoZWNrcG9pbnQgK1xuICAgICAgICAodGhpcy5yZXRyeUNvdW50IC0gdGhpcy5yZXRyeUNvdW50Q2hlY2twb2ludClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZXRyeUNvdW50ICs9IDFcbiAgICB9XG5cbiAgICB0aGlzLnJldHJ5T3B0cy5yZXRyeShcbiAgICAgIGVycixcbiAgICAgIHtcbiAgICAgICAgc3RhdGU6IHsgY291bnRlcjogdGhpcy5yZXRyeUNvdW50IH0sXG4gICAgICAgIG9wdHM6IHsgcmV0cnlPcHRpb25zOiB0aGlzLnJldHJ5T3B0cywgLi4udGhpcy5vcHRzIH1cbiAgICAgIH0sXG4gICAgICBvblJldHJ5LmJpbmQodGhpcylcbiAgICApXG5cbiAgICBmdW5jdGlvbiBvblJldHJ5IChlcnIpIHtcbiAgICAgIGlmIChlcnIgIT0gbnVsbCB8fCB0aGlzLmFib3J0ZWQgfHwgaXNEaXN0dXJiZWQodGhpcy5vcHRzLmJvZHkpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhhbmRsZXIub25FcnJvcihlcnIpXG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnN0YXJ0ICE9PSAwKSB7XG4gICAgICAgIGNvbnN0IGhlYWRlcnMgPSB7IHJhbmdlOiBgYnl0ZXM9JHt0aGlzLnN0YXJ0fS0ke3RoaXMuZW5kID8/ICcnfWAgfVxuXG4gICAgICAgIC8vIFdlYWsgZXRhZyBjaGVjayAtIHdlYWsgZXRhZ3Mgd2lsbCBtYWtlIGNvbXBhcmlzb24gYWxnb3JpdGhtcyBuZXZlciBtYXRjaFxuICAgICAgICBpZiAodGhpcy5ldGFnICE9IG51bGwpIHtcbiAgICAgICAgICBoZWFkZXJzWydpZi1tYXRjaCddID0gdGhpcy5ldGFnXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm9wdHMgPSB7XG4gICAgICAgICAgLi4udGhpcy5vcHRzLFxuICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgIC4uLnRoaXMub3B0cy5oZWFkZXJzLFxuICAgICAgICAgICAgLi4uaGVhZGVyc1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0cnkge1xuICAgICAgICB0aGlzLnJldHJ5Q291bnRDaGVja3BvaW50ID0gdGhpcy5yZXRyeUNvdW50XG4gICAgICAgIHRoaXMuZGlzcGF0Y2godGhpcy5vcHRzLCB0aGlzKVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHRoaXMuaGFuZGxlci5vbkVycm9yKGVycilcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSZXRyeUhhbmRsZXJcbiJdLCJuYW1lcyI6WyJhc3NlcnQiLCJyZXF1aXJlIiwia1JldHJ5SGFuZGxlckRlZmF1bHRSZXRyeSIsIlJlcXVlc3RSZXRyeUVycm9yIiwiaXNEaXN0dXJiZWQiLCJwYXJzZUhlYWRlcnMiLCJwYXJzZVJhbmdlSGVhZGVyIiwid3JhcFJlcXVlc3RCb2R5IiwiY2FsY3VsYXRlUmV0cnlBZnRlckhlYWRlciIsInJldHJ5QWZ0ZXIiLCJjdXJyZW50IiwiRGF0ZSIsIm5vdyIsImdldFRpbWUiLCJSZXRyeUhhbmRsZXIiLCJvcHRzIiwiaGFuZGxlcnMiLCJyZXRyeU9wdGlvbnMiLCJkaXNwYXRjaE9wdHMiLCJyZXRyeSIsInJldHJ5Rm4iLCJtYXhSZXRyaWVzIiwibWF4VGltZW91dCIsIm1pblRpbWVvdXQiLCJ0aW1lb3V0RmFjdG9yIiwibWV0aG9kcyIsImVycm9yQ29kZXMiLCJzdGF0dXNDb2RlcyIsImRpc3BhdGNoIiwiaGFuZGxlciIsImJvZHkiLCJhYm9ydCIsImFib3J0ZWQiLCJyZXRyeU9wdHMiLCJyZXRyeUNvdW50IiwicmV0cnlDb3VudENoZWNrcG9pbnQiLCJzdGFydCIsImVuZCIsImV0YWciLCJyZXN1bWUiLCJvbkNvbm5lY3QiLCJyZWFzb24iLCJvblJlcXVlc3RTZW50Iiwib25VcGdyYWRlIiwic3RhdHVzQ29kZSIsImhlYWRlcnMiLCJzb2NrZXQiLCJvbkJvZHlTZW50IiwiY2h1bmsiLCJlcnIiLCJzdGF0ZSIsImNiIiwiY29kZSIsIm1ldGhvZCIsImNvdW50ZXIiLCJpbmNsdWRlcyIsIkFycmF5IiwiaXNBcnJheSIsInJldHJ5QWZ0ZXJIZWFkZXIiLCJOdW1iZXIiLCJpc05hTiIsInJldHJ5VGltZW91dCIsIk1hdGgiLCJtaW4iLCJzZXRUaW1lb3V0Iiwib25IZWFkZXJzIiwicmF3SGVhZGVycyIsInN0YXR1c01lc3NhZ2UiLCJkYXRhIiwiY291bnQiLCJjb250ZW50UmFuZ2UiLCJzaXplIiwicmFuZ2UiLCJpc0Zpbml0ZSIsImNvbnRlbnRMZW5ndGgiLCJzdGFydHNXaXRoIiwib25EYXRhIiwibGVuZ3RoIiwib25Db21wbGV0ZSIsInJhd1RyYWlsZXJzIiwib25FcnJvciIsIm9uUmV0cnkiLCJiaW5kIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/handler/retry-handler.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/interceptor/dump.js":
/*!*****************************************************!*\
  !*** ./node_modules/undici/lib/interceptor/dump.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst util = __webpack_require__(/*! ../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst { InvalidArgumentError, RequestAbortedError } = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst DecoratorHandler = __webpack_require__(/*! ../handler/decorator-handler */ \"(ssr)/./node_modules/undici/lib/handler/decorator-handler.js\");\nclass DumpHandler extends DecoratorHandler {\n    #maxSize;\n    #abort;\n    #dumped;\n    #aborted;\n    #size;\n    #reason;\n    #handler;\n    constructor({ maxSize }, handler){\n        super(handler), this.#maxSize = 1024 * 1024, this.#abort = null, this.#dumped = false, this.#aborted = false, this.#size = 0, this.#reason = null, this.#handler = null;\n        if (maxSize != null && (!Number.isFinite(maxSize) || maxSize < 1)) {\n            throw new InvalidArgumentError('maxSize must be a number greater than 0');\n        }\n        this.#maxSize = maxSize ?? this.#maxSize;\n        this.#handler = handler;\n    }\n    onConnect(abort) {\n        this.#abort = abort;\n        this.#handler.onConnect(this.#customAbort.bind(this));\n    }\n    #customAbort(reason) {\n        this.#aborted = true;\n        this.#reason = reason;\n    }\n    // TODO: will require adjustment after new hooks are out\n    onHeaders(statusCode, rawHeaders, resume, statusMessage) {\n        const headers = util.parseHeaders(rawHeaders);\n        const contentLength = headers['content-length'];\n        if (contentLength != null && contentLength > this.#maxSize) {\n            throw new RequestAbortedError(`Response size (${contentLength}) larger than maxSize (${this.#maxSize})`);\n        }\n        if (this.#aborted) {\n            return true;\n        }\n        return this.#handler.onHeaders(statusCode, rawHeaders, resume, statusMessage);\n    }\n    onError(err) {\n        if (this.#dumped) {\n            return;\n        }\n        err = this.#reason ?? err;\n        this.#handler.onError(err);\n    }\n    onData(chunk) {\n        this.#size = this.#size + chunk.length;\n        if (this.#size >= this.#maxSize) {\n            this.#dumped = true;\n            if (this.#aborted) {\n                this.#handler.onError(this.#reason);\n            } else {\n                this.#handler.onComplete([]);\n            }\n        }\n        return true;\n    }\n    onComplete(trailers) {\n        if (this.#dumped) {\n            return;\n        }\n        if (this.#aborted) {\n            this.#handler.onError(this.reason);\n            return;\n        }\n        this.#handler.onComplete(trailers);\n    }\n}\nfunction createDumpInterceptor({ maxSize: defaultMaxSize } = {\n    maxSize: 1024 * 1024\n}) {\n    return (dispatch)=>{\n        return function Intercept(opts, handler) {\n            const { dumpMaxSize = defaultMaxSize } = opts;\n            const dumpHandler = new DumpHandler({\n                maxSize: dumpMaxSize\n            }, handler);\n            return dispatch(opts, dumpHandler);\n        };\n    };\n}\nmodule.exports = createDumpInterceptor;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9pbnRlcmNlcHRvci9kdW1wLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTUEsT0FBT0MsbUJBQU9BLENBQUMsa0VBQWM7QUFDbkMsTUFBTSxFQUFFQyxvQkFBb0IsRUFBRUMsbUJBQW1CLEVBQUUsR0FBR0YsbUJBQU9BLENBQUMsc0VBQWdCO0FBQzlFLE1BQU1HLG1CQUFtQkgsbUJBQU9BLENBQUMsa0dBQThCO0FBRS9ELE1BQU1JLG9CQUFvQkQ7SUFDeEIsUUFBUSxDQUFjO0lBQ3RCLE1BQU0sQ0FBTztJQUNiLE9BQU8sQ0FBUTtJQUNmLFFBQVEsQ0FBUTtJQUNoQixLQUFLLENBQUk7SUFDVCxPQUFPLENBQU87SUFDZCxRQUFRLENBQU87SUFFZixZQUFhLEVBQUVFLE9BQU8sRUFBRSxFQUFFQyxPQUFPLENBQUU7UUFDakMsS0FBSyxDQUFDQSxlQVRSLFFBQVEsR0FBRyxPQUFPLFdBQ2xCLE1BQU0sR0FBRyxXQUNULE9BQU8sR0FBRyxZQUNWLFFBQVEsR0FBRyxZQUNYLEtBQUssR0FBRyxRQUNSLE9BQU8sR0FBRyxXQUNWLFFBQVEsR0FBRztRQUtULElBQUlELFdBQVcsUUFBUyxFQUFDRSxPQUFPQyxRQUFRLENBQUNILFlBQVlBLFVBQVUsSUFBSTtZQUNqRSxNQUFNLElBQUlKLHFCQUFxQjtRQUNqQztRQUVBLElBQUksQ0FBQyxRQUFRLEdBQUdJLFdBQVcsSUFBSSxDQUFDLFFBQVE7UUFDeEMsSUFBSSxDQUFDLFFBQVEsR0FBR0M7SUFDbEI7SUFFQUcsVUFBV0MsS0FBSyxFQUFFO1FBQ2hCLElBQUksQ0FBQyxNQUFNLEdBQUdBO1FBRWQsSUFBSSxDQUFDLFFBQVEsQ0FBQ0QsU0FBUyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUNFLElBQUksQ0FBQyxJQUFJO0lBQ3JEO0lBRUEsWUFBWSxDQUFFQyxNQUFNO1FBQ2xCLElBQUksQ0FBQyxRQUFRLEdBQUc7UUFDaEIsSUFBSSxDQUFDLE9BQU8sR0FBR0E7SUFDakI7SUFFQSx3REFBd0Q7SUFDeERDLFVBQVdDLFVBQVUsRUFBRUMsVUFBVSxFQUFFQyxNQUFNLEVBQUVDLGFBQWEsRUFBRTtRQUN4RCxNQUFNQyxVQUFVbkIsS0FBS29CLFlBQVksQ0FBQ0o7UUFDbEMsTUFBTUssZ0JBQWdCRixPQUFPLENBQUMsaUJBQWlCO1FBRS9DLElBQUlFLGlCQUFpQixRQUFRQSxnQkFBZ0IsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUMxRCxNQUFNLElBQUlsQixvQkFDUixDQUFDLGVBQWUsRUFBRWtCLGNBQWMsdUJBQXVCLEVBQ3JELElBQUksQ0FBQyxRQUFRLENBQ2QsQ0FBQyxDQUFDO1FBRVA7UUFFQSxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDakIsT0FBTztRQUNUO1FBRUEsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDUCxTQUFTLENBQzVCQyxZQUNBQyxZQUNBQyxRQUNBQztJQUVKO0lBRUFJLFFBQVNDLEdBQUcsRUFBRTtRQUNaLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQjtRQUNGO1FBRUFBLE1BQU0sSUFBSSxDQUFDLE9BQU8sSUFBSUE7UUFFdEIsSUFBSSxDQUFDLFFBQVEsQ0FBQ0QsT0FBTyxDQUFDQztJQUN4QjtJQUVBQyxPQUFRQyxLQUFLLEVBQUU7UUFDYixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLEdBQUdBLE1BQU1DLE1BQU07UUFFdEMsSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDL0IsSUFBSSxDQUFDLE9BQU8sR0FBRztZQUVmLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtnQkFDakIsSUFBSSxDQUFDLFFBQVEsQ0FBQ0osT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPO1lBQ3BDLE9BQU87Z0JBQ0wsSUFBSSxDQUFDLFFBQVEsQ0FBQ0ssVUFBVSxDQUFDLEVBQUU7WUFDN0I7UUFDRjtRQUVBLE9BQU87SUFDVDtJQUVBQSxXQUFZQyxRQUFRLEVBQUU7UUFDcEIsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCO1FBQ0Y7UUFFQSxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDakIsSUFBSSxDQUFDLFFBQVEsQ0FBQ04sT0FBTyxDQUFDLElBQUksQ0FBQ1QsTUFBTTtZQUNqQztRQUNGO1FBRUEsSUFBSSxDQUFDLFFBQVEsQ0FBQ2MsVUFBVSxDQUFDQztJQUMzQjtBQUNGO0FBRUEsU0FBU0Msc0JBQ1AsRUFBRXZCLFNBQVN3QixjQUFjLEVBQUUsR0FBRztJQUM1QnhCLFNBQVMsT0FBTztBQUNsQixDQUFDO0lBRUQsT0FBT3lCLENBQUFBO1FBQ0wsT0FBTyxTQUFTQyxVQUFXQyxJQUFJLEVBQUUxQixPQUFPO1lBQ3RDLE1BQU0sRUFBRTJCLGNBQWNKLGNBQWMsRUFBRSxHQUNwQ0c7WUFFRixNQUFNRSxjQUFjLElBQUk5QixZQUN0QjtnQkFBRUMsU0FBUzRCO1lBQVksR0FDdkIzQjtZQUdGLE9BQU93QixTQUFTRSxNQUFNRTtRQUN4QjtJQUNGO0FBQ0Y7QUFFQUMsT0FBT0MsT0FBTyxHQUFHUiIsInNvdXJjZXMiOlsiRDpcXEhlbGl4XFxub2RlX21vZHVsZXNcXHVuZGljaVxcbGliXFxpbnRlcmNlcHRvclxcZHVtcC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgdXRpbCA9IHJlcXVpcmUoJy4uL2NvcmUvdXRpbCcpXG5jb25zdCB7IEludmFsaWRBcmd1bWVudEVycm9yLCBSZXF1ZXN0QWJvcnRlZEVycm9yIH0gPSByZXF1aXJlKCcuLi9jb3JlL2Vycm9ycycpXG5jb25zdCBEZWNvcmF0b3JIYW5kbGVyID0gcmVxdWlyZSgnLi4vaGFuZGxlci9kZWNvcmF0b3ItaGFuZGxlcicpXG5cbmNsYXNzIER1bXBIYW5kbGVyIGV4dGVuZHMgRGVjb3JhdG9ySGFuZGxlciB7XG4gICNtYXhTaXplID0gMTAyNCAqIDEwMjRcbiAgI2Fib3J0ID0gbnVsbFxuICAjZHVtcGVkID0gZmFsc2VcbiAgI2Fib3J0ZWQgPSBmYWxzZVxuICAjc2l6ZSA9IDBcbiAgI3JlYXNvbiA9IG51bGxcbiAgI2hhbmRsZXIgPSBudWxsXG5cbiAgY29uc3RydWN0b3IgKHsgbWF4U2l6ZSB9LCBoYW5kbGVyKSB7XG4gICAgc3VwZXIoaGFuZGxlcilcblxuICAgIGlmIChtYXhTaXplICE9IG51bGwgJiYgKCFOdW1iZXIuaXNGaW5pdGUobWF4U2l6ZSkgfHwgbWF4U2l6ZSA8IDEpKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoJ21heFNpemUgbXVzdCBiZSBhIG51bWJlciBncmVhdGVyIHRoYW4gMCcpXG4gICAgfVxuXG4gICAgdGhpcy4jbWF4U2l6ZSA9IG1heFNpemUgPz8gdGhpcy4jbWF4U2l6ZVxuICAgIHRoaXMuI2hhbmRsZXIgPSBoYW5kbGVyXG4gIH1cblxuICBvbkNvbm5lY3QgKGFib3J0KSB7XG4gICAgdGhpcy4jYWJvcnQgPSBhYm9ydFxuXG4gICAgdGhpcy4jaGFuZGxlci5vbkNvbm5lY3QodGhpcy4jY3VzdG9tQWJvcnQuYmluZCh0aGlzKSlcbiAgfVxuXG4gICNjdXN0b21BYm9ydCAocmVhc29uKSB7XG4gICAgdGhpcy4jYWJvcnRlZCA9IHRydWVcbiAgICB0aGlzLiNyZWFzb24gPSByZWFzb25cbiAgfVxuXG4gIC8vIFRPRE86IHdpbGwgcmVxdWlyZSBhZGp1c3RtZW50IGFmdGVyIG5ldyBob29rcyBhcmUgb3V0XG4gIG9uSGVhZGVycyAoc3RhdHVzQ29kZSwgcmF3SGVhZGVycywgcmVzdW1lLCBzdGF0dXNNZXNzYWdlKSB7XG4gICAgY29uc3QgaGVhZGVycyA9IHV0aWwucGFyc2VIZWFkZXJzKHJhd0hlYWRlcnMpXG4gICAgY29uc3QgY29udGVudExlbmd0aCA9IGhlYWRlcnNbJ2NvbnRlbnQtbGVuZ3RoJ11cblxuICAgIGlmIChjb250ZW50TGVuZ3RoICE9IG51bGwgJiYgY29udGVudExlbmd0aCA+IHRoaXMuI21heFNpemUpIHtcbiAgICAgIHRocm93IG5ldyBSZXF1ZXN0QWJvcnRlZEVycm9yKFxuICAgICAgICBgUmVzcG9uc2Ugc2l6ZSAoJHtjb250ZW50TGVuZ3RofSkgbGFyZ2VyIHRoYW4gbWF4U2l6ZSAoJHtcbiAgICAgICAgICB0aGlzLiNtYXhTaXplXG4gICAgICAgIH0pYFxuICAgICAgKVxuICAgIH1cblxuICAgIGlmICh0aGlzLiNhYm9ydGVkKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLiNoYW5kbGVyLm9uSGVhZGVycyhcbiAgICAgIHN0YXR1c0NvZGUsXG4gICAgICByYXdIZWFkZXJzLFxuICAgICAgcmVzdW1lLFxuICAgICAgc3RhdHVzTWVzc2FnZVxuICAgIClcbiAgfVxuXG4gIG9uRXJyb3IgKGVycikge1xuICAgIGlmICh0aGlzLiNkdW1wZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGVyciA9IHRoaXMuI3JlYXNvbiA/PyBlcnJcblxuICAgIHRoaXMuI2hhbmRsZXIub25FcnJvcihlcnIpXG4gIH1cblxuICBvbkRhdGEgKGNodW5rKSB7XG4gICAgdGhpcy4jc2l6ZSA9IHRoaXMuI3NpemUgKyBjaHVuay5sZW5ndGhcblxuICAgIGlmICh0aGlzLiNzaXplID49IHRoaXMuI21heFNpemUpIHtcbiAgICAgIHRoaXMuI2R1bXBlZCA9IHRydWVcblxuICAgICAgaWYgKHRoaXMuI2Fib3J0ZWQpIHtcbiAgICAgICAgdGhpcy4jaGFuZGxlci5vbkVycm9yKHRoaXMuI3JlYXNvbilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuI2hhbmRsZXIub25Db21wbGV0ZShbXSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgb25Db21wbGV0ZSAodHJhaWxlcnMpIHtcbiAgICBpZiAodGhpcy4jZHVtcGVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAodGhpcy4jYWJvcnRlZCkge1xuICAgICAgdGhpcy4jaGFuZGxlci5vbkVycm9yKHRoaXMucmVhc29uKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdGhpcy4jaGFuZGxlci5vbkNvbXBsZXRlKHRyYWlsZXJzKVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUR1bXBJbnRlcmNlcHRvciAoXG4gIHsgbWF4U2l6ZTogZGVmYXVsdE1heFNpemUgfSA9IHtcbiAgICBtYXhTaXplOiAxMDI0ICogMTAyNFxuICB9XG4pIHtcbiAgcmV0dXJuIGRpc3BhdGNoID0+IHtcbiAgICByZXR1cm4gZnVuY3Rpb24gSW50ZXJjZXB0IChvcHRzLCBoYW5kbGVyKSB7XG4gICAgICBjb25zdCB7IGR1bXBNYXhTaXplID0gZGVmYXVsdE1heFNpemUgfSA9XG4gICAgICAgIG9wdHNcblxuICAgICAgY29uc3QgZHVtcEhhbmRsZXIgPSBuZXcgRHVtcEhhbmRsZXIoXG4gICAgICAgIHsgbWF4U2l6ZTogZHVtcE1heFNpemUgfSxcbiAgICAgICAgaGFuZGxlclxuICAgICAgKVxuXG4gICAgICByZXR1cm4gZGlzcGF0Y2gob3B0cywgZHVtcEhhbmRsZXIpXG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlRHVtcEludGVyY2VwdG9yXG4iXSwibmFtZXMiOlsidXRpbCIsInJlcXVpcmUiLCJJbnZhbGlkQXJndW1lbnRFcnJvciIsIlJlcXVlc3RBYm9ydGVkRXJyb3IiLCJEZWNvcmF0b3JIYW5kbGVyIiwiRHVtcEhhbmRsZXIiLCJtYXhTaXplIiwiaGFuZGxlciIsIk51bWJlciIsImlzRmluaXRlIiwib25Db25uZWN0IiwiYWJvcnQiLCJiaW5kIiwicmVhc29uIiwib25IZWFkZXJzIiwic3RhdHVzQ29kZSIsInJhd0hlYWRlcnMiLCJyZXN1bWUiLCJzdGF0dXNNZXNzYWdlIiwiaGVhZGVycyIsInBhcnNlSGVhZGVycyIsImNvbnRlbnRMZW5ndGgiLCJvbkVycm9yIiwiZXJyIiwib25EYXRhIiwiY2h1bmsiLCJsZW5ndGgiLCJvbkNvbXBsZXRlIiwidHJhaWxlcnMiLCJjcmVhdGVEdW1wSW50ZXJjZXB0b3IiLCJkZWZhdWx0TWF4U2l6ZSIsImRpc3BhdGNoIiwiSW50ZXJjZXB0Iiwib3B0cyIsImR1bXBNYXhTaXplIiwiZHVtcEhhbmRsZXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/interceptor/dump.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/interceptor/redirect-interceptor.js":
/*!*********************************************************************!*\
  !*** ./node_modules/undici/lib/interceptor/redirect-interceptor.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst RedirectHandler = __webpack_require__(/*! ../handler/redirect-handler */ \"(ssr)/./node_modules/undici/lib/handler/redirect-handler.js\");\nfunction createRedirectInterceptor({ maxRedirections: defaultMaxRedirections }) {\n    return (dispatch)=>{\n        return function Intercept(opts, handler) {\n            const { maxRedirections = defaultMaxRedirections } = opts;\n            if (!maxRedirections) {\n                return dispatch(opts, handler);\n            }\n            const redirectHandler = new RedirectHandler(dispatch, maxRedirections, opts, handler);\n            opts = {\n                ...opts,\n                maxRedirections: 0\n            }; // Stop sub dispatcher from also redirecting.\n            return dispatch(opts, redirectHandler);\n        };\n    };\n}\nmodule.exports = createRedirectInterceptor;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9pbnRlcmNlcHRvci9yZWRpcmVjdC1pbnRlcmNlcHRvci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU1BLGtCQUFrQkMsbUJBQU9BLENBQUMsZ0dBQTZCO0FBRTdELFNBQVNDLDBCQUEyQixFQUFFQyxpQkFBaUJDLHNCQUFzQixFQUFFO0lBQzdFLE9BQU8sQ0FBQ0M7UUFDTixPQUFPLFNBQVNDLFVBQVdDLElBQUksRUFBRUMsT0FBTztZQUN0QyxNQUFNLEVBQUVMLGtCQUFrQkMsc0JBQXNCLEVBQUUsR0FBR0c7WUFFckQsSUFBSSxDQUFDSixpQkFBaUI7Z0JBQ3BCLE9BQU9FLFNBQVNFLE1BQU1DO1lBQ3hCO1lBRUEsTUFBTUMsa0JBQWtCLElBQUlULGdCQUFnQkssVUFBVUYsaUJBQWlCSSxNQUFNQztZQUM3RUQsT0FBTztnQkFBRSxHQUFHQSxJQUFJO2dCQUFFSixpQkFBaUI7WUFBRSxHQUFFLDZDQUE2QztZQUNwRixPQUFPRSxTQUFTRSxNQUFNRTtRQUN4QjtJQUNGO0FBQ0Y7QUFFQUMsT0FBT0MsT0FBTyxHQUFHVCIsInNvdXJjZXMiOlsiRDpcXEhlbGl4XFxub2RlX21vZHVsZXNcXHVuZGljaVxcbGliXFxpbnRlcmNlcHRvclxccmVkaXJlY3QtaW50ZXJjZXB0b3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IFJlZGlyZWN0SGFuZGxlciA9IHJlcXVpcmUoJy4uL2hhbmRsZXIvcmVkaXJlY3QtaGFuZGxlcicpXG5cbmZ1bmN0aW9uIGNyZWF0ZVJlZGlyZWN0SW50ZXJjZXB0b3IgKHsgbWF4UmVkaXJlY3Rpb25zOiBkZWZhdWx0TWF4UmVkaXJlY3Rpb25zIH0pIHtcbiAgcmV0dXJuIChkaXNwYXRjaCkgPT4ge1xuICAgIHJldHVybiBmdW5jdGlvbiBJbnRlcmNlcHQgKG9wdHMsIGhhbmRsZXIpIHtcbiAgICAgIGNvbnN0IHsgbWF4UmVkaXJlY3Rpb25zID0gZGVmYXVsdE1heFJlZGlyZWN0aW9ucyB9ID0gb3B0c1xuXG4gICAgICBpZiAoIW1heFJlZGlyZWN0aW9ucykge1xuICAgICAgICByZXR1cm4gZGlzcGF0Y2gob3B0cywgaGFuZGxlcilcbiAgICAgIH1cblxuICAgICAgY29uc3QgcmVkaXJlY3RIYW5kbGVyID0gbmV3IFJlZGlyZWN0SGFuZGxlcihkaXNwYXRjaCwgbWF4UmVkaXJlY3Rpb25zLCBvcHRzLCBoYW5kbGVyKVxuICAgICAgb3B0cyA9IHsgLi4ub3B0cywgbWF4UmVkaXJlY3Rpb25zOiAwIH0gLy8gU3RvcCBzdWIgZGlzcGF0Y2hlciBmcm9tIGFsc28gcmVkaXJlY3RpbmcuXG4gICAgICByZXR1cm4gZGlzcGF0Y2gob3B0cywgcmVkaXJlY3RIYW5kbGVyKVxuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZVJlZGlyZWN0SW50ZXJjZXB0b3JcbiJdLCJuYW1lcyI6WyJSZWRpcmVjdEhhbmRsZXIiLCJyZXF1aXJlIiwiY3JlYXRlUmVkaXJlY3RJbnRlcmNlcHRvciIsIm1heFJlZGlyZWN0aW9ucyIsImRlZmF1bHRNYXhSZWRpcmVjdGlvbnMiLCJkaXNwYXRjaCIsIkludGVyY2VwdCIsIm9wdHMiLCJoYW5kbGVyIiwicmVkaXJlY3RIYW5kbGVyIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/interceptor/redirect-interceptor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/interceptor/redirect.js":
/*!*********************************************************!*\
  !*** ./node_modules/undici/lib/interceptor/redirect.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst RedirectHandler = __webpack_require__(/*! ../handler/redirect-handler */ \"(ssr)/./node_modules/undici/lib/handler/redirect-handler.js\");\nmodule.exports = (opts)=>{\n    const globalMaxRedirections = opts?.maxRedirections;\n    return (dispatch)=>{\n        return function redirectInterceptor(opts, handler) {\n            const { maxRedirections = globalMaxRedirections, ...baseOpts } = opts;\n            if (!maxRedirections) {\n                return dispatch(opts, handler);\n            }\n            const redirectHandler = new RedirectHandler(dispatch, maxRedirections, opts, handler);\n            return dispatch(baseOpts, redirectHandler);\n        };\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9pbnRlcmNlcHRvci9yZWRpcmVjdC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBLE1BQU1BLGtCQUFrQkMsbUJBQU9BLENBQUMsZ0dBQTZCO0FBRTdEQyxPQUFPQyxPQUFPLEdBQUdDLENBQUFBO0lBQ2YsTUFBTUMsd0JBQXdCRCxNQUFNRTtJQUNwQyxPQUFPQyxDQUFBQTtRQUNMLE9BQU8sU0FBU0Msb0JBQXFCSixJQUFJLEVBQUVLLE9BQU87WUFDaEQsTUFBTSxFQUFFSCxrQkFBa0JELHFCQUFxQixFQUFFLEdBQUdLLFVBQVUsR0FBR047WUFFakUsSUFBSSxDQUFDRSxpQkFBaUI7Z0JBQ3BCLE9BQU9DLFNBQVNILE1BQU1LO1lBQ3hCO1lBRUEsTUFBTUUsa0JBQWtCLElBQUlYLGdCQUMxQk8sVUFDQUQsaUJBQ0FGLE1BQ0FLO1lBR0YsT0FBT0YsU0FBU0csVUFBVUM7UUFDNUI7SUFDRjtBQUNGIiwic291cmNlcyI6WyJEOlxcSGVsaXhcXG5vZGVfbW9kdWxlc1xcdW5kaWNpXFxsaWJcXGludGVyY2VwdG9yXFxyZWRpcmVjdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcbmNvbnN0IFJlZGlyZWN0SGFuZGxlciA9IHJlcXVpcmUoJy4uL2hhbmRsZXIvcmVkaXJlY3QtaGFuZGxlcicpXG5cbm1vZHVsZS5leHBvcnRzID0gb3B0cyA9PiB7XG4gIGNvbnN0IGdsb2JhbE1heFJlZGlyZWN0aW9ucyA9IG9wdHM/Lm1heFJlZGlyZWN0aW9uc1xuICByZXR1cm4gZGlzcGF0Y2ggPT4ge1xuICAgIHJldHVybiBmdW5jdGlvbiByZWRpcmVjdEludGVyY2VwdG9yIChvcHRzLCBoYW5kbGVyKSB7XG4gICAgICBjb25zdCB7IG1heFJlZGlyZWN0aW9ucyA9IGdsb2JhbE1heFJlZGlyZWN0aW9ucywgLi4uYmFzZU9wdHMgfSA9IG9wdHNcblxuICAgICAgaWYgKCFtYXhSZWRpcmVjdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGRpc3BhdGNoKG9wdHMsIGhhbmRsZXIpXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHJlZGlyZWN0SGFuZGxlciA9IG5ldyBSZWRpcmVjdEhhbmRsZXIoXG4gICAgICAgIGRpc3BhdGNoLFxuICAgICAgICBtYXhSZWRpcmVjdGlvbnMsXG4gICAgICAgIG9wdHMsXG4gICAgICAgIGhhbmRsZXJcbiAgICAgIClcblxuICAgICAgcmV0dXJuIGRpc3BhdGNoKGJhc2VPcHRzLCByZWRpcmVjdEhhbmRsZXIpXG4gICAgfVxuICB9XG59XG4iXSwibmFtZXMiOlsiUmVkaXJlY3RIYW5kbGVyIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJvcHRzIiwiZ2xvYmFsTWF4UmVkaXJlY3Rpb25zIiwibWF4UmVkaXJlY3Rpb25zIiwiZGlzcGF0Y2giLCJyZWRpcmVjdEludGVyY2VwdG9yIiwiaGFuZGxlciIsImJhc2VPcHRzIiwicmVkaXJlY3RIYW5kbGVyIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/interceptor/redirect.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/interceptor/retry.js":
/*!******************************************************!*\
  !*** ./node_modules/undici/lib/interceptor/retry.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst RetryHandler = __webpack_require__(/*! ../handler/retry-handler */ \"(ssr)/./node_modules/undici/lib/handler/retry-handler.js\");\nmodule.exports = (globalOpts)=>{\n    return (dispatch)=>{\n        return function retryInterceptor(opts, handler) {\n            return dispatch(opts, new RetryHandler({\n                ...opts,\n                retryOptions: {\n                    ...globalOpts,\n                    ...opts.retryOptions\n                }\n            }, {\n                handler,\n                dispatch\n            }));\n        };\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9pbnRlcmNlcHRvci9yZXRyeS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBLE1BQU1BLGVBQWVDLG1CQUFPQSxDQUFDLDBGQUEwQjtBQUV2REMsT0FBT0MsT0FBTyxHQUFHQyxDQUFBQTtJQUNmLE9BQU9DLENBQUFBO1FBQ0wsT0FBTyxTQUFTQyxpQkFBa0JDLElBQUksRUFBRUMsT0FBTztZQUM3QyxPQUFPSCxTQUNMRSxNQUNBLElBQUlQLGFBQ0Y7Z0JBQUUsR0FBR08sSUFBSTtnQkFBRUUsY0FBYztvQkFBRSxHQUFHTCxVQUFVO29CQUFFLEdBQUdHLEtBQUtFLFlBQVk7Z0JBQUM7WUFBRSxHQUNqRTtnQkFDRUQ7Z0JBQ0FIO1lBQ0Y7UUFHTjtJQUNGO0FBQ0YiLCJzb3VyY2VzIjpbIkQ6XFxIZWxpeFxcbm9kZV9tb2R1bGVzXFx1bmRpY2lcXGxpYlxcaW50ZXJjZXB0b3JcXHJldHJ5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuY29uc3QgUmV0cnlIYW5kbGVyID0gcmVxdWlyZSgnLi4vaGFuZGxlci9yZXRyeS1oYW5kbGVyJylcblxubW9kdWxlLmV4cG9ydHMgPSBnbG9iYWxPcHRzID0+IHtcbiAgcmV0dXJuIGRpc3BhdGNoID0+IHtcbiAgICByZXR1cm4gZnVuY3Rpb24gcmV0cnlJbnRlcmNlcHRvciAob3B0cywgaGFuZGxlcikge1xuICAgICAgcmV0dXJuIGRpc3BhdGNoKFxuICAgICAgICBvcHRzLFxuICAgICAgICBuZXcgUmV0cnlIYW5kbGVyKFxuICAgICAgICAgIHsgLi4ub3B0cywgcmV0cnlPcHRpb25zOiB7IC4uLmdsb2JhbE9wdHMsIC4uLm9wdHMucmV0cnlPcHRpb25zIH0gfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBoYW5kbGVyLFxuICAgICAgICAgICAgZGlzcGF0Y2hcbiAgICAgICAgICB9XG4gICAgICAgIClcbiAgICAgIClcbiAgICB9XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJSZXRyeUhhbmRsZXIiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImdsb2JhbE9wdHMiLCJkaXNwYXRjaCIsInJldHJ5SW50ZXJjZXB0b3IiLCJvcHRzIiwiaGFuZGxlciIsInJldHJ5T3B0aW9ucyJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/interceptor/retry.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/llhttp/constants.js":
/*!*****************************************************!*\
  !*** ./node_modules/undici/lib/llhttp/constants.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.SPECIAL_HEADERS = exports.HEADER_STATE = exports.MINOR = exports.MAJOR = exports.CONNECTION_TOKEN_CHARS = exports.HEADER_CHARS = exports.TOKEN = exports.STRICT_TOKEN = exports.HEX = exports.URL_CHAR = exports.STRICT_URL_CHAR = exports.USERINFO_CHARS = exports.MARK = exports.ALPHANUM = exports.NUM = exports.HEX_MAP = exports.NUM_MAP = exports.ALPHA = exports.FINISH = exports.H_METHOD_MAP = exports.METHOD_MAP = exports.METHODS_RTSP = exports.METHODS_ICE = exports.METHODS_HTTP = exports.METHODS = exports.LENIENT_FLAGS = exports.FLAGS = exports.TYPE = exports.ERROR = void 0;\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/undici/lib/llhttp/utils.js\");\n// C headers\nvar ERROR;\n(function(ERROR) {\n    ERROR[ERROR[\"OK\"] = 0] = \"OK\";\n    ERROR[ERROR[\"INTERNAL\"] = 1] = \"INTERNAL\";\n    ERROR[ERROR[\"STRICT\"] = 2] = \"STRICT\";\n    ERROR[ERROR[\"LF_EXPECTED\"] = 3] = \"LF_EXPECTED\";\n    ERROR[ERROR[\"UNEXPECTED_CONTENT_LENGTH\"] = 4] = \"UNEXPECTED_CONTENT_LENGTH\";\n    ERROR[ERROR[\"CLOSED_CONNECTION\"] = 5] = \"CLOSED_CONNECTION\";\n    ERROR[ERROR[\"INVALID_METHOD\"] = 6] = \"INVALID_METHOD\";\n    ERROR[ERROR[\"INVALID_URL\"] = 7] = \"INVALID_URL\";\n    ERROR[ERROR[\"INVALID_CONSTANT\"] = 8] = \"INVALID_CONSTANT\";\n    ERROR[ERROR[\"INVALID_VERSION\"] = 9] = \"INVALID_VERSION\";\n    ERROR[ERROR[\"INVALID_HEADER_TOKEN\"] = 10] = \"INVALID_HEADER_TOKEN\";\n    ERROR[ERROR[\"INVALID_CONTENT_LENGTH\"] = 11] = \"INVALID_CONTENT_LENGTH\";\n    ERROR[ERROR[\"INVALID_CHUNK_SIZE\"] = 12] = \"INVALID_CHUNK_SIZE\";\n    ERROR[ERROR[\"INVALID_STATUS\"] = 13] = \"INVALID_STATUS\";\n    ERROR[ERROR[\"INVALID_EOF_STATE\"] = 14] = \"INVALID_EOF_STATE\";\n    ERROR[ERROR[\"INVALID_TRANSFER_ENCODING\"] = 15] = \"INVALID_TRANSFER_ENCODING\";\n    ERROR[ERROR[\"CB_MESSAGE_BEGIN\"] = 16] = \"CB_MESSAGE_BEGIN\";\n    ERROR[ERROR[\"CB_HEADERS_COMPLETE\"] = 17] = \"CB_HEADERS_COMPLETE\";\n    ERROR[ERROR[\"CB_MESSAGE_COMPLETE\"] = 18] = \"CB_MESSAGE_COMPLETE\";\n    ERROR[ERROR[\"CB_CHUNK_HEADER\"] = 19] = \"CB_CHUNK_HEADER\";\n    ERROR[ERROR[\"CB_CHUNK_COMPLETE\"] = 20] = \"CB_CHUNK_COMPLETE\";\n    ERROR[ERROR[\"PAUSED\"] = 21] = \"PAUSED\";\n    ERROR[ERROR[\"PAUSED_UPGRADE\"] = 22] = \"PAUSED_UPGRADE\";\n    ERROR[ERROR[\"PAUSED_H2_UPGRADE\"] = 23] = \"PAUSED_H2_UPGRADE\";\n    ERROR[ERROR[\"USER\"] = 24] = \"USER\";\n})(ERROR = exports.ERROR || (exports.ERROR = {}));\nvar TYPE;\n(function(TYPE) {\n    TYPE[TYPE[\"BOTH\"] = 0] = \"BOTH\";\n    TYPE[TYPE[\"REQUEST\"] = 1] = \"REQUEST\";\n    TYPE[TYPE[\"RESPONSE\"] = 2] = \"RESPONSE\";\n})(TYPE = exports.TYPE || (exports.TYPE = {}));\nvar FLAGS;\n(function(FLAGS) {\n    FLAGS[FLAGS[\"CONNECTION_KEEP_ALIVE\"] = 1] = \"CONNECTION_KEEP_ALIVE\";\n    FLAGS[FLAGS[\"CONNECTION_CLOSE\"] = 2] = \"CONNECTION_CLOSE\";\n    FLAGS[FLAGS[\"CONNECTION_UPGRADE\"] = 4] = \"CONNECTION_UPGRADE\";\n    FLAGS[FLAGS[\"CHUNKED\"] = 8] = \"CHUNKED\";\n    FLAGS[FLAGS[\"UPGRADE\"] = 16] = \"UPGRADE\";\n    FLAGS[FLAGS[\"CONTENT_LENGTH\"] = 32] = \"CONTENT_LENGTH\";\n    FLAGS[FLAGS[\"SKIPBODY\"] = 64] = \"SKIPBODY\";\n    FLAGS[FLAGS[\"TRAILING\"] = 128] = \"TRAILING\";\n    // 1 << 8 is unused\n    FLAGS[FLAGS[\"TRANSFER_ENCODING\"] = 512] = \"TRANSFER_ENCODING\";\n})(FLAGS = exports.FLAGS || (exports.FLAGS = {}));\nvar LENIENT_FLAGS;\n(function(LENIENT_FLAGS) {\n    LENIENT_FLAGS[LENIENT_FLAGS[\"HEADERS\"] = 1] = \"HEADERS\";\n    LENIENT_FLAGS[LENIENT_FLAGS[\"CHUNKED_LENGTH\"] = 2] = \"CHUNKED_LENGTH\";\n    LENIENT_FLAGS[LENIENT_FLAGS[\"KEEP_ALIVE\"] = 4] = \"KEEP_ALIVE\";\n})(LENIENT_FLAGS = exports.LENIENT_FLAGS || (exports.LENIENT_FLAGS = {}));\nvar METHODS;\n(function(METHODS) {\n    METHODS[METHODS[\"DELETE\"] = 0] = \"DELETE\";\n    METHODS[METHODS[\"GET\"] = 1] = \"GET\";\n    METHODS[METHODS[\"HEAD\"] = 2] = \"HEAD\";\n    METHODS[METHODS[\"POST\"] = 3] = \"POST\";\n    METHODS[METHODS[\"PUT\"] = 4] = \"PUT\";\n    /* pathological */ METHODS[METHODS[\"CONNECT\"] = 5] = \"CONNECT\";\n    METHODS[METHODS[\"OPTIONS\"] = 6] = \"OPTIONS\";\n    METHODS[METHODS[\"TRACE\"] = 7] = \"TRACE\";\n    /* WebDAV */ METHODS[METHODS[\"COPY\"] = 8] = \"COPY\";\n    METHODS[METHODS[\"LOCK\"] = 9] = \"LOCK\";\n    METHODS[METHODS[\"MKCOL\"] = 10] = \"MKCOL\";\n    METHODS[METHODS[\"MOVE\"] = 11] = \"MOVE\";\n    METHODS[METHODS[\"PROPFIND\"] = 12] = \"PROPFIND\";\n    METHODS[METHODS[\"PROPPATCH\"] = 13] = \"PROPPATCH\";\n    METHODS[METHODS[\"SEARCH\"] = 14] = \"SEARCH\";\n    METHODS[METHODS[\"UNLOCK\"] = 15] = \"UNLOCK\";\n    METHODS[METHODS[\"BIND\"] = 16] = \"BIND\";\n    METHODS[METHODS[\"REBIND\"] = 17] = \"REBIND\";\n    METHODS[METHODS[\"UNBIND\"] = 18] = \"UNBIND\";\n    METHODS[METHODS[\"ACL\"] = 19] = \"ACL\";\n    /* subversion */ METHODS[METHODS[\"REPORT\"] = 20] = \"REPORT\";\n    METHODS[METHODS[\"MKACTIVITY\"] = 21] = \"MKACTIVITY\";\n    METHODS[METHODS[\"CHECKOUT\"] = 22] = \"CHECKOUT\";\n    METHODS[METHODS[\"MERGE\"] = 23] = \"MERGE\";\n    /* upnp */ METHODS[METHODS[\"M-SEARCH\"] = 24] = \"M-SEARCH\";\n    METHODS[METHODS[\"NOTIFY\"] = 25] = \"NOTIFY\";\n    METHODS[METHODS[\"SUBSCRIBE\"] = 26] = \"SUBSCRIBE\";\n    METHODS[METHODS[\"UNSUBSCRIBE\"] = 27] = \"UNSUBSCRIBE\";\n    /* RFC-5789 */ METHODS[METHODS[\"PATCH\"] = 28] = \"PATCH\";\n    METHODS[METHODS[\"PURGE\"] = 29] = \"PURGE\";\n    /* CalDAV */ METHODS[METHODS[\"MKCALENDAR\"] = 30] = \"MKCALENDAR\";\n    /* RFC-2068, section 19.6.1.2 */ METHODS[METHODS[\"LINK\"] = 31] = \"LINK\";\n    METHODS[METHODS[\"UNLINK\"] = 32] = \"UNLINK\";\n    /* icecast */ METHODS[METHODS[\"SOURCE\"] = 33] = \"SOURCE\";\n    /* RFC-7540, section 11.6 */ METHODS[METHODS[\"PRI\"] = 34] = \"PRI\";\n    /* RFC-2326 RTSP */ METHODS[METHODS[\"DESCRIBE\"] = 35] = \"DESCRIBE\";\n    METHODS[METHODS[\"ANNOUNCE\"] = 36] = \"ANNOUNCE\";\n    METHODS[METHODS[\"SETUP\"] = 37] = \"SETUP\";\n    METHODS[METHODS[\"PLAY\"] = 38] = \"PLAY\";\n    METHODS[METHODS[\"PAUSE\"] = 39] = \"PAUSE\";\n    METHODS[METHODS[\"TEARDOWN\"] = 40] = \"TEARDOWN\";\n    METHODS[METHODS[\"GET_PARAMETER\"] = 41] = \"GET_PARAMETER\";\n    METHODS[METHODS[\"SET_PARAMETER\"] = 42] = \"SET_PARAMETER\";\n    METHODS[METHODS[\"REDIRECT\"] = 43] = \"REDIRECT\";\n    METHODS[METHODS[\"RECORD\"] = 44] = \"RECORD\";\n    /* RAOP */ METHODS[METHODS[\"FLUSH\"] = 45] = \"FLUSH\";\n})(METHODS = exports.METHODS || (exports.METHODS = {}));\nexports.METHODS_HTTP = [\n    METHODS.DELETE,\n    METHODS.GET,\n    METHODS.HEAD,\n    METHODS.POST,\n    METHODS.PUT,\n    METHODS.CONNECT,\n    METHODS.OPTIONS,\n    METHODS.TRACE,\n    METHODS.COPY,\n    METHODS.LOCK,\n    METHODS.MKCOL,\n    METHODS.MOVE,\n    METHODS.PROPFIND,\n    METHODS.PROPPATCH,\n    METHODS.SEARCH,\n    METHODS.UNLOCK,\n    METHODS.BIND,\n    METHODS.REBIND,\n    METHODS.UNBIND,\n    METHODS.ACL,\n    METHODS.REPORT,\n    METHODS.MKACTIVITY,\n    METHODS.CHECKOUT,\n    METHODS.MERGE,\n    METHODS['M-SEARCH'],\n    METHODS.NOTIFY,\n    METHODS.SUBSCRIBE,\n    METHODS.UNSUBSCRIBE,\n    METHODS.PATCH,\n    METHODS.PURGE,\n    METHODS.MKCALENDAR,\n    METHODS.LINK,\n    METHODS.UNLINK,\n    METHODS.PRI,\n    // TODO(indutny): should we allow it with HTTP?\n    METHODS.SOURCE\n];\nexports.METHODS_ICE = [\n    METHODS.SOURCE\n];\nexports.METHODS_RTSP = [\n    METHODS.OPTIONS,\n    METHODS.DESCRIBE,\n    METHODS.ANNOUNCE,\n    METHODS.SETUP,\n    METHODS.PLAY,\n    METHODS.PAUSE,\n    METHODS.TEARDOWN,\n    METHODS.GET_PARAMETER,\n    METHODS.SET_PARAMETER,\n    METHODS.REDIRECT,\n    METHODS.RECORD,\n    METHODS.FLUSH,\n    // For AirPlay\n    METHODS.GET,\n    METHODS.POST\n];\nexports.METHOD_MAP = utils_1.enumToMap(METHODS);\nexports.H_METHOD_MAP = {};\nObject.keys(exports.METHOD_MAP).forEach((key)=>{\n    if (/^H/.test(key)) {\n        exports.H_METHOD_MAP[key] = exports.METHOD_MAP[key];\n    }\n});\nvar FINISH;\n(function(FINISH) {\n    FINISH[FINISH[\"SAFE\"] = 0] = \"SAFE\";\n    FINISH[FINISH[\"SAFE_WITH_CB\"] = 1] = \"SAFE_WITH_CB\";\n    FINISH[FINISH[\"UNSAFE\"] = 2] = \"UNSAFE\";\n})(FINISH = exports.FINISH || (exports.FINISH = {}));\nexports.ALPHA = [];\nfor(let i = 'A'.charCodeAt(0); i <= 'Z'.charCodeAt(0); i++){\n    // Upper case\n    exports.ALPHA.push(String.fromCharCode(i));\n    // Lower case\n    exports.ALPHA.push(String.fromCharCode(i + 0x20));\n}\nexports.NUM_MAP = {\n    0: 0,\n    1: 1,\n    2: 2,\n    3: 3,\n    4: 4,\n    5: 5,\n    6: 6,\n    7: 7,\n    8: 8,\n    9: 9\n};\nexports.HEX_MAP = {\n    0: 0,\n    1: 1,\n    2: 2,\n    3: 3,\n    4: 4,\n    5: 5,\n    6: 6,\n    7: 7,\n    8: 8,\n    9: 9,\n    A: 0XA,\n    B: 0XB,\n    C: 0XC,\n    D: 0XD,\n    E: 0XE,\n    F: 0XF,\n    a: 0xa,\n    b: 0xb,\n    c: 0xc,\n    d: 0xd,\n    e: 0xe,\n    f: 0xf\n};\nexports.NUM = [\n    '0',\n    '1',\n    '2',\n    '3',\n    '4',\n    '5',\n    '6',\n    '7',\n    '8',\n    '9'\n];\nexports.ALPHANUM = exports.ALPHA.concat(exports.NUM);\nexports.MARK = [\n    '-',\n    '_',\n    '.',\n    '!',\n    '~',\n    '*',\n    '\\'',\n    '(',\n    ')'\n];\nexports.USERINFO_CHARS = exports.ALPHANUM.concat(exports.MARK).concat([\n    '%',\n    ';',\n    ':',\n    '&',\n    '=',\n    '+',\n    '$',\n    ','\n]);\n// TODO(indutny): use RFC\nexports.STRICT_URL_CHAR = [\n    '!',\n    '\"',\n    '$',\n    '%',\n    '&',\n    '\\'',\n    '(',\n    ')',\n    '*',\n    '+',\n    ',',\n    '-',\n    '.',\n    '/',\n    ':',\n    ';',\n    '<',\n    '=',\n    '>',\n    '@',\n    '[',\n    '\\\\',\n    ']',\n    '^',\n    '_',\n    '`',\n    '{',\n    '|',\n    '}',\n    '~'\n].concat(exports.ALPHANUM);\nexports.URL_CHAR = exports.STRICT_URL_CHAR.concat([\n    '\\t',\n    '\\f'\n]);\n// All characters with 0x80 bit set to 1\nfor(let i = 0x80; i <= 0xff; i++){\n    exports.URL_CHAR.push(i);\n}\nexports.HEX = exports.NUM.concat([\n    'a',\n    'b',\n    'c',\n    'd',\n    'e',\n    'f',\n    'A',\n    'B',\n    'C',\n    'D',\n    'E',\n    'F'\n]);\n/* Tokens as defined by rfc 2616. Also lowercases them.\n *        token       = 1*<any CHAR except CTLs or separators>\n *     separators     = \"(\" | \")\" | \"<\" | \">\" | \"@\"\n *                    | \",\" | \";\" | \":\" | \"\\\" | <\">\n *                    | \"/\" | \"[\" | \"]\" | \"?\" | \"=\"\n *                    | \"{\" | \"}\" | SP | HT\n */ exports.STRICT_TOKEN = [\n    '!',\n    '#',\n    '$',\n    '%',\n    '&',\n    '\\'',\n    '*',\n    '+',\n    '-',\n    '.',\n    '^',\n    '_',\n    '`',\n    '|',\n    '~'\n].concat(exports.ALPHANUM);\nexports.TOKEN = exports.STRICT_TOKEN.concat([\n    ' '\n]);\n/*\n * Verify that a char is a valid visible (printable) US-ASCII\n * character or %x80-FF\n */ exports.HEADER_CHARS = [\n    '\\t'\n];\nfor(let i = 32; i <= 255; i++){\n    if (i !== 127) {\n        exports.HEADER_CHARS.push(i);\n    }\n}\n// ',' = \\x44\nexports.CONNECTION_TOKEN_CHARS = exports.HEADER_CHARS.filter((c)=>c !== 44);\nexports.MAJOR = exports.NUM_MAP;\nexports.MINOR = exports.MAJOR;\nvar HEADER_STATE;\n(function(HEADER_STATE) {\n    HEADER_STATE[HEADER_STATE[\"GENERAL\"] = 0] = \"GENERAL\";\n    HEADER_STATE[HEADER_STATE[\"CONNECTION\"] = 1] = \"CONNECTION\";\n    HEADER_STATE[HEADER_STATE[\"CONTENT_LENGTH\"] = 2] = \"CONTENT_LENGTH\";\n    HEADER_STATE[HEADER_STATE[\"TRANSFER_ENCODING\"] = 3] = \"TRANSFER_ENCODING\";\n    HEADER_STATE[HEADER_STATE[\"UPGRADE\"] = 4] = \"UPGRADE\";\n    HEADER_STATE[HEADER_STATE[\"CONNECTION_KEEP_ALIVE\"] = 5] = \"CONNECTION_KEEP_ALIVE\";\n    HEADER_STATE[HEADER_STATE[\"CONNECTION_CLOSE\"] = 6] = \"CONNECTION_CLOSE\";\n    HEADER_STATE[HEADER_STATE[\"CONNECTION_UPGRADE\"] = 7] = \"CONNECTION_UPGRADE\";\n    HEADER_STATE[HEADER_STATE[\"TRANSFER_ENCODING_CHUNKED\"] = 8] = \"TRANSFER_ENCODING_CHUNKED\";\n})(HEADER_STATE = exports.HEADER_STATE || (exports.HEADER_STATE = {}));\nexports.SPECIAL_HEADERS = {\n    'connection': HEADER_STATE.CONNECTION,\n    'content-length': HEADER_STATE.CONTENT_LENGTH,\n    'proxy-connection': HEADER_STATE.CONNECTION,\n    'transfer-encoding': HEADER_STATE.TRANSFER_ENCODING,\n    'upgrade': HEADER_STATE.UPGRADE\n}; //# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/llhttp/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/llhttp/llhttp-wasm.js":
/*!*******************************************************!*\
  !*** ./node_modules/undici/lib/llhttp/llhttp-wasm.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { Buffer } = __webpack_require__(/*! node:buffer */ \"node:buffer\");\nmodule.exports = Buffer.from('', 'base64');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9sbGh0dHAvbGxodHRwLXdhc20uanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNLEVBQUVBLE1BQU0sRUFBRSxHQUFHQyxtQkFBT0EsQ0FBQyxnQ0FBYTtBQUV4Q0MsT0FBT0MsT0FBTyxHQUFHSCxPQUFPSSxJQUFJLENBQUMsd3orREFBd3orRCIsInNvdXJjZXMiOlsiRDpcXEhlbGl4XFxub2RlX21vZHVsZXNcXHVuZGljaVxcbGliXFxsbGh0dHBcXGxsaHR0cC13YXNtLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jb25zdCB7IEJ1ZmZlciB9ID0gcmVxdWlyZSgnbm9kZTpidWZmZXInKVxuXG5tb2R1bGUuZXhwb3J0cyA9IEJ1ZmZlci5mcm9tKCdBR0Z6YlFFQUFBQUJKd2RnQVg4QmYyQURmMzkvQVg5Z0FYOEFZQUovZndCZ0JIOS9mMzhCZjJBQUFHQURmMzkvQUFMTEFRZ0RaVzUyR0hkaGMyMWZiMjVmYUdWaFpHVnljMTlqYjIxd2JHVjBaUUFFQTJWdWRoVjNZWE50WDI5dVgyMWxjM05oWjJWZlltVm5hVzRBQUFObGJuWUxkMkZ6YlY5dmJsOTFjbXdBQVFObGJuWU9kMkZ6YlY5dmJsOXpkR0YwZFhNQUFRTmxibllVZDJGemJWOXZibDlvWldGa1pYSmZabWxsYkdRQUFRTmxibllVZDJGemJWOXZibDlvWldGa1pYSmZkbUZzZFdVQUFRTmxibllNZDJGemJWOXZibDlpYjJSNUFBRURaVzUyR0hkaGMyMWZiMjVmYldWemMyRm5aVjlqYjIxd2JHVjBaUUFBQXkwc0JRWUFBQUlBQUFBQUFBQUNBUUlBQWdJQ0FBQURBQUFBQUFNREF3TUJBUUVCQVFFQkFRRUFBQUlBQUFBRUJRRndBUklTQlFNQkFBSUdDQUYvQVVHQTFBUUxCOUVGSWdadFpXMXZjbmtDQUF0ZmFXNXBkR2xoYkdsNlpRQUlHVjlmYVc1a2FYSmxZM1JmWm5WdVkzUnBiMjVmZEdGaWJHVUJBQXRzYkdoMGRIQmZhVzVwZEFBSkdHeHNhSFIwY0Y5emFHOTFiR1JmYTJWbGNGOWhiR2wyWlFBdkRHeHNhSFIwY0Y5aGJHeHZZd0FMQm0xaGJHeHZZd0F4QzJ4c2FIUjBjRjltY21WbEFBd0VabkpsWlFBTUQyeHNhSFIwY0Y5blpYUmZkSGx3WlFBTkZXeHNhSFIwY0Y5blpYUmZhSFIwY0Y5dFlXcHZjZ0FPRld4c2FIUjBjRjluWlhSZmFIUjBjRjl0YVc1dmNnQVBFV3hzYUhSMGNGOW5aWFJmYldWMGFHOWtBQkFXYkd4b2RIUndYMmRsZEY5emRHRjBkWE5mWTI5a1pRQVJFbXhzYUhSMGNGOW5aWFJmZFhCbmNtRmtaUUFTREd4c2FIUjBjRjl5WlhObGRBQVREbXhzYUhSMGNGOWxlR1ZqZFhSbEFCUVViR3hvZEhSd1gzTmxkSFJwYm1kelgybHVhWFFBRlExc2JHaDBkSEJmWm1sdWFYTm9BQllNYkd4b2RIUndYM0JoZFhObEFCY05iR3hvZEhSd1gzSmxjM1Z0WlFBWUcyeHNhSFIwY0Y5eVpYTjFiV1ZmWVdaMFpYSmZkWEJuY21Ga1pRQVpFR3hzYUhSMGNGOW5aWFJmWlhKeWJtOEFHaGRzYkdoMGRIQmZaMlYwWDJWeWNtOXlYM0psWVhOdmJnQWJGMnhzYUhSMGNGOXpaWFJmWlhKeWIzSmZjbVZoYzI5dUFCd1ViR3hvZEhSd1gyZGxkRjlsY25KdmNsOXdiM01BSFJGc2JHaDBkSEJmWlhKeWJtOWZibUZ0WlFBZUVteHNhSFIwY0Y5dFpYUm9iMlJmYm1GdFpRQWZFbXhzYUhSMGNGOXpkR0YwZFhOZmJtRnRaUUFnR214c2FIUjBjRjl6WlhSZmJHVnVhV1Z1ZEY5b1pXRmtaWEp6QUNFaGJHeG9kSFJ3WDNObGRGOXNaVzVwWlc1MFgyTm9kVzVyWldSZmJHVnVaM1JvQUNJZGJHeG9kSFJ3WDNObGRGOXNaVzVwWlc1MFgydGxaWEJmWVd4cGRtVUFJeVJzYkdoMGRIQmZjMlYwWDJ4bGJtbGxiblJmZEhKaGJuTm1aWEpmWlc1amIyUnBibWNBSkJoc2JHaDBkSEJmYldWemMyRm5aVjl1WldWa2MxOWxiMllBTGdrWEFRQkJBUXNSQVFJREJBVUtCZ2NyTFN3cUtTZ2xKeVlLMDdNQ0xCWUFRWWpRQUNnQ0FBUkFBQXRCaU5BQVFRRTJBZ0FMRkFBZ0FCQXdJQUFnQWpZQ09DQUFJQUU2QUNnTEZBQWdBQ0FBTHdFeUlBQXRBQzRnQUJBdkVBQUxIZ0VCZjBIQUFCQXlJZ0VRTUNBQlFZQUlOZ0k0SUFFZ0FEb0FLQ0FCQzQ4TUFRZC9Ba0FnQUVVTkFDQUFRUWhySWdFZ0FFRUVheWdDQUNJQVFYaHhJZ1JxSVFVQ1FDQUFRUUZ4RFFBZ0FFRURjVVVOQVNBQklBRW9BZ0FpQUdzaUFVR2MwQUFvQWdCSkRRRWdBQ0FFYWlFRUFrQUNRRUdnMEFBb0FnQWdBVWNFUUNBQVFmOEJUUVJBSUFCQkEzWWhBeUFCS0FJSUlnQWdBU2dDRENJQ1JnUkFRWXpRQUVHTTBBQW9BZ0JCZmlBRGQzRTJBZ0FNQlFzZ0FpQUFOZ0lJSUFBZ0FqWUNEQXdFQ3lBQktBSVlJUVlnQVNBQktBSU1JZ0JIQkVBZ0FDQUJLQUlJSWdJMkFnZ2dBaUFBTmdJTURBTUxJQUZCRkdvaUF5Z0NBQ0lDUlFSQUlBRW9BaEFpQWtVTkFpQUJRUkJxSVFNTEEwQWdBeUVISUFJaUFFRVVhaUlES0FJQUlnSU5BQ0FBUVJCcUlRTWdBQ2dDRUNJQ0RRQUxJQWRCQURZQ0FBd0NDeUFGS0FJRUlnQkJBM0ZCQTBjTkFpQUZJQUJCZm5FMkFnUkJsTkFBSUFRMkFnQWdCU0FFTmdJQUlBRWdCRUVCY2pZQ0JBd0RDMEVBSVFBTElBWkZEUUFDUUNBQktBSWNJZ0pCQW5SQnZOSUFhaUlES0FJQUlBRkdCRUFnQXlBQU5nSUFJQUFOQVVHUTBBQkJrTkFBS0FJQVFYNGdBbmR4TmdJQURBSUxJQVpCRUVFVUlBWW9BaEFnQVVZYmFpQUFOZ0lBSUFCRkRRRUxJQUFnQmpZQ0dDQUJLQUlRSWdJRVFDQUFJQUkyQWhBZ0FpQUFOZ0lZQ3lBQlFSUnFLQUlBSWdKRkRRQWdBRUVVYWlBQ05nSUFJQUlnQURZQ0dBc2dBU0FGVHcwQUlBVW9BZ1FpQUVFQmNVVU5BQUpBQWtBQ1FBSkFJQUJCQW5GRkJFQkJwTkFBS0FJQUlBVkdCRUJCcE5BQUlBRTJBZ0JCbU5BQVFaalFBQ2dDQUNBRWFpSUFOZ0lBSUFFZ0FFRUJjallDQkNBQlFhRFFBQ2dDQUVjTkJrR1UwQUJCQURZQ0FFR2cwQUJCQURZQ0FBd0dDMEdnMEFBb0FnQWdCVVlFUUVHZzBBQWdBVFlDQUVHVTBBQkJsTkFBS0FJQUlBUnFJZ0EyQWdBZ0FTQUFRUUZ5TmdJRUlBQWdBV29nQURZQ0FBd0dDeUFBUVhoeElBUnFJUVFnQUVIL0FVMEVRQ0FBUVFOMklRTWdCU2dDQ0NJQUlBVW9BZ3dpQWtZRVFFR00wQUJCak5BQUtBSUFRWDRnQTNkeE5nSUFEQVVMSUFJZ0FEWUNDQ0FBSUFJMkFnd01CQXNnQlNnQ0dDRUdJQVVnQlNnQ0RDSUFSd1JBUVp6UUFDZ0NBQm9nQUNBRktBSUlJZ0kyQWdnZ0FpQUFOZ0lNREFNTElBVkJGR29pQXlnQ0FDSUNSUVJBSUFVb0FoQWlBa1VOQWlBRlFSQnFJUU1MQTBBZ0F5RUhJQUlpQUVFVWFpSURLQUlBSWdJTkFDQUFRUkJxSVFNZ0FDZ0NFQ0lDRFFBTElBZEJBRFlDQUF3Q0N5QUZJQUJCZm5FMkFnUWdBU0FFYWlBRU5nSUFJQUVnQkVFQmNqWUNCQXdEQzBFQUlRQUxJQVpGRFFBQ1FDQUZLQUljSWdKQkFuUkJ2TklBYWlJREtBSUFJQVZHQkVBZ0F5QUFOZ0lBSUFBTkFVR1EwQUJCa05BQUtBSUFRWDRnQW5keE5nSUFEQUlMSUFaQkVFRVVJQVlvQWhBZ0JVWWJhaUFBTmdJQUlBQkZEUUVMSUFBZ0JqWUNHQ0FGS0FJUUlnSUVRQ0FBSUFJMkFoQWdBaUFBTmdJWUN5QUZRUlJxS0FJQUlnSkZEUUFnQUVFVWFpQUNOZ0lBSUFJZ0FEWUNHQXNnQVNBRWFpQUVOZ0lBSUFFZ0JFRUJjallDQkNBQlFhRFFBQ2dDQUVjTkFFR1UwQUFnQkRZQ0FBd0JDeUFFUWY4QlRRUkFJQVJCZUhGQnROQUFhaUVBQW45QmpOQUFLQUlBSWdKQkFTQUVRUU4yZENJRGNVVUVRRUdNMEFBZ0FpQURjallDQUNBQURBRUxJQUFvQWdnTElnSWdBVFlDRENBQUlBRTJBZ2dnQVNBQU5nSU1JQUVnQWpZQ0NBd0JDMEVmSVFJZ0JFSC8vLzhIVFFSQUlBUkJKaUFFUVFoMlp5SUFhM1pCQVhFZ0FFRUJkR3RCUG1vaEFnc2dBU0FDTmdJY0lBRkNBRGNDRUNBQ1FRSjBRYnpTQUdvaEFBSkFRWkRRQUNnQ0FDSURRUUVnQW5RaUIzRkZCRUFnQUNBQk5nSUFRWkRRQUNBRElBZHlOZ0lBSUFFZ0FEWUNHQ0FCSUFFMkFnZ2dBU0FCTmdJTURBRUxJQVJCR1NBQ1FRRjJhMEVBSUFKQkgwY2JkQ0VDSUFBb0FnQWhBQUpBQTBBZ0FDSURLQUlFUVhoeElBUkdEUUVnQWtFZGRpRUFJQUpCQVhRaEFpQURJQUJCQkhGcVFSQnFJZ2NvQWdBaUFBMEFDeUFISUFFMkFnQWdBU0FETmdJWUlBRWdBVFlDRENBQklBRTJBZ2dNQVFzZ0F5Z0NDQ0lBSUFFMkFnd2dBeUFCTmdJSUlBRkJBRFlDR0NBQklBTTJBZ3dnQVNBQU5nSUlDMEdzMEFCQnJOQUFLQUlBUVFGcklnQkJmeUFBR3pZQ0FBc0xCd0FnQUMwQUtBc0hBQ0FBTFFBcUN3Y0FJQUF0QUNzTEJ3QWdBQzBBS1FzSEFDQUFMd0V5Q3djQUlBQXRBQzRMUUFFRWZ5QUFLQUlZSVFFZ0FDMEFMU0VDSUFBdEFDZ2hBeUFBS0FJNElRUWdBQkF3SUFBZ0JEWUNPQ0FBSUFNNkFDZ2dBQ0FDT2dBdElBQWdBVFlDR0F1NzRnRUNCMzhEZmlBQklBSnFJUVFDUUNBQUlnSW9BZ3dpQUEwQUlBSW9BZ1FFUUNBQ0lBRTJBZ1FMSXdCQkVHc2lDQ1FBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNmd0pBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBSUFJb0Fod2lBMEVCYXc3ZEFkb0JBZGtCQWdNRUJRWUhDQWtLQ3d3TkR0Z0JEeERYQVJFUzFnRVRGQlVXRnhnWkdodmdBZDhCSEIwZTFRRWZJQ0VpSXlRbDFBRW1KeWdwS2lzczB3SFNBUzB1MFFIUUFTOHdNVEl6TkRVMk56ZzVPanM4UFQ0L1FFRkNRMFJGUnRzQlIwaEpTczhCemdGTHpRRk16QUZOVGs5UVVWSlRWRlZXVjFoWldsdGNYVjVmWUdGaVkyUmxabWRvYVdwcmJHMXViM0J4Y25OMGRYWjNlSGw2ZTN4OWZuK0FBWUVCZ2dHREFZUUJoUUdHQVljQmlBR0pBWW9CaXdHTUFZMEJqZ0dQQVpBQmtRR1NBWk1CbEFHVkFaWUJsd0dZQVprQm1nR2JBWndCblFHZUFaOEJvQUdoQWFJQm93R2tBYVVCcGdHbkFhZ0JxUUdxQWFzQnJBR3RBYTRCcndHd0FiRUJzZ0d6QWJRQnRRRzJBYmNCeXdIS0FiZ0J5UUc1QWNnQnVnRzdBYndCdlFHK0FiOEJ3QUhCQWNJQnd3SEVBY1VCeGdFQTNBRUxRUUFNeGdFTFFRNE14UUVMUVEwTXhBRUxRUThNd3dFTFFSQU13Z0VMUVJNTXdRRUxRUlFNd0FFTFFSVU12d0VMUVJZTXZnRUxRUmdNdlFFTFFSa012QUVMUVJvTXV3RUxRUnNNdWdFTFFSd011UUVMUVIwTXVBRUxRUWdNdHdFTFFSNE10Z0VMUVNBTXRRRUxRUjhNdEFFTFFRY01zd0VMUVNFTXNnRUxRU0lNc1FFTFFTTU1zQUVMUVNRTXJ3RUxRUklNcmdFTFFSRU1yUUVMUVNVTXJBRUxRU1lNcXdFTFFTY01xZ0VMUVNnTXFRRUxRY01CREtnQkMwRXFES2NCQzBFckRLWUJDMEVzREtVQkMwRXRES1FCQzBFdURLTUJDMEV2REtJQkMwSEVBUXloQVF0Qk1BeWdBUXRCTkF5ZkFRdEJEQXllQVF0Qk1ReWRBUXRCTWd5Y0FRdEJNd3liQVF0Qk9ReWFBUXRCTlF5WkFRdEJ4UUVNbUFFTFFRc01sd0VMUVRvTWxnRUxRVFlNbFFFTFFRb01sQUVMUVRjTWt3RUxRVGdNa2dFTFFUd01rUUVMUVRzTWtBRUxRVDBNandFTFFRa01qZ0VMUVNrTWpRRUxRVDRNakFFTFFUOE1pd0VMUWNBQURJb0JDMEhCQUF5SkFRdEJ3Z0FNaUFFTFFjTUFESWNCQzBIRUFBeUdBUXRCeFFBTWhRRUxRY1lBRElRQkMwRVhESU1CQzBISEFBeUNBUXRCeUFBTWdRRUxRY2tBRElBQkMwSEtBQXgvQzBITEFBeCtDMEhOQUF4OUMwSE1BQXg4QzBIT0FBeDdDMEhQQUF4NkMwSFFBQXg1QzBIUkFBeDRDMEhTQUF4M0MwSFRBQXgyQzBIVUFBeDFDMEhXQUF4MEMwSFZBQXh6QzBFR0RISUxRZGNBREhFTFFRVU1jQXRCMkFBTWJ3dEJCQXh1QzBIWkFBeHRDMEhhQUF4c0MwSGJBQXhyQzBIY0FBeHFDMEVEREdrTFFkMEFER2dMUWQ0QURHY0xRZDhBREdZTFFlRUFER1VMUWVBQURHUUxRZUlBREdNTFFlTUFER0lMUVFJTVlRdEI1QUFNWUF0QjVRQU1Yd3RCNWdBTVhndEI1d0FNWFF0QjZBQU1YQXRCNlFBTVd3dEI2Z0FNV2d0QjZ3QU1XUXRCN0FBTVdBdEI3UUFNVnd0QjdnQU1WZ3RCN3dBTVZRdEI4QUFNVkF0QjhRQU1Vd3RCOGdBTVVndEI4d0FNVVF0QjlBQU1VQXRCOVFBTVR3dEI5Z0FNVGd0Qjl3QU1UUXRCK0FBTVRBdEIrUUFNU3d0QitnQU1TZ3RCK3dBTVNRdEIvQUFNU0F0Qi9RQU1Sd3RCL2dBTVJndEIvd0FNUlF0QmdBRU1SQXRCZ1FFTVF3dEJnZ0VNUWd0Qmd3RU1RUXRCaEFFTVFBdEJoUUVNUHd0QmhnRU1QZ3RCaHdFTVBRdEJpQUVNUEF0QmlRRU1Pd3RCaWdFTU9ndEJpd0VNT1F0QmpBRU1PQXRCalFFTU53dEJqZ0VNTmd0Qmp3RU1OUXRCa0FFTU5BdEJrUUVNTXd0QmtnRU1NZ3RCa3dFTU1RdEJsQUVNTUF0QmxRRU1Md3RCbGdFTUxndEJsd0VNTFF0Qm1BRU1MQXRCbVFFTUt3dEJtZ0VNS2d0Qm13RU1LUXRCbkFFTUtBdEJuUUVNSnd0Qm5nRU1KZ3RCbndFTUpRdEJvQUVNSkF0Qm9RRU1Jd3RCb2dFTUlndEJvd0VNSVF0QnBBRU1JQXRCcFFFTUh3dEJwZ0VNSGd0QnB3RU1IUXRCcUFFTUhBdEJxUUVNR3d0QnFnRU1HZ3RCcXdFTUdRdEJyQUVNR0F0QnJRRU1Gd3RCcmdFTUZndEJBUXdWQzBHdkFRd1VDMEd3QVF3VEMwR3hBUXdTQzBHekFRd1JDMEd5QVF3UUMwRzBBUXdQQzBHMUFRd09DMEcyQVF3TkMwRzNBUXdNQzBHNEFRd0xDMEc1QVF3S0MwRzZBUXdKQzBHN0FRd0lDMEhHQVF3SEMwRzhBUXdHQzBHOUFRd0ZDMEcrQVF3RUMwRy9BUXdEQzBIQUFRd0NDMEhDQVF3QkMwSEJBUXNoQXdOQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUlBSUNmd0pBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSi9Ba0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQWdBZ0ovQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNmd0pBQWtBQ2Z3SkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNmd0pBQWtBQ1FBSkFBbjhDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUNBRERzWUJBQUVDQXdRRkJnY0lDUW9MREEwT0R4QVJFaE1VRlJZWEdCa2FHeHdkSHlBaEl5VW1LQ29yTEM4d01USXpORFUyTnprNk96dzlsQU5BUWtSRlJrbExUazlRVVZKVFZGVldXRnBiWEYxZVgyQmhZbU5rWldabmFHcHNiM0J4YzNWMmVIbDZlM3gvZ0FHQkFZSUJnd0dFQVlVQmhnR0hBWWdCaVFHS0FZc0JqQUdOQVk0Qmp3R1FBWkVCa2dHVEFaUUJsUUdXQVpjQm1BR1pBWm9CbXdHY0FaMEJuZ0dmQWFBQm9RR2lBYU1CcEFHbEFhWUJwd0dvQWFrQnFnR3JBYXdCclFHdUFhOEJzQUd4QWJJQnN3RzBBYlVCdGdHM0FiZ0J1UUc2QWJzQnZBRzlBYjRCdndIQUFjRUJ3Z0hEQWNRQnhRSEdBY2NCeUFISkFjc0J6QUhOQWM0Qnp3R0tBNGtEaUFPSEE0UURnd09BQS9zQytnTDVBdmdDOXdMMEF2TUM4Z0xMQXNFQ3NBTFpBUXNnQVNBRVJ3M3dBa0hkQVNFRERMTURDeUFCSUFSSERjZ0JRY01CSVFNTXNnTUxJQUVnQkVjTmUwSDNBQ0VERExFREN5QUJJQVJIRFhCQjd3QWhBd3l3QXdzZ0FTQUVSdzFwUWVvQUlRTU1yd01MSUFFZ0JFY05aVUhvQUNFRERLNERDeUFCSUFSSERXSkI1Z0FoQXd5dEF3c2dBU0FFUncwYVFSZ2hBd3lzQXdzZ0FTQUVSdzBWUVJJaEF3eXJBd3NnQVNBRVJ3MUNRY1VBSVFNTXFnTUxJQUVnQkVjTk5FRS9JUU1NcVFNTElBRWdCRWNOTWtFOElRTU1xQU1MSUFFZ0JFY05LMEV4SVFNTXB3TUxJQUl0QUM1QkFVWU5ud01Nd1FJTFFRQWhBQUpBQWtBQ1FDQUNMUUFxUlEwQUlBSXRBQ3RGRFFBZ0FpOEJNQ0lEUVFKeFJRMEJEQUlMSUFJdkFUQWlBMEVCY1VVTkFRdEJBU0VBSUFJdEFDaEJBVVlOQUNBQ0x3RXlJZ1ZCNUFCclFlUUFTUTBBSUFWQnpBRkdEUUFnQlVHd0FrWU5BQ0FEUWNBQWNRMEFRUUFoQUNBRFFZZ0VjVUdBQkVZTkFDQURRU2h4UVFCSElRQUxJQUpCQURzQk1DQUNRUUE2QUM4Z0FFVU4zd0lnQWtJQU53TWdET0FDQzBFQUlRQUNRQ0FDS0FJNElnTkZEUUFnQXlnQ0xDSURSUTBBSUFJZ0F4RUFBQ0VBQ3lBQVJRM01BU0FBUVJWSERkMENJQUpCQkRZQ0hDQUNJQUUyQWhRZ0FrR3dHRFlDRUNBQ1FSVTJBZ3hCQUNFRERLUURDeUFCSUFSR0JFQkJCaUVEREtRREN5QUJRUUZxSVFGQkFDRUFBa0FnQWlnQ09DSURSUTBBSUFNb0FsUWlBMFVOQUNBQ0lBTVJBQUFoQUFzZ0FBM1pBZ3djQ3lBQ1FnQTNBeUJCRWlFRERJa0RDeUFCSUFSSERSWkJIU0VEREtFREN5QUJJQVJIQkVBZ0FVRUJhaUVCUVJBaEF3eUlBd3RCQnlFRERLQURDeUFDSUFJcEF5QWlDaUFFSUFGcnJTSUxmU0lNUWdBZ0NpQU1XaHMzQXlBZ0NpQUxXQTNVQWtFSUlRTU1ud01MSUFFZ0JFY0VRQ0FDUVFrMkFnZ2dBaUFCTmdJRVFSUWhBd3lHQXd0QkNTRURESjREQ3lBQ0tRTWdRZ0JTRGNjQklBSWdBaThCTUVHQUFYSTdBVEFNUWdzZ0FTQUVSdzAvUWRBQUlRTU1uQU1MSUFFZ0JFWUVRRUVMSVFNTW5BTUxJQUZCQVdvaEFVRUFJUUFDUUNBQ0tBSTRJZ05GRFFBZ0F5Z0NVQ0lEUlEwQUlBSWdBeEVBQUNFQUN5QUFEYzhDRE1ZQkMwRUFJUUFDUUNBQ0tBSTRJZ05GRFFBZ0F5Z0NTQ0lEUlEwQUlBSWdBeEVBQUNFQUN5QUFSUTNHQVNBQVFSVkhEYzBDSUFKQkN6WUNIQ0FDSUFFMkFoUWdBa0dDR1RZQ0VDQUNRUlUyQWd4QkFDRURESm9EQzBFQUlRQUNRQ0FDS0FJNElnTkZEUUFnQXlnQ1NDSURSUTBBSUFJZ0F4RUFBQ0VBQ3lBQVJRME1JQUJCRlVjTnlnSWdBa0VhTmdJY0lBSWdBVFlDRkNBQ1FZSVpOZ0lRSUFKQkZUWUNERUVBSVFNTW1RTUxRUUFoQUFKQUlBSW9BamdpQTBVTkFDQURLQUpNSWdORkRRQWdBaUFERVFBQUlRQUxJQUJGRGNRQklBQkJGVWNOeHdJZ0FrRUxOZ0ljSUFJZ0FUWUNGQ0FDUVpFWE5nSVFJQUpCRlRZQ0RFRUFJUU1NbUFNTElBRWdCRVlFUUVFUElRTU1tQU1MSUFFdEFBQWlBRUU3UmcwSElBQkJEVWNOeEFJZ0FVRUJhaUVCRE1NQkMwRUFJUUFDUUNBQ0tBSTRJZ05GRFFBZ0F5Z0NUQ0lEUlEwQUlBSWdBeEVBQUNFQUN5QUFSUTNEQVNBQVFSVkhEY0lDSUFKQkR6WUNIQ0FDSUFFMkFoUWdBa0dSRnpZQ0VDQUNRUlUyQWd4QkFDRURESllEQ3dOQUlBRXRBQUJCOERWcUxRQUFJZ0JCQVVjRVFDQUFRUUpIRGNFQ0lBSW9BZ1FoQUVFQUlRTWdBa0VBTmdJRUlBSWdBQ0FCUVFGcUlnRVFMU0lBRGNJQ0RNVUJDeUFFSUFGQkFXb2lBVWNOQUF0QkVpRURESlVEQzBFQUlRQUNRQ0FDS0FJNElnTkZEUUFnQXlnQ1RDSURSUTBBSUFJZ0F4RUFBQ0VBQ3lBQVJRM0ZBU0FBUVJWSERiMENJQUpCR3pZQ0hDQUNJQUUyQWhRZ0FrR1JGellDRUNBQ1FSVTJBZ3hCQUNFRERKUURDeUFCSUFSR0JFQkJGaUVEREpRREN5QUNRUW8yQWdnZ0FpQUJOZ0lFUVFBaEFBSkFJQUlvQWpnaUEwVU5BQ0FES0FKSUlnTkZEUUFnQWlBREVRQUFJUUFMSUFCRkRjSUJJQUJCRlVjTnVRSWdBa0VWTmdJY0lBSWdBVFlDRkNBQ1FZSVpOZ0lRSUFKQkZUWUNERUVBSVFNTWt3TUxJQUVnQkVjRVFBTkFJQUV0QUFCQjhEZHFMUUFBSWdCQkFrY0VRQUpBSUFCQkFXc09CTVFDdlFJQXZnSzlBZ3NnQVVFQmFpRUJRUWdoQXd6OEFnc2dCQ0FCUVFGcUlnRkhEUUFMUVJVaEF3eVRBd3RCRlNFRERKSURDd05BSUFFdEFBQkI4RGxxTFFBQUlnQkJBa2NFUUNBQVFRRnJEZ1RGQXJjQ3d3SzRBcmNDQ3lBRUlBRkJBV29pQVVjTkFBdEJHQ0VEREpFREN5QUJJQVJIQkVBZ0FrRUxOZ0lJSUFJZ0FUWUNCRUVISVFNTStBSUxRUmtoQXd5UUF3c2dBVUVCYWlFQkRBSUxJQUVnQkVZRVFFRWFJUU1NandNTEFrQWdBUzBBQUVFTmF3NFV0UUcvQWI4QnZ3Ry9BYjhCdndHL0FiOEJ2d0cvQWI4QnZ3Ry9BYjhCdndHL0FiOEJ2d0VBdndFTFFRQWhBeUFDUVFBMkFod2dBa0d2Q3pZQ0VDQUNRUUkyQWd3Z0FpQUJRUUZxTmdJVURJNERDeUFCSUFSR0JFQkJHeUVEREk0REN5QUJMUUFBSWdCQk8wY0VRQ0FBUVExSERiRUNJQUZCQVdvaEFReTZBUXNnQVVFQmFpRUJDMEVpSVFNTTh3SUxJQUVnQkVZRVFFRWNJUU1NakFNTFFnQWhDZ0pBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBZ0FTMEFBRUV3YXc0M3dRTEFBZ0FCQWdNRUJRWUgwQUhRQWRBQjBBSFFBZEFCMEFFSUNRb0xEQTNRQWRBQjBBSFFBZEFCMEFIUUFkQUIwQUhRQWRBQjBBSFFBZEFCMEFIUUFkQUIwQUhRQWRBQjBBSFFBZEFCMEFIUUFkQUJEZzhRRVJJVDBBRUxRZ0loQ2d6QUFndENBeUVLREw4Q0MwSUVJUW9NdmdJTFFnVWhDZ3k5QWd0Q0JpRUtETHdDQzBJSElRb011d0lMUWdnaENneTZBZ3RDQ1NFS0RMa0NDMElLSVFvTXVBSUxRZ3NoQ2d5M0FndENEQ0VLRExZQ0MwSU5JUW9NdFFJTFFnNGhDZ3kwQWd0Q0R5RUtETE1DQzBJS0lRb01zZ0lMUWdzaENneXhBZ3RDRENFS0RMQUNDMElOSVFvTXJ3SUxRZzRoQ2d5dUFndENEeUVLREswQ0MwSUFJUW9DUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUlBRXRBQUJCTUdzT044QUN2d0lBQVFJREJBVUdCNzRDdmdLK0FyNEN2Z0srQXI0Q0NBa0tDd3dOdmdLK0FyNEN2Z0srQXI0Q3ZnSytBcjRDdmdLK0FyNEN2Z0srQXI0Q3ZnSytBcjRDdmdLK0FyNEN2Z0srQXI0Q3ZnSytBZzRQRUJFU0U3NENDMElDSVFvTXZ3SUxRZ01oQ2d5K0FndENCQ0VLREwwQ0MwSUZJUW9NdkFJTFFnWWhDZ3k3QWd0Q0J5RUtETG9DQzBJSUlRb011UUlMUWdraENneTRBZ3RDQ2lFS0RMY0NDMElMSVFvTXRnSUxRZ3doQ2d5MUFndENEU0VLRExRQ0MwSU9JUW9Nc3dJTFFnOGhDZ3l5QWd0Q0NpRUtETEVDQzBJTElRb01zQUlMUWd3aENneXZBZ3RDRFNFS0RLNENDMElPSVFvTXJRSUxRZzhoQ2d5c0Fnc2dBaUFDS1FNZ0lnb2dCQ0FCYTYwaUMzMGlERUlBSUFvZ0RGb2JOd01nSUFvZ0MxZ05wd0pCSHlFRERJa0RDeUFCSUFSSEJFQWdBa0VKTmdJSUlBSWdBVFlDQkVFbElRTU04QUlMUVNBaEF3eUlBd3RCQVNFRklBSXZBVEFpQTBFSWNVVUVRQ0FDS1FNZ1FnQlNJUVVMQWtBZ0FpMEFMZ1JBUVFFaEFDQUNMUUFwUVFWR0RRRWdBMEhBQUhGRklBVnhSUTBCQzBFQUlRQWdBMEhBQUhFTkFFRUNJUUFnQTBFSWNRMEFJQU5CZ0FSeEJFQUNRQ0FDTFFBb1FRRkhEUUFnQWkwQUxVRUtjUTBBUVFVaEFBd0NDMEVFSVFBTUFRc2dBMEVnY1VVRVFBSkFJQUl0QUNoQkFVWU5BQ0FDTHdFeUlnQkI1QUJyUWVRQVNRMEFJQUJCekFGR0RRQWdBRUd3QWtZTkFFRUVJUUFnQTBFb2NVVU5BaUFEUVlnRWNVR0FCRVlOQWd0QkFDRUFEQUVMUVFCQkF5QUNLUU1nVUJzaEFBc2dBRUVCYXc0RnZnSUFzQUVCcEFLaEFndEJFU0VERE8wQ0N5QUNRUUU2QUM4TWhBTUxJQUVnQkVjTm5RSkJKQ0VERElRREN5QUJJQVJIRFJ4QnhnQWhBd3lEQXd0QkFDRUFBa0FnQWlnQ09DSURSUTBBSUFNb0FrUWlBMFVOQUNBQ0lBTVJBQUFoQUFzZ0FFVU5KeUFBUVJWSERaZ0NJQUpCMEFBMkFod2dBaUFCTmdJVUlBSkJrUmcyQWhBZ0FrRVZOZ0lNUVFBaEF3eUNBd3NnQVNBRVJnUkFRU2doQXd5Q0F3dEJBQ0VESUFKQkFEWUNCQ0FDUVF3MkFnZ2dBaUFCSUFFUUtpSUFSUTJVQWlBQ1FTYzJBaHdnQWlBQk5nSVVJQUlnQURZQ0RBeUJBd3NnQVNBRVJnUkFRU2toQXd5QkF3c2dBUzBBQUNJQVFTQkdEUk1nQUVFSlJ3MlZBaUFCUVFGcUlRRU1GQXNnQVNBRVJ3UkFJQUZCQVdvaEFRd1dDMEVxSVFNTS93SUxJQUVnQkVZRVFFRXJJUU1NL3dJTElBRXRBQUFpQUVFSlJ5QUFRU0JIY1EyUUFpQUNMUUFzUVFoSERkMENJQUpCQURvQUxBemRBZ3NnQVNBRVJnUkFRU3doQXd6K0Fnc2dBUzBBQUVFS1J3Mk9BaUFCUVFGcUlRRU1zQUVMSUFFZ0JFY05pZ0pCTHlFRERQd0NDd05BSUFFdEFBQWlBRUVnUndSQUlBQkJDbXNPQklRQ2lBS0lBb1FDaGdJTElBUWdBVUVCYWlJQlJ3MEFDMEV4SVFNTSt3SUxRVEloQXlBQklBUkdEZm9DSUFJb0FnQWlBQ0FFSUFGcmFpRUhJQUVnQUd0QkEyb2hCZ0pBQTBBZ0FFSHdPMm90QUFBZ0FTMEFBQ0lGUVNCeUlBVWdCVUhCQUd0Qi93RnhRUnBKRzBIL0FYRkhEUUVnQUVFRFJnUkFRUVloQVF6aUFnc2dBRUVCYWlFQUlBUWdBVUVCYWlJQlJ3MEFDeUFDSUFjMkFnQU0rd0lMSUFKQkFEWUNBQXlHQWd0Qk15RURJQVFnQVNJQVJnMzVBaUFFSUFGcklBSW9BZ0FpQVdvaEJ5QUFJQUZyUVFocUlRWUNRQU5BSUFGQjlEdHFMUUFBSUFBdEFBQWlCVUVnY2lBRklBVkJ3UUJyUWY4QmNVRWFTUnRCL3dGeFJ3MEJJQUZCQ0VZRVFFRUZJUUVNNFFJTElBRkJBV29oQVNBRUlBQkJBV29pQUVjTkFBc2dBaUFITmdJQURQb0NDeUFDUVFBMkFnQWdBQ0VCRElVQ0MwRTBJUU1nQkNBQklnQkdEZmdDSUFRZ0FXc2dBaWdDQUNJQmFpRUhJQUFnQVd0QkJXb2hCZ0pBQTBBZ0FVSFF3Z0JxTFFBQUlBQXRBQUFpQlVFZ2NpQUZJQVZCd1FCclFmOEJjVUVhU1J0Qi93RnhSdzBCSUFGQkJVWUVRRUVISVFFTTRBSUxJQUZCQVdvaEFTQUVJQUJCQVdvaUFFY05BQXNnQWlBSE5nSUFEUGtDQ3lBQ1FRQTJBZ0FnQUNFQkRJUUNDeUFCSUFSSEJFQURRQ0FCTFFBQVFZQSthaTBBQUNJQVFRRkhCRUFnQUVFQ1JnMEpESUVDQ3lBRUlBRkJBV29pQVVjTkFBdEJNQ0VERFBnQ0MwRXdJUU1NOXdJTElBRWdCRWNFUUFOQUlBRXRBQUFpQUVFZ1J3UkFJQUJCQ21zT0JQOEIvZ0grQWY4Qi9nRUxJQVFnQVVFQmFpSUJSdzBBQzBFNElRTU05d0lMUVRnaEF3ejJBZ3NEUUNBQkxRQUFJZ0JCSUVjZ0FFRUpSM0VOOWdFZ0JDQUJRUUZxSWdGSERRQUxRVHdoQXd6MUFnc0RRQ0FCTFFBQUlnQkJJRWNFUUFKQUlBQkJDbXNPQlBrQkJBVDVBUUFMSUFCQkxFWU45UUVNQXdzZ0JDQUJRUUZxSWdGSERRQUxRVDhoQXd6MEFndEJ3QUFoQXlBQklBUkdEZk1DSUFJb0FnQWlBQ0FFSUFGcmFpRUZJQUVnQUd0QkJtb2hCZ0pBQTBBZ0FFR0FRR3N0QUFBZ0FTMEFBRUVnY2tjTkFTQUFRUVpHRGRzQ0lBQkJBV29oQUNBRUlBRkJBV29pQVVjTkFBc2dBaUFGTmdJQURQUUNDeUFDUVFBMkFnQUxRVFloQXd6WkFnc2dBU0FFUmdSQVFjRUFJUU1NOGdJTElBSkJERFlDQ0NBQ0lBRTJBZ1FnQWkwQUxFRUJhdzRFK3dIdUFld0I2d0hVQWdzZ0FVRUJhaUVCRFBvQkN5QUJJQVJIQkVBRFFBSkFJQUV0QUFBaUFFRWdjaUFBSUFCQndRQnJRZjhCY1VFYVNSdEIvd0Z4SWdCQkNVWU5BQ0FBUVNCR0RRQUNRQUpBQWtBQ1FDQUFRZU1BYXc0VEFBTURBd01EQXdNQkF3TURBd01EQXdNREFnTUxJQUZCQVdvaEFVRXhJUU1NM0FJTElBRkJBV29oQVVFeUlRTU0yd0lMSUFGQkFXb2hBVUV6SVFNTTJnSUxEUDRCQ3lBRUlBRkJBV29pQVVjTkFBdEJOU0VERFBBQ0MwRTFJUU1NN3dJTElBRWdCRWNFUUFOQUlBRXRBQUJCZ0R4cUxRQUFRUUZIRGZjQklBUWdBVUVCYWlJQlJ3MEFDMEU5SVFNTTd3SUxRVDBoQXd6dUFndEJBQ0VBQWtBZ0FpZ0NPQ0lEUlEwQUlBTW9Ba0FpQTBVTkFDQUNJQU1SQUFBaEFBc2dBRVVOQVNBQVFSVkhEZVlCSUFKQndnQTJBaHdnQWlBQk5nSVVJQUpCNHhnMkFoQWdBa0VWTmdJTVFRQWhBd3p0QWdzZ0FVRUJhaUVCQzBFOElRTU0wZ0lMSUFFZ0JFWUVRRUhDQUNFRERPc0NDd0pBQTBBQ1FDQUJMUUFBUVFsckRoZ0FBc3dDekFMUkFzd0N6QUxNQXN3Q3pBTE1Bc3dDekFMTUFzd0N6QUxNQXN3Q3pBTE1Bc3dDekFMTUFnRE1BZ3NnQkNBQlFRRnFJZ0ZIRFFBTFFjSUFJUU1NNndJTElBRkJBV29oQVNBQ0xRQXRRUUZ4UlEzK0FRdEJMQ0VERE5BQ0N5QUJJQVJIRGQ0QlFjUUFJUU1NNkFJTEEwQWdBUzBBQUVHUXdBQnFMUUFBUVFGSERad0JJQVFnQVVFQmFpSUJSdzBBQzBIRkFDRURET2NDQ3lBQkxRQUFJZ0JCSUVZTi9nRWdBRUU2UnczQUFpQUNLQUlFSVFCQkFDRURJQUpCQURZQ0JDQUNJQUFnQVJBcElnQU4zZ0VNM1FFTFFjY0FJUU1nQkNBQklnQkdEZVVDSUFRZ0FXc2dBaWdDQUNJQmFpRUhJQUFnQVd0QkJXb2hCZ05BSUFGQmtNSUFhaTBBQUNBQUxRQUFJZ1ZCSUhJZ0JTQUZRY0VBYTBIL0FYRkJHa2tiUWY4QmNVY052d0lnQVVFRlJnM0NBaUFCUVFGcUlRRWdCQ0FBUVFGcUlnQkhEUUFMSUFJZ0J6WUNBQXpsQWd0QnlBQWhBeUFFSUFFaUFFWU41QUlnQkNBQmF5QUNLQUlBSWdGcUlRY2dBQ0FCYTBFSmFpRUdBMEFnQVVHV3dnQnFMUUFBSUFBdEFBQWlCVUVnY2lBRklBVkJ3UUJyUWY4QmNVRWFTUnRCL3dGeFJ3MitBa0VDSUFGQkNVWU53Z0lhSUFGQkFXb2hBU0FFSUFCQkFXb2lBRWNOQUFzZ0FpQUhOZ0lBRE9RQ0N5QUJJQVJHQkVCQnlRQWhBd3prQWdzQ1FBSkFJQUV0QUFBaUFFRWdjaUFBSUFCQndRQnJRZjhCY1VFYVNSdEIvd0Z4UWU0QWF3NEhBTDhDdndLL0FyOEN2d0lCdndJTElBRkJBV29oQVVFK0lRTU15d0lMSUFGQkFXb2hBVUUvSVFNTXlnSUxRY29BSVFNZ0JDQUJJZ0JHRGVJQ0lBUWdBV3NnQWlnQ0FDSUJhaUVHSUFBZ0FXdEJBV29oQndOQUlBRkJvTUlBYWkwQUFDQUFMUUFBSWdWQklISWdCU0FGUWNFQWEwSC9BWEZCR2trYlFmOEJjVWNOdkFJZ0FVRUJSZzIrQWlBQlFRRnFJUUVnQkNBQVFRRnFJZ0JIRFFBTElBSWdCallDQUF6aUFndEJ5d0FoQXlBRUlBRWlBRVlONFFJZ0JDQUJheUFDS0FJQUlnRnFJUWNnQUNBQmEwRU9haUVHQTBBZ0FVR2l3Z0JxTFFBQUlBQXRBQUFpQlVFZ2NpQUZJQVZCd1FCclFmOEJjVUVhU1J0Qi93RnhSdzI3QWlBQlFRNUdEYjRDSUFGQkFXb2hBU0FFSUFCQkFXb2lBRWNOQUFzZ0FpQUhOZ0lBRE9FQ0MwSE1BQ0VESUFRZ0FTSUFSZzNnQWlBRUlBRnJJQUlvQWdBaUFXb2hCeUFBSUFGclFROXFJUVlEUUNBQlFjRENBR290QUFBZ0FDMEFBQ0lGUVNCeUlBVWdCVUhCQUd0Qi93RnhRUnBKRzBIL0FYRkhEYm9DUVFNZ0FVRVBSZzIrQWhvZ0FVRUJhaUVCSUFRZ0FFRUJhaUlBUncwQUN5QUNJQWMyQWdBTTRBSUxRYzBBSVFNZ0JDQUJJZ0JHRGQ4Q0lBUWdBV3NnQWlnQ0FDSUJhaUVISUFBZ0FXdEJCV29oQmdOQUlBRkIwTUlBYWkwQUFDQUFMUUFBSWdWQklISWdCU0FGUWNFQWEwSC9BWEZCR2trYlFmOEJjVWNOdVFKQkJDQUJRUVZHRGIwQ0dpQUJRUUZxSVFFZ0JDQUFRUUZxSWdCSERRQUxJQUlnQnpZQ0FBemZBZ3NnQVNBRVJnUkFRYzRBSVFNTTN3SUxBa0FDUUFKQUFrQWdBUzBBQUNJQVFTQnlJQUFnQUVIQkFHdEIvd0Z4UVJwSkcwSC9BWEZCNHdCckRoTUF2QUs4QXJ3Q3ZBSzhBcndDdkFLOEFyd0N2QUs4QXJ3Q0Fid0N2QUs4QWdJRHZBSUxJQUZCQVdvaEFVSEJBQ0VERE1nQ0N5QUJRUUZxSVFGQndnQWhBd3pIQWdzZ0FVRUJhaUVCUWNNQUlRTU14Z0lMSUFGQkFXb2hBVUhFQUNFRERNVUNDeUFCSUFSSEJFQWdBa0VOTmdJSUlBSWdBVFlDQkVIRkFDRURETVVDQzBIUEFDRURETjBDQ3dKQUFrQWdBUzBBQUVFS2F3NEVBWkFCa0FFQWtBRUxJQUZCQVdvaEFRdEJLQ0VERE1NQ0N5QUJJQVJHQkVCQjBRQWhBd3pjQWdzZ0FTMEFBRUVnUncwQUlBRkJBV29oQVNBQ0xRQXRRUUZ4UlEzUUFRdEJGeUVERE1FQ0N5QUJJQVJIRGNzQlFkSUFJUU1NMlFJTFFkTUFJUU1nQVNBRVJnM1lBaUFDS0FJQUlnQWdCQ0FCYTJvaEJpQUJJQUJyUVFGcUlRVURRQ0FCTFFBQUlBQkIxc0lBYWkwQUFFY054d0VnQUVFQlJnM0tBU0FBUVFGcUlRQWdCQ0FCUVFGcUlnRkhEUUFMSUFJZ0JqWUNBQXpZQWdzZ0FTQUVSZ1JBUWRVQUlRTU0yQUlMSUFFdEFBQkJDa2NOd2dFZ0FVRUJhaUVCRE1vQkN5QUJJQVJHQkVCQjFnQWhBd3pYQWdzQ1FBSkFJQUV0QUFCQkNtc09CQUREQWNNQkFjTUJDeUFCUVFGcUlRRU15Z0VMSUFGQkFXb2hBVUhLQUNFRERMMENDMEVBSVFBQ1FDQUNLQUk0SWdORkRRQWdBeWdDUENJRFJRMEFJQUlnQXhFQUFDRUFDeUFBRGI4QlFjMEFJUU1NdkFJTElBSXRBQ2xCSWtZTnp3SU1pUUVMSUFRZ0FTSUZSZ1JBUWRzQUlRTU0xQUlMUVFBaEFFRUJJUUZCQVNFR1FRQWhBd0pBQW44Q1FBSkFBa0FDUUFKQUFrQUNRQ0FGTFFBQVFUQnJEZ3JGQWNRQkFBRUNBd1FGQmdqREFRdEJBZ3dHQzBFRERBVUxRUVFNQkF0QkJRd0RDMEVHREFJTFFRY01BUXRCQ0FzaEEwRUFJUUZCQUNFR0RMMEJDMEVKSVFOQkFTRUFRUUFoQVVFQUlRWU12QUVMSUFFZ0JFWUVRRUhkQUNFREROTUNDeUFCTFFBQVFTNUhEYmdCSUFGQkFXb2hBUXlJQVFzZ0FTQUVSdzIyQVVIZkFDRURETkVDQ3lBQklBUkhCRUFnQWtFT05nSUlJQUlnQVRZQ0JFSFFBQ0VERExnQ0MwSGdBQ0VERE5BQ0MwSGhBQ0VESUFFZ0JFWU56d0lnQWlnQ0FDSUFJQVFnQVd0cUlRVWdBU0FBYTBFRGFpRUdBMEFnQVMwQUFDQUFRZUxDQUdvdEFBQkhEYkVCSUFCQkEwWU5zd0VnQUVFQmFpRUFJQVFnQVVFQmFpSUJSdzBBQ3lBQ0lBVTJBZ0FNendJTFFlSUFJUU1nQVNBRVJnM09BaUFDS0FJQUlnQWdCQ0FCYTJvaEJTQUJJQUJyUVFKcUlRWURRQ0FCTFFBQUlBQkI1c0lBYWkwQUFFY05zQUVnQUVFQ1JnMnZBU0FBUVFGcUlRQWdCQ0FCUVFGcUlnRkhEUUFMSUFJZ0JUWUNBQXpPQWd0QjR3QWhBeUFCSUFSR0RjMENJQUlvQWdBaUFDQUVJQUZyYWlFRklBRWdBR3RCQTJvaEJnTkFJQUV0QUFBZ0FFSHB3Z0JxTFFBQVJ3MnZBU0FBUVFOR0RhMEJJQUJCQVdvaEFDQUVJQUZCQVdvaUFVY05BQXNnQWlBRk5nSUFETTBDQ3lBQklBUkdCRUJCNVFBaEF3ek5BZ3NnQVVFQmFpRUJRUUFoQUFKQUlBSW9BamdpQTBVTkFDQURLQUl3SWdORkRRQWdBaUFERVFBQUlRQUxJQUFOcWdGQjFnQWhBd3l6QWdzZ0FTQUVSd1JBQTBBZ0FTMEFBQ0lBUVNCSEJFQUNRQUpBQWtBZ0FFSElBR3NPQ3dBQnN3R3pBYk1Cc3dHekFiTUJzd0d6QVFLekFRc2dBVUVCYWlFQlFkSUFJUU1NdHdJTElBRkJBV29oQVVIVEFDRURETFlDQ3lBQlFRRnFJUUZCMUFBaEF3eTFBZ3NnQkNBQlFRRnFJZ0ZIRFFBTFFlUUFJUU1NekFJTFFlUUFJUU1NeXdJTEEwQWdBUzBBQUVId3dnQnFMUUFBSWdCQkFVY0VRQ0FBUVFKckRnT25BYVlCcFFHa0FRc2dCQ0FCUVFGcUlnRkhEUUFMUWVZQUlRTU15Z0lMSUFGQkFXb2dBU0FFUncwQ0drSG5BQ0VERE1rQ0N3TkFJQUV0QUFCQjhNUUFhaTBBQUNJQVFRRkhCRUFDUUNBQVFRSnJEZ1NpQWFFQm9BRUFud0VMUWRjQUlRTU1zUUlMSUFRZ0FVRUJhaUlCUncwQUMwSG9BQ0VERE1nQ0N5QUJJQVJHQkVCQjZRQWhBd3pJQWdzQ1FDQUJMUUFBSWdCQkNtc09HcmNCbXdHYkFiUUJtd0diQVpzQm13R2JBWnNCbXdHYkFac0Jtd0diQVpzQm13R2JBWnNCbXdHYkFac0JwQUdiQVpzQkFKa0JDeUFCUVFGcUN5RUJRUVloQXd5dEFnc0RRQ0FCTFFBQVFmREdBR290QUFCQkFVY05mU0FFSUFGQkFXb2lBVWNOQUF0QjZnQWhBd3pGQWdzZ0FVRUJhaUFCSUFSSERRSWFRZXNBSVFNTXhBSUxJQUVnQkVZRVFFSHNBQ0VERE1RQ0N5QUJRUUZxREFFTElBRWdCRVlFUUVIdEFDRURETU1DQ3lBQlFRRnFDeUVCUVFRaEF3eW9BZ3NnQVNBRVJnUkFRZTRBSVFNTXdRSUxBa0FDUUFKQUlBRXRBQUJCOE1nQWFpMEFBRUVCYXc0SGtBR1BBWTRCQUh3QkFvMEJDeUFCUVFGcUlRRU1Dd3NnQVVFQmFneVRBUXRCQUNFRElBSkJBRFlDSENBQ1Fac1NOZ0lRSUFKQkJ6WUNEQ0FDSUFGQkFXbzJBaFFNd0FJTEFrQURRQ0FCTFFBQVFmRElBR290QUFBaUFFRUVSd1JBQWtBQ1FDQUFRUUZyRGdlVUFaTUJrZ0dOQVFBRUFZMEJDMEhhQUNFRERLb0NDeUFCUVFGcUlRRkIzQUFoQXd5cEFnc2dCQ0FCUVFGcUlnRkhEUUFMUWU4QUlRTU13QUlMSUFGQkFXb01rUUVMSUFRZ0FTSUFSZ1JBUWZBQUlRTU12d0lMSUFBdEFBQkJMMGNOQVNBQVFRRnFJUUVNQndzZ0JDQUJJZ0JHQkVCQjhRQWhBd3krQWdzZ0FDMEFBQ0lCUVM5R0JFQWdBRUVCYWlFQlFkMEFJUU1NcFFJTElBRkJDbXNpQTBFV1N3MEFJQUFoQVVFQklBTjBRWW1BZ0FKeERma0JDMEVBSVFNZ0FrRUFOZ0ljSUFJZ0FEWUNGQ0FDUVl3Y05nSVFJQUpCQnpZQ0RBeThBZ3NnQVNBRVJ3UkFJQUZCQVdvaEFVSGVBQ0VEREtNQ0MwSHlBQ0VERExzQ0N5QUJJQVJHQkVCQjlBQWhBd3k3QWdzQ1FDQUJMUUFBUWZETUFHb3RBQUJCQVdzT0EvY0Jjd0NDQVF0QjRRQWhBd3loQWdzZ0FTQUVSd1JBQTBBZ0FTMEFBRUh3eWdCcUxRQUFJZ0JCQTBjRVFBSkFJQUJCQVdzT0F2a0JBSVVCQzBIZkFDRURES01DQ3lBRUlBRkJBV29pQVVjTkFBdEI4d0FoQXd5NkFndEI4d0FoQXd5NUFnc2dBU0FFUndSQUlBSkJEellDQ0NBQ0lBRTJBZ1JCNEFBaEF3eWdBZ3RCOVFBaEF3eTRBZ3NnQVNBRVJnUkFRZllBSVFNTXVBSUxJQUpCRHpZQ0NDQUNJQUUyQWdRTFFRTWhBd3lkQWdzRFFDQUJMUUFBUVNCSERZNENJQVFnQVVFQmFpSUJSdzBBQzBIM0FDRURETFVDQ3lBQklBUkdCRUJCK0FBaEF3eTFBZ3NnQVMwQUFFRWdSdzE2SUFGQkFXb2hBUXhiQzBFQUlRQUNRQ0FDS0FJNElnTkZEUUFnQXlnQ09DSURSUTBBSUFJZ0F4RUFBQ0VBQ3lBQURYZ01nQUlMSUFFZ0JFWUVRRUg2QUNFRERMTUNDeUFCTFFBQVFjd0FSdzEwSUFGQkFXb2hBVUVUREhZTFFmc0FJUU1nQVNBRVJnMnhBaUFDS0FJQUlnQWdCQ0FCYTJvaEJTQUJJQUJyUVFWcUlRWURRQ0FCTFFBQUlBQkI4TTRBYWkwQUFFY05jeUFBUVFWR0RYVWdBRUVCYWlFQUlBUWdBVUVCYWlJQlJ3MEFDeUFDSUFVMkFnQU1zUUlMSUFFZ0JFWUVRRUg4QUNFRERMRUNDd0pBQWtBZ0FTMEFBRUhEQUdzT0RBQjBkSFIwZEhSMGRIUjBBWFFMSUFGQkFXb2hBVUhtQUNFRERKZ0NDeUFCUVFGcUlRRkI1d0FoQXd5WEFndEIvUUFoQXlBQklBUkdEYThDSUFJb0FnQWlBQ0FFSUFGcmFpRUZJQUVnQUd0QkFtb2hCZ0pBQTBBZ0FTMEFBQ0FBUWUzUEFHb3RBQUJIRFhJZ0FFRUNSZzBCSUFCQkFXb2hBQ0FFSUFGQkFXb2lBVWNOQUFzZ0FpQUZOZ0lBRExBQ0N5QUNRUUEyQWdBZ0JrRUJhaUVCUVJBTWN3dEIvZ0FoQXlBQklBUkdEYTRDSUFJb0FnQWlBQ0FFSUFGcmFpRUZJQUVnQUd0QkJXb2hCZ0pBQTBBZ0FTMEFBQ0FBUWZiT0FHb3RBQUJIRFhFZ0FFRUZSZzBCSUFCQkFXb2hBQ0FFSUFGQkFXb2lBVWNOQUFzZ0FpQUZOZ0lBREs4Q0N5QUNRUUEyQWdBZ0JrRUJhaUVCUVJZTWNndEIvd0FoQXlBQklBUkdEYTBDSUFJb0FnQWlBQ0FFSUFGcmFpRUZJQUVnQUd0QkEyb2hCZ0pBQTBBZ0FTMEFBQ0FBUWZ6T0FHb3RBQUJIRFhBZ0FFRURSZzBCSUFCQkFXb2hBQ0FFSUFGQkFXb2lBVWNOQUFzZ0FpQUZOZ0lBREs0Q0N5QUNRUUEyQWdBZ0JrRUJhaUVCUVFVTWNRc2dBU0FFUmdSQVFZQUJJUU1NclFJTElBRXRBQUJCMlFCSERXNGdBVUVCYWlFQlFRZ01jQXNnQVNBRVJnUkFRWUVCSVFNTXJBSUxBa0FDUUNBQkxRQUFRYzRBYXc0REFHOEJid3NnQVVFQmFpRUJRZXNBSVFNTWt3SUxJQUZCQVdvaEFVSHNBQ0VEREpJQ0N5QUJJQVJHQkVCQmdnRWhBd3lyQWdzQ1FBSkFJQUV0QUFCQnlBQnJEZ2dBYm01dWJtNXVBVzRMSUFGQkFXb2hBVUhxQUNFRERKSUNDeUFCUVFGcUlRRkI3UUFoQXd5UkFndEJnd0VoQXlBQklBUkdEYWtDSUFJb0FnQWlBQ0FFSUFGcmFpRUZJQUVnQUd0QkFtb2hCZ0pBQTBBZ0FTMEFBQ0FBUVlEUEFHb3RBQUJIRFd3Z0FFRUNSZzBCSUFCQkFXb2hBQ0FFSUFGQkFXb2lBVWNOQUFzZ0FpQUZOZ0lBREtvQ0N5QUNRUUEyQWdBZ0JrRUJhaUVCUVFBTWJRdEJoQUVoQXlBQklBUkdEYWdDSUFJb0FnQWlBQ0FFSUFGcmFpRUZJQUVnQUd0QkJHb2hCZ0pBQTBBZ0FTMEFBQ0FBUVlQUEFHb3RBQUJIRFdzZ0FFRUVSZzBCSUFCQkFXb2hBQ0FFSUFGQkFXb2lBVWNOQUFzZ0FpQUZOZ0lBREtrQ0N5QUNRUUEyQWdBZ0JrRUJhaUVCUVNNTWJBc2dBU0FFUmdSQVFZVUJJUU1NcUFJTEFrQUNRQ0FCTFFBQVFjd0FhdzRJQUd0cmEydHJhd0ZyQ3lBQlFRRnFJUUZCN3dBaEF3eVBBZ3NnQVVFQmFpRUJRZkFBSVFNTWpnSUxJQUVnQkVZRVFFR0dBU0VEREtjQ0N5QUJMUUFBUWNVQVJ3MW9JQUZCQVdvaEFReGdDMEdIQVNFRElBRWdCRVlOcFFJZ0FpZ0NBQ0lBSUFRZ0FXdHFJUVVnQVNBQWEwRURhaUVHQWtBRFFDQUJMUUFBSUFCQmlNOEFhaTBBQUVjTmFDQUFRUU5HRFFFZ0FFRUJhaUVBSUFRZ0FVRUJhaUlCUncwQUN5QUNJQVUyQWdBTXBnSUxJQUpCQURZQ0FDQUdRUUZxSVFGQkxReHBDMEdJQVNFRElBRWdCRVlOcEFJZ0FpZ0NBQ0lBSUFRZ0FXdHFJUVVnQVNBQWEwRUlhaUVHQWtBRFFDQUJMUUFBSUFCQjBNOEFhaTBBQUVjTlp5QUFRUWhHRFFFZ0FFRUJhaUVBSUFRZ0FVRUJhaUlCUncwQUN5QUNJQVUyQWdBTXBRSUxJQUpCQURZQ0FDQUdRUUZxSVFGQktReG9DeUFCSUFSR0JFQkJpUUVoQXd5a0FndEJBU0FCTFFBQVFkOEFSdzFuR2lBQlFRRnFJUUVNWGd0QmlnRWhBeUFCSUFSR0RhSUNJQUlvQWdBaUFDQUVJQUZyYWlFRklBRWdBR3RCQVdvaEJnTkFJQUV0QUFBZ0FFR016d0JxTFFBQVJ3MWtJQUJCQVVZTitnRWdBRUVCYWlFQUlBUWdBVUVCYWlJQlJ3MEFDeUFDSUFVMkFnQU1vZ0lMUVlzQklRTWdBU0FFUmcyaEFpQUNLQUlBSWdBZ0JDQUJhMm9oQlNBQklBQnJRUUpxSVFZQ1FBTkFJQUV0QUFBZ0FFR096d0JxTFFBQVJ3MWtJQUJCQWtZTkFTQUFRUUZxSVFBZ0JDQUJRUUZxSWdGSERRQUxJQUlnQlRZQ0FBeWlBZ3NnQWtFQU5nSUFJQVpCQVdvaEFVRUNER1VMUVl3QklRTWdBU0FFUmcyZ0FpQUNLQUlBSWdBZ0JDQUJhMm9oQlNBQklBQnJRUUZxSVFZQ1FBTkFJQUV0QUFBZ0FFSHd6d0JxTFFBQVJ3MWpJQUJCQVVZTkFTQUFRUUZxSVFBZ0JDQUJRUUZxSWdGSERRQUxJQUlnQlRZQ0FBeWhBZ3NnQWtFQU5nSUFJQVpCQVdvaEFVRWZER1FMUVkwQklRTWdBU0FFUmcyZkFpQUNLQUlBSWdBZ0JDQUJhMm9oQlNBQklBQnJRUUZxSVFZQ1FBTkFJQUV0QUFBZ0FFSHl6d0JxTFFBQVJ3MWlJQUJCQVVZTkFTQUFRUUZxSVFBZ0JDQUJRUUZxSWdGSERRQUxJQUlnQlRZQ0FBeWdBZ3NnQWtFQU5nSUFJQVpCQVdvaEFVRUpER01MSUFFZ0JFWUVRRUdPQVNFRERKOENDd0pBQWtBZ0FTMEFBRUhKQUdzT0J3QmlZbUppWWdGaUN5QUJRUUZxSVFGQitBQWhBd3lHQWdzZ0FVRUJhaUVCUWZrQUlRTU1oUUlMUVk4QklRTWdBU0FFUmcyZEFpQUNLQUlBSWdBZ0JDQUJhMm9oQlNBQklBQnJRUVZxSVFZQ1FBTkFJQUV0QUFBZ0FFR1J6d0JxTFFBQVJ3MWdJQUJCQlVZTkFTQUFRUUZxSVFBZ0JDQUJRUUZxSWdGSERRQUxJQUlnQlRZQ0FBeWVBZ3NnQWtFQU5nSUFJQVpCQVdvaEFVRVlER0VMUVpBQklRTWdBU0FFUmcyY0FpQUNLQUlBSWdBZ0JDQUJhMm9oQlNBQklBQnJRUUpxSVFZQ1FBTkFJQUV0QUFBZ0FFR1h6d0JxTFFBQVJ3MWZJQUJCQWtZTkFTQUFRUUZxSVFBZ0JDQUJRUUZxSWdGSERRQUxJQUlnQlRZQ0FBeWRBZ3NnQWtFQU5nSUFJQVpCQVdvaEFVRVhER0FMUVpFQklRTWdBU0FFUmcyYkFpQUNLQUlBSWdBZ0JDQUJhMm9oQlNBQklBQnJRUVpxSVFZQ1FBTkFJQUV0QUFBZ0FFR2F6d0JxTFFBQVJ3MWVJQUJCQmtZTkFTQUFRUUZxSVFBZ0JDQUJRUUZxSWdGSERRQUxJQUlnQlRZQ0FBeWNBZ3NnQWtFQU5nSUFJQVpCQVdvaEFVRVZERjhMUVpJQklRTWdBU0FFUmcyYUFpQUNLQUlBSWdBZ0JDQUJhMm9oQlNBQklBQnJRUVZxSVFZQ1FBTkFJQUV0QUFBZ0FFR2h6d0JxTFFBQVJ3MWRJQUJCQlVZTkFTQUFRUUZxSVFBZ0JDQUJRUUZxSWdGSERRQUxJQUlnQlRZQ0FBeWJBZ3NnQWtFQU5nSUFJQVpCQVdvaEFVRWVERjRMSUFFZ0JFWUVRRUdUQVNFRERKb0NDeUFCTFFBQVFjd0FSdzFiSUFGQkFXb2hBVUVLREYwTElBRWdCRVlFUUVHVUFTRURESmtDQ3dKQUFrQWdBUzBBQUVIQkFHc09Ed0JjWEZ4Y1hGeGNYRnhjWEZ4Y0FWd0xJQUZCQVdvaEFVSCtBQ0VERElBQ0N5QUJRUUZxSVFGQi93QWhBd3ovQVFzZ0FTQUVSZ1JBUVpVQklRTU1tQUlMQWtBQ1FDQUJMUUFBUWNFQWF3NERBRnNCV3dzZ0FVRUJhaUVCUWYwQUlRTU0vd0VMSUFGQkFXb2hBVUdBQVNFRERQNEJDMEdXQVNFRElBRWdCRVlObGdJZ0FpZ0NBQ0lBSUFRZ0FXdHFJUVVnQVNBQWEwRUJhaUVHQWtBRFFDQUJMUUFBSUFCQnA4OEFhaTBBQUVjTldTQUFRUUZHRFFFZ0FFRUJhaUVBSUFRZ0FVRUJhaUlCUncwQUN5QUNJQVUyQWdBTWx3SUxJQUpCQURZQ0FDQUdRUUZxSVFGQkN3eGFDeUFCSUFSR0JFQkJsd0VoQXd5V0Fnc0NRQUpBQWtBQ1FDQUJMUUFBUVMxckRpTUFXMXRiVzF0YlcxdGJXMXRiVzF0YlcxdGJXMXRiVzFzQlcxdGJXMXNDVzF0YkExc0xJQUZCQVdvaEFVSDdBQ0VERFA4QkN5QUJRUUZxSVFGQi9BQWhBd3orQVFzZ0FVRUJhaUVCUVlFQklRTU0vUUVMSUFGQkFXb2hBVUdDQVNFRERQd0JDMEdZQVNFRElBRWdCRVlObEFJZ0FpZ0NBQ0lBSUFRZ0FXdHFJUVVnQVNBQWEwRUVhaUVHQWtBRFFDQUJMUUFBSUFCQnFjOEFhaTBBQUVjTlZ5QUFRUVJHRFFFZ0FFRUJhaUVBSUFRZ0FVRUJhaUlCUncwQUN5QUNJQVUyQWdBTWxRSUxJQUpCQURZQ0FDQUdRUUZxSVFGQkdReFlDMEdaQVNFRElBRWdCRVlOa3dJZ0FpZ0NBQ0lBSUFRZ0FXdHFJUVVnQVNBQWEwRUZhaUVHQWtBRFFDQUJMUUFBSUFCQnJzOEFhaTBBQUVjTlZpQUFRUVZHRFFFZ0FFRUJhaUVBSUFRZ0FVRUJhaUlCUncwQUN5QUNJQVUyQWdBTWxBSUxJQUpCQURZQ0FDQUdRUUZxSVFGQkJneFhDMEdhQVNFRElBRWdCRVlOa2dJZ0FpZ0NBQ0lBSUFRZ0FXdHFJUVVnQVNBQWEwRUJhaUVHQWtBRFFDQUJMUUFBSUFCQnRNOEFhaTBBQUVjTlZTQUFRUUZHRFFFZ0FFRUJhaUVBSUFRZ0FVRUJhaUlCUncwQUN5QUNJQVUyQWdBTWt3SUxJQUpCQURZQ0FDQUdRUUZxSVFGQkhBeFdDMEdiQVNFRElBRWdCRVlOa1FJZ0FpZ0NBQ0lBSUFRZ0FXdHFJUVVnQVNBQWEwRUJhaUVHQWtBRFFDQUJMUUFBSUFCQnRzOEFhaTBBQUVjTlZDQUFRUUZHRFFFZ0FFRUJhaUVBSUFRZ0FVRUJhaUlCUncwQUN5QUNJQVUyQWdBTWtnSUxJQUpCQURZQ0FDQUdRUUZxSVFGQkp3eFZDeUFCSUFSR0JFQkJuQUVoQXd5UkFnc0NRQUpBSUFFdEFBQkIxQUJyRGdJQUFWUUxJQUZCQVdvaEFVR0dBU0VERFBnQkN5QUJRUUZxSVFGQmh3RWhBd3ozQVF0Qm5RRWhBeUFCSUFSR0RZOENJQUlvQWdBaUFDQUVJQUZyYWlFRklBRWdBR3RCQVdvaEJnSkFBMEFnQVMwQUFDQUFRYmpQQUdvdEFBQkhEVklnQUVFQlJnMEJJQUJCQVdvaEFDQUVJQUZCQVdvaUFVY05BQXNnQWlBRk5nSUFESkFDQ3lBQ1FRQTJBZ0FnQmtFQmFpRUJRU1lNVXd0Qm5nRWhBeUFCSUFSR0RZNENJQUlvQWdBaUFDQUVJQUZyYWlFRklBRWdBR3RCQVdvaEJnSkFBMEFnQVMwQUFDQUFRYnJQQUdvdEFBQkhEVkVnQUVFQlJnMEJJQUJCQVdvaEFDQUVJQUZCQVdvaUFVY05BQXNnQWlBRk5nSUFESThDQ3lBQ1FRQTJBZ0FnQmtFQmFpRUJRUU1NVWd0Qm53RWhBeUFCSUFSR0RZMENJQUlvQWdBaUFDQUVJQUZyYWlFRklBRWdBR3RCQW1vaEJnSkFBMEFnQVMwQUFDQUFRZTNQQUdvdEFBQkhEVkFnQUVFQ1JnMEJJQUJCQVdvaEFDQUVJQUZCQVdvaUFVY05BQXNnQWlBRk5nSUFESTRDQ3lBQ1FRQTJBZ0FnQmtFQmFpRUJRUXdNVVF0Qm9BRWhBeUFCSUFSR0RZd0NJQUlvQWdBaUFDQUVJQUZyYWlFRklBRWdBR3RCQTJvaEJnSkFBMEFnQVMwQUFDQUFRYnpQQUdvdEFBQkhEVThnQUVFRFJnMEJJQUJCQVdvaEFDQUVJQUZCQVdvaUFVY05BQXNnQWlBRk5nSUFESTBDQ3lBQ1FRQTJBZ0FnQmtFQmFpRUJRUTBNVUFzZ0FTQUVSZ1JBUWFFQklRTU1qQUlMQWtBQ1FDQUJMUUFBUWNZQWF3NExBRTlQVDA5UFQwOVBUd0ZQQ3lBQlFRRnFJUUZCaXdFaEF3enpBUXNnQVVFQmFpRUJRWXdCSVFNTThnRUxJQUVnQkVZRVFFR2lBU0VERElzQ0N5QUJMUUFBUWRBQVJ3MU1JQUZCQVdvaEFReEdDeUFCSUFSR0JFQkJvd0VoQXd5S0Fnc0NRQUpBSUFFdEFBQkJ5UUJyRGdjQlRVMU5UVTBBVFFzZ0FVRUJhaUVCUVk0QklRTU04UUVMSUFGQkFXb2hBVUVpREUwTFFhUUJJUU1nQVNBRVJnMklBaUFDS0FJQUlnQWdCQ0FCYTJvaEJTQUJJQUJyUVFGcUlRWUNRQU5BSUFFdEFBQWdBRUhBendCcUxRQUFSdzFMSUFCQkFVWU5BU0FBUVFGcUlRQWdCQ0FCUVFGcUlnRkhEUUFMSUFJZ0JUWUNBQXlKQWdzZ0FrRUFOZ0lBSUFaQkFXb2hBVUVkREV3TElBRWdCRVlFUUVHbEFTRURESWdDQ3dKQUFrQWdBUzBBQUVIU0FHc09Bd0JMQVVzTElBRkJBV29oQVVHUUFTRURETzhCQ3lBQlFRRnFJUUZCQkF4TEN5QUJJQVJHQkVCQnBnRWhBd3lIQWdzQ1FBSkFBa0FDUUFKQUlBRXRBQUJCd1FCckRoVUFUVTFOVFUxTlRVMU5UUUZOVFFKTlRRTk5UUVJOQ3lBQlFRRnFJUUZCaUFFaEF3enhBUXNnQVVFQmFpRUJRWWtCSVFNTThBRUxJQUZCQVdvaEFVR0tBU0VERE84QkN5QUJRUUZxSVFGQmp3RWhBd3p1QVFzZ0FVRUJhaUVCUVpFQklRTU03UUVMUWFjQklRTWdBU0FFUmcyRkFpQUNLQUlBSWdBZ0JDQUJhMm9oQlNBQklBQnJRUUpxSVFZQ1FBTkFJQUV0QUFBZ0FFSHR6d0JxTFFBQVJ3MUlJQUJCQWtZTkFTQUFRUUZxSVFBZ0JDQUJRUUZxSWdGSERRQUxJQUlnQlRZQ0FBeUdBZ3NnQWtFQU5nSUFJQVpCQVdvaEFVRVJERWtMUWFnQklRTWdBU0FFUmcyRUFpQUNLQUlBSWdBZ0JDQUJhMm9oQlNBQklBQnJRUUpxSVFZQ1FBTkFJQUV0QUFBZ0FFSEN6d0JxTFFBQVJ3MUhJQUJCQWtZTkFTQUFRUUZxSVFBZ0JDQUJRUUZxSWdGSERRQUxJQUlnQlRZQ0FBeUZBZ3NnQWtFQU5nSUFJQVpCQVdvaEFVRXNERWdMUWFrQklRTWdBU0FFUmcyREFpQUNLQUlBSWdBZ0JDQUJhMm9oQlNBQklBQnJRUVJxSVFZQ1FBTkFJQUV0QUFBZ0FFSEZ6d0JxTFFBQVJ3MUdJQUJCQkVZTkFTQUFRUUZxSVFBZ0JDQUJRUUZxSWdGSERRQUxJQUlnQlRZQ0FBeUVBZ3NnQWtFQU5nSUFJQVpCQVdvaEFVRXJERWNMUWFvQklRTWdBU0FFUmcyQ0FpQUNLQUlBSWdBZ0JDQUJhMm9oQlNBQklBQnJRUUpxSVFZQ1FBTkFJQUV0QUFBZ0FFSEt6d0JxTFFBQVJ3MUZJQUJCQWtZTkFTQUFRUUZxSVFBZ0JDQUJRUUZxSWdGSERRQUxJQUlnQlRZQ0FBeURBZ3NnQWtFQU5nSUFJQVpCQVdvaEFVRVVERVlMSUFFZ0JFWUVRRUdyQVNFRERJSUNDd0pBQWtBQ1FBSkFJQUV0QUFCQndnQnJEZzhBQVFKSFIwZEhSMGRIUjBkSFJ3TkhDeUFCUVFGcUlRRkJrd0VoQXd6ckFRc2dBVUVCYWlFQlFaUUJJUU1NNmdFTElBRkJBV29oQVVHVkFTRURET2tCQ3lBQlFRRnFJUUZCbGdFaEF3em9BUXNnQVNBRVJnUkFRYXdCSVFNTWdRSUxJQUV0QUFCQnhRQkhEVUlnQVVFQmFpRUJERDBMUWEwQklRTWdBU0FFUmczL0FTQUNLQUlBSWdBZ0JDQUJhMm9oQlNBQklBQnJRUUpxSVFZQ1FBTkFJQUV0QUFBZ0FFSE56d0JxTFFBQVJ3MUNJQUJCQWtZTkFTQUFRUUZxSVFBZ0JDQUJRUUZxSWdGSERRQUxJQUlnQlRZQ0FBeUFBZ3NnQWtFQU5nSUFJQVpCQVdvaEFVRU9ERU1MSUFFZ0JFWUVRRUd1QVNFRERQOEJDeUFCTFFBQVFkQUFSdzFBSUFGQkFXb2hBVUVsREVJTFFhOEJJUU1nQVNBRVJnMzlBU0FDS0FJQUlnQWdCQ0FCYTJvaEJTQUJJQUJyUVFocUlRWUNRQU5BSUFFdEFBQWdBRUhRendCcUxRQUFSdzFBSUFCQkNFWU5BU0FBUVFGcUlRQWdCQ0FCUVFGcUlnRkhEUUFMSUFJZ0JUWUNBQXorQVFzZ0FrRUFOZ0lBSUFaQkFXb2hBVUVxREVFTElBRWdCRVlFUUVHd0FTRUREUDBCQ3dKQUFrQWdBUzBBQUVIVkFHc09Dd0JBUUVCQVFFQkFRRUFCUUFzZ0FVRUJhaUVCUVpvQklRTU01QUVMSUFGQkFXb2hBVUdiQVNFRERPTUJDeUFCSUFSR0JFQkJzUUVoQXd6OEFRc0NRQUpBSUFFdEFBQkJ3UUJyRGhRQVB6OC9QejgvUHo4L1B6OC9QejgvUHo4L0FUOExJQUZCQVdvaEFVR1pBU0VERE9NQkN5QUJRUUZxSVFGQm5BRWhBd3ppQVF0QnNnRWhBeUFCSUFSR0Rmb0JJQUlvQWdBaUFDQUVJQUZyYWlFRklBRWdBR3RCQTJvaEJnSkFBMEFnQVMwQUFDQUFRZG5QQUdvdEFBQkhEVDBnQUVFRFJnMEJJQUJCQVdvaEFDQUVJQUZCQVdvaUFVY05BQXNnQWlBRk5nSUFEUHNCQ3lBQ1FRQTJBZ0FnQmtFQmFpRUJRU0VNUGd0QnN3RWhBeUFCSUFSR0Rma0JJQUlvQWdBaUFDQUVJQUZyYWlFRklBRWdBR3RCQm1vaEJnSkFBMEFnQVMwQUFDQUFRZDNQQUdvdEFBQkhEVHdnQUVFR1JnMEJJQUJCQVdvaEFDQUVJQUZCQVdvaUFVY05BQXNnQWlBRk5nSUFEUG9CQ3lBQ1FRQTJBZ0FnQmtFQmFpRUJRUm9NUFFzZ0FTQUVSZ1JBUWJRQklRTU0rUUVMQWtBQ1FBSkFJQUV0QUFCQnhRQnJEaEVBUFQwOVBUMDlQVDA5QVQwOVBUMDlBajBMSUFGQkFXb2hBVUdkQVNFRERPRUJDeUFCUVFGcUlRRkJuZ0VoQXd6Z0FRc2dBVUVCYWlFQlFaOEJJUU1NM3dFTFFiVUJJUU1nQVNBRVJnMzNBU0FDS0FJQUlnQWdCQ0FCYTJvaEJTQUJJQUJyUVFWcUlRWUNRQU5BSUFFdEFBQWdBRUhrendCcUxRQUFSdzA2SUFCQkJVWU5BU0FBUVFGcUlRQWdCQ0FCUVFGcUlnRkhEUUFMSUFJZ0JUWUNBQXo0QVFzZ0FrRUFOZ0lBSUFaQkFXb2hBVUVvRERzTFFiWUJJUU1nQVNBRVJnMzJBU0FDS0FJQUlnQWdCQ0FCYTJvaEJTQUJJQUJyUVFKcUlRWUNRQU5BSUFFdEFBQWdBRUhxendCcUxRQUFSdzA1SUFCQkFrWU5BU0FBUVFGcUlRQWdCQ0FCUVFGcUlnRkhEUUFMSUFJZ0JUWUNBQXozQVFzZ0FrRUFOZ0lBSUFaQkFXb2hBVUVIRERvTElBRWdCRVlFUUVHM0FTRUREUFlCQ3dKQUFrQWdBUzBBQUVIRkFHc09EZ0E1T1RrNU9UazVPVGs1T1RrQk9Rc2dBVUVCYWlFQlFhRUJJUU1NM1FFTElBRkJBV29oQVVHaUFTRURETndCQzBHNEFTRURJQUVnQkVZTjlBRWdBaWdDQUNJQUlBUWdBV3RxSVFVZ0FTQUFhMEVDYWlFR0FrQURRQ0FCTFFBQUlBQkI3YzhBYWkwQUFFY05OeUFBUVFKR0RRRWdBRUVCYWlFQUlBUWdBVUVCYWlJQlJ3MEFDeUFDSUFVMkFnQU05UUVMSUFKQkFEWUNBQ0FHUVFGcUlRRkJFZ3c0QzBHNUFTRURJQUVnQkVZTjh3RWdBaWdDQUNJQUlBUWdBV3RxSVFVZ0FTQUFhMEVCYWlFR0FrQURRQ0FCTFFBQUlBQkI4TThBYWkwQUFFY05OaUFBUVFGR0RRRWdBRUVCYWlFQUlBUWdBVUVCYWlJQlJ3MEFDeUFDSUFVMkFnQU05QUVMSUFKQkFEWUNBQ0FHUVFGcUlRRkJJQXczQzBHNkFTRURJQUVnQkVZTjhnRWdBaWdDQUNJQUlBUWdBV3RxSVFVZ0FTQUFhMEVCYWlFR0FrQURRQ0FCTFFBQUlBQkI4czhBYWkwQUFFY05OU0FBUVFGR0RRRWdBRUVCYWlFQUlBUWdBVUVCYWlJQlJ3MEFDeUFDSUFVMkFnQU04d0VMSUFKQkFEWUNBQ0FHUVFGcUlRRkJEd3cyQ3lBQklBUkdCRUJCdXdFaEF3enlBUXNDUUFKQUlBRXRBQUJCeVFCckRnY0FOVFUxTlRVQk5Rc2dBVUVCYWlFQlFhVUJJUU1NMlFFTElBRkJBV29oQVVHbUFTRURETmdCQzBHOEFTRURJQUVnQkVZTjhBRWdBaWdDQUNJQUlBUWdBV3RxSVFVZ0FTQUFhMEVIYWlFR0FrQURRQ0FCTFFBQUlBQkI5TThBYWkwQUFFY05NeUFBUVFkR0RRRWdBRUVCYWlFQUlBUWdBVUVCYWlJQlJ3MEFDeUFDSUFVMkFnQU04UUVMSUFKQkFEWUNBQ0FHUVFGcUlRRkJHd3cwQ3lBQklBUkdCRUJCdlFFaEF3endBUXNDUUFKQUFrQWdBUzBBQUVIQ0FHc09FZ0EwTkRRME5EUTBORFFCTkRRME5EUTBBalFMSUFGQkFXb2hBVUdrQVNFREROZ0JDeUFCUVFGcUlRRkJwd0VoQXd6WEFRc2dBVUVCYWlFQlFhZ0JJUU1NMWdFTElBRWdCRVlFUUVHK0FTRURETzhCQ3lBQkxRQUFRYzRBUncwd0lBRkJBV29oQVF3c0N5QUJJQVJHQkVCQnZ3RWhBd3p1QVFzQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQ0FCTFFBQVFjRUFhdzRWQUFFQ0F6OEVCUVkvUHo4SENBa0tDejhNRFE0UFB3c2dBVUVCYWlFQlFlZ0FJUU1NNHdFTElBRkJBV29oQVVIcEFDRURET0lCQ3lBQlFRRnFJUUZCN2dBaEF3emhBUXNnQVVFQmFpRUJRZklBSVFNTTRBRUxJQUZCQVdvaEFVSHpBQ0VERE44QkN5QUJRUUZxSVFGQjlnQWhBd3plQVFzZ0FVRUJhaUVCUWZjQUlRTU0zUUVMSUFGQkFXb2hBVUg2QUNFREROd0JDeUFCUVFGcUlRRkJnd0VoQXd6YkFRc2dBVUVCYWlFQlFZUUJJUU1NMmdFTElBRkJBV29oQVVHRkFTRURETmtCQ3lBQlFRRnFJUUZCa2dFaEF3ellBUXNnQVVFQmFpRUJRWmdCSVFNTTF3RUxJQUZCQVdvaEFVR2dBU0VERE5ZQkN5QUJRUUZxSVFGQm93RWhBd3pWQVFzZ0FVRUJhaUVCUWFvQklRTU0xQUVMSUFFZ0JFY0VRQ0FDUVJBMkFnZ2dBaUFCTmdJRVFhc0JJUU1NMUFFTFFjQUJJUU1NN0FFTFFRQWhBQUpBSUFJb0FqZ2lBMFVOQUNBREtBSTBJZ05GRFFBZ0FpQURFUUFBSVFBTElBQkZEVjRnQUVFVlJ3MEhJQUpCMFFBMkFod2dBaUFCTmdJVUlBSkJzQmMyQWhBZ0FrRVZOZ0lNUVFBaEF3enJBUXNnQVVFQmFpQUJJQVJIRFFnYVFjSUJJUU1NNmdFTEEwQUNRQ0FCTFFBQVFRcHJEZ1FJQUFBTEFBc2dCQ0FCUVFGcUlnRkhEUUFMUWNNQklRTU02UUVMSUFFZ0JFY0VRQ0FDUVJFMkFnZ2dBaUFCTmdJRVFRRWhBd3pRQVF0QnhBRWhBd3pvQVFzZ0FTQUVSZ1JBUWNVQklRTU02QUVMQWtBQ1FDQUJMUUFBUVFwckRnUUJLQ2dBS0FzZ0FVRUJhZ3dKQ3lBQlFRRnFEQVVMSUFFZ0JFWUVRRUhHQVNFRERPY0JDd0pBQWtBZ0FTMEFBRUVLYXc0WEFRc0xBUXNMQ3dzTEN3c0xDd3NMQ3dzTEN3c0xDd0FMQ3lBQlFRRnFJUUVMUWJBQklRTU16UUVMSUFFZ0JFWUVRRUhJQVNFRERPWUJDeUFCTFFBQVFTQkhEUWtnQWtFQU93RXlJQUZCQVdvaEFVR3pBU0VERE13QkN3TkFJQUVoQUFKQUlBRWdCRWNFUUNBQkxRQUFRVEJyUWY4QmNTSURRUXBKRFFFTUp3dEJ4d0VoQXd6bUFRc0NRQ0FDTHdFeUlnRkJtVE5MRFFBZ0FpQUJRUXBzSWdVN0FUSWdCVUgrL3dOeElBTkIvLzhEYzBzTkFDQUFRUUZxSVFFZ0FpQURJQVZxSWdNN0FUSWdBMEgvL3dOeFFlZ0hTUTBCQ3d0QkFDRURJQUpCQURZQ0hDQUNRY0VKTmdJUUlBSkJEVFlDRENBQ0lBQkJBV28yQWhRTTVBRUxJQUpCQURZQ0hDQUNJQUUyQWhRZ0FrSHdERFlDRUNBQ1FSczJBZ3hCQUNFRERPTUJDeUFDS0FJRUlRQWdBa0VBTmdJRUlBSWdBQ0FCRUNZaUFBMEJJQUZCQVdvTElRRkJyUUVoQXd6SUFRc2dBa0hCQVRZQ0hDQUNJQUEyQWd3Z0FpQUJRUUZxTmdJVVFRQWhBd3pnQVFzZ0FpZ0NCQ0VBSUFKQkFEWUNCQ0FDSUFBZ0FSQW1JZ0FOQVNBQlFRRnFDeUVCUWE0QklRTU14UUVMSUFKQndnRTJBaHdnQWlBQU5nSU1JQUlnQVVFQmFqWUNGRUVBSVFNTTNRRUxJQUpCQURZQ0hDQUNJQUUyQWhRZ0FrR1hDellDRUNBQ1FRMDJBZ3hCQUNFREROd0JDeUFDUVFBMkFod2dBaUFCTmdJVUlBSkI0eEEyQWhBZ0FrRUpOZ0lNUVFBaEF3emJBUXNnQWtFQ09nQW9ES3dCQzBFQUlRTWdBa0VBTmdJY0lBSkJyd3MyQWhBZ0FrRUNOZ0lNSUFJZ0FVRUJhallDRkF6WkFRdEJBaUVEREw4QkMwRU5JUU1NdmdFTFFTWWhBd3k5QVF0QkZTRURETHdCQzBFV0lRTU11d0VMUVJnaEF3eTZBUXRCSENFRERMa0JDMEVkSVFNTXVBRUxRU0FoQXd5M0FRdEJJU0VERExZQkMwRWpJUU1NdFFFTFFjWUFJUU1NdEFFTFFTNGhBd3l6QVF0QlBTRURETElCQzBITEFDRURETEVCQzBIT0FDRURETEFCQzBIWUFDRURESzhCQzBIWkFDRURESzRCQzBIYkFDRURESzBCQzBIeEFDRURES3dCQzBIMEFDRURES3NCQzBHTkFTRURES29CQzBHWEFTRURES2tCQzBHcEFTRURES2dCQzBHdkFTRURES2NCQzBHeEFTRURES1lCQ3lBQ1FRQTJBZ0FMUVFBaEF5QUNRUUEyQWh3Z0FpQUJOZ0lVSUFKQjhSczJBaEFnQWtFR05nSU1ETDBCQ3lBQ1FRQTJBZ0FnQmtFQmFpRUJRU1FMT2dBcElBSW9BZ1FoQUNBQ1FRQTJBZ1FnQWlBQUlBRVFKeUlBUlFSQVFlVUFJUU1Nb3dFTElBSkIrUUEyQWh3Z0FpQUJOZ0lVSUFJZ0FEWUNERUVBSVFNTXV3RUxJQUJCRlVjRVFDQUNRUUEyQWh3Z0FpQUJOZ0lVSUFKQnpBNDJBaEFnQWtFZ05nSU1RUUFoQXd5N0FRc2dBa0g0QURZQ0hDQUNJQUUyQWhRZ0FrSEtHRFlDRUNBQ1FSVTJBZ3hCQUNFRERMb0JDeUFDUVFBMkFod2dBaUFCTmdJVUlBSkJqaHMyQWhBZ0FrRUdOZ0lNUVFBaEF3eTVBUXNnQWtFQU5nSWNJQUlnQVRZQ0ZDQUNRZjRSTmdJUUlBSkJCellDREVFQUlRTU11QUVMSUFKQkFEWUNIQ0FDSUFFMkFoUWdBa0dNSERZQ0VDQUNRUWMyQWd4QkFDRURETGNCQ3lBQ1FRQTJBaHdnQWlBQk5nSVVJQUpCd3c4MkFoQWdBa0VITmdJTVFRQWhBd3kyQVFzZ0FrRUFOZ0ljSUFJZ0FUWUNGQ0FDUWNNUE5nSVFJQUpCQnpZQ0RFRUFJUU1NdFFFTElBSW9BZ1FoQUNBQ1FRQTJBZ1FnQWlBQUlBRVFKU0lBUlEwUklBSkI1UUEyQWh3Z0FpQUJOZ0lVSUFJZ0FEWUNERUVBSVFNTXRBRUxJQUlvQWdRaEFDQUNRUUEyQWdRZ0FpQUFJQUVRSlNJQVJRMGdJQUpCMHdBMkFod2dBaUFCTmdJVUlBSWdBRFlDREVFQUlRTU1zd0VMSUFJb0FnUWhBQ0FDUVFBMkFnUWdBaUFBSUFFUUpTSUFSUTBpSUFKQjBnQTJBaHdnQWlBQk5nSVVJQUlnQURZQ0RFRUFJUU1Nc2dFTElBSW9BZ1FoQUNBQ1FRQTJBZ1FnQWlBQUlBRVFKU0lBUlEwT0lBSkI1UUEyQWh3Z0FpQUJOZ0lVSUFJZ0FEWUNERUVBSVFNTXNRRUxJQUlvQWdRaEFDQUNRUUEyQWdRZ0FpQUFJQUVRSlNJQVJRMGRJQUpCMHdBMkFod2dBaUFCTmdJVUlBSWdBRFlDREVFQUlRTU1zQUVMSUFJb0FnUWhBQ0FDUVFBMkFnUWdBaUFBSUFFUUpTSUFSUTBmSUFKQjBnQTJBaHdnQWlBQk5nSVVJQUlnQURZQ0RFRUFJUU1NcndFTElBQkJQMGNOQVNBQlFRRnFDeUVCUVFVaEF3eVVBUXRCQUNFRElBSkJBRFlDSENBQ0lBRTJBaFFnQWtIOUVqWUNFQ0FDUVFjMkFnd01yQUVMSUFKQkFEWUNIQ0FDSUFFMkFoUWdBa0hjQ0RZQ0VDQUNRUWMyQWd4QkFDRURES3NCQ3lBQ0tBSUVJUUFnQWtFQU5nSUVJQUlnQUNBQkVDVWlBRVVOQnlBQ1FlVUFOZ0ljSUFJZ0FUWUNGQ0FDSUFBMkFneEJBQ0VEREtvQkN5QUNLQUlFSVFBZ0FrRUFOZ0lFSUFJZ0FDQUJFQ1VpQUVVTkZpQUNRZE1BTmdJY0lBSWdBVFlDRkNBQ0lBQTJBZ3hCQUNFRERLa0JDeUFDS0FJRUlRQWdBa0VBTmdJRUlBSWdBQ0FCRUNVaUFFVU5HQ0FDUWRJQU5nSWNJQUlnQVRZQ0ZDQUNJQUEyQWd4QkFDRURES2dCQ3lBQ1FRQTJBaHdnQWlBQk5nSVVJQUpCeGdvMkFoQWdBa0VITmdJTVFRQWhBd3luQVFzZ0FpZ0NCQ0VBSUFKQkFEWUNCQ0FDSUFBZ0FSQWxJZ0JGRFFNZ0FrSGxBRFlDSENBQ0lBRTJBaFFnQWlBQU5nSU1RUUFoQXd5bUFRc2dBaWdDQkNFQUlBSkJBRFlDQkNBQ0lBQWdBUkFsSWdCRkRSSWdBa0hUQURZQ0hDQUNJQUUyQWhRZ0FpQUFOZ0lNUVFBaEF3eWxBUXNnQWlnQ0JDRUFJQUpCQURZQ0JDQUNJQUFnQVJBbElnQkZEUlFnQWtIU0FEWUNIQ0FDSUFFMkFoUWdBaUFBTmdJTVFRQWhBd3lrQVFzZ0FpZ0NCQ0VBSUFKQkFEWUNCQ0FDSUFBZ0FSQWxJZ0JGRFFBZ0FrSGxBRFlDSENBQ0lBRTJBaFFnQWlBQU5nSU1RUUFoQXd5akFRdEIxUUFoQXd5SkFRc2dBRUVWUndSQUlBSkJBRFlDSENBQ0lBRTJBaFFnQWtHNURUWUNFQ0FDUVJvMkFneEJBQ0VEREtJQkN5QUNRZVFBTmdJY0lBSWdBVFlDRkNBQ1FlTVhOZ0lRSUFKQkZUWUNERUVBSVFNTW9RRUxJQUpCQURZQ0FDQUdRUUZxSVFFZ0FpMEFLU0lBUVNOclFRdEpEUVFDUUNBQVFRWkxEUUJCQVNBQWRFSEtBSEZGRFFBTUJRdEJBQ0VESUFKQkFEWUNIQ0FDSUFFMkFoUWdBa0gzQ1RZQ0VDQUNRUWcyQWd3TW9BRUxJQUpCQURZQ0FDQUdRUUZxSVFFZ0FpMEFLVUVoUmcwRElBSkJBRFlDSENBQ0lBRTJBaFFnQWtHYkNqWUNFQ0FDUVFnMkFneEJBQ0VEREo4QkN5QUNRUUEyQWdBTFFRQWhBeUFDUVFBMkFod2dBaUFCTmdJVUlBSkJrRE0yQWhBZ0FrRUlOZ0lNREowQkN5QUNRUUEyQWdBZ0JrRUJhaUVCSUFJdEFDbEJJMGtOQUNBQ1FRQTJBaHdnQWlBQk5nSVVJQUpCMHdrMkFoQWdBa0VJTmdJTVFRQWhBd3ljQVF0QjBRQWhBd3lDQVFzZ0FTMEFBRUV3YXlJQVFmOEJjVUVLU1FSQUlBSWdBRG9BS2lBQlFRRnFJUUZCendBaEF3eUNBUXNnQWlnQ0JDRUFJQUpCQURZQ0JDQUNJQUFnQVJBb0lnQkZEWVlCSUFKQjNnQTJBaHdnQWlBQk5nSVVJQUlnQURZQ0RFRUFJUU1NbWdFTElBSW9BZ1FoQUNBQ1FRQTJBZ1FnQWlBQUlBRVFLQ0lBUlEyR0FTQUNRZHdBTmdJY0lBSWdBVFlDRkNBQ0lBQTJBZ3hCQUNFRERKa0JDeUFDS0FJRUlRQWdBa0VBTmdJRUlBSWdBQ0FGRUNnaUFFVUVRQ0FGSVFFTWh3RUxJQUpCMmdBMkFod2dBaUFGTmdJVUlBSWdBRFlDREF5WUFRdEJBQ0VCUVFFaEF3c2dBaUFET2dBcklBVkJBV29oQXdKQUFrQUNRQ0FDTFFBdFFSQnhEUUFDUUFKQUFrQWdBaTBBS2c0REFRQUNCQXNnQmtVTkF3d0NDeUFBRFFFTUFnc2dBVVVOQVFzZ0FpZ0NCQ0VBSUFKQkFEWUNCQ0FDSUFBZ0F4QW9JZ0JGQkVBZ0F5RUJEQUlMSUFKQjJBQTJBaHdnQWlBRE5nSVVJQUlnQURZQ0RFRUFJUU1NbUFFTElBSW9BZ1FoQUNBQ1FRQTJBZ1FnQWlBQUlBTVFLQ0lBUlFSQUlBTWhBUXlIQVFzZ0FrSFpBRFlDSENBQ0lBTTJBaFFnQWlBQU5nSU1RUUFoQXd5WEFRdEJ6QUFoQXd4OUN5QUFRUlZIQkVBZ0FrRUFOZ0ljSUFJZ0FUWUNGQ0FDUVpRTk5nSVFJQUpCSVRZQ0RFRUFJUU1NbGdFTElBSkIxd0EyQWh3Z0FpQUJOZ0lVSUFKQnlSYzJBaEFnQWtFVk5nSU1RUUFoQXd5VkFRdEJBQ0VESUFKQkFEWUNIQ0FDSUFFMkFoUWdBa0dBRVRZQ0VDQUNRUWsyQWd3TWxBRUxJQUlvQWdRaEFDQUNRUUEyQWdRZ0FpQUFJQUVRSlNJQVJRMEFJQUpCMHdBMkFod2dBaUFCTmdJVUlBSWdBRFlDREVFQUlRTU1rd0VMUWNrQUlRTU1lUXNnQWtFQU5nSWNJQUlnQVRZQ0ZDQUNRY0VvTmdJUUlBSkJCellDRENBQ1FRQTJBZ0JCQUNFRERKRUJDeUFDS0FJRUlRQkJBQ0VESUFKQkFEWUNCQ0FDSUFBZ0FSQWxJZ0JGRFFBZ0FrSFNBRFlDSENBQ0lBRTJBaFFnQWlBQU5nSU1ESkFCQzBISUFDRURESFlMSUFKQkFEWUNBQ0FGSVFFTElBSkJnQkk3QVNvZ0FVRUJhaUVCUVFBaEFBSkFJQUlvQWpnaUEwVU5BQ0FES0FJd0lnTkZEUUFnQWlBREVRQUFJUUFMSUFBTkFRdEJ4d0FoQXd4ekN5QUFRUlZHQkVBZ0FrSFJBRFlDSENBQ0lBRTJBaFFnQWtIakZ6WUNFQ0FDUVJVMkFneEJBQ0VEREl3QkMwRUFJUU1nQWtFQU5nSWNJQUlnQVRZQ0ZDQUNRYmtOTmdJUUlBSkJHallDREF5TEFRdEJBQ0VESUFKQkFEWUNIQ0FDSUFFMkFoUWdBa0dnR1RZQ0VDQUNRUjQyQWd3TWlnRUxJQUV0QUFCQk9rWUVRQ0FDS0FJRUlRQkJBQ0VESUFKQkFEWUNCQ0FDSUFBZ0FSQXBJZ0JGRFFFZ0FrSERBRFlDSENBQ0lBQTJBZ3dnQWlBQlFRRnFOZ0lVRElvQkMwRUFJUU1nQWtFQU5nSWNJQUlnQVRZQ0ZDQUNRYkVSTmdJUUlBSkJDallDREF5SkFRc2dBVUVCYWlFQlFUc2hBd3h2Q3lBQ1FjTUFOZ0ljSUFJZ0FEWUNEQ0FDSUFGQkFXbzJBaFFNaHdFTFFRQWhBeUFDUVFBMkFod2dBaUFCTmdJVUlBSkI4QTQyQWhBZ0FrRWNOZ0lNRElZQkN5QUNJQUl2QVRCQkVISTdBVEFNWmdzQ1FDQUNMd0V3SWdCQkNIRkZEUUFnQWkwQUtFRUJSdzBBSUFJdEFDMUJDSEZGRFFNTElBSWdBRUgzK3dOeFFZQUVjanNCTUF3RUN5QUJJQVJIQkVBQ1FBTkFJQUV0QUFCQk1Hc2lBRUgvQVhGQkNrOEVRRUUxSVFNTWJnc2dBaWtESUNJS1FwbXo1c3lacytiTUdWWU5BU0FDSUFwQ0NuNGlDamNESUNBS0lBQ3RRdjhCZ3lJTFFuK0ZWZzBCSUFJZ0NpQUxmRGNESUNBRUlBRkJBV29pQVVjTkFBdEJPU0VERElVQkN5QUNLQUlFSVFCQkFDRURJQUpCQURZQ0JDQUNJQUFnQVVFQmFpSUJFQ29pQUEwTURIY0xRVGtoQXd5REFRc2dBaTBBTUVFZ2NRMEdRY1VCSVFNTWFRdEJBQ0VESUFKQkFEWUNCQ0FDSUFFZ0FSQXFJZ0JGRFFRZ0FrRTZOZ0ljSUFJZ0FEWUNEQ0FDSUFGQkFXbzJBaFFNZ1FFTElBSXRBQ2hCQVVjTkFDQUNMUUF0UVFoeFJRMEJDMEUzSVFNTVpnc2dBaWdDQkNFQVFRQWhBeUFDUVFBMkFnUWdBaUFBSUFFUUtpSUFCRUFnQWtFN05nSWNJQUlnQURZQ0RDQUNJQUZCQVdvMkFoUU1md3NnQVVFQmFpRUJERzRMSUFKQkNEb0FMQXdFQ3lBQlFRRnFJUUVNYlF0QkFDRURJQUpCQURZQ0hDQUNJQUUyQWhRZ0FrSGtFallDRUNBQ1FRUTJBZ3dNZXdzZ0FpZ0NCQ0VBUVFBaEF5QUNRUUEyQWdRZ0FpQUFJQUVRS2lJQVJRMXNJQUpCTnpZQ0hDQUNJQUUyQWhRZ0FpQUFOZ0lNREhvTElBSWdBaThCTUVFZ2Nqc0JNQXRCTUNFRERGOExJQUpCTmpZQ0hDQUNJQUUyQWhRZ0FpQUFOZ0lNREhjTElBQkJMRWNOQVNBQlFRRnFJUUJCQVNFQkFrQUNRQUpBQWtBQ1FDQUNMUUFzUVFWckRnUURBUUlFQUFzZ0FDRUJEQVFMUVFJaEFRd0JDMEVFSVFFTElBSkJBVG9BTENBQ0lBSXZBVEFnQVhJN0FUQWdBQ0VCREFFTElBSWdBaThCTUVFSWNqc0JNQ0FBSVFFTFFUa2hBd3hjQ3lBQ1FRQTZBQ3dMUVRRaEF3eGFDeUFCSUFSR0JFQkJMU0VEREhNTEFrQUNRQU5BQWtBZ0FTMEFBRUVLYXc0RUFnQUFBd0FMSUFRZ0FVRUJhaUlCUncwQUMwRXRJUU1NZEFzZ0FpZ0NCQ0VBUVFBaEF5QUNRUUEyQWdRZ0FpQUFJQUVRS2lJQVJRMENJQUpCTERZQ0hDQUNJQUUyQWhRZ0FpQUFOZ0lNREhNTElBSW9BZ1FoQUVFQUlRTWdBa0VBTmdJRUlBSWdBQ0FCRUNvaUFFVUVRQ0FCUVFGcUlRRU1BZ3NnQWtFc05nSWNJQUlnQURZQ0RDQUNJQUZCQVdvMkFoUU1jZ3NnQVMwQUFFRU5SZ1JBSUFJb0FnUWhBRUVBSVFNZ0FrRUFOZ0lFSUFJZ0FDQUJFQ29pQUVVRVFDQUJRUUZxSVFFTUFnc2dBa0VzTmdJY0lBSWdBRFlDRENBQ0lBRkJBV28yQWhRTWNnc2dBaTBBTFVFQmNRUkFRY1FCSVFNTVdRc2dBaWdDQkNFQVFRQWhBeUFDUVFBMkFnUWdBaUFBSUFFUUtpSUFEUUVNWlF0Qkx5RURERmNMSUFKQkxqWUNIQ0FDSUFFMkFoUWdBaUFBTmdJTURHOExRUUFoQXlBQ1FRQTJBaHdnQWlBQk5nSVVJQUpCOEJRMkFoQWdBa0VETmdJTURHNExRUUVoQXdKQUFrQUNRQUpBSUFJdEFDeEJCV3NPQkFNQkFnQUVDeUFDSUFJdkFUQkJDSEk3QVRBTUF3dEJBaUVEREFFTFFRUWhBd3NnQWtFQk9nQXNJQUlnQWk4Qk1DQURjanNCTUF0QktpRURERk1MUVFBaEF5QUNRUUEyQWh3Z0FpQUJOZ0lVSUFKQjRRODJBaEFnQWtFS05nSU1ER3NMUVFFaEF3SkFBa0FDUUFKQUFrQUNRQ0FDTFFBc1FRSnJEZ2NGQkFRREFRSUFCQXNnQWlBQ0x3RXdRUWh5T3dFd0RBTUxRUUloQXd3QkMwRUVJUU1MSUFKQkFUb0FMQ0FDSUFJdkFUQWdBM0k3QVRBTFFTc2hBd3hTQzBFQUlRTWdBa0VBTmdJY0lBSWdBVFlDRkNBQ1Fhc1NOZ0lRSUFKQkN6WUNEQXhxQzBFQUlRTWdBa0VBTmdJY0lBSWdBVFlDRkNBQ1FmME5OZ0lRSUFKQkhUWUNEQXhwQ3lBQklBUkhCRUFEUUNBQkxRQUFRU0JIRFVnZ0JDQUJRUUZxSWdGSERRQUxRU1VoQXd4cEMwRWxJUU1NYUFzZ0FpMEFMVUVCY1FSQVFjTUJJUU1NVHdzZ0FpZ0NCQ0VBUVFBaEF5QUNRUUEyQWdRZ0FpQUFJQUVRS1NJQUJFQWdBa0VtTmdJY0lBSWdBRFlDRENBQ0lBRkJBV28yQWhRTWFBc2dBVUVCYWlFQkRGd0xJQUZCQVdvaEFTQUNMd0V3SWdCQmdBRnhCRUJCQUNFQUFrQWdBaWdDT0NJRFJRMEFJQU1vQWxRaUEwVU5BQ0FDSUFNUkFBQWhBQXNnQUVVTkJpQUFRUlZIRFI4Z0FrRUZOZ0ljSUFJZ0FUWUNGQ0FDUWZrWE5nSVFJQUpCRlRZQ0RFRUFJUU1NWndzQ1FDQUFRYUFFY1VHZ0JFY05BQ0FDTFFBdFFRSnhEUUJCQUNFRElBSkJBRFlDSENBQ0lBRTJBaFFnQWtHV0V6WUNFQ0FDUVFRMkFnd01ad3NnQWdKL0lBSXZBVEJCRkhGQkZFWUVRRUVCSUFJdEFDaEJBVVlOQVJvZ0FpOEJNa0hsQUVZTUFRc2dBaTBBS1VFRlJnczZBQzVCQUNFQUFrQWdBaWdDT0NJRFJRMEFJQU1vQWlRaUEwVU5BQ0FDSUFNUkFBQWhBQXNDUUFKQUFrQUNRQUpBSUFBT0ZnSUJBQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQU1FQ3lBQ1FRRTZBQzRMSUFJZ0FpOEJNRUhBQUhJN0FUQUxRU2NoQXd4UEN5QUNRU00yQWh3Z0FpQUJOZ0lVSUFKQnBSWTJBaEFnQWtFVk5nSU1RUUFoQXd4bkMwRUFJUU1nQWtFQU5nSWNJQUlnQVRZQ0ZDQUNRZFVMTmdJUUlBSkJFVFlDREF4bUMwRUFJUUFDUUNBQ0tBSTRJZ05GRFFBZ0F5Z0NMQ0lEUlEwQUlBSWdBeEVBQUNFQUN5QUFEUUVMUVE0aEF3eExDeUFBUVJWR0JFQWdBa0VDTmdJY0lBSWdBVFlDRkNBQ1FiQVlOZ0lRSUFKQkZUWUNERUVBSVFNTVpBdEJBQ0VESUFKQkFEWUNIQ0FDSUFFMkFoUWdBa0duRGpZQ0VDQUNRUkkyQWd3TVl3dEJBQ0VESUFKQkFEWUNIQ0FDSUFFMkFoUWdBa0dxSERZQ0VDQUNRUTgyQWd3TVlnc2dBaWdDQkNFQVFRQWhBeUFDUVFBMkFnUWdBaUFBSUFFZ0NxZHFJZ0VRS3lJQVJRMEFJQUpCQlRZQ0hDQUNJQUUyQWhRZ0FpQUFOZ0lNREdFTFFROGhBd3hIQzBFQUlRTWdBa0VBTmdJY0lBSWdBVFlDRkNBQ1FjMFROZ0lRSUFKQkREWUNEQXhmQzBJQklRb0xJQUZCQVdvaEFRSkFJQUlwQXlBaUMwTC8vLy8vLy8vLy93OVlCRUFnQWlBTFFnU0dJQXFFTndNZ0RBRUxRUUFoQXlBQ1FRQTJBaHdnQWlBQk5nSVVJQUpCclFrMkFoQWdBa0VNTmdJTURGNExRU1FoQXd4RUMwRUFJUU1nQWtFQU5nSWNJQUlnQVRZQ0ZDQUNRYzBUTmdJUUlBSkJERFlDREF4Y0N5QUNLQUlFSVFCQkFDRURJQUpCQURZQ0JDQUNJQUFnQVJBc0lnQkZCRUFnQVVFQmFpRUJERklMSUFKQkZ6WUNIQ0FDSUFBMkFnd2dBaUFCUVFGcU5nSVVERnNMSUFJb0FnUWhBRUVBSVFNZ0FrRUFOZ0lFQWtBZ0FpQUFJQUVRTENJQVJRUkFJQUZCQVdvaEFRd0JDeUFDUVJZMkFod2dBaUFBTmdJTUlBSWdBVUVCYWpZQ0ZBeGJDMEVmSVFNTVFRdEJBQ0VESUFKQkFEWUNIQ0FDSUFFMkFoUWdBa0dhRHpZQ0VDQUNRU0kyQWd3TVdRc2dBaWdDQkNFQVFRQWhBeUFDUVFBMkFnUWdBaUFBSUFFUUxTSUFSUVJBSUFGQkFXb2hBUXhRQ3lBQ1FSUTJBaHdnQWlBQU5nSU1JQUlnQVVFQmFqWUNGQXhZQ3lBQ0tBSUVJUUJCQUNFRElBSkJBRFlDQkFKQUlBSWdBQ0FCRUMwaUFFVUVRQ0FCUVFGcUlRRU1BUXNnQWtFVE5nSWNJQUlnQURZQ0RDQUNJQUZCQVdvMkFoUU1XQXRCSGlFRERENExRUUFoQXlBQ1FRQTJBaHdnQWlBQk5nSVVJQUpCeGd3MkFoQWdBa0VqTmdJTURGWUxJQUlvQWdRaEFFRUFJUU1nQWtFQU5nSUVJQUlnQUNBQkVDMGlBRVVFUUNBQlFRRnFJUUVNVGdzZ0FrRVJOZ0ljSUFJZ0FEWUNEQ0FDSUFGQkFXbzJBaFFNVlFzZ0FrRVFOZ0ljSUFJZ0FUWUNGQ0FDSUFBMkFnd01WQXRCQUNFRElBSkJBRFlDSENBQ0lBRTJBaFFnQWtIR0REWUNFQ0FDUVNNMkFnd01Vd3RCQUNFRElBSkJBRFlDSENBQ0lBRTJBaFFnQWtIQUZUWUNFQ0FDUVFJMkFnd01VZ3NnQWlnQ0JDRUFRUUFoQXlBQ1FRQTJBZ1FDUUNBQ0lBQWdBUkF0SWdCRkJFQWdBVUVCYWlFQkRBRUxJQUpCRGpZQ0hDQUNJQUEyQWd3Z0FpQUJRUUZxTmdJVURGSUxRUnNoQXd3NEMwRUFJUU1nQWtFQU5nSWNJQUlnQVRZQ0ZDQUNRY1lNTmdJUUlBSkJJellDREF4UUN5QUNLQUlFSVFCQkFDRURJQUpCQURZQ0JBSkFJQUlnQUNBQkVDd2lBRVVFUUNBQlFRRnFJUUVNQVFzZ0FrRU5OZ0ljSUFJZ0FEWUNEQ0FDSUFGQkFXbzJBaFFNVUF0QkdpRURERFlMUVFBaEF5QUNRUUEyQWh3Z0FpQUJOZ0lVSUFKQm1nODJBaEFnQWtFaU5nSU1ERTRMSUFJb0FnUWhBRUVBSVFNZ0FrRUFOZ0lFQWtBZ0FpQUFJQUVRTENJQVJRUkFJQUZCQVdvaEFRd0JDeUFDUVF3MkFod2dBaUFBTmdJTUlBSWdBVUVCYWpZQ0ZBeE9DMEVaSVFNTU5BdEJBQ0VESUFKQkFEWUNIQ0FDSUFFMkFoUWdBa0dhRHpZQ0VDQUNRU0kyQWd3TVRBc2dBRUVWUndSQVFRQWhBeUFDUVFBMkFod2dBaUFCTmdJVUlBSkJnd3cyQWhBZ0FrRVROZ0lNREV3TElBSkJDallDSENBQ0lBRTJBaFFnQWtIa0ZqWUNFQ0FDUVJVMkFneEJBQ0VEREVzTElBSW9BZ1FoQUVFQUlRTWdBa0VBTmdJRUlBSWdBQ0FCSUFxbmFpSUJFQ3NpQUFSQUlBSkJCellDSENBQ0lBRTJBaFFnQWlBQU5nSU1ERXNMUVJNaEF3d3hDeUFBUVJWSEJFQkJBQ0VESUFKQkFEWUNIQ0FDSUFFMkFoUWdBa0hhRFRZQ0VDQUNRUlEyQWd3TVNnc2dBa0VlTmdJY0lBSWdBVFlDRkNBQ1Fma1hOZ0lRSUFKQkZUWUNERUVBSVFNTVNRdEJBQ0VBQWtBZ0FpZ0NPQ0lEUlEwQUlBTW9BaXdpQTBVTkFDQUNJQU1SQUFBaEFBc2dBRVVOUVNBQVFSVkdCRUFnQWtFRE5nSWNJQUlnQVRZQ0ZDQUNRYkFZTmdJUUlBSkJGVFlDREVFQUlRTU1TUXRCQUNFRElBSkJBRFlDSENBQ0lBRTJBaFFnQWtHbkRqWUNFQ0FDUVJJMkFnd01TQXRCQUNFRElBSkJBRFlDSENBQ0lBRTJBaFFnQWtIYURUWUNFQ0FDUVJRMkFnd01Sd3RCQUNFRElBSkJBRFlDSENBQ0lBRTJBaFFnQWtHbkRqWUNFQ0FDUVJJMkFnd01SZ3NnQWtFQU9nQXZJQUl0QUMxQkJIRkZEVDhMSUFKQkFEb0FMeUFDUVFFNkFEUkJBQ0VERENzTFFRQWhBeUFDUVFBMkFod2dBa0hrRVRZQ0VDQUNRUWMyQWd3Z0FpQUJRUUZxTmdJVURFTUxBa0FEUUFKQUlBRXRBQUJCQ21zT0JBQUNBZ0FDQ3lBRUlBRkJBV29pQVVjTkFBdEIzUUVoQXd4REN3SkFBa0FnQWkwQU5FRUJSdzBBUVFBaEFBSkFJQUlvQWpnaUEwVU5BQ0FES0FKWUlnTkZEUUFnQWlBREVRQUFJUUFMSUFCRkRRQWdBRUVWUncwQklBSkIzQUUyQWh3Z0FpQUJOZ0lVSUFKQjFSWTJBaEFnQWtFVk5nSU1RUUFoQXd4RUMwSEJBU0VERENvTElBSkJBRFlDSENBQ0lBRTJBaFFnQWtIcEN6WUNFQ0FDUVI4MkFneEJBQ0VEREVJTEFrQUNRQ0FDTFFBb1FRRnJEZ0lFQVFBTFFjQUJJUU1NS1F0QnVRRWhBd3dvQ3lBQ1FRSTZBQzlCQUNFQUFrQWdBaWdDT0NJRFJRMEFJQU1vQWdBaUEwVU5BQ0FDSUFNUkFBQWhBQXNnQUVVRVFFSENBU0VERENnTElBQkJGVWNFUUNBQ1FRQTJBaHdnQWlBQk5nSVVJQUpCcEF3MkFoQWdBa0VRTmdJTVFRQWhBd3hCQ3lBQ1Fkc0JOZ0ljSUFJZ0FUWUNGQ0FDUWZvV05nSVFJQUpCRlRZQ0RFRUFJUU1NUUFzZ0FTQUVSZ1JBUWRvQklRTU1RQXNnQVMwQUFFSElBRVlOQVNBQ1FRRTZBQ2dMUWF3QklRTU1KUXRCdndFaEF3d2tDeUFCSUFSSEJFQWdBa0VRTmdJSUlBSWdBVFlDQkVHK0FTRUREQ1FMUWRrQklRTU1QQXNnQVNBRVJnUkFRZGdCSVFNTVBBc2dBUzBBQUVISUFFY05CQ0FCUVFGcUlRRkJ2UUVoQXd3aUN5QUJJQVJHQkVCQjF3RWhBd3c3Q3dKQUFrQWdBUzBBQUVIRkFHc09FQUFGQlFVRkJRVUZCUVVGQlFVRkJRRUZDeUFCUVFGcUlRRkJ1d0VoQXd3aUN5QUJRUUZxSVFGQnZBRWhBd3doQzBIV0FTRURJQUVnQkVZTk9TQUNLQUlBSWdBZ0JDQUJhMm9oQlNBQklBQnJRUUpxSVFZQ1FBTkFJQUV0QUFBZ0FFR0QwQUJxTFFBQVJ3MERJQUJCQWtZTkFTQUFRUUZxSVFBZ0JDQUJRUUZxSWdGSERRQUxJQUlnQlRZQ0FBdzZDeUFDS0FJRUlRQWdBa0lBTndNQUlBSWdBQ0FHUVFGcUlnRVFKeUlBUlFSQVFjWUJJUU1NSVFzZ0FrSFZBVFlDSENBQ0lBRTJBaFFnQWlBQU5nSU1RUUFoQXd3NUMwSFVBU0VESUFFZ0JFWU5PQ0FDS0FJQUlnQWdCQ0FCYTJvaEJTQUJJQUJyUVFGcUlRWUNRQU5BSUFFdEFBQWdBRUdCMEFCcUxRQUFSdzBDSUFCQkFVWU5BU0FBUVFGcUlRQWdCQ0FCUVFGcUlnRkhEUUFMSUFJZ0JUWUNBQXc1Q3lBQ1FZRUVPd0VvSUFJb0FnUWhBQ0FDUWdBM0F3QWdBaUFBSUFaQkFXb2lBUkFuSWdBTkF3d0NDeUFDUVFBMkFnQUxRUUFoQXlBQ1FRQTJBaHdnQWlBQk5nSVVJQUpCMkJzMkFoQWdBa0VJTmdJTUREWUxRYm9CSVFNTUhBc2dBa0hUQVRZQ0hDQUNJQUUyQWhRZ0FpQUFOZ0lNUVFBaEF3dzBDMEVBSVFBQ1FDQUNLQUk0SWdORkRRQWdBeWdDT0NJRFJRMEFJQUlnQXhFQUFDRUFDeUFBUlEwQUlBQkJGVVlOQVNBQ1FRQTJBaHdnQWlBQk5nSVVJQUpCekE0MkFoQWdBa0VnTmdJTVFRQWhBd3d6QzBIa0FDRUREQmtMSUFKQitBQTJBaHdnQWlBQk5nSVVJQUpCeWhnMkFoQWdBa0VWTmdJTVFRQWhBd3d4QzBIU0FTRURJQVFnQVNJQVJnMHdJQVFnQVdzZ0FpZ0NBQ0lCYWlFRklBQWdBV3RCQkdvaEJnSkFBMEFnQUMwQUFDQUJRZnpQQUdvdEFBQkhEUUVnQVVFRVJnMERJQUZCQVdvaEFTQUVJQUJCQVdvaUFFY05BQXNnQWlBRk5nSUFEREVMSUFKQkFEWUNIQ0FDSUFBMkFoUWdBa0dRTXpZQ0VDQUNRUWcyQWd3Z0FrRUFOZ0lBUVFBaEF3d3dDeUFCSUFSSEJFQWdBa0VPTmdJSUlBSWdBVFlDQkVHM0FTRUREQmNMUWRFQklRTU1Md3NnQWtFQU5nSUFJQVpCQVdvaEFRdEJ1QUVoQXd3VUN5QUJJQVJHQkVCQjBBRWhBd3d0Q3lBQkxRQUFRVEJySWdCQi93RnhRUXBKQkVBZ0FpQUFPZ0FxSUFGQkFXb2hBVUcyQVNFRERCUUxJQUlvQWdRaEFDQUNRUUEyQWdRZ0FpQUFJQUVRS0NJQVJRMFVJQUpCendFMkFod2dBaUFCTmdJVUlBSWdBRFlDREVFQUlRTU1MQXNnQVNBRVJnUkFRYzRCSVFNTUxBc0NRQ0FCTFFBQVFTNUdCRUFnQVVFQmFpRUJEQUVMSUFJb0FnUWhBQ0FDUVFBMkFnUWdBaUFBSUFFUUtDSUFSUTBWSUFKQnpRRTJBaHdnQWlBQk5nSVVJQUlnQURZQ0RFRUFJUU1NTEF0QnRRRWhBd3dTQ3lBRUlBRWlCVVlFUUVITUFTRUREQ3NMUVFBaEFFRUJJUUZCQVNFR1FRQWhBd0pBQWtBQ1FBSkFBa0FDZndKQUFrQUNRQUpBQWtBQ1FBSkFJQVV0QUFCQk1Hc09DZ29KQUFFQ0F3UUZCZ2dMQzBFQ0RBWUxRUU1NQlF0QkJBd0VDMEVGREFNTFFRWU1BZ3RCQnd3QkMwRUlDeUVEUVFBaEFVRUFJUVlNQWd0QkNTRURRUUVoQUVFQUlRRkJBQ0VHREFFTFFRQWhBVUVCSVFNTElBSWdBem9BS3lBRlFRRnFJUU1DUUFKQUlBSXRBQzFCRUhFTkFBSkFBa0FDUUNBQ0xRQXFEZ01CQUFJRUN5QUdSUTBEREFJTElBQU5BUXdDQ3lBQlJRMEJDeUFDS0FJRUlRQWdBa0VBTmdJRUlBSWdBQ0FERUNnaUFFVUVRQ0FESVFFTUF3c2dBa0hKQVRZQ0hDQUNJQU0yQWhRZ0FpQUFOZ0lNUVFBaEF3d3RDeUFDS0FJRUlRQWdBa0VBTmdJRUlBSWdBQ0FERUNnaUFFVUVRQ0FESVFFTUdBc2dBa0hLQVRZQ0hDQUNJQU0yQWhRZ0FpQUFOZ0lNUVFBaEF3d3NDeUFDS0FJRUlRQWdBa0VBTmdJRUlBSWdBQ0FGRUNnaUFFVUVRQ0FGSVFFTUZnc2dBa0hMQVRZQ0hDQUNJQVUyQWhRZ0FpQUFOZ0lNRENzTFFiUUJJUU1NRVF0QkFDRUFBa0FnQWlnQ09DSURSUTBBSUFNb0Fqd2lBMFVOQUNBQ0lBTVJBQUFoQUFzQ1FDQUFCRUFnQUVFVlJnMEJJQUpCQURZQ0hDQUNJQUUyQWhRZ0FrR1VEVFlDRUNBQ1FTRTJBZ3hCQUNFRERDc0xRYklCSVFNTUVRc2dBa0hJQVRZQ0hDQUNJQUUyQWhRZ0FrSEpGellDRUNBQ1FSVTJBZ3hCQUNFRERDa0xJQUpCQURZQ0FDQUdRUUZxSVFGQjlRQWhBd3dQQ3lBQ0xRQXBRUVZHQkVCQjR3QWhBd3dQQzBIaUFDRUREQTRMSUFBaEFTQUNRUUEyQWdBTElBSkJBRG9BTEVFSklRTU1EQXNnQWtFQU5nSUFJQWRCQVdvaEFVSEFBQ0VEREFzTFFRRUxPZ0FzSUFKQkFEWUNBQ0FHUVFGcUlRRUxRU2toQXd3SUMwRTRJUU1NQndzQ1FDQUJJQVJIQkVBRFFDQUJMUUFBUVlBK2FpMEFBQ0lBUVFGSEJFQWdBRUVDUncwRElBRkJBV29oQVF3RkN5QUVJQUZCQVdvaUFVY05BQXRCUGlFRERDRUxRVDRoQXd3Z0N3c2dBa0VBT2dBc0RBRUxRUXNoQXd3RUMwRTZJUU1NQXdzZ0FVRUJhaUVCUVMwaEF3d0NDeUFDSUFFNkFDd2dBa0VBTmdJQUlBWkJBV29oQVVFTUlRTU1BUXNnQWtFQU5nSUFJQVpCQVdvaEFVRUtJUU1NQUFzQUMwRUFJUU1nQWtFQU5nSWNJQUlnQVRZQ0ZDQUNRYzBRTmdJUUlBSkJDVFlDREF3WEMwRUFJUU1nQWtFQU5nSWNJQUlnQVRZQ0ZDQUNRZWtLTmdJUUlBSkJDVFlDREF3V0MwRUFJUU1nQWtFQU5nSWNJQUlnQVRZQ0ZDQUNRYmNRTmdJUUlBSkJDVFlDREF3VkMwRUFJUU1nQWtFQU5nSWNJQUlnQVRZQ0ZDQUNRWndSTmdJUUlBSkJDVFlDREF3VUMwRUFJUU1nQWtFQU5nSWNJQUlnQVRZQ0ZDQUNRYzBRTmdJUUlBSkJDVFlDREF3VEMwRUFJUU1nQWtFQU5nSWNJQUlnQVRZQ0ZDQUNRZWtLTmdJUUlBSkJDVFlDREF3U0MwRUFJUU1nQWtFQU5nSWNJQUlnQVRZQ0ZDQUNRYmNRTmdJUUlBSkJDVFlDREF3UkMwRUFJUU1nQWtFQU5nSWNJQUlnQVRZQ0ZDQUNRWndSTmdJUUlBSkJDVFlDREF3UUMwRUFJUU1nQWtFQU5nSWNJQUlnQVRZQ0ZDQUNRWmNWTmdJUUlBSkJEellDREF3UEMwRUFJUU1nQWtFQU5nSWNJQUlnQVRZQ0ZDQUNRWmNWTmdJUUlBSkJEellDREF3T0MwRUFJUU1nQWtFQU5nSWNJQUlnQVRZQ0ZDQUNRY0FTTmdJUUlBSkJDellDREF3TkMwRUFJUU1nQWtFQU5nSWNJQUlnQVRZQ0ZDQUNRWlVKTmdJUUlBSkJDellDREF3TUMwRUFJUU1nQWtFQU5nSWNJQUlnQVRZQ0ZDQUNRZUVQTmdJUUlBSkJDallDREF3TEMwRUFJUU1nQWtFQU5nSWNJQUlnQVRZQ0ZDQUNRZnNQTmdJUUlBSkJDallDREF3S0MwRUFJUU1nQWtFQU5nSWNJQUlnQVRZQ0ZDQUNRZkVaTmdJUUlBSkJBallDREF3SkMwRUFJUU1nQWtFQU5nSWNJQUlnQVRZQ0ZDQUNRY1FVTmdJUUlBSkJBallDREF3SUMwRUFJUU1nQWtFQU5nSWNJQUlnQVRZQ0ZDQUNRZklWTmdJUUlBSkJBallDREF3SEN5QUNRUUkyQWh3Z0FpQUJOZ0lVSUFKQm5CbzJBaEFnQWtFV05nSU1RUUFoQXd3R0MwRUJJUU1NQlF0QjFBQWhBeUFCSUFSR0RRUWdDRUVJYWlFSklBSW9BZ0FoQlFKQUFrQWdBU0FFUndSQUlBVkIyTUlBYWlFSElBUWdCV29nQVdzaEFDQUZRWDl6UVFwcUlnVWdBV29oQmdOQUlBRXRBQUFnQnkwQUFFY0VRRUVDSVFjTUF3c2dCVVVFUUVFQUlRY2dCaUVCREFNTElBVkJBV3NoQlNBSFFRRnFJUWNnQkNBQlFRRnFJZ0ZIRFFBTElBQWhCU0FFSVFFTElBbEJBVFlDQUNBQ0lBVTJBZ0FNQVFzZ0FrRUFOZ0lBSUFrZ0J6WUNBQXNnQ1NBQk5nSUVJQWdvQWd3aEFDQUlLQUlJRGdNQkJBSUFDd0FMSUFKQkFEWUNIQ0FDUWJVYU5nSVFJQUpCRnpZQ0RDQUNJQUJCQVdvMkFoUkJBQ0VEREFJTElBSkJBRFlDSENBQ0lBQTJBaFFnQWtIS0dqWUNFQ0FDUVFrMkFneEJBQ0VEREFFTElBRWdCRVlFUUVFaUlRTU1BUXNnQWtFSk5nSUlJQUlnQVRZQ0JFRWhJUU1MSUFoQkVHb2tBQ0FEUlFSQUlBSW9BZ3doQUF3QkN5QUNJQU0yQWh4QkFDRUFJQUlvQWdRaUFVVU5BQ0FDSUFFZ0JDQUNLQUlJRVFFQUlnRkZEUUFnQWlBRU5nSVVJQUlnQVRZQ0RDQUJJUUFMSUFBTHZnSUJBbjhnQUVFQU9nQUFJQUJCM0FCcUlnRkJBV3RCQURvQUFDQUFRUUE2QUFJZ0FFRUFPZ0FCSUFGQkEydEJBRG9BQUNBQlFRSnJRUUE2QUFBZ0FFRUFPZ0FESUFGQkJHdEJBRG9BQUVFQUlBQnJRUU54SWdFZ0FHb2lBRUVBTmdJQVFkd0FJQUZyUVh4eElnSWdBR29pQVVFRWEwRUFOZ0lBQWtBZ0FrRUpTUTBBSUFCQkFEWUNDQ0FBUVFBMkFnUWdBVUVJYTBFQU5nSUFJQUZCREd0QkFEWUNBQ0FDUVJsSkRRQWdBRUVBTmdJWUlBQkJBRFlDRkNBQVFRQTJBaEFnQUVFQU5nSU1JQUZCRUd0QkFEWUNBQ0FCUVJSclFRQTJBZ0FnQVVFWWEwRUFOZ0lBSUFGQkhHdEJBRFlDQUNBQ0lBQkJCSEZCR0hJaUFtc2lBVUVnU1EwQUlBQWdBbW9oQUFOQUlBQkNBRGNER0NBQVFnQTNBeEFnQUVJQU53TUlJQUJDQURjREFDQUFRU0JxSVFBZ0FVRWdheUlCUVI5TERRQUxDd3RXQVFGL0FrQWdBQ2dDREEwQUFrQUNRQUpBQWtBZ0FDMEFMdzREQVFBREFnc2dBQ2dDT0NJQlJRMEFJQUVvQWl3aUFVVU5BQ0FBSUFFUkFBQWlBUTBEQzBFQUR3c0FDeUFBUWNNV05nSVFRUTRoQVFzZ0FRc2FBQ0FBS0FJTVJRUkFJQUJCMFJzMkFoQWdBRUVWTmdJTUN3c1VBQ0FBS0FJTVFSVkdCRUFnQUVFQU5nSU1Dd3NVQUNBQUtBSU1RUlpHQkVBZ0FFRUFOZ0lNQ3dzSEFDQUFLQUlNQ3djQUlBQW9BaEFMQ1FBZ0FDQUJOZ0lRQ3djQUlBQW9BaFFMRndBZ0FFRWtUd1JBQUFzZ0FFRUNkRUdnTTJvb0FnQUxGd0FnQUVFdVR3UkFBQXNnQUVFQ2RFR3dOR29vQWdBTHZ3a0JBWDlCNnlnaEFRSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFJQUJCNUFCckR2UURZMklBQVdGaFlXRmhZUUlEQkFWaFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdGaFlXRmhCZ2NJQ1FvTERBME9EMkZoWVdGaEVHRmhZV0ZoWVdGaFlXRmhFV0ZoWVdGaFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdGaFlXRmhZUklURkJVV0Z4Z1pHaHRoWVdGaFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdGaFlXRmhZV0ZoSEIwZUh5QWhJaU1rSlNZbktDa3FLeXd0TGk4d01USXpORFUyWVRjNE9UcGhZV0ZoWVdGaFlUdGhZV0U4WVdGaFlUMCtQMkZoWVdGaFlXRmhRR0ZoUVdGaFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdGaFlVSkRSRVZHUjBoSlNrdE1UVTVQVUZGU1UyRmhZV0ZoWVdGaFZGVldWMWhaV2x0aFhGMWhZV0ZoWVdGaFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdGaFlXRmhZV0ZlWVdGaFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWDJCaEMwSGhKdzhMUWFRaER3dEJ5eXdQQzBIK01ROExRY0FrRHd0QnF5UVBDMEdOS0E4TFFlSW1Ed3RCZ0RBUEMwRzVMdzhMUWRja0R3dEI3eDhQQzBIaEh3OExRZm9mRHd0QjhpQVBDMEdvTHc4TFFhNHlEd3RCaURBUEMwSHNKdzhMUVlJaUR3dEJqaDBQQzBIUUxnOExRY29qRHd0QnhUSVBDMEhmSEE4TFFkSWNEd3RCeENBUEMwSFhJQThMUWFJZkR3dEI3UzRQQzBHck1BOExRZFFsRHd0QnpDNFBDMEg2TGc4TFFmd3JEd3RCMGpBUEMwSHhIUThMUWJzZ0R3dEI5eXNQQzBHUU1ROExRZGN4RHd0Qm9pMFBDMEhVSnc4TFFlQXJEd3RCbnl3UEMwSHJNUThMUWRVZkR3dEJ5akVQQzBIZUpROExRZFFlRHd0QjlCd1BDMEduTWc4TFFiRWREd3RCb0IwUEMwRzVNUThMUWJ3d0R3dEJraUVQQzBHekpnOExRZWtzRHd0QnJCNFBDMEhVS3c4TFFmY21Ed3RCZ0NZUEMwR3dJUThMUWY0ZUR3dEJqU01QQzBHSkxROExRZmNpRHd0Qm9ERVBDMEd1SHc4TFFjWWxEd3RCNkI0UEMwR1RJZzhMUWNJdkR3dEJ3eDBQQzBHTExBOExRZUVkRHd0QmpTOFBDMEhxSVE4TFFiUXREd3RCMGk4UEMwSGZNZzhMUWRJeUR3dEI4REFQQzBHcElnOExRZmtqRHd0Qm1SNFBDMEcxTEE4TFFac3dEd3RCa2pJUEMwRzJLdzhMUWNJaUR3dEIrRElQQzBHZUpROExRZEFpRHd0QnVoNFBDMEdCSGc4TEFBdEIxaUVoQVFzZ0FRc1dBQ0FBSUFBdEFDMUIvZ0Z4SUFGQkFFZHlPZ0F0Q3hrQUlBQWdBQzBBTFVIOUFYRWdBVUVBUjBFQmRISTZBQzBMR1FBZ0FDQUFMUUF0UWZzQmNTQUJRUUJIUVFKMGNqb0FMUXNaQUNBQUlBQXRBQzFCOXdGeElBRkJBRWRCQTNSeU9nQXRDejRCQW44Q1FDQUFLQUk0SWdORkRRQWdBeWdDQkNJRFJRMEFJQUFnQVNBQ0lBRnJJQU1SQVFBaUJFRi9SdzBBSUFCQnhoRTJBaEJCR0NFRUN5QUVDejRCQW44Q1FDQUFLQUk0SWdORkRRQWdBeWdDQ0NJRFJRMEFJQUFnQVNBQ0lBRnJJQU1SQVFBaUJFRi9SdzBBSUFCQjlnbzJBaEJCR0NFRUN5QUVDejRCQW44Q1FDQUFLQUk0SWdORkRRQWdBeWdDRENJRFJRMEFJQUFnQVNBQ0lBRnJJQU1SQVFBaUJFRi9SdzBBSUFCQjdSbzJBaEJCR0NFRUN5QUVDejRCQW44Q1FDQUFLQUk0SWdORkRRQWdBeWdDRUNJRFJRMEFJQUFnQVNBQ0lBRnJJQU1SQVFBaUJFRi9SdzBBSUFCQmxSQTJBaEJCR0NFRUN5QUVDejRCQW44Q1FDQUFLQUk0SWdORkRRQWdBeWdDRkNJRFJRMEFJQUFnQVNBQ0lBRnJJQU1SQVFBaUJFRi9SdzBBSUFCQnFoczJBaEJCR0NFRUN5QUVDejRCQW44Q1FDQUFLQUk0SWdORkRRQWdBeWdDR0NJRFJRMEFJQUFnQVNBQ0lBRnJJQU1SQVFBaUJFRi9SdzBBSUFCQjdSTTJBaEJCR0NFRUN5QUVDejRCQW44Q1FDQUFLQUk0SWdORkRRQWdBeWdDS0NJRFJRMEFJQUFnQVNBQ0lBRnJJQU1SQVFBaUJFRi9SdzBBSUFCQjlnZzJBaEJCR0NFRUN5QUVDejRCQW44Q1FDQUFLQUk0SWdORkRRQWdBeWdDSENJRFJRMEFJQUFnQVNBQ0lBRnJJQU1SQVFBaUJFRi9SdzBBSUFCQndoazJBaEJCR0NFRUN5QUVDejRCQW44Q1FDQUFLQUk0SWdORkRRQWdBeWdDSUNJRFJRMEFJQUFnQVNBQ0lBRnJJQU1SQVFBaUJFRi9SdzBBSUFCQmxCUTJBaEJCR0NFRUN5QUVDMWtCQW44Q1FDQUFMUUFvUVFGR0RRQWdBQzhCTWlJQlFlUUFhMEhrQUVrTkFDQUJRY3dCUmcwQUlBRkJzQUpHRFFBZ0FDOEJNQ0lBUWNBQWNRMEFRUUVoQWlBQVFZZ0VjVUdBQkVZTkFDQUFRU2h4UlNFQ0N5QUNDNHdCQVFKL0FrQUNRQUpBSUFBdEFDcEZEUUFnQUMwQUswVU5BQ0FBTHdFd0lnRkJBbkZGRFFFTUFnc2dBQzhCTUNJQlFRRnhSUTBCQzBFQklRSWdBQzBBS0VFQlJnMEFJQUF2QVRJaUFFSGtBR3RCNUFCSkRRQWdBRUhNQVVZTkFDQUFRYkFDUmcwQUlBRkJ3QUJ4RFFCQkFDRUNJQUZCaUFSeFFZQUVSZzBBSUFGQktIRkJBRWNoQWdzZ0FndFhBQ0FBUVJocVFnQTNBd0FnQUVJQU53TUFJQUJCT0dwQ0FEY0RBQ0FBUVRCcVFnQTNBd0FnQUVFb2FrSUFOd01BSUFCQklHcENBRGNEQUNBQVFSQnFRZ0EzQXdBZ0FFRUlha0lBTndNQUlBQkIzUUUyQWh3TEJnQWdBQkF5QzVvdEFRdC9Jd0JCRUdzaUNpUUFRYVRRQUNnQ0FDSUpSUVJBUWVUVEFDZ0NBQ0lGUlFSQVFmRFRBRUovTndJQVFlalRBRUtBZ0lTQWdJREFBRGNDQUVIazB3QWdDa0VJYWtGd2NVSFlxdFdxQlhNaUJUWUNBRUg0MHdCQkFEWUNBRUhJMHdCQkFEWUNBQXRCek5NQVFZRFVCRFlDQUVHYzBBQkJnTlFFTmdJQVFiRFFBQ0FGTmdJQVFhelFBRUYvTmdJQVFkRFRBRUdBckFNMkFnQURRQ0FCUWNqUUFHb2dBVUc4MEFCcUlnSTJBZ0FnQWlBQlFiVFFBR29pQXpZQ0FDQUJRY0RRQUdvZ0F6WUNBQ0FCUWREUUFHb2dBVUhFMEFCcUlnTTJBZ0FnQXlBQ05nSUFJQUZCMk5BQWFpQUJRY3pRQUdvaUFqWUNBQ0FDSUFNMkFnQWdBVUhVMEFCcUlBSTJBZ0FnQVVFZ2FpSUJRWUFDUncwQUMwR00xQVJCd2FzRE5nSUFRYWpRQUVIMDB3QW9BZ0EyQWdCQm1OQUFRY0NyQXpZQ0FFR2swQUJCaU5RRU5nSUFRY3ovQjBFNE5nSUFRWWpVQkNFSkN3SkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBSUFCQjdBRk5CRUJCak5BQUtBSUFJZ1pCRUNBQVFSTnFRWEJ4SUFCQkMwa2JJZ1JCQTNZaUFIWWlBVUVEY1FSQUFrQWdBVUVCY1NBQWNrRUJjeUlDUVFOMElnQkJ0TkFBYWlJQklBQkJ2TkFBYWlnQ0FDSUFLQUlJSWdOR0JFQkJqTkFBSUFaQmZpQUNkM0UyQWdBTUFRc2dBU0FETmdJSUlBTWdBVFlDREFzZ0FFRUlhaUVCSUFBZ0FrRURkQ0lDUVFOeU5nSUVJQUFnQW1vaUFDQUFLQUlFUVFGeU5nSUVEQkVMUVpUUUFDZ0NBQ0lJSUFSUERRRWdBUVJBQWtCQkFpQUFkQ0lDUVFBZ0FtdHlJQUVnQUhSeGFDSUFRUU4wSWdKQnROQUFhaUlCSUFKQnZOQUFhaWdDQUNJQ0tBSUlJZ05HQkVCQmpOQUFJQVpCZmlBQWQzRWlCallDQUF3QkN5QUJJQU0yQWdnZ0F5QUJOZ0lNQ3lBQ0lBUkJBM0kyQWdRZ0FFRURkQ0lBSUFScklRVWdBQ0FDYWlBRk5nSUFJQUlnQkdvaUJDQUZRUUZ5TmdJRUlBZ0VRQ0FJUVhoeFFiVFFBR29oQUVHZzBBQW9BZ0FoQXdKL1FRRWdDRUVEZG5RaUFTQUdjVVVFUUVHTTBBQWdBU0FHY2pZQ0FDQUFEQUVMSUFBb0FnZ0xJZ0VnQXpZQ0RDQUFJQU0yQWdnZ0F5QUFOZ0lNSUFNZ0FUWUNDQXNnQWtFSWFpRUJRYURRQUNBRU5nSUFRWlRRQUNBRk5nSUFEQkVMUVpEUUFDZ0NBQ0lMUlEwQklBdG9RUUowUWJ6U0FHb29BZ0FpQUNnQ0JFRjRjU0FFYXlFRklBQWhBZ05BQWtBZ0FpZ0NFQ0lCUlFSQUlBSkJGR29vQWdBaUFVVU5BUXNnQVNnQ0JFRjRjU0FFYXlJRElBVkpJUUlnQXlBRklBSWJJUVVnQVNBQUlBSWJJUUFnQVNFQ0RBRUxDeUFBS0FJWUlRa2dBQ2dDRENJRElBQkhCRUJCbk5BQUtBSUFHaUFESUFBb0FnZ2lBVFlDQ0NBQklBTTJBZ3dNRUFzZ0FFRVVhaUlDS0FJQUlnRkZCRUFnQUNnQ0VDSUJSUTBESUFCQkVHb2hBZ3NEUUNBQ0lRY2dBU0lEUVJScUlnSW9BZ0FpQVEwQUlBTkJFR29oQWlBREtBSVFJZ0VOQUFzZ0IwRUFOZ0lBREE4TFFYOGhCQ0FBUWI5L1N3MEFJQUJCRTJvaUFVRndjU0VFUVpEUUFDZ0NBQ0lJUlEwQVFRQWdCR3NoQlFKQUFrQUNRQUovUVFBZ0JFR0FBa2tOQUJwQkh5QUVRZi8vL3dkTERRQWFJQVJCSmlBQlFRaDJaeUlBYTNaQkFYRWdBRUVCZEd0QlBtb0xJZ1pCQW5SQnZOSUFhaWdDQUNJQ1JRUkFRUUFoQVVFQUlRTU1BUXRCQUNFQklBUkJHU0FHUVFGMmEwRUFJQVpCSDBjYmRDRUFRUUFoQXdOQUFrQWdBaWdDQkVGNGNTQUVheUlISUFWUERRQWdBaUVESUFjaUJRMEFRUUFoQlNBQ0lRRU1Bd3NnQVNBQ1FSUnFLQUlBSWdjZ0J5QUNJQUJCSFhaQkJIRnFRUkJxS0FJQUlnSkdHeUFCSUFjYklRRWdBRUVCZENFQUlBSU5BQXNMSUFFZ0EzSkZCRUJCQUNFRFFRSWdCblFpQUVFQUlBQnJjaUFJY1NJQVJRMERJQUJvUVFKMFFielNBR29vQWdBaEFRc2dBVVVOQVFzRFFDQUJLQUlFUVhoeElBUnJJZ0lnQlVraEFDQUNJQVVnQUJzaEJTQUJJQU1nQUJzaEF5QUJLQUlRSWdBRWZ5QUFCU0FCUVJScUtBSUFDeUlCRFFBTEN5QURSUTBBSUFWQmxOQUFLQUlBSUFSclR3MEFJQU1vQWhnaEJ5QURJQU1vQWd3aUFFY0VRRUdjMEFBb0FnQWFJQUFnQXlnQ0NDSUJOZ0lJSUFFZ0FEWUNEQXdPQ3lBRFFSUnFJZ0lvQWdBaUFVVUVRQ0FES0FJUUlnRkZEUU1nQTBFUWFpRUNDd05BSUFJaEJpQUJJZ0JCRkdvaUFpZ0NBQ0lCRFFBZ0FFRVFhaUVDSUFBb0FoQWlBUTBBQ3lBR1FRQTJBZ0FNRFF0QmxOQUFLQUlBSWdNZ0JFOEVRRUdnMEFBb0FnQWhBUUpBSUFNZ0JHc2lBa0VRVHdSQUlBRWdCR29pQUNBQ1FRRnlOZ0lFSUFFZ0Eyb2dBallDQUNBQklBUkJBM0kyQWdRTUFRc2dBU0FEUVFOeU5nSUVJQUVnQTJvaUFDQUFLQUlFUVFGeU5nSUVRUUFoQUVFQUlRSUxRWlRRQUNBQ05nSUFRYURRQUNBQU5nSUFJQUZCQ0dvaEFRd1BDMEdZMEFBb0FnQWlBeUFFU3dSQUlBUWdDV29pQUNBRElBUnJJZ0ZCQVhJMkFnUkJwTkFBSUFBMkFnQkJtTkFBSUFFMkFnQWdDU0FFUVFOeU5nSUVJQWxCQ0dvaEFRd1BDMEVBSVFFZ0JBSi9RZVRUQUNnQ0FBUkFRZXpUQUNnQ0FBd0JDMEh3MHdCQ2Z6Y0NBRUhvMHdCQ2dJQ0VnSUNBd0FBM0FnQkI1Tk1BSUFwQkRHcEJjSEZCMktyVnFnVnpOZ0lBUWZqVEFFRUFOZ0lBUWNqVEFFRUFOZ0lBUVlDQUJBc2lBQ0FFUWNjQWFpSUZhaUlHUVFBZ0FHc2lCM0VpQWs4RVFFSDgwd0JCTURZQ0FBd1BDd0pBUWNUVEFDZ0NBQ0lCUlEwQVFielRBQ2dDQUNJSUlBSnFJUUFnQUNBQlRTQUFJQWhMY1EwQVFRQWhBVUg4MHdCQk1EWUNBQXdQQzBISTB3QXRBQUJCQkhFTkJBSkFBa0FnQ1FSQVFjelRBQ0VCQTBBZ0FTZ0NBQ0lBSUFsTkJFQWdBQ0FCS0FJRWFpQUpTdzBEQ3lBQktBSUlJZ0VOQUFzTFFRQVFNeUlBUVg5R0RRVWdBaUVHUWVqVEFDZ0NBQ0lCUVFGcklnTWdBSEVFUUNBQ0lBQnJJQUFnQTJwQkFDQUJhM0ZxSVFZTElBUWdCazhOQlNBR1FmNy8vLzhIU3cwRlFjVFRBQ2dDQUNJREJFQkJ2Tk1BS0FJQUlnY2dCbW9oQVNBQklBZE5EUVlnQVNBRFN3MEdDeUFHRURNaUFTQUFSdzBCREFjTElBWWdBMnNnQjNFaUJrSCsvLy8vQjBzTkJDQUdFRE1oQUNBQUlBRW9BZ0FnQVNnQ0JHcEdEUU1nQUNFQkN3SkFJQVlnQkVISUFHcFBEUUFnQVVGL1JnMEFRZXpUQUNnQ0FDSUFJQVVnQm10cVFRQWdBR3R4SWdCQi92Ly8vd2RMQkVBZ0FTRUFEQWNMSUFBUU0wRi9Sd1JBSUFBZ0Jtb2hCaUFCSVFBTUJ3dEJBQ0FHYXhBekdnd0VDeUFCSWdCQmYwY05CUXdEQzBFQUlRTU1EQXRCQUNFQURBb0xJQUJCZjBjTkFndEJ5Tk1BUWNqVEFDZ0NBRUVFY2pZQ0FBc2dBa0grLy8vL0Iwc05BU0FDRURNaEFFRUFFRE1oQVNBQVFYOUdEUUVnQVVGL1JnMEJJQUFnQVU4TkFTQUJJQUJySWdZZ0JFRTRhazBOQVF0QnZOTUFRYnpUQUNnQ0FDQUdhaUlCTmdJQVFjRFRBQ2dDQUNBQlNRUkFRY0RUQUNBQk5nSUFDd0pBQWtBQ1FFR2swQUFvQWdBaUFnUkFRY3pUQUNFQkEwQWdBQ0FCS0FJQUlnTWdBU2dDQkNJRmFrWU5BaUFCS0FJSUlnRU5BQXNNQWd0Qm5OQUFLQUlBSWdGQkFFY2dBQ0FCVDNGRkJFQkJuTkFBSUFBMkFnQUxRUUFoQVVIUTB3QWdCallDQUVITTB3QWdBRFlDQUVHczBBQkJmellDQUVHdzBBQkI1Tk1BS0FJQU5nSUFRZGpUQUVFQU5nSUFBMEFnQVVISTBBQnFJQUZCdk5BQWFpSUNOZ0lBSUFJZ0FVRzAwQUJxSWdNMkFnQWdBVUhBMEFCcUlBTTJBZ0FnQVVIUTBBQnFJQUZCeE5BQWFpSUROZ0lBSUFNZ0FqWUNBQ0FCUWRqUUFHb2dBVUhNMEFCcUlnSTJBZ0FnQWlBRE5nSUFJQUZCMU5BQWFpQUNOZ0lBSUFGQklHb2lBVUdBQWtjTkFBdEJlQ0FBYTBFUGNTSUJJQUJxSWdJZ0JrRTRheUlESUFGcklnRkJBWEkyQWdSQnFOQUFRZlRUQUNnQ0FEWUNBRUdZMEFBZ0FUWUNBRUdrMEFBZ0FqWUNBQ0FBSUFOcVFUZzJBZ1FNQWdzZ0FDQUNUUTBBSUFJZ0Ewa05BQ0FCS0FJTVFRaHhEUUJCZUNBQ2EwRVBjU0lBSUFKcUlnTkJtTkFBS0FJQUlBWnFJZ2NnQUdzaUFFRUJjallDQkNBQklBVWdCbW8yQWdSQnFOQUFRZlRUQUNnQ0FEWUNBRUdZMEFBZ0FEWUNBRUdrMEFBZ0F6WUNBQ0FDSUFkcVFUZzJBZ1FNQVFzZ0FFR2MwQUFvQWdCSkJFQkJuTkFBSUFBMkFnQUxJQUFnQm1vaEEwSE0wd0FoQVFKQUFrQUNRQU5BSUFNZ0FTZ0NBRWNFUUNBQktBSUlJZ0VOQVF3Q0N3c2dBUzBBREVFSWNVVU5BUXRCek5NQUlRRURRQ0FCS0FJQUlnTWdBazBFUUNBRElBRW9BZ1JxSWdVZ0Frc05Bd3NnQVNnQ0NDRUJEQUFMQUFzZ0FTQUFOZ0lBSUFFZ0FTZ0NCQ0FHYWpZQ0JDQUFRWGdnQUd0QkQzRnFJZ2tnQkVFRGNqWUNCQ0FEUVhnZ0EydEJEM0ZxSWdZZ0JDQUphaUlFYXlFQklBSWdCa1lFUUVHazBBQWdCRFlDQUVHWTBBQkJtTkFBS0FJQUlBRnFJZ0EyQWdBZ0JDQUFRUUZ5TmdJRURBZ0xRYURRQUNnQ0FDQUdSZ1JBUWFEUUFDQUVOZ0lBUVpUUUFFR1UwQUFvQWdBZ0FXb2lBRFlDQUNBRUlBQkJBWEkyQWdRZ0FDQUVhaUFBTmdJQURBZ0xJQVlvQWdRaUJVRURjVUVCUncwR0lBVkJlSEVoQ0NBRlFmOEJUUVJBSUFWQkEzWWhBeUFHS0FJSUlnQWdCaWdDRENJQ1JnUkFRWXpRQUVHTTBBQW9BZ0JCZmlBRGQzRTJBZ0FNQndzZ0FpQUFOZ0lJSUFBZ0FqWUNEQXdHQ3lBR0tBSVlJUWNnQmlBR0tBSU1JZ0JIQkVBZ0FDQUdLQUlJSWdJMkFnZ2dBaUFBTmdJTURBVUxJQVpCRkdvaUFpZ0NBQ0lGUlFSQUlBWW9BaEFpQlVVTkJDQUdRUkJxSVFJTEEwQWdBaUVESUFVaUFFRVVhaUlDS0FJQUlnVU5BQ0FBUVJCcUlRSWdBQ2dDRUNJRkRRQUxJQU5CQURZQ0FBd0VDMEY0SUFCclFROXhJZ0VnQUdvaUJ5QUdRVGhySWdNZ0FXc2lBVUVCY2pZQ0JDQUFJQU5xUVRnMkFnUWdBaUFGUVRjZ0JXdEJEM0ZxUVQ5cklnTWdBeUFDUVJCcVNSc2lBMEVqTmdJRVFhalFBRUgwMHdBb0FnQTJBZ0JCbU5BQUlBRTJBZ0JCcE5BQUlBYzJBZ0FnQTBFUWFrSFUwd0FwQWdBM0FnQWdBMEhNMHdBcEFnQTNBZ2hCMU5NQUlBTkJDR28yQWdCQjBOTUFJQVkyQWdCQnpOTUFJQUEyQWdCQjJOTUFRUUEyQWdBZ0EwRWthaUVCQTBBZ0FVRUhOZ0lBSUFVZ0FVRUVhaUlCU3cwQUN5QUNJQU5HRFFBZ0F5QURLQUlFUVg1eE5nSUVJQU1nQXlBQ2F5SUZOZ0lBSUFJZ0JVRUJjallDQkNBRlFmOEJUUVJBSUFWQmVIRkJ0TkFBYWlFQUFuOUJqTkFBS0FJQUlnRkJBU0FGUVFOMmRDSURjVVVFUUVHTTBBQWdBU0FEY2pZQ0FDQUFEQUVMSUFBb0FnZ0xJZ0VnQWpZQ0RDQUFJQUkyQWdnZ0FpQUFOZ0lNSUFJZ0FUWUNDQXdCQzBFZklRRWdCVUgvLy84SFRRUkFJQVZCSmlBRlFRaDJaeUlBYTNaQkFYRWdBRUVCZEd0QlBtb2hBUXNnQWlBQk5nSWNJQUpDQURjQ0VDQUJRUUowUWJ6U0FHb2hBRUdRMEFBb0FnQWlBMEVCSUFGMElnWnhSUVJBSUFBZ0FqWUNBRUdRMEFBZ0F5QUdjallDQUNBQ0lBQTJBaGdnQWlBQ05nSUlJQUlnQWpZQ0RBd0JDeUFGUVJrZ0FVRUJkbXRCQUNBQlFSOUhHM1FoQVNBQUtBSUFJUU1DUUFOQUlBTWlBQ2dDQkVGNGNTQUZSZzBCSUFGQkhYWWhBeUFCUVFGMElRRWdBQ0FEUVFSeGFrRVFhaUlHS0FJQUlnTU5BQXNnQmlBQ05nSUFJQUlnQURZQ0dDQUNJQUkyQWd3Z0FpQUNOZ0lJREFFTElBQW9BZ2dpQVNBQ05nSU1JQUFnQWpZQ0NDQUNRUUEyQWhnZ0FpQUFOZ0lNSUFJZ0FUWUNDQXRCbU5BQUtBSUFJZ0VnQkUwTkFFR2swQUFvQWdBaUFDQUVhaUlDSUFFZ0JHc2lBVUVCY2pZQ0JFR1kwQUFnQVRZQ0FFR2swQUFnQWpZQ0FDQUFJQVJCQTNJMkFnUWdBRUVJYWlFQkRBZ0xRUUFoQVVIODB3QkJNRFlDQUF3SEMwRUFJUUFMSUFkRkRRQUNRQ0FHS0FJY0lnSkJBblJCdk5JQWFpSURLQUlBSUFaR0JFQWdBeUFBTmdJQUlBQU5BVUdRMEFCQmtOQUFLQUlBUVg0Z0FuZHhOZ0lBREFJTElBZEJFRUVVSUFjb0FoQWdCa1liYWlBQU5nSUFJQUJGRFFFTElBQWdCellDR0NBR0tBSVFJZ0lFUUNBQUlBSTJBaEFnQWlBQU5nSVlDeUFHUVJScUtBSUFJZ0pGRFFBZ0FFRVVhaUFDTmdJQUlBSWdBRFlDR0FzZ0FTQUlhaUVCSUFZZ0NHb2lCaWdDQkNFRkN5QUdJQVZCZm5FMkFnUWdBU0FFYWlBQk5nSUFJQVFnQVVFQmNqWUNCQ0FCUWY4QlRRUkFJQUZCZUhGQnROQUFhaUVBQW45QmpOQUFLQUlBSWdKQkFTQUJRUU4yZENJQmNVVUVRRUdNMEFBZ0FTQUNjallDQUNBQURBRUxJQUFvQWdnTElnRWdCRFlDRENBQUlBUTJBZ2dnQkNBQU5nSU1JQVFnQVRZQ0NBd0JDMEVmSVFVZ0FVSC8vLzhIVFFSQUlBRkJKaUFCUVFoMlp5SUFhM1pCQVhFZ0FFRUJkR3RCUG1vaEJRc2dCQ0FGTmdJY0lBUkNBRGNDRUNBRlFRSjBRYnpTQUdvaEFFR1EwQUFvQWdBaUFrRUJJQVYwSWdOeFJRUkFJQUFnQkRZQ0FFR1EwQUFnQWlBRGNqWUNBQ0FFSUFBMkFoZ2dCQ0FFTmdJSUlBUWdCRFlDREF3QkN5QUJRUmtnQlVFQmRtdEJBQ0FGUVI5SEczUWhCU0FBS0FJQUlRQUNRQU5BSUFBaUFpZ0NCRUY0Y1NBQlJnMEJJQVZCSFhZaEFDQUZRUUYwSVFVZ0FpQUFRUVJ4YWtFUWFpSURLQUlBSWdBTkFBc2dBeUFFTmdJQUlBUWdBallDR0NBRUlBUTJBZ3dnQkNBRU5nSUlEQUVMSUFJb0FnZ2lBQ0FFTmdJTUlBSWdCRFlDQ0NBRVFRQTJBaGdnQkNBQ05nSU1JQVFnQURZQ0NBc2dDVUVJYWlFQkRBSUxBa0FnQjBVTkFBSkFJQU1vQWh3aUFVRUNkRUc4MGdCcUlnSW9BZ0FnQTBZRVFDQUNJQUEyQWdBZ0FBMEJRWkRRQUNBSVFYNGdBWGR4SWdnMkFnQU1BZ3NnQjBFUVFSUWdCeWdDRUNBRFJodHFJQUEyQWdBZ0FFVU5BUXNnQUNBSE5nSVlJQU1vQWhBaUFRUkFJQUFnQVRZQ0VDQUJJQUEyQWhnTElBTkJGR29vQWdBaUFVVU5BQ0FBUVJScUlBRTJBZ0FnQVNBQU5nSVlDd0pBSUFWQkQwMEVRQ0FESUFRZ0JXb2lBRUVEY2pZQ0JDQUFJQU5xSWdBZ0FDZ0NCRUVCY2pZQ0JBd0JDeUFESUFScUlnSWdCVUVCY2pZQ0JDQURJQVJCQTNJMkFnUWdBaUFGYWlBRk5nSUFJQVZCL3dGTkJFQWdCVUY0Y1VHMDBBQnFJUUFDZjBHTTBBQW9BZ0FpQVVFQklBVkJBM1owSWdWeFJRUkFRWXpRQUNBQklBVnlOZ0lBSUFBTUFRc2dBQ2dDQ0FzaUFTQUNOZ0lNSUFBZ0FqWUNDQ0FDSUFBMkFnd2dBaUFCTmdJSURBRUxRUjhoQVNBRlFmLy8vd2ROQkVBZ0JVRW1JQVZCQ0habklnQnJka0VCY1NBQVFRRjBhMEUrYWlFQkN5QUNJQUUyQWh3Z0FrSUFOd0lRSUFGQkFuUkJ2TklBYWlFQVFRRWdBWFFpQkNBSWNVVUVRQ0FBSUFJMkFnQkJrTkFBSUFRZ0NISTJBZ0FnQWlBQU5nSVlJQUlnQWpZQ0NDQUNJQUkyQWd3TUFRc2dCVUVaSUFGQkFYWnJRUUFnQVVFZlJ4dDBJUUVnQUNnQ0FDRUVBa0FEUUNBRUlnQW9BZ1JCZUhFZ0JVWU5BU0FCUVIxMklRUWdBVUVCZENFQklBQWdCRUVFY1dwQkVHb2lCaWdDQUNJRURRQUxJQVlnQWpZQ0FDQUNJQUEyQWhnZ0FpQUNOZ0lNSUFJZ0FqWUNDQXdCQ3lBQUtBSUlJZ0VnQWpZQ0RDQUFJQUkyQWdnZ0FrRUFOZ0lZSUFJZ0FEWUNEQ0FDSUFFMkFnZ0xJQU5CQ0dvaEFRd0JDd0pBSUFsRkRRQUNRQ0FBS0FJY0lnRkJBblJCdk5JQWFpSUNLQUlBSUFCR0JFQWdBaUFETmdJQUlBTU5BVUdRMEFBZ0MwRitJQUYzY1RZQ0FBd0NDeUFKUVJCQkZDQUpLQUlRSUFCR0cyb2dBellDQUNBRFJRMEJDeUFESUFrMkFoZ2dBQ2dDRUNJQkJFQWdBeUFCTmdJUUlBRWdBellDR0FzZ0FFRVVhaWdDQUNJQlJRMEFJQU5CRkdvZ0FUWUNBQ0FCSUFNMkFoZ0xBa0FnQlVFUFRRUkFJQUFnQkNBRmFpSUJRUU55TmdJRUlBQWdBV29pQVNBQktBSUVRUUZ5TmdJRURBRUxJQUFnQkdvaUJ5QUZRUUZ5TmdJRUlBQWdCRUVEY2pZQ0JDQUZJQWRxSUFVMkFnQWdDQVJBSUFoQmVIRkJ0TkFBYWlFQlFhRFFBQ2dDQUNFREFuOUJBU0FJUVFOMmRDSUNJQVp4UlFSQVFZelFBQ0FDSUFaeU5nSUFJQUVNQVFzZ0FTZ0NDQXNpQWlBRE5nSU1JQUVnQXpZQ0NDQURJQUUyQWd3Z0F5QUNOZ0lJQzBHZzBBQWdCellDQUVHVTBBQWdCVFlDQUFzZ0FFRUlhaUVCQ3lBS1FSQnFKQUFnQVF0REFDQUFSUVJBUHdCQkVIUVBDd0pBSUFCQi8vOERjUTBBSUFCQkFFZ05BQ0FBUVJCMlFBQWlBRUYvUmdSQVFmelRBRUV3TmdJQVFYOFBDeUFBUVJCMER3c0FDd3ZjUHlJQVFZQUlDd2tCQUFBQUFnQUFBQU1BUVpRSUN3VUVBQUFBQlFCQnBBZ0xDUVlBQUFBSEFBQUFDQUJCM0FnTGlpMUpiblpoYkdsa0lHTm9ZWElnYVc0Z2RYSnNJSEYxWlhKNUFGTndZVzRnWTJGc2JHSmhZMnNnWlhKeWIzSWdhVzRnYjI1ZlltOWtlUUJEYjI1MFpXNTBMVXhsYm1kMGFDQnZkbVZ5Wm14dmR3QkRhSFZ1YXlCemFYcGxJRzkyWlhKbWJHOTNBRkpsYzNCdmJuTmxJRzkyWlhKbWJHOTNBRWx1ZG1Gc2FXUWdiV1YwYUc5a0lHWnZjaUJJVkZSUUwzZ3VlQ0J5WlhGMVpYTjBBRWx1ZG1Gc2FXUWdiV1YwYUc5a0lHWnZjaUJTVkZOUUwzZ3VlQ0J5WlhGMVpYTjBBRVY0Y0dWamRHVmtJRk5QVlZKRFJTQnRaWFJvYjJRZ1ptOXlJRWxEUlM5NExuZ2djbVZ4ZFdWemRBQkpiblpoYkdsa0lHTm9ZWElnYVc0Z2RYSnNJR1p5WVdkdFpXNTBJSE4wWVhKMEFFVjRjR1ZqZEdWa0lHUnZkQUJUY0dGdUlHTmhiR3hpWVdOcklHVnljbTl5SUdsdUlHOXVYM04wWVhSMWN3QkpiblpoYkdsa0lISmxjM0J2Ym5ObElITjBZWFIxY3dCSmJuWmhiR2xrSUdOb1lYSmhZM1JsY2lCcGJpQmphSFZ1YXlCbGVIUmxibk5wYjI1ekFGVnpaWElnWTJGc2JHSmhZMnNnWlhKeWIzSUFZRzl1WDNKbGMyVjBZQ0JqWVd4c1ltRmpheUJsY25KdmNnQmdiMjVmWTJoMWJtdGZhR1ZoWkdWeVlDQmpZV3hzWW1GamF5Qmxjbkp2Y2dCZ2IyNWZiV1Z6YzJGblpWOWlaV2RwYm1BZ1kyRnNiR0poWTJzZ1pYSnliM0lBWUc5dVgyTm9kVzVyWDJWNGRHVnVjMmx2Ymw5MllXeDFaV0FnWTJGc2JHSmhZMnNnWlhKeWIzSUFZRzl1WDNOMFlYUjFjMTlqYjIxd2JHVjBaV0FnWTJGc2JHSmhZMnNnWlhKeWIzSUFZRzl1WDNabGNuTnBiMjVmWTI5dGNHeGxkR1ZnSUdOaGJHeGlZV05ySUdWeWNtOXlBR0J2Ymw5MWNteGZZMjl0Y0d4bGRHVmdJR05oYkd4aVlXTnJJR1Z5Y205eUFHQnZibDlqYUhWdWExOWpiMjF3YkdWMFpXQWdZMkZzYkdKaFkyc2daWEp5YjNJQVlHOXVYMmhsWVdSbGNsOTJZV3gxWlY5amIyMXdiR1YwWldBZ1kyRnNiR0poWTJzZ1pYSnliM0lBWUc5dVgyMWxjM05oWjJWZlkyOXRjR3hsZEdWZ0lHTmhiR3hpWVdOcklHVnljbTl5QUdCdmJsOXRaWFJvYjJSZlkyOXRjR3hsZEdWZ0lHTmhiR3hpWVdOcklHVnljbTl5QUdCdmJsOW9aV0ZrWlhKZlptbGxiR1JmWTI5dGNHeGxkR1ZnSUdOaGJHeGlZV05ySUdWeWNtOXlBR0J2Ymw5amFIVnVhMTlsZUhSbGJuTnBiMjVmYm1GdFpXQWdZMkZzYkdKaFkyc2daWEp5YjNJQVZXNWxlSEJsWTNSbFpDQmphR0Z5SUdsdUlIVnliQ0J6WlhKMlpYSUFTVzUyWVd4cFpDQm9aV0ZrWlhJZ2RtRnNkV1VnWTJoaGNnQkpiblpoYkdsa0lHaGxZV1JsY2lCbWFXVnNaQ0JqYUdGeUFGTndZVzRnWTJGc2JHSmhZMnNnWlhKeWIzSWdhVzRnYjI1ZmRtVnljMmx2YmdCSmJuWmhiR2xrSUcxcGJtOXlJSFpsY25OcGIyNEFTVzUyWVd4cFpDQnRZV3B2Y2lCMlpYSnphVzl1QUVWNGNHVmpkR1ZrSUhOd1lXTmxJR0ZtZEdWeUlIWmxjbk5wYjI0QVJYaHdaV04wWldRZ1ExSk1SaUJoWm5SbGNpQjJaWEp6YVc5dUFFbHVkbUZzYVdRZ1NGUlVVQ0IyWlhKemFXOXVBRWx1ZG1Gc2FXUWdhR1ZoWkdWeUlIUnZhMlZ1QUZOd1lXNGdZMkZzYkdKaFkyc2daWEp5YjNJZ2FXNGdiMjVmZFhKc0FFbHVkbUZzYVdRZ1kyaGhjbUZqZEdWeWN5QnBiaUIxY213QVZXNWxlSEJsWTNSbFpDQnpkR0Z5ZENCamFHRnlJR2x1SUhWeWJBQkViM1ZpYkdVZ1FDQnBiaUIxY213QVJXMXdkSGtnUTI5dWRHVnVkQzFNWlc1bmRHZ0FTVzUyWVd4cFpDQmphR0Z5WVdOMFpYSWdhVzRnUTI5dWRHVnVkQzFNWlc1bmRHZ0FSSFZ3YkdsallYUmxJRU52Ym5SbGJuUXRUR1Z1WjNSb0FFbHVkbUZzYVdRZ1kyaGhjaUJwYmlCMWNtd2djR0YwYUFCRGIyNTBaVzUwTFV4bGJtZDBhQ0JqWVc0bmRDQmlaU0J3Y21WelpXNTBJSGRwZEdnZ1ZISmhibk5tWlhJdFJXNWpiMlJwYm1jQVNXNTJZV3hwWkNCamFHRnlZV04wWlhJZ2FXNGdZMmgxYm1zZ2MybDZaUUJUY0dGdUlHTmhiR3hpWVdOcklHVnljbTl5SUdsdUlHOXVYMmhsWVdSbGNsOTJZV3gxWlFCVGNHRnVJR05oYkd4aVlXTnJJR1Z5Y205eUlHbHVJRzl1WDJOb2RXNXJYMlY0ZEdWdWMybHZibDkyWVd4MVpRQkpiblpoYkdsa0lHTm9ZWEpoWTNSbGNpQnBiaUJqYUhWdWF5QmxlSFJsYm5OcGIyNXpJSFpoYkhWbEFFMXBjM05wYm1jZ1pYaHdaV04wWldRZ1RFWWdZV1owWlhJZ2FHVmhaR1Z5SUhaaGJIVmxBRWx1ZG1Gc2FXUWdZRlJ5WVc1elptVnlMVVZ1WTI5a2FXNW5ZQ0JvWldGa1pYSWdkbUZzZFdVQVNXNTJZV3hwWkNCamFHRnlZV04wWlhJZ2FXNGdZMmgxYm1zZ1pYaDBaVzV6YVc5dWN5QnhkVzkwWlNCMllXeDFaUUJKYm5aaGJHbGtJR05vWVhKaFkzUmxjaUJwYmlCamFIVnVheUJsZUhSbGJuTnBiMjV6SUhGMWIzUmxaQ0IyWVd4MVpRQlFZWFZ6WldRZ1lua2diMjVmYUdWaFpHVnljMTlqYjIxd2JHVjBaUUJKYm5aaGJHbGtJRVZQUmlCemRHRjBaUUJ2Ymw5eVpYTmxkQ0J3WVhWelpRQnZibDlqYUhWdWExOW9aV0ZrWlhJZ2NHRjFjMlVBYjI1ZmJXVnpjMkZuWlY5aVpXZHBiaUJ3WVhWelpRQnZibDlqYUhWdWExOWxlSFJsYm5OcGIyNWZkbUZzZFdVZ2NHRjFjMlVBYjI1ZmMzUmhkSFZ6WDJOdmJYQnNaWFJsSUhCaGRYTmxBRzl1WDNabGNuTnBiMjVmWTI5dGNHeGxkR1VnY0dGMWMyVUFiMjVmZFhKc1gyTnZiWEJzWlhSbElIQmhkWE5sQUc5dVgyTm9kVzVyWDJOdmJYQnNaWFJsSUhCaGRYTmxBRzl1WDJobFlXUmxjbDkyWVd4MVpWOWpiMjF3YkdWMFpTQndZWFZ6WlFCdmJsOXRaWE56WVdkbFgyTnZiWEJzWlhSbElIQmhkWE5sQUc5dVgyMWxkR2h2WkY5amIyMXdiR1YwWlNCd1lYVnpaUUJ2Ymw5b1pXRmtaWEpmWm1sbGJHUmZZMjl0Y0d4bGRHVWdjR0YxYzJVQWIyNWZZMmgxYm10ZlpYaDBaVzV6YVc5dVgyNWhiV1VnY0dGMWMyVUFWVzVsZUhCbFkzUmxaQ0J6Y0dGalpTQmhablJsY2lCemRHRnlkQ0JzYVc1bEFGTndZVzRnWTJGc2JHSmhZMnNnWlhKeWIzSWdhVzRnYjI1ZlkyaDFibXRmWlhoMFpXNXphVzl1WDI1aGJXVUFTVzUyWVd4cFpDQmphR0Z5WVdOMFpYSWdhVzRnWTJoMWJtc2daWGgwWlc1emFXOXVjeUJ1WVcxbEFGQmhkWE5sSUc5dUlFTlBUazVGUTFRdlZYQm5jbUZrWlFCUVlYVnpaU0J2YmlCUVVra3ZWWEJuY21Ga1pRQkZlSEJsWTNSbFpDQklWRlJRTHpJZ1EyOXVibVZqZEdsdmJpQlFjbVZtWVdObEFGTndZVzRnWTJGc2JHSmhZMnNnWlhKeWIzSWdhVzRnYjI1ZmJXVjBhRzlrQUVWNGNHVmpkR1ZrSUhOd1lXTmxJR0ZtZEdWeUlHMWxkR2h2WkFCVGNHRnVJR05oYkd4aVlXTnJJR1Z5Y205eUlHbHVJRzl1WDJobFlXUmxjbDltYVdWc1pBQlFZWFZ6WldRQVNXNTJZV3hwWkNCM2IzSmtJR1Z1WTI5MWJuUmxjbVZrQUVsdWRtRnNhV1FnYldWMGFHOWtJR1Z1WTI5MWJuUmxjbVZrQUZWdVpYaHdaV04wWldRZ1kyaGhjaUJwYmlCMWNtd2djMk5vWlcxaEFGSmxjWFZsYzNRZ2FHRnpJR2x1ZG1Gc2FXUWdZRlJ5WVc1elptVnlMVVZ1WTI5a2FXNW5ZQUJUVjBsVVEwaGZVRkpQV0ZrQVZWTkZYMUJTVDFoWkFFMUxRVU5VU1ZaSlZGa0FWVTVRVWs5RFJWTlRRVUpNUlY5RlRsUkpWRmtBUTA5UVdRQk5UMVpGUkY5UVJWSk5RVTVGVGxSTVdRQlVUMDlmUlVGU1RGa0FUazlVU1VaWkFFWkJTVXhGUkY5RVJWQkZUa1JGVGtOWkFFSkJSRjlIUVZSRlYwRlpBRkJNUVZrQVVGVlVBRU5JUlVOTFQxVlVBRWRCVkVWWFFWbGZWRWxOUlU5VlZBQlNSVkZWUlZOVVgxUkpUVVZQVlZRQVRrVlVWMDlTUzE5RFQwNU9SVU5VWDFSSlRVVlBWVlFBUTA5T1RrVkRWRWxQVGw5VVNVMUZUMVZVQUV4UFIwbE9YMVJKVFVWUFZWUUFUa1ZVVjA5U1MxOVNSVUZFWDFSSlRVVlBWVlFBVUU5VFZBQk5TVk5FU1ZKRlExUkZSRjlTUlZGVlJWTlVBRU5NU1VWT1ZGOURURTlUUlVSZlVrVlJWVVZUVkFCRFRFbEZUbFJmUTB4UFUwVkVYMHhQUVVSZlFrRk1RVTVEUlVSZlVrVlJWVVZUVkFCQ1FVUmZVa1ZSVlVWVFZBQklWRlJRWDFKRlVWVkZVMVJmVTBWT1ZGOVVUMTlJVkZSUVUxOVFUMUpVQUZKRlVFOVNWQUJKVFY5QlgxUkZRVkJQVkFCU1JWTkZWRjlEVDA1VVJVNVVBRTVQWDBOUFRsUkZUbFFBVUVGU1ZFbEJURjlEVDA1VVJVNVVBRWhRUlY5SlRsWkJURWxFWDBOUFRsTlVRVTVVQUVoUVJWOURRbDlTUlZORlZBQkhSVlFBU0ZCRlgxTlVVa2xEVkFCRFQwNUdURWxEVkFCVVJVMVFUMUpCVWxsZlVrVkVTVkpGUTFRQVVFVlNUVUZPUlU1VVgxSkZSRWxTUlVOVUFFTlBUazVGUTFRQVRWVk1WRWxmVTFSQlZGVlRBRWhRUlY5SlRsWkJURWxFWDFOVVFWUlZVd0JVVDA5ZlRVRk9XVjlTUlZGVlJWTlVVd0JGUVZKTVdWOUlTVTVVVXdCVlRrRldRVWxNUVVKTVJWOUdUMUpmVEVWSFFVeGZVa1ZCVTA5T1V3QlBVRlJKVDA1VEFGTlhTVlJEU0VsT1IxOVFVazlVVDBOUFRGTUFWa0ZTU1VGT1ZGOUJURk5QWDA1RlIwOVVTVUZVUlZNQVRWVk1WRWxRVEVWZlEwaFBTVU5GVXdCSlRsUkZVazVCVEY5VFJWSldSVkpmUlZKU1QxSUFWMFZDWDFORlVsWkZVbDlWVGt0T1QxZE9YMFZTVWs5U0FGSkJTVXhIVlU1ZlJWSlNUMUlBU1VSRlRsUkpWRmxmVUZKUFZrbEVSVkpmUVZWVVNFVk9WRWxEUVZSSlQwNWZSVkpTVDFJQVUxTk1YME5GVWxSSlJrbERRVlJGWDBWU1VrOVNBRWxPVmtGTVNVUmZXRjlHVDFKWFFWSkVSVVJmUms5U0FGTkZWRjlRUVZKQlRVVlVSVklBUjBWVVgxQkJVa0ZOUlZSRlVnQklVRVZmVlZORlVnQlRSVVZmVDFSSVJWSUFTRkJGWDBOQ1gwTklWVTVMWDBoRlFVUkZVZ0JOUzBOQlRFVk9SRUZTQUZORlZGVlFBRmRGUWw5VFJWSldSVkpmU1ZOZlJFOVhUZ0JVUlVGU1JFOVhUZ0JJVUVWZlEweFBVMFZFWDBOUFRrNUZRMVJKVDA0QVNFVlZVa2xUVkVsRFgwVllVRWxTUVZSSlQwNEFSRWxUUTA5T1RrVkRWRVZFWDA5UVJWSkJWRWxQVGdCT1QwNWZRVlZVU0U5U1NWUkJWRWxXUlY5SlRrWlBVazFCVkVsUFRnQklVRVZmU1U1V1FVeEpSRjlXUlZKVFNVOU9BRWhRUlY5RFFsOU5SVk5UUVVkRlgwSkZSMGxPQUZOSlZFVmZTVk5mUmxKUFdrVk9BRWhRUlY5SlRsWkJURWxFWDBoRlFVUkZVbDlVVDB0RlRnQkpUbFpCVEVsRVgxUlBTMFZPQUVaUFVrSkpSRVJGVGdCRlRraEJUa05GWDFsUFZWSmZRMEZNVFFCSVVFVmZTVTVXUVV4SlJGOVZVa3dBUWt4UFEwdEZSRjlDV1Y5UVFWSkZUbFJCVEY5RFQwNVVVazlNQUUxTFEwOU1BRUZEVEFCSVVFVmZTVTVVUlZKT1FVd0FVa1ZSVlVWVFZGOUlSVUZFUlZKZlJrbEZURVJUWDFSUFQxOU1RVkpIUlY5VlRrOUdSa2xEU1VGTUFFaFFSVjlQU3dCVlRreEpUa3NBVlU1TVQwTkxBRkJTU1FCU1JWUlNXVjlYU1ZSSUFFaFFSVjlKVGxaQlRFbEVYME5QVGxSRlRsUmZURVZPUjFSSUFFaFFSVjlWVGtWWVVFVkRWRVZFWDBOUFRsUkZUbFJmVEVWT1IxUklBRVpNVlZOSUFGQlNUMUJRUVZSRFNBQk5MVk5GUVZKRFNBQlZVa2xmVkU5UFgweFBUa2NBVUZKUFEwVlRVMGxPUndCTlNWTkRSVXhNUVU1RlQxVlRYMUJGVWxOSlUxUkZUbFJmVjBGU1RrbE9Sd0JOU1ZORFJVeE1RVTVGVDFWVFgxZEJVazVKVGtjQVNGQkZYMGxPVmtGTVNVUmZWRkpCVGxOR1JWSmZSVTVEVDBSSlRrY0FSWGh3WldOMFpXUWdRMUpNUmdCSVVFVmZTVTVXUVV4SlJGOURTRlZPUzE5VFNWcEZBRTFQVmtVQVEwOU9WRWxPVlVVQVNGQkZYME5DWDFOVVFWUlZVMTlEVDAxUVRFVlVSUUJJVUVWZlEwSmZTRVZCUkVWU1UxOURUMDFRVEVWVVJRQklVRVZmUTBKZlZrVlNVMGxQVGw5RFQwMVFURVZVUlFCSVVFVmZRMEpmVlZKTVgwTlBUVkJNUlZSRkFFaFFSVjlEUWw5RFNGVk9TMTlEVDAxUVRFVlVSUUJJVUVWZlEwSmZTRVZCUkVWU1gxWkJURlZGWDBOUFRWQk1SVlJGQUVoUVJWOURRbDlEU0ZWT1MxOUZXRlJGVGxOSlQwNWZWa0ZNVlVWZlEwOU5VRXhGVkVVQVNGQkZYME5DWDBOSVZVNUxYMFZZVkVWT1UwbFBUbDlPUVUxRlgwTlBUVkJNUlZSRkFFaFFSVjlEUWw5TlJWTlRRVWRGWDBOUFRWQk1SVlJGQUVoUVJWOURRbDlOUlZSSVQwUmZRMDlOVUV4RlZFVUFTRkJGWDBOQ1gwaEZRVVJGVWw5R1NVVk1SRjlEVDAxUVRFVlVSUUJFUlV4RlZFVUFTRkJGWDBsT1ZrRk1TVVJmUlU5R1gxTlVRVlJGQUVsT1ZrRk1TVVJmVTFOTVgwTkZVbFJKUmtsRFFWUkZBRkJCVlZORkFFNVBYMUpGVTFCUFRsTkZBRlZPVTFWUVVFOVNWRVZFWDAxRlJFbEJYMVJaVUVVQVIwOU9SUUJPVDFSZlFVTkRSVkJVUVVKTVJRQlRSVkpXU1VORlgxVk9RVlpCU1V4QlFreEZBRkpCVGtkRlgwNVBWRjlUUVZSSlUwWkpRVUpNUlFCUFVrbEhTVTVmU1ZOZlZVNVNSVUZEU0VGQ1RFVUFVa1ZUVUU5T1UwVmZTVk5mVTFSQlRFVUFVRlZTUjBVQVRVVlNSMFVBVWtWUlZVVlRWRjlJUlVGRVJWSmZSa2xGVEVSVFgxUlBUMTlNUVZKSFJRQlNSVkZWUlZOVVgwaEZRVVJGVWw5VVQwOWZURUZTUjBVQVVFRlpURTlCUkY5VVQwOWZURUZTUjBVQVNVNVRWVVpHU1VOSlJVNVVYMU5VVDFKQlIwVUFTRkJGWDFCQlZWTkZSRjlWVUVkU1FVUkZBRWhRUlY5UVFWVlRSVVJmU0RKZlZWQkhVa0ZFUlFCVFQxVlNRMFVBUVU1T1QxVk9RMFVBVkZKQlEwVUFTRkJGWDFWT1JWaFFSVU5VUlVSZlUxQkJRMFVBUkVWVFExSkpRa1VBVlU1VFZVSlRRMUpKUWtVQVVrVkRUMUpFQUVoUVJWOUpUbFpCVEVsRVgwMUZWRWhQUkFCT1QxUmZSazlWVGtRQVVGSlBVRVpKVGtRQVZVNUNTVTVFQUZKRlFrbE9SQUJWVGtGVlZFaFBVa2xhUlVRQVRVVlVTRTlFWDA1UFZGOUJURXhQVjBWRUFFaFVWRkJmVmtWU1UwbFBUbDlPVDFSZlUxVlFVRTlTVkVWRUFFRk1Va1ZCUkZsZlVrVlFUMUpVUlVRQVFVTkRSVkJVUlVRQVRrOVVYMGxOVUV4RlRVVk9WRVZFQUV4UFQxQmZSRVZVUlVOVVJVUUFTRkJGWDBOU1gwVllVRVZEVkVWRUFFaFFSVjlNUmw5RldGQkZRMVJGUkFCRFVrVkJWRVZFQUVsTlgxVlRSVVFBU0ZCRlgxQkJWVk5GUkFCVVNVMUZUMVZVWDA5RFExVlNSVVFBVUVGWlRVVk9WRjlTUlZGVlNWSkZSQUJRVWtWRFQwNUVTVlJKVDA1ZlVrVlJWVWxTUlVRQVVGSlBXRmxmUVZWVVNFVk9WRWxEUVZSSlQwNWZVa1ZSVlVsU1JVUUFUa1ZVVjA5U1MxOUJWVlJJUlU1VVNVTkJWRWxQVGw5U1JWRlZTVkpGUkFCTVJVNUhWRWhmVWtWUlZVbFNSVVFBVTFOTVgwTkZVbFJKUmtsRFFWUkZYMUpGVVZWSlVrVkVBRlZRUjFKQlJFVmZVa1ZSVlVsU1JVUUFVRUZIUlY5RldGQkpVa1ZFQUZCU1JVTlBUa1JKVkVsUFRsOUdRVWxNUlVRQVJWaFFSVU5VUVZSSlQwNWZSa0ZKVEVWRUFGSkZWa0ZNU1VSQlZFbFBUbDlHUVVsTVJVUUFVMU5NWDBoQlRrUlRTRUZMUlY5R1FVbE1SVVFBVEU5RFMwVkVBRlJTUVU1VFJrOVNUVUZVU1U5T1gwRlFVRXhKUlVRQVRrOVVYMDFQUkVsR1NVVkVBRTVQVkY5RldGUkZUa1JGUkFCQ1FVNUVWMGxFVkVoZlRFbE5TVlJmUlZoRFJVVkVSVVFBVTBsVVJWOUpVMTlQVmtWU1RFOUJSRVZFQUVoRlFVUUFSWGh3WldOMFpXUWdTRlJVVUM4QUFGNFRBQUFtRXdBQU1CQUFBUEFYQUFDZEV3QUFGUklBQURrWEFBRHdFZ0FBQ2hBQUFIVVNBQUN0RWdBQWdoTUFBRThVQUFCL0VBQUFvQlVBQUNNVUFBQ0pFZ0FBaXhRQUFFMFZBQURVRVFBQXp4UUFBQkFZQUFESkZnQUEzQllBQU1FUkFBRGdGd0FBdXhRQUFIUVVBQUI4RlFBQTVSUUFBQWdYQUFBZkVBQUFaUlVBQUtNVUFBQW9GUUFBQWhVQUFKa1ZBQUFzRUFBQWl4a0FBRThQQUFEVURnQUFhaEFBQU00UUFBQUNGd0FBaVE0QUFHNFRBQUFjRXdBQVpoUUFBRllYQUFEQkV3QUF6Uk1BQUd3VEFBQm9Gd0FBWmhjQUFGOFhBQUFpRXdBQXpnOEFBR2tPQUFEWURnQUFZeFlBQU1zVEFBQ3FEZ0FBS0JjQUFDWVhBQURGRXdBQVhSWUFBT2dSQUFCbkV3QUFaUk1BQVBJV0FBQnpFd0FBSFJjQUFQa1dBQUR6RVFBQXp3NEFBTTRWQUFBTUVnQUFzeEVBQUtVUkFBQmhFQUFBTWhjQUFMc1RBRUg1TlFzQkFRQkJrRFlMNEFFQkFRSUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVBQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFCQi9UY0xBUUVBUVpFNEMxNENBd0lDQWdJQ0FBQUNBZ0FDQWdBQ0FnSUNBZ0lDQWdJQ0FBUUFBQUFBQUFJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQUFBQUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUFBZ0FDQUVIOU9Rc0JBUUJCa1RvTFhnSUFBZ0lDQWdJQUFBSUNBQUlDQUFJQ0FnSUNBZ0lDQWdJQUF3QUVBQUFBQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lBQUFBQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnQUNBQUlBUWZBN0N3MXNiM05sWldWd0xXRnNhWFpsQUVHSlBBc0JBUUJCb0R3TDRBRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFBQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRQkJpVDRMQVFFQVFhQStDK2NCQVFFQkFRRUJBUUVCQVFFQkFnRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUFBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUZqYUhWdWEyVmtBRUd3d0FBTFh3RUJBQUVCQVFFQkFBQUJBUUFCQVFBQkFRRUJBUUVCQVFFQkFBQUFBQUFBQUFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQUFBQUFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUFBUUFCQUVHUXdnQUxJV1ZqZEdsdmJtVnVkQzFzWlc1bmRHaHZibkp2ZUhrdFkyOXVibVZqZEdsdmJnQkJ3TUlBQ3kxeVlXNXpabVZ5TFdWdVkyOWthVzVuY0dkeVlXUmxEUW9OQ2cwS1UwME5DZzBLVkZSUUwwTkZMMVJUVUM4QVFmbkNBQXNGQVFJQUFRTUFRWkREQUF2Z0FRUUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQUFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFFSDV4QUFMQlFFQ0FBRURBRUdReFFBTDRBRUVBUUVGQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFBQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRQkIrY1lBQ3dRQkFBQUJBRUdSeHdBTDN3RUJBUUFCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVBQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQUFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFFSDZ5QUFMQkFFQUFBSUFRWkRKQUF0ZkF3UUFBQVFFQkFRRUJBUUVCQVFFQlFRRUJBUUVCQVFFQkFRRUJBQUVBQVlIQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQUFRQUJBQUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBQUFBQVFBUWZyS0FBc0VBUUFBQVFCQmtNc0FDd0VCQUVHcXl3QUxRUUlBQUFBQUFBQURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3QUFBQUFBQUFNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQUVINnpBQUxCQUVBQUFFQVFaRE5BQXNCQVFCQm1zMEFDd1lDQUFBQUFBSUFRYkhOQUFzNkF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNQUFBQUFBQUFEQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd0JCOE00QUM1WUJUazlWVGtORlJVTkxUMVZVVGtWRFZFVlVSVU5TU1VKRlRGVlRTRVZVUlVGRVUwVkJVa05JVWtkRlExUkpWa2xVV1V4RlRrUkJVbFpGVDFSSlJsbFFWRWxQVGxORFNGTkZRVmxUVkVGVVEwaEhSVTlTUkVsU1JVTlVUMUpVVWtOSVVFRlNRVTFGVkVWU1ZWSkRSVUpUUTFKSlFrVkJVa1JQVjA1QlEwVkpUa1JPUzBOTFZVSlRRMUpKUWtWSVZGUlFMMEZFVkZBdicsICdiYXNlNjQnKVxuIl0sIm5hbWVzIjpbIkJ1ZmZlciIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiZnJvbSJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/llhttp/llhttp-wasm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/llhttp/llhttp_simd-wasm.js":
/*!************************************************************!*\
  !*** ./node_modules/undici/lib/llhttp/llhttp_simd-wasm.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { Buffer } = __webpack_require__(/*! node:buffer */ \"node:buffer\");\nmodule.exports = Buffer.from('', 'base64');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/llhttp/llhttp_simd-wasm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/llhttp/utils.js":
/*!*************************************************!*\
  !*** ./node_modules/undici/lib/llhttp/utils.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.enumToMap = void 0;\nfunction enumToMap(obj) {\n    const res = {};\n    Object.keys(obj).forEach((key)=>{\n        const value = obj[key];\n        if (typeof value === 'number') {\n            res[key] = value;\n        }\n    });\n    return res;\n}\nexports.enumToMap = enumToMap; //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9sbGh0dHAvdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGlCQUFpQixHQUFHLEtBQUs7QUFDekIsU0FBU0UsVUFBVUMsR0FBRztJQUNsQixNQUFNQyxNQUFNLENBQUM7SUFDYk4sT0FBT08sSUFBSSxDQUFDRixLQUFLRyxPQUFPLENBQUMsQ0FBQ0M7UUFDdEIsTUFBTU4sUUFBUUUsR0FBRyxDQUFDSSxJQUFJO1FBQ3RCLElBQUksT0FBT04sVUFBVSxVQUFVO1lBQzNCRyxHQUFHLENBQUNHLElBQUksR0FBR047UUFDZjtJQUNKO0lBQ0EsT0FBT0c7QUFDWDtBQUNBSixpQkFBaUIsR0FBR0UsV0FDcEIsaUNBQWlDIiwic291cmNlcyI6WyJEOlxcSGVsaXhcXG5vZGVfbW9kdWxlc1xcdW5kaWNpXFxsaWJcXGxsaHR0cFxcdXRpbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmVudW1Ub01hcCA9IHZvaWQgMDtcbmZ1bmN0aW9uIGVudW1Ub01hcChvYmopIHtcbiAgICBjb25zdCByZXMgPSB7fTtcbiAgICBPYmplY3Qua2V5cyhvYmopLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IG9ialtrZXldO1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgcmVzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXM7XG59XG5leHBvcnRzLmVudW1Ub01hcCA9IGVudW1Ub01hcDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVudW1Ub01hcCIsIm9iaiIsInJlcyIsImtleXMiLCJmb3JFYWNoIiwia2V5Il0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/llhttp/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/mock/mock-agent.js":
/*!****************************************************!*\
  !*** ./node_modules/undici/lib/mock/mock-agent.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { kClients } = __webpack_require__(/*! ../core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst Agent = __webpack_require__(/*! ../dispatcher/agent */ \"(ssr)/./node_modules/undici/lib/dispatcher/agent.js\");\nconst { kAgent, kMockAgentSet, kMockAgentGet, kDispatches, kIsMockActive, kNetConnect, kGetNetConnect, kOptions, kFactory } = __webpack_require__(/*! ./mock-symbols */ \"(ssr)/./node_modules/undici/lib/mock/mock-symbols.js\");\nconst MockClient = __webpack_require__(/*! ./mock-client */ \"(ssr)/./node_modules/undici/lib/mock/mock-client.js\");\nconst MockPool = __webpack_require__(/*! ./mock-pool */ \"(ssr)/./node_modules/undici/lib/mock/mock-pool.js\");\nconst { matchValue, buildMockOptions } = __webpack_require__(/*! ./mock-utils */ \"(ssr)/./node_modules/undici/lib/mock/mock-utils.js\");\nconst { InvalidArgumentError, UndiciError } = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst Dispatcher = __webpack_require__(/*! ../dispatcher/dispatcher */ \"(ssr)/./node_modules/undici/lib/dispatcher/dispatcher.js\");\nconst Pluralizer = __webpack_require__(/*! ./pluralizer */ \"(ssr)/./node_modules/undici/lib/mock/pluralizer.js\");\nconst PendingInterceptorsFormatter = __webpack_require__(/*! ./pending-interceptors-formatter */ \"(ssr)/./node_modules/undici/lib/mock/pending-interceptors-formatter.js\");\nclass MockAgent extends Dispatcher {\n    constructor(opts){\n        super(opts);\n        this[kNetConnect] = true;\n        this[kIsMockActive] = true;\n        // Instantiate Agent and encapsulate\n        if (opts?.agent && typeof opts.agent.dispatch !== 'function') {\n            throw new InvalidArgumentError('Argument opts.agent must implement Agent');\n        }\n        const agent = opts?.agent ? opts.agent : new Agent(opts);\n        this[kAgent] = agent;\n        this[kClients] = agent[kClients];\n        this[kOptions] = buildMockOptions(opts);\n    }\n    get(origin) {\n        let dispatcher = this[kMockAgentGet](origin);\n        if (!dispatcher) {\n            dispatcher = this[kFactory](origin);\n            this[kMockAgentSet](origin, dispatcher);\n        }\n        return dispatcher;\n    }\n    dispatch(opts, handler) {\n        // Call MockAgent.get to perform additional setup before dispatching as normal\n        this.get(opts.origin);\n        return this[kAgent].dispatch(opts, handler);\n    }\n    async close() {\n        await this[kAgent].close();\n        this[kClients].clear();\n    }\n    deactivate() {\n        this[kIsMockActive] = false;\n    }\n    activate() {\n        this[kIsMockActive] = true;\n    }\n    enableNetConnect(matcher) {\n        if (typeof matcher === 'string' || typeof matcher === 'function' || matcher instanceof RegExp) {\n            if (Array.isArray(this[kNetConnect])) {\n                this[kNetConnect].push(matcher);\n            } else {\n                this[kNetConnect] = [\n                    matcher\n                ];\n            }\n        } else if (typeof matcher === 'undefined') {\n            this[kNetConnect] = true;\n        } else {\n            throw new InvalidArgumentError('Unsupported matcher. Must be one of String|Function|RegExp.');\n        }\n    }\n    disableNetConnect() {\n        this[kNetConnect] = false;\n    }\n    // This is required to bypass issues caused by using global symbols - see:\n    // https://github.com/nodejs/undici/issues/1447\n    get isMockActive() {\n        return this[kIsMockActive];\n    }\n    [kMockAgentSet](origin, dispatcher) {\n        this[kClients].set(origin, dispatcher);\n    }\n    [kFactory](origin) {\n        const mockOptions = Object.assign({\n            agent: this\n        }, this[kOptions]);\n        return this[kOptions] && this[kOptions].connections === 1 ? new MockClient(origin, mockOptions) : new MockPool(origin, mockOptions);\n    }\n    [kMockAgentGet](origin) {\n        // First check if we can immediately find it\n        const client = this[kClients].get(origin);\n        if (client) {\n            return client;\n        }\n        // If the origin is not a string create a dummy parent pool and return to user\n        if (typeof origin !== 'string') {\n            const dispatcher = this[kFactory]('http://localhost:9999');\n            this[kMockAgentSet](origin, dispatcher);\n            return dispatcher;\n        }\n        // If we match, create a pool and assign the same dispatches\n        for (const [keyMatcher, nonExplicitDispatcher] of Array.from(this[kClients])){\n            if (nonExplicitDispatcher && typeof keyMatcher !== 'string' && matchValue(keyMatcher, origin)) {\n                const dispatcher = this[kFactory](origin);\n                this[kMockAgentSet](origin, dispatcher);\n                dispatcher[kDispatches] = nonExplicitDispatcher[kDispatches];\n                return dispatcher;\n            }\n        }\n    }\n    [kGetNetConnect]() {\n        return this[kNetConnect];\n    }\n    pendingInterceptors() {\n        const mockAgentClients = this[kClients];\n        return Array.from(mockAgentClients.entries()).flatMap(([origin, scope])=>scope[kDispatches].map((dispatch)=>({\n                    ...dispatch,\n                    origin\n                }))).filter(({ pending })=>pending);\n    }\n    assertNoPendingInterceptors({ pendingInterceptorsFormatter = new PendingInterceptorsFormatter() } = {}) {\n        const pending = this.pendingInterceptors();\n        if (pending.length === 0) {\n            return;\n        }\n        const pluralizer = new Pluralizer('interceptor', 'interceptors').pluralize(pending.length);\n        throw new UndiciError(`\n${pluralizer.count} ${pluralizer.noun} ${pluralizer.is} pending:\n\n${pendingInterceptorsFormatter.format(pending)}\n`.trim());\n    }\n}\nmodule.exports = MockAgent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/mock/mock-agent.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/mock/mock-client.js":
/*!*****************************************************!*\
  !*** ./node_modules/undici/lib/mock/mock-client.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { promisify } = __webpack_require__(/*! node:util */ \"node:util\");\nconst Client = __webpack_require__(/*! ../dispatcher/client */ \"(ssr)/./node_modules/undici/lib/dispatcher/client.js\");\nconst { buildMockDispatch } = __webpack_require__(/*! ./mock-utils */ \"(ssr)/./node_modules/undici/lib/mock/mock-utils.js\");\nconst { kDispatches, kMockAgent, kClose, kOriginalClose, kOrigin, kOriginalDispatch, kConnected } = __webpack_require__(/*! ./mock-symbols */ \"(ssr)/./node_modules/undici/lib/mock/mock-symbols.js\");\nconst { MockInterceptor } = __webpack_require__(/*! ./mock-interceptor */ \"(ssr)/./node_modules/undici/lib/mock/mock-interceptor.js\");\nconst Symbols = __webpack_require__(/*! ../core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst { InvalidArgumentError } = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\n/**\n * MockClient provides an API that extends the Client to influence the mockDispatches.\n */ class MockClient extends Client {\n    constructor(origin, opts){\n        super(origin, opts);\n        if (!opts || !opts.agent || typeof opts.agent.dispatch !== 'function') {\n            throw new InvalidArgumentError('Argument opts.agent must implement Agent');\n        }\n        this[kMockAgent] = opts.agent;\n        this[kOrigin] = origin;\n        this[kDispatches] = [];\n        this[kConnected] = 1;\n        this[kOriginalDispatch] = this.dispatch;\n        this[kOriginalClose] = this.close.bind(this);\n        this.dispatch = buildMockDispatch.call(this);\n        this.close = this[kClose];\n    }\n    get [Symbols.kConnected]() {\n        return this[kConnected];\n    }\n    /**\n   * Sets up the base interceptor for mocking replies from undici.\n   */ intercept(opts) {\n        return new MockInterceptor(opts, this[kDispatches]);\n    }\n    async [kClose]() {\n        await promisify(this[kOriginalClose])();\n        this[kConnected] = 0;\n        this[kMockAgent][Symbols.kClients].delete(this[kOrigin]);\n    }\n}\nmodule.exports = MockClient;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9tb2NrL21vY2stY2xpZW50LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTSxFQUFFQSxTQUFTLEVBQUUsR0FBR0MsbUJBQU9BLENBQUMsNEJBQVc7QUFDekMsTUFBTUMsU0FBU0QsbUJBQU9BLENBQUMsa0ZBQXNCO0FBQzdDLE1BQU0sRUFBRUUsaUJBQWlCLEVBQUUsR0FBR0YsbUJBQU9BLENBQUMsd0VBQWM7QUFDcEQsTUFBTSxFQUNKRyxXQUFXLEVBQ1hDLFVBQVUsRUFDVkMsTUFBTSxFQUNOQyxjQUFjLEVBQ2RDLE9BQU8sRUFDUEMsaUJBQWlCLEVBQ2pCQyxVQUFVLEVBQ1gsR0FBR1QsbUJBQU9BLENBQUMsNEVBQWdCO0FBQzVCLE1BQU0sRUFBRVUsZUFBZSxFQUFFLEdBQUdWLG1CQUFPQSxDQUFDLG9GQUFvQjtBQUN4RCxNQUFNVyxVQUFVWCxtQkFBT0EsQ0FBQyx3RUFBaUI7QUFDekMsTUFBTSxFQUFFWSxvQkFBb0IsRUFBRSxHQUFHWixtQkFBT0EsQ0FBQyxzRUFBZ0I7QUFFekQ7O0NBRUMsR0FDRCxNQUFNYSxtQkFBbUJaO0lBQ3ZCLFlBQWFhLE1BQU0sRUFBRUMsSUFBSSxDQUFFO1FBQ3pCLEtBQUssQ0FBQ0QsUUFBUUM7UUFFZCxJQUFJLENBQUNBLFFBQVEsQ0FBQ0EsS0FBS0MsS0FBSyxJQUFJLE9BQU9ELEtBQUtDLEtBQUssQ0FBQ0MsUUFBUSxLQUFLLFlBQVk7WUFDckUsTUFBTSxJQUFJTCxxQkFBcUI7UUFDakM7UUFFQSxJQUFJLENBQUNSLFdBQVcsR0FBR1csS0FBS0MsS0FBSztRQUM3QixJQUFJLENBQUNULFFBQVEsR0FBR087UUFDaEIsSUFBSSxDQUFDWCxZQUFZLEdBQUcsRUFBRTtRQUN0QixJQUFJLENBQUNNLFdBQVcsR0FBRztRQUNuQixJQUFJLENBQUNELGtCQUFrQixHQUFHLElBQUksQ0FBQ1MsUUFBUTtRQUN2QyxJQUFJLENBQUNYLGVBQWUsR0FBRyxJQUFJLENBQUNZLEtBQUssQ0FBQ0MsSUFBSSxDQUFDLElBQUk7UUFFM0MsSUFBSSxDQUFDRixRQUFRLEdBQUdmLGtCQUFrQmtCLElBQUksQ0FBQyxJQUFJO1FBQzNDLElBQUksQ0FBQ0YsS0FBSyxHQUFHLElBQUksQ0FBQ2IsT0FBTztJQUMzQjtJQUVBLElBQUksQ0FBQ00sUUFBUUYsVUFBVSxDQUFDLEdBQUk7UUFDMUIsT0FBTyxJQUFJLENBQUNBLFdBQVc7SUFDekI7SUFFQTs7R0FFQyxHQUNEWSxVQUFXTixJQUFJLEVBQUU7UUFDZixPQUFPLElBQUlMLGdCQUFnQkssTUFBTSxJQUFJLENBQUNaLFlBQVk7SUFDcEQ7SUFFQSxNQUFNLENBQUNFLE9BQU8sR0FBSTtRQUNoQixNQUFNTixVQUFVLElBQUksQ0FBQ08sZUFBZTtRQUNwQyxJQUFJLENBQUNHLFdBQVcsR0FBRztRQUNuQixJQUFJLENBQUNMLFdBQVcsQ0FBQ08sUUFBUVcsUUFBUSxDQUFDLENBQUNDLE1BQU0sQ0FBQyxJQUFJLENBQUNoQixRQUFRO0lBQ3pEO0FBQ0Y7QUFFQWlCLE9BQU9DLE9BQU8sR0FBR1oiLCJzb3VyY2VzIjpbIkQ6XFxIZWxpeFxcbm9kZV9tb2R1bGVzXFx1bmRpY2lcXGxpYlxcbW9ja1xcbW9jay1jbGllbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IHsgcHJvbWlzaWZ5IH0gPSByZXF1aXJlKCdub2RlOnV0aWwnKVxuY29uc3QgQ2xpZW50ID0gcmVxdWlyZSgnLi4vZGlzcGF0Y2hlci9jbGllbnQnKVxuY29uc3QgeyBidWlsZE1vY2tEaXNwYXRjaCB9ID0gcmVxdWlyZSgnLi9tb2NrLXV0aWxzJylcbmNvbnN0IHtcbiAga0Rpc3BhdGNoZXMsXG4gIGtNb2NrQWdlbnQsXG4gIGtDbG9zZSxcbiAga09yaWdpbmFsQ2xvc2UsXG4gIGtPcmlnaW4sXG4gIGtPcmlnaW5hbERpc3BhdGNoLFxuICBrQ29ubmVjdGVkXG59ID0gcmVxdWlyZSgnLi9tb2NrLXN5bWJvbHMnKVxuY29uc3QgeyBNb2NrSW50ZXJjZXB0b3IgfSA9IHJlcXVpcmUoJy4vbW9jay1pbnRlcmNlcHRvcicpXG5jb25zdCBTeW1ib2xzID0gcmVxdWlyZSgnLi4vY29yZS9zeW1ib2xzJylcbmNvbnN0IHsgSW52YWxpZEFyZ3VtZW50RXJyb3IgfSA9IHJlcXVpcmUoJy4uL2NvcmUvZXJyb3JzJylcblxuLyoqXG4gKiBNb2NrQ2xpZW50IHByb3ZpZGVzIGFuIEFQSSB0aGF0IGV4dGVuZHMgdGhlIENsaWVudCB0byBpbmZsdWVuY2UgdGhlIG1vY2tEaXNwYXRjaGVzLlxuICovXG5jbGFzcyBNb2NrQ2xpZW50IGV4dGVuZHMgQ2xpZW50IHtcbiAgY29uc3RydWN0b3IgKG9yaWdpbiwgb3B0cykge1xuICAgIHN1cGVyKG9yaWdpbiwgb3B0cylcblxuICAgIGlmICghb3B0cyB8fCAhb3B0cy5hZ2VudCB8fCB0eXBlb2Ygb3B0cy5hZ2VudC5kaXNwYXRjaCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKCdBcmd1bWVudCBvcHRzLmFnZW50IG11c3QgaW1wbGVtZW50IEFnZW50JylcbiAgICB9XG5cbiAgICB0aGlzW2tNb2NrQWdlbnRdID0gb3B0cy5hZ2VudFxuICAgIHRoaXNba09yaWdpbl0gPSBvcmlnaW5cbiAgICB0aGlzW2tEaXNwYXRjaGVzXSA9IFtdXG4gICAgdGhpc1trQ29ubmVjdGVkXSA9IDFcbiAgICB0aGlzW2tPcmlnaW5hbERpc3BhdGNoXSA9IHRoaXMuZGlzcGF0Y2hcbiAgICB0aGlzW2tPcmlnaW5hbENsb3NlXSA9IHRoaXMuY2xvc2UuYmluZCh0aGlzKVxuXG4gICAgdGhpcy5kaXNwYXRjaCA9IGJ1aWxkTW9ja0Rpc3BhdGNoLmNhbGwodGhpcylcbiAgICB0aGlzLmNsb3NlID0gdGhpc1trQ2xvc2VdXG4gIH1cblxuICBnZXQgW1N5bWJvbHMua0Nvbm5lY3RlZF0gKCkge1xuICAgIHJldHVybiB0aGlzW2tDb25uZWN0ZWRdXG4gIH1cblxuICAvKipcbiAgICogU2V0cyB1cCB0aGUgYmFzZSBpbnRlcmNlcHRvciBmb3IgbW9ja2luZyByZXBsaWVzIGZyb20gdW5kaWNpLlxuICAgKi9cbiAgaW50ZXJjZXB0IChvcHRzKSB7XG4gICAgcmV0dXJuIG5ldyBNb2NrSW50ZXJjZXB0b3Iob3B0cywgdGhpc1trRGlzcGF0Y2hlc10pXG4gIH1cblxuICBhc3luYyBba0Nsb3NlXSAoKSB7XG4gICAgYXdhaXQgcHJvbWlzaWZ5KHRoaXNba09yaWdpbmFsQ2xvc2VdKSgpXG4gICAgdGhpc1trQ29ubmVjdGVkXSA9IDBcbiAgICB0aGlzW2tNb2NrQWdlbnRdW1N5bWJvbHMua0NsaWVudHNdLmRlbGV0ZSh0aGlzW2tPcmlnaW5dKVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTW9ja0NsaWVudFxuIl0sIm5hbWVzIjpbInByb21pc2lmeSIsInJlcXVpcmUiLCJDbGllbnQiLCJidWlsZE1vY2tEaXNwYXRjaCIsImtEaXNwYXRjaGVzIiwia01vY2tBZ2VudCIsImtDbG9zZSIsImtPcmlnaW5hbENsb3NlIiwia09yaWdpbiIsImtPcmlnaW5hbERpc3BhdGNoIiwia0Nvbm5lY3RlZCIsIk1vY2tJbnRlcmNlcHRvciIsIlN5bWJvbHMiLCJJbnZhbGlkQXJndW1lbnRFcnJvciIsIk1vY2tDbGllbnQiLCJvcmlnaW4iLCJvcHRzIiwiYWdlbnQiLCJkaXNwYXRjaCIsImNsb3NlIiwiYmluZCIsImNhbGwiLCJpbnRlcmNlcHQiLCJrQ2xpZW50cyIsImRlbGV0ZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/mock/mock-client.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/mock/mock-errors.js":
/*!*****************************************************!*\
  !*** ./node_modules/undici/lib/mock/mock-errors.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { UndiciError } = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nclass MockNotMatchedError extends UndiciError {\n    constructor(message){\n        super(message);\n        Error.captureStackTrace(this, MockNotMatchedError);\n        this.name = 'MockNotMatchedError';\n        this.message = message || 'The request does not match any registered mock dispatches';\n        this.code = 'UND_MOCK_ERR_MOCK_NOT_MATCHED';\n    }\n}\nmodule.exports = {\n    MockNotMatchedError\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9tb2NrL21vY2stZXJyb3JzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTSxFQUFFQSxXQUFXLEVBQUUsR0FBR0MsbUJBQU9BLENBQUMsc0VBQWdCO0FBRWhELE1BQU1DLDRCQUE0QkY7SUFDaEMsWUFBYUcsT0FBTyxDQUFFO1FBQ3BCLEtBQUssQ0FBQ0E7UUFDTkMsTUFBTUMsaUJBQWlCLENBQUMsSUFBSSxFQUFFSDtRQUM5QixJQUFJLENBQUNJLElBQUksR0FBRztRQUNaLElBQUksQ0FBQ0gsT0FBTyxHQUFHQSxXQUFXO1FBQzFCLElBQUksQ0FBQ0ksSUFBSSxHQUFHO0lBQ2Q7QUFDRjtBQUVBQyxPQUFPQyxPQUFPLEdBQUc7SUFDZlA7QUFDRiIsInNvdXJjZXMiOlsiRDpcXEhlbGl4XFxub2RlX21vZHVsZXNcXHVuZGljaVxcbGliXFxtb2NrXFxtb2NrLWVycm9ycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgeyBVbmRpY2lFcnJvciB9ID0gcmVxdWlyZSgnLi4vY29yZS9lcnJvcnMnKVxuXG5jbGFzcyBNb2NrTm90TWF0Y2hlZEVycm9yIGV4dGVuZHMgVW5kaWNpRXJyb3Ige1xuICBjb25zdHJ1Y3RvciAobWVzc2FnZSkge1xuICAgIHN1cGVyKG1lc3NhZ2UpXG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgTW9ja05vdE1hdGNoZWRFcnJvcilcbiAgICB0aGlzLm5hbWUgPSAnTW9ja05vdE1hdGNoZWRFcnJvcidcbiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlIHx8ICdUaGUgcmVxdWVzdCBkb2VzIG5vdCBtYXRjaCBhbnkgcmVnaXN0ZXJlZCBtb2NrIGRpc3BhdGNoZXMnXG4gICAgdGhpcy5jb2RlID0gJ1VORF9NT0NLX0VSUl9NT0NLX05PVF9NQVRDSEVEJ1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBNb2NrTm90TWF0Y2hlZEVycm9yXG59XG4iXSwibmFtZXMiOlsiVW5kaWNpRXJyb3IiLCJyZXF1aXJlIiwiTW9ja05vdE1hdGNoZWRFcnJvciIsIm1lc3NhZ2UiLCJFcnJvciIsImNhcHR1cmVTdGFja1RyYWNlIiwibmFtZSIsImNvZGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/mock/mock-errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/mock/mock-interceptor.js":
/*!**********************************************************!*\
  !*** ./node_modules/undici/lib/mock/mock-interceptor.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { getResponseData, buildKey, addMockDispatch } = __webpack_require__(/*! ./mock-utils */ \"(ssr)/./node_modules/undici/lib/mock/mock-utils.js\");\nconst { kDispatches, kDispatchKey, kDefaultHeaders, kDefaultTrailers, kContentLength, kMockDispatch } = __webpack_require__(/*! ./mock-symbols */ \"(ssr)/./node_modules/undici/lib/mock/mock-symbols.js\");\nconst { InvalidArgumentError } = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst { buildURL } = __webpack_require__(/*! ../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\n/**\n * Defines the scope API for an interceptor reply\n */ class MockScope {\n    constructor(mockDispatch){\n        this[kMockDispatch] = mockDispatch;\n    }\n    /**\n   * Delay a reply by a set amount in ms.\n   */ delay(waitInMs) {\n        if (typeof waitInMs !== 'number' || !Number.isInteger(waitInMs) || waitInMs <= 0) {\n            throw new InvalidArgumentError('waitInMs must be a valid integer > 0');\n        }\n        this[kMockDispatch].delay = waitInMs;\n        return this;\n    }\n    /**\n   * For a defined reply, never mark as consumed.\n   */ persist() {\n        this[kMockDispatch].persist = true;\n        return this;\n    }\n    /**\n   * Allow one to define a reply for a set amount of matching requests.\n   */ times(repeatTimes) {\n        if (typeof repeatTimes !== 'number' || !Number.isInteger(repeatTimes) || repeatTimes <= 0) {\n            throw new InvalidArgumentError('repeatTimes must be a valid integer > 0');\n        }\n        this[kMockDispatch].times = repeatTimes;\n        return this;\n    }\n}\n/**\n * Defines an interceptor for a Mock\n */ class MockInterceptor {\n    constructor(opts, mockDispatches){\n        if (typeof opts !== 'object') {\n            throw new InvalidArgumentError('opts must be an object');\n        }\n        if (typeof opts.path === 'undefined') {\n            throw new InvalidArgumentError('opts.path must be defined');\n        }\n        if (typeof opts.method === 'undefined') {\n            opts.method = 'GET';\n        }\n        // See https://github.com/nodejs/undici/issues/1245\n        // As per RFC 3986, clients are not supposed to send URI\n        // fragments to servers when they retrieve a document,\n        if (typeof opts.path === 'string') {\n            if (opts.query) {\n                opts.path = buildURL(opts.path, opts.query);\n            } else {\n                // Matches https://github.com/nodejs/undici/blob/main/lib/web/fetch/index.js#L1811\n                const parsedURL = new URL(opts.path, 'data://');\n                opts.path = parsedURL.pathname + parsedURL.search;\n            }\n        }\n        if (typeof opts.method === 'string') {\n            opts.method = opts.method.toUpperCase();\n        }\n        this[kDispatchKey] = buildKey(opts);\n        this[kDispatches] = mockDispatches;\n        this[kDefaultHeaders] = {};\n        this[kDefaultTrailers] = {};\n        this[kContentLength] = false;\n    }\n    createMockScopeDispatchData({ statusCode, data, responseOptions }) {\n        const responseData = getResponseData(data);\n        const contentLength = this[kContentLength] ? {\n            'content-length': responseData.length\n        } : {};\n        const headers = {\n            ...this[kDefaultHeaders],\n            ...contentLength,\n            ...responseOptions.headers\n        };\n        const trailers = {\n            ...this[kDefaultTrailers],\n            ...responseOptions.trailers\n        };\n        return {\n            statusCode,\n            data,\n            headers,\n            trailers\n        };\n    }\n    validateReplyParameters(replyParameters) {\n        if (typeof replyParameters.statusCode === 'undefined') {\n            throw new InvalidArgumentError('statusCode must be defined');\n        }\n        if (typeof replyParameters.responseOptions !== 'object' || replyParameters.responseOptions === null) {\n            throw new InvalidArgumentError('responseOptions must be an object');\n        }\n    }\n    /**\n   * Mock an undici request with a defined reply.\n   */ reply(replyOptionsCallbackOrStatusCode) {\n        // Values of reply aren't available right now as they\n        // can only be available when the reply callback is invoked.\n        if (typeof replyOptionsCallbackOrStatusCode === 'function') {\n            // We'll first wrap the provided callback in another function,\n            // this function will properly resolve the data from the callback\n            // when invoked.\n            const wrappedDefaultsCallback = (opts)=>{\n                // Our reply options callback contains the parameter for statusCode, data and options.\n                const resolvedData = replyOptionsCallbackOrStatusCode(opts);\n                // Check if it is in the right format\n                if (typeof resolvedData !== 'object' || resolvedData === null) {\n                    throw new InvalidArgumentError('reply options callback must return an object');\n                }\n                const replyParameters = {\n                    data: '',\n                    responseOptions: {},\n                    ...resolvedData\n                };\n                this.validateReplyParameters(replyParameters);\n                // Since the values can be obtained immediately we return them\n                // from this higher order function that will be resolved later.\n                return {\n                    ...this.createMockScopeDispatchData(replyParameters)\n                };\n            };\n            // Add usual dispatch data, but this time set the data parameter to function that will eventually provide data.\n            const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], wrappedDefaultsCallback);\n            return new MockScope(newMockDispatch);\n        }\n        // We can have either one or three parameters, if we get here,\n        // we should have 1-3 parameters. So we spread the arguments of\n        // this function to obtain the parameters, since replyData will always\n        // just be the statusCode.\n        const replyParameters = {\n            statusCode: replyOptionsCallbackOrStatusCode,\n            data: arguments[1] === undefined ? '' : arguments[1],\n            responseOptions: arguments[2] === undefined ? {} : arguments[2]\n        };\n        this.validateReplyParameters(replyParameters);\n        // Send in-already provided data like usual\n        const dispatchData = this.createMockScopeDispatchData(replyParameters);\n        const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], dispatchData);\n        return new MockScope(newMockDispatch);\n    }\n    /**\n   * Mock an undici request with a defined error.\n   */ replyWithError(error) {\n        if (typeof error === 'undefined') {\n            throw new InvalidArgumentError('error must be defined');\n        }\n        const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], {\n            error\n        });\n        return new MockScope(newMockDispatch);\n    }\n    /**\n   * Set default reply headers on the interceptor for subsequent replies\n   */ defaultReplyHeaders(headers) {\n        if (typeof headers === 'undefined') {\n            throw new InvalidArgumentError('headers must be defined');\n        }\n        this[kDefaultHeaders] = headers;\n        return this;\n    }\n    /**\n   * Set default reply trailers on the interceptor for subsequent replies\n   */ defaultReplyTrailers(trailers) {\n        if (typeof trailers === 'undefined') {\n            throw new InvalidArgumentError('trailers must be defined');\n        }\n        this[kDefaultTrailers] = trailers;\n        return this;\n    }\n    /**\n   * Set reply content length header for replies on the interceptor\n   */ replyContentLength() {\n        this[kContentLength] = true;\n        return this;\n    }\n}\nmodule.exports.MockInterceptor = MockInterceptor;\nmodule.exports.MockScope = MockScope;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9tb2NrL21vY2staW50ZXJjZXB0b3IuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNLEVBQUVBLGVBQWUsRUFBRUMsUUFBUSxFQUFFQyxlQUFlLEVBQUUsR0FBR0MsbUJBQU9BLENBQUMsd0VBQWM7QUFDN0UsTUFBTSxFQUNKQyxXQUFXLEVBQ1hDLFlBQVksRUFDWkMsZUFBZSxFQUNmQyxnQkFBZ0IsRUFDaEJDLGNBQWMsRUFDZEMsYUFBYSxFQUNkLEdBQUdOLG1CQUFPQSxDQUFDLDRFQUFnQjtBQUM1QixNQUFNLEVBQUVPLG9CQUFvQixFQUFFLEdBQUdQLG1CQUFPQSxDQUFDLHNFQUFnQjtBQUN6RCxNQUFNLEVBQUVRLFFBQVEsRUFBRSxHQUFHUixtQkFBT0EsQ0FBQyxrRUFBYztBQUUzQzs7Q0FFQyxHQUNELE1BQU1TO0lBQ0osWUFBYUMsWUFBWSxDQUFFO1FBQ3pCLElBQUksQ0FBQ0osY0FBYyxHQUFHSTtJQUN4QjtJQUVBOztHQUVDLEdBQ0RDLE1BQU9DLFFBQVEsRUFBRTtRQUNmLElBQUksT0FBT0EsYUFBYSxZQUFZLENBQUNDLE9BQU9DLFNBQVMsQ0FBQ0YsYUFBYUEsWUFBWSxHQUFHO1lBQ2hGLE1BQU0sSUFBSUwscUJBQXFCO1FBQ2pDO1FBRUEsSUFBSSxDQUFDRCxjQUFjLENBQUNLLEtBQUssR0FBR0M7UUFDNUIsT0FBTyxJQUFJO0lBQ2I7SUFFQTs7R0FFQyxHQUNERyxVQUFXO1FBQ1QsSUFBSSxDQUFDVCxjQUFjLENBQUNTLE9BQU8sR0FBRztRQUM5QixPQUFPLElBQUk7SUFDYjtJQUVBOztHQUVDLEdBQ0RDLE1BQU9DLFdBQVcsRUFBRTtRQUNsQixJQUFJLE9BQU9BLGdCQUFnQixZQUFZLENBQUNKLE9BQU9DLFNBQVMsQ0FBQ0csZ0JBQWdCQSxlQUFlLEdBQUc7WUFDekYsTUFBTSxJQUFJVixxQkFBcUI7UUFDakM7UUFFQSxJQUFJLENBQUNELGNBQWMsQ0FBQ1UsS0FBSyxHQUFHQztRQUM1QixPQUFPLElBQUk7SUFDYjtBQUNGO0FBRUE7O0NBRUMsR0FDRCxNQUFNQztJQUNKLFlBQWFDLElBQUksRUFBRUMsY0FBYyxDQUFFO1FBQ2pDLElBQUksT0FBT0QsU0FBUyxVQUFVO1lBQzVCLE1BQU0sSUFBSVoscUJBQXFCO1FBQ2pDO1FBQ0EsSUFBSSxPQUFPWSxLQUFLRSxJQUFJLEtBQUssYUFBYTtZQUNwQyxNQUFNLElBQUlkLHFCQUFxQjtRQUNqQztRQUNBLElBQUksT0FBT1ksS0FBS0csTUFBTSxLQUFLLGFBQWE7WUFDdENILEtBQUtHLE1BQU0sR0FBRztRQUNoQjtRQUNBLG1EQUFtRDtRQUNuRCx3REFBd0Q7UUFDeEQsc0RBQXNEO1FBQ3RELElBQUksT0FBT0gsS0FBS0UsSUFBSSxLQUFLLFVBQVU7WUFDakMsSUFBSUYsS0FBS0ksS0FBSyxFQUFFO2dCQUNkSixLQUFLRSxJQUFJLEdBQUdiLFNBQVNXLEtBQUtFLElBQUksRUFBRUYsS0FBS0ksS0FBSztZQUM1QyxPQUFPO2dCQUNMLGtGQUFrRjtnQkFDbEYsTUFBTUMsWUFBWSxJQUFJQyxJQUFJTixLQUFLRSxJQUFJLEVBQUU7Z0JBQ3JDRixLQUFLRSxJQUFJLEdBQUdHLFVBQVVFLFFBQVEsR0FBR0YsVUFBVUcsTUFBTTtZQUNuRDtRQUNGO1FBQ0EsSUFBSSxPQUFPUixLQUFLRyxNQUFNLEtBQUssVUFBVTtZQUNuQ0gsS0FBS0csTUFBTSxHQUFHSCxLQUFLRyxNQUFNLENBQUNNLFdBQVc7UUFDdkM7UUFFQSxJQUFJLENBQUMxQixhQUFhLEdBQUdKLFNBQVNxQjtRQUM5QixJQUFJLENBQUNsQixZQUFZLEdBQUdtQjtRQUNwQixJQUFJLENBQUNqQixnQkFBZ0IsR0FBRyxDQUFDO1FBQ3pCLElBQUksQ0FBQ0MsaUJBQWlCLEdBQUcsQ0FBQztRQUMxQixJQUFJLENBQUNDLGVBQWUsR0FBRztJQUN6QjtJQUVBd0IsNEJBQTZCLEVBQUVDLFVBQVUsRUFBRUMsSUFBSSxFQUFFQyxlQUFlLEVBQUUsRUFBRTtRQUNsRSxNQUFNQyxlQUFlcEMsZ0JBQWdCa0M7UUFDckMsTUFBTUcsZ0JBQWdCLElBQUksQ0FBQzdCLGVBQWUsR0FBRztZQUFFLGtCQUFrQjRCLGFBQWFFLE1BQU07UUFBQyxJQUFJLENBQUM7UUFDMUYsTUFBTUMsVUFBVTtZQUFFLEdBQUcsSUFBSSxDQUFDakMsZ0JBQWdCO1lBQUUsR0FBRytCLGFBQWE7WUFBRSxHQUFHRixnQkFBZ0JJLE9BQU87UUFBQztRQUN6RixNQUFNQyxXQUFXO1lBQUUsR0FBRyxJQUFJLENBQUNqQyxpQkFBaUI7WUFBRSxHQUFHNEIsZ0JBQWdCSyxRQUFRO1FBQUM7UUFFMUUsT0FBTztZQUFFUDtZQUFZQztZQUFNSztZQUFTQztRQUFTO0lBQy9DO0lBRUFDLHdCQUF5QkMsZUFBZSxFQUFFO1FBQ3hDLElBQUksT0FBT0EsZ0JBQWdCVCxVQUFVLEtBQUssYUFBYTtZQUNyRCxNQUFNLElBQUl2QixxQkFBcUI7UUFDakM7UUFDQSxJQUFJLE9BQU9nQyxnQkFBZ0JQLGVBQWUsS0FBSyxZQUFZTyxnQkFBZ0JQLGVBQWUsS0FBSyxNQUFNO1lBQ25HLE1BQU0sSUFBSXpCLHFCQUFxQjtRQUNqQztJQUNGO0lBRUE7O0dBRUMsR0FDRGlDLE1BQU9DLGdDQUFnQyxFQUFFO1FBQ3ZDLHFEQUFxRDtRQUNyRCw0REFBNEQ7UUFDNUQsSUFBSSxPQUFPQSxxQ0FBcUMsWUFBWTtZQUMxRCw4REFBOEQ7WUFDOUQsaUVBQWlFO1lBQ2pFLGdCQUFnQjtZQUNoQixNQUFNQywwQkFBMEIsQ0FBQ3ZCO2dCQUMvQixzRkFBc0Y7Z0JBQ3RGLE1BQU13QixlQUFlRixpQ0FBaUN0QjtnQkFFdEQscUNBQXFDO2dCQUNyQyxJQUFJLE9BQU93QixpQkFBaUIsWUFBWUEsaUJBQWlCLE1BQU07b0JBQzdELE1BQU0sSUFBSXBDLHFCQUFxQjtnQkFDakM7Z0JBRUEsTUFBTWdDLGtCQUFrQjtvQkFBRVIsTUFBTTtvQkFBSUMsaUJBQWlCLENBQUM7b0JBQUcsR0FBR1csWUFBWTtnQkFBQztnQkFDekUsSUFBSSxDQUFDTCx1QkFBdUIsQ0FBQ0M7Z0JBQzdCLDhEQUE4RDtnQkFDOUQsK0RBQStEO2dCQUMvRCxPQUFPO29CQUNMLEdBQUcsSUFBSSxDQUFDViwyQkFBMkIsQ0FBQ1UsZ0JBQWdCO2dCQUN0RDtZQUNGO1lBRUEsK0dBQStHO1lBQy9HLE1BQU1LLGtCQUFrQjdDLGdCQUFnQixJQUFJLENBQUNFLFlBQVksRUFBRSxJQUFJLENBQUNDLGFBQWEsRUFBRXdDO1lBQy9FLE9BQU8sSUFBSWpDLFVBQVVtQztRQUN2QjtRQUVBLDhEQUE4RDtRQUM5RCwrREFBK0Q7UUFDL0Qsc0VBQXNFO1FBQ3RFLDBCQUEwQjtRQUMxQixNQUFNTCxrQkFBa0I7WUFDdEJULFlBQVlXO1lBQ1pWLE1BQU1jLFNBQVMsQ0FBQyxFQUFFLEtBQUtDLFlBQVksS0FBS0QsU0FBUyxDQUFDLEVBQUU7WUFDcERiLGlCQUFpQmEsU0FBUyxDQUFDLEVBQUUsS0FBS0MsWUFBWSxDQUFDLElBQUlELFNBQVMsQ0FBQyxFQUFFO1FBQ2pFO1FBQ0EsSUFBSSxDQUFDUCx1QkFBdUIsQ0FBQ0M7UUFFN0IsMkNBQTJDO1FBQzNDLE1BQU1RLGVBQWUsSUFBSSxDQUFDbEIsMkJBQTJCLENBQUNVO1FBQ3RELE1BQU1LLGtCQUFrQjdDLGdCQUFnQixJQUFJLENBQUNFLFlBQVksRUFBRSxJQUFJLENBQUNDLGFBQWEsRUFBRTZDO1FBQy9FLE9BQU8sSUFBSXRDLFVBQVVtQztJQUN2QjtJQUVBOztHQUVDLEdBQ0RJLGVBQWdCQyxLQUFLLEVBQUU7UUFDckIsSUFBSSxPQUFPQSxVQUFVLGFBQWE7WUFDaEMsTUFBTSxJQUFJMUMscUJBQXFCO1FBQ2pDO1FBRUEsTUFBTXFDLGtCQUFrQjdDLGdCQUFnQixJQUFJLENBQUNFLFlBQVksRUFBRSxJQUFJLENBQUNDLGFBQWEsRUFBRTtZQUFFK0M7UUFBTTtRQUN2RixPQUFPLElBQUl4QyxVQUFVbUM7SUFDdkI7SUFFQTs7R0FFQyxHQUNETSxvQkFBcUJkLE9BQU8sRUFBRTtRQUM1QixJQUFJLE9BQU9BLFlBQVksYUFBYTtZQUNsQyxNQUFNLElBQUk3QixxQkFBcUI7UUFDakM7UUFFQSxJQUFJLENBQUNKLGdCQUFnQixHQUFHaUM7UUFDeEIsT0FBTyxJQUFJO0lBQ2I7SUFFQTs7R0FFQyxHQUNEZSxxQkFBc0JkLFFBQVEsRUFBRTtRQUM5QixJQUFJLE9BQU9BLGFBQWEsYUFBYTtZQUNuQyxNQUFNLElBQUk5QixxQkFBcUI7UUFDakM7UUFFQSxJQUFJLENBQUNILGlCQUFpQixHQUFHaUM7UUFDekIsT0FBTyxJQUFJO0lBQ2I7SUFFQTs7R0FFQyxHQUNEZSxxQkFBc0I7UUFDcEIsSUFBSSxDQUFDL0MsZUFBZSxHQUFHO1FBQ3ZCLE9BQU8sSUFBSTtJQUNiO0FBQ0Y7QUFFQWdELDhCQUE4QixHQUFHbkM7QUFDakNtQyx3QkFBd0IsR0FBRzVDIiwic291cmNlcyI6WyJEOlxcSGVsaXhcXG5vZGVfbW9kdWxlc1xcdW5kaWNpXFxsaWJcXG1vY2tcXG1vY2staW50ZXJjZXB0b3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IHsgZ2V0UmVzcG9uc2VEYXRhLCBidWlsZEtleSwgYWRkTW9ja0Rpc3BhdGNoIH0gPSByZXF1aXJlKCcuL21vY2stdXRpbHMnKVxuY29uc3Qge1xuICBrRGlzcGF0Y2hlcyxcbiAga0Rpc3BhdGNoS2V5LFxuICBrRGVmYXVsdEhlYWRlcnMsXG4gIGtEZWZhdWx0VHJhaWxlcnMsXG4gIGtDb250ZW50TGVuZ3RoLFxuICBrTW9ja0Rpc3BhdGNoXG59ID0gcmVxdWlyZSgnLi9tb2NrLXN5bWJvbHMnKVxuY29uc3QgeyBJbnZhbGlkQXJndW1lbnRFcnJvciB9ID0gcmVxdWlyZSgnLi4vY29yZS9lcnJvcnMnKVxuY29uc3QgeyBidWlsZFVSTCB9ID0gcmVxdWlyZSgnLi4vY29yZS91dGlsJylcblxuLyoqXG4gKiBEZWZpbmVzIHRoZSBzY29wZSBBUEkgZm9yIGFuIGludGVyY2VwdG9yIHJlcGx5XG4gKi9cbmNsYXNzIE1vY2tTY29wZSB7XG4gIGNvbnN0cnVjdG9yIChtb2NrRGlzcGF0Y2gpIHtcbiAgICB0aGlzW2tNb2NrRGlzcGF0Y2hdID0gbW9ja0Rpc3BhdGNoXG4gIH1cblxuICAvKipcbiAgICogRGVsYXkgYSByZXBseSBieSBhIHNldCBhbW91bnQgaW4gbXMuXG4gICAqL1xuICBkZWxheSAod2FpdEluTXMpIHtcbiAgICBpZiAodHlwZW9mIHdhaXRJbk1zICE9PSAnbnVtYmVyJyB8fCAhTnVtYmVyLmlzSW50ZWdlcih3YWl0SW5NcykgfHwgd2FpdEluTXMgPD0gMCkge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKCd3YWl0SW5NcyBtdXN0IGJlIGEgdmFsaWQgaW50ZWdlciA+IDAnKVxuICAgIH1cblxuICAgIHRoaXNba01vY2tEaXNwYXRjaF0uZGVsYXkgPSB3YWl0SW5Nc1xuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogRm9yIGEgZGVmaW5lZCByZXBseSwgbmV2ZXIgbWFyayBhcyBjb25zdW1lZC5cbiAgICovXG4gIHBlcnNpc3QgKCkge1xuICAgIHRoaXNba01vY2tEaXNwYXRjaF0ucGVyc2lzdCA9IHRydWVcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyoqXG4gICAqIEFsbG93IG9uZSB0byBkZWZpbmUgYSByZXBseSBmb3IgYSBzZXQgYW1vdW50IG9mIG1hdGNoaW5nIHJlcXVlc3RzLlxuICAgKi9cbiAgdGltZXMgKHJlcGVhdFRpbWVzKSB7XG4gICAgaWYgKHR5cGVvZiByZXBlYXRUaW1lcyAhPT0gJ251bWJlcicgfHwgIU51bWJlci5pc0ludGVnZXIocmVwZWF0VGltZXMpIHx8IHJlcGVhdFRpbWVzIDw9IDApIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcigncmVwZWF0VGltZXMgbXVzdCBiZSBhIHZhbGlkIGludGVnZXIgPiAwJylcbiAgICB9XG5cbiAgICB0aGlzW2tNb2NrRGlzcGF0Y2hdLnRpbWVzID0gcmVwZWF0VGltZXNcbiAgICByZXR1cm4gdGhpc1xuICB9XG59XG5cbi8qKlxuICogRGVmaW5lcyBhbiBpbnRlcmNlcHRvciBmb3IgYSBNb2NrXG4gKi9cbmNsYXNzIE1vY2tJbnRlcmNlcHRvciB7XG4gIGNvbnN0cnVjdG9yIChvcHRzLCBtb2NrRGlzcGF0Y2hlcykge1xuICAgIGlmICh0eXBlb2Ygb3B0cyAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcignb3B0cyBtdXN0IGJlIGFuIG9iamVjdCcpXG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb3B0cy5wYXRoID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKCdvcHRzLnBhdGggbXVzdCBiZSBkZWZpbmVkJylcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvcHRzLm1ldGhvZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIG9wdHMubWV0aG9kID0gJ0dFVCdcbiAgICB9XG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvdW5kaWNpL2lzc3Vlcy8xMjQ1XG4gICAgLy8gQXMgcGVyIFJGQyAzOTg2LCBjbGllbnRzIGFyZSBub3Qgc3VwcG9zZWQgdG8gc2VuZCBVUklcbiAgICAvLyBmcmFnbWVudHMgdG8gc2VydmVycyB3aGVuIHRoZXkgcmV0cmlldmUgYSBkb2N1bWVudCxcbiAgICBpZiAodHlwZW9mIG9wdHMucGF0aCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGlmIChvcHRzLnF1ZXJ5KSB7XG4gICAgICAgIG9wdHMucGF0aCA9IGJ1aWxkVVJMKG9wdHMucGF0aCwgb3B0cy5xdWVyeSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE1hdGNoZXMgaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy91bmRpY2kvYmxvYi9tYWluL2xpYi93ZWIvZmV0Y2gvaW5kZXguanMjTDE4MTFcbiAgICAgICAgY29uc3QgcGFyc2VkVVJMID0gbmV3IFVSTChvcHRzLnBhdGgsICdkYXRhOi8vJylcbiAgICAgICAgb3B0cy5wYXRoID0gcGFyc2VkVVJMLnBhdGhuYW1lICsgcGFyc2VkVVJMLnNlYXJjaFxuICAgICAgfVxuICAgIH1cbiAgICBpZiAodHlwZW9mIG9wdHMubWV0aG9kID09PSAnc3RyaW5nJykge1xuICAgICAgb3B0cy5tZXRob2QgPSBvcHRzLm1ldGhvZC50b1VwcGVyQ2FzZSgpXG4gICAgfVxuXG4gICAgdGhpc1trRGlzcGF0Y2hLZXldID0gYnVpbGRLZXkob3B0cylcbiAgICB0aGlzW2tEaXNwYXRjaGVzXSA9IG1vY2tEaXNwYXRjaGVzXG4gICAgdGhpc1trRGVmYXVsdEhlYWRlcnNdID0ge31cbiAgICB0aGlzW2tEZWZhdWx0VHJhaWxlcnNdID0ge31cbiAgICB0aGlzW2tDb250ZW50TGVuZ3RoXSA9IGZhbHNlXG4gIH1cblxuICBjcmVhdGVNb2NrU2NvcGVEaXNwYXRjaERhdGEgKHsgc3RhdHVzQ29kZSwgZGF0YSwgcmVzcG9uc2VPcHRpb25zIH0pIHtcbiAgICBjb25zdCByZXNwb25zZURhdGEgPSBnZXRSZXNwb25zZURhdGEoZGF0YSlcbiAgICBjb25zdCBjb250ZW50TGVuZ3RoID0gdGhpc1trQ29udGVudExlbmd0aF0gPyB7ICdjb250ZW50LWxlbmd0aCc6IHJlc3BvbnNlRGF0YS5sZW5ndGggfSA6IHt9XG4gICAgY29uc3QgaGVhZGVycyA9IHsgLi4udGhpc1trRGVmYXVsdEhlYWRlcnNdLCAuLi5jb250ZW50TGVuZ3RoLCAuLi5yZXNwb25zZU9wdGlvbnMuaGVhZGVycyB9XG4gICAgY29uc3QgdHJhaWxlcnMgPSB7IC4uLnRoaXNba0RlZmF1bHRUcmFpbGVyc10sIC4uLnJlc3BvbnNlT3B0aW9ucy50cmFpbGVycyB9XG5cbiAgICByZXR1cm4geyBzdGF0dXNDb2RlLCBkYXRhLCBoZWFkZXJzLCB0cmFpbGVycyB9XG4gIH1cblxuICB2YWxpZGF0ZVJlcGx5UGFyYW1ldGVycyAocmVwbHlQYXJhbWV0ZXJzKSB7XG4gICAgaWYgKHR5cGVvZiByZXBseVBhcmFtZXRlcnMuc3RhdHVzQ29kZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcignc3RhdHVzQ29kZSBtdXN0IGJlIGRlZmluZWQnKVxuICAgIH1cbiAgICBpZiAodHlwZW9mIHJlcGx5UGFyYW1ldGVycy5yZXNwb25zZU9wdGlvbnMgIT09ICdvYmplY3QnIHx8IHJlcGx5UGFyYW1ldGVycy5yZXNwb25zZU9wdGlvbnMgPT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcigncmVzcG9uc2VPcHRpb25zIG11c3QgYmUgYW4gb2JqZWN0JylcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTW9jayBhbiB1bmRpY2kgcmVxdWVzdCB3aXRoIGEgZGVmaW5lZCByZXBseS5cbiAgICovXG4gIHJlcGx5IChyZXBseU9wdGlvbnNDYWxsYmFja09yU3RhdHVzQ29kZSkge1xuICAgIC8vIFZhbHVlcyBvZiByZXBseSBhcmVuJ3QgYXZhaWxhYmxlIHJpZ2h0IG5vdyBhcyB0aGV5XG4gICAgLy8gY2FuIG9ubHkgYmUgYXZhaWxhYmxlIHdoZW4gdGhlIHJlcGx5IGNhbGxiYWNrIGlzIGludm9rZWQuXG4gICAgaWYgKHR5cGVvZiByZXBseU9wdGlvbnNDYWxsYmFja09yU3RhdHVzQ29kZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gV2UnbGwgZmlyc3Qgd3JhcCB0aGUgcHJvdmlkZWQgY2FsbGJhY2sgaW4gYW5vdGhlciBmdW5jdGlvbixcbiAgICAgIC8vIHRoaXMgZnVuY3Rpb24gd2lsbCBwcm9wZXJseSByZXNvbHZlIHRoZSBkYXRhIGZyb20gdGhlIGNhbGxiYWNrXG4gICAgICAvLyB3aGVuIGludm9rZWQuXG4gICAgICBjb25zdCB3cmFwcGVkRGVmYXVsdHNDYWxsYmFjayA9IChvcHRzKSA9PiB7XG4gICAgICAgIC8vIE91ciByZXBseSBvcHRpb25zIGNhbGxiYWNrIGNvbnRhaW5zIHRoZSBwYXJhbWV0ZXIgZm9yIHN0YXR1c0NvZGUsIGRhdGEgYW5kIG9wdGlvbnMuXG4gICAgICAgIGNvbnN0IHJlc29sdmVkRGF0YSA9IHJlcGx5T3B0aW9uc0NhbGxiYWNrT3JTdGF0dXNDb2RlKG9wdHMpXG5cbiAgICAgICAgLy8gQ2hlY2sgaWYgaXQgaXMgaW4gdGhlIHJpZ2h0IGZvcm1hdFxuICAgICAgICBpZiAodHlwZW9mIHJlc29sdmVkRGF0YSAhPT0gJ29iamVjdCcgfHwgcmVzb2x2ZWREYXRhID09PSBudWxsKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKCdyZXBseSBvcHRpb25zIGNhbGxiYWNrIG11c3QgcmV0dXJuIGFuIG9iamVjdCcpXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCByZXBseVBhcmFtZXRlcnMgPSB7IGRhdGE6ICcnLCByZXNwb25zZU9wdGlvbnM6IHt9LCAuLi5yZXNvbHZlZERhdGEgfVxuICAgICAgICB0aGlzLnZhbGlkYXRlUmVwbHlQYXJhbWV0ZXJzKHJlcGx5UGFyYW1ldGVycylcbiAgICAgICAgLy8gU2luY2UgdGhlIHZhbHVlcyBjYW4gYmUgb2J0YWluZWQgaW1tZWRpYXRlbHkgd2UgcmV0dXJuIHRoZW1cbiAgICAgICAgLy8gZnJvbSB0aGlzIGhpZ2hlciBvcmRlciBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgbGF0ZXIuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgLi4udGhpcy5jcmVhdGVNb2NrU2NvcGVEaXNwYXRjaERhdGEocmVwbHlQYXJhbWV0ZXJzKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIEFkZCB1c3VhbCBkaXNwYXRjaCBkYXRhLCBidXQgdGhpcyB0aW1lIHNldCB0aGUgZGF0YSBwYXJhbWV0ZXIgdG8gZnVuY3Rpb24gdGhhdCB3aWxsIGV2ZW50dWFsbHkgcHJvdmlkZSBkYXRhLlxuICAgICAgY29uc3QgbmV3TW9ja0Rpc3BhdGNoID0gYWRkTW9ja0Rpc3BhdGNoKHRoaXNba0Rpc3BhdGNoZXNdLCB0aGlzW2tEaXNwYXRjaEtleV0sIHdyYXBwZWREZWZhdWx0c0NhbGxiYWNrKVxuICAgICAgcmV0dXJuIG5ldyBNb2NrU2NvcGUobmV3TW9ja0Rpc3BhdGNoKVxuICAgIH1cblxuICAgIC8vIFdlIGNhbiBoYXZlIGVpdGhlciBvbmUgb3IgdGhyZWUgcGFyYW1ldGVycywgaWYgd2UgZ2V0IGhlcmUsXG4gICAgLy8gd2Ugc2hvdWxkIGhhdmUgMS0zIHBhcmFtZXRlcnMuIFNvIHdlIHNwcmVhZCB0aGUgYXJndW1lbnRzIG9mXG4gICAgLy8gdGhpcyBmdW5jdGlvbiB0byBvYnRhaW4gdGhlIHBhcmFtZXRlcnMsIHNpbmNlIHJlcGx5RGF0YSB3aWxsIGFsd2F5c1xuICAgIC8vIGp1c3QgYmUgdGhlIHN0YXR1c0NvZGUuXG4gICAgY29uc3QgcmVwbHlQYXJhbWV0ZXJzID0ge1xuICAgICAgc3RhdHVzQ29kZTogcmVwbHlPcHRpb25zQ2FsbGJhY2tPclN0YXR1c0NvZGUsXG4gICAgICBkYXRhOiBhcmd1bWVudHNbMV0gPT09IHVuZGVmaW5lZCA/ICcnIDogYXJndW1lbnRzWzFdLFxuICAgICAgcmVzcG9uc2VPcHRpb25zOiBhcmd1bWVudHNbMl0gPT09IHVuZGVmaW5lZCA/IHt9IDogYXJndW1lbnRzWzJdXG4gICAgfVxuICAgIHRoaXMudmFsaWRhdGVSZXBseVBhcmFtZXRlcnMocmVwbHlQYXJhbWV0ZXJzKVxuXG4gICAgLy8gU2VuZCBpbi1hbHJlYWR5IHByb3ZpZGVkIGRhdGEgbGlrZSB1c3VhbFxuICAgIGNvbnN0IGRpc3BhdGNoRGF0YSA9IHRoaXMuY3JlYXRlTW9ja1Njb3BlRGlzcGF0Y2hEYXRhKHJlcGx5UGFyYW1ldGVycylcbiAgICBjb25zdCBuZXdNb2NrRGlzcGF0Y2ggPSBhZGRNb2NrRGlzcGF0Y2godGhpc1trRGlzcGF0Y2hlc10sIHRoaXNba0Rpc3BhdGNoS2V5XSwgZGlzcGF0Y2hEYXRhKVxuICAgIHJldHVybiBuZXcgTW9ja1Njb3BlKG5ld01vY2tEaXNwYXRjaClcbiAgfVxuXG4gIC8qKlxuICAgKiBNb2NrIGFuIHVuZGljaSByZXF1ZXN0IHdpdGggYSBkZWZpbmVkIGVycm9yLlxuICAgKi9cbiAgcmVwbHlXaXRoRXJyb3IgKGVycm9yKSB7XG4gICAgaWYgKHR5cGVvZiBlcnJvciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcignZXJyb3IgbXVzdCBiZSBkZWZpbmVkJylcbiAgICB9XG5cbiAgICBjb25zdCBuZXdNb2NrRGlzcGF0Y2ggPSBhZGRNb2NrRGlzcGF0Y2godGhpc1trRGlzcGF0Y2hlc10sIHRoaXNba0Rpc3BhdGNoS2V5XSwgeyBlcnJvciB9KVxuICAgIHJldHVybiBuZXcgTW9ja1Njb3BlKG5ld01vY2tEaXNwYXRjaClcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgZGVmYXVsdCByZXBseSBoZWFkZXJzIG9uIHRoZSBpbnRlcmNlcHRvciBmb3Igc3Vic2VxdWVudCByZXBsaWVzXG4gICAqL1xuICBkZWZhdWx0UmVwbHlIZWFkZXJzIChoZWFkZXJzKSB7XG4gICAgaWYgKHR5cGVvZiBoZWFkZXJzID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKCdoZWFkZXJzIG11c3QgYmUgZGVmaW5lZCcpXG4gICAgfVxuXG4gICAgdGhpc1trRGVmYXVsdEhlYWRlcnNdID0gaGVhZGVyc1xuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogU2V0IGRlZmF1bHQgcmVwbHkgdHJhaWxlcnMgb24gdGhlIGludGVyY2VwdG9yIGZvciBzdWJzZXF1ZW50IHJlcGxpZXNcbiAgICovXG4gIGRlZmF1bHRSZXBseVRyYWlsZXJzICh0cmFpbGVycykge1xuICAgIGlmICh0eXBlb2YgdHJhaWxlcnMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoJ3RyYWlsZXJzIG11c3QgYmUgZGVmaW5lZCcpXG4gICAgfVxuXG4gICAgdGhpc1trRGVmYXVsdFRyYWlsZXJzXSA9IHRyYWlsZXJzXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgcmVwbHkgY29udGVudCBsZW5ndGggaGVhZGVyIGZvciByZXBsaWVzIG9uIHRoZSBpbnRlcmNlcHRvclxuICAgKi9cbiAgcmVwbHlDb250ZW50TGVuZ3RoICgpIHtcbiAgICB0aGlzW2tDb250ZW50TGVuZ3RoXSA9IHRydWVcbiAgICByZXR1cm4gdGhpc1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzLk1vY2tJbnRlcmNlcHRvciA9IE1vY2tJbnRlcmNlcHRvclxubW9kdWxlLmV4cG9ydHMuTW9ja1Njb3BlID0gTW9ja1Njb3BlXG4iXSwibmFtZXMiOlsiZ2V0UmVzcG9uc2VEYXRhIiwiYnVpbGRLZXkiLCJhZGRNb2NrRGlzcGF0Y2giLCJyZXF1aXJlIiwia0Rpc3BhdGNoZXMiLCJrRGlzcGF0Y2hLZXkiLCJrRGVmYXVsdEhlYWRlcnMiLCJrRGVmYXVsdFRyYWlsZXJzIiwia0NvbnRlbnRMZW5ndGgiLCJrTW9ja0Rpc3BhdGNoIiwiSW52YWxpZEFyZ3VtZW50RXJyb3IiLCJidWlsZFVSTCIsIk1vY2tTY29wZSIsIm1vY2tEaXNwYXRjaCIsImRlbGF5Iiwid2FpdEluTXMiLCJOdW1iZXIiLCJpc0ludGVnZXIiLCJwZXJzaXN0IiwidGltZXMiLCJyZXBlYXRUaW1lcyIsIk1vY2tJbnRlcmNlcHRvciIsIm9wdHMiLCJtb2NrRGlzcGF0Y2hlcyIsInBhdGgiLCJtZXRob2QiLCJxdWVyeSIsInBhcnNlZFVSTCIsIlVSTCIsInBhdGhuYW1lIiwic2VhcmNoIiwidG9VcHBlckNhc2UiLCJjcmVhdGVNb2NrU2NvcGVEaXNwYXRjaERhdGEiLCJzdGF0dXNDb2RlIiwiZGF0YSIsInJlc3BvbnNlT3B0aW9ucyIsInJlc3BvbnNlRGF0YSIsImNvbnRlbnRMZW5ndGgiLCJsZW5ndGgiLCJoZWFkZXJzIiwidHJhaWxlcnMiLCJ2YWxpZGF0ZVJlcGx5UGFyYW1ldGVycyIsInJlcGx5UGFyYW1ldGVycyIsInJlcGx5IiwicmVwbHlPcHRpb25zQ2FsbGJhY2tPclN0YXR1c0NvZGUiLCJ3cmFwcGVkRGVmYXVsdHNDYWxsYmFjayIsInJlc29sdmVkRGF0YSIsIm5ld01vY2tEaXNwYXRjaCIsImFyZ3VtZW50cyIsInVuZGVmaW5lZCIsImRpc3BhdGNoRGF0YSIsInJlcGx5V2l0aEVycm9yIiwiZXJyb3IiLCJkZWZhdWx0UmVwbHlIZWFkZXJzIiwiZGVmYXVsdFJlcGx5VHJhaWxlcnMiLCJyZXBseUNvbnRlbnRMZW5ndGgiLCJtb2R1bGUiLCJleHBvcnRzIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/mock/mock-interceptor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/mock/mock-pool.js":
/*!***************************************************!*\
  !*** ./node_modules/undici/lib/mock/mock-pool.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { promisify } = __webpack_require__(/*! node:util */ \"node:util\");\nconst Pool = __webpack_require__(/*! ../dispatcher/pool */ \"(ssr)/./node_modules/undici/lib/dispatcher/pool.js\");\nconst { buildMockDispatch } = __webpack_require__(/*! ./mock-utils */ \"(ssr)/./node_modules/undici/lib/mock/mock-utils.js\");\nconst { kDispatches, kMockAgent, kClose, kOriginalClose, kOrigin, kOriginalDispatch, kConnected } = __webpack_require__(/*! ./mock-symbols */ \"(ssr)/./node_modules/undici/lib/mock/mock-symbols.js\");\nconst { MockInterceptor } = __webpack_require__(/*! ./mock-interceptor */ \"(ssr)/./node_modules/undici/lib/mock/mock-interceptor.js\");\nconst Symbols = __webpack_require__(/*! ../core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst { InvalidArgumentError } = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\n/**\n * MockPool provides an API that extends the Pool to influence the mockDispatches.\n */ class MockPool extends Pool {\n    constructor(origin, opts){\n        super(origin, opts);\n        if (!opts || !opts.agent || typeof opts.agent.dispatch !== 'function') {\n            throw new InvalidArgumentError('Argument opts.agent must implement Agent');\n        }\n        this[kMockAgent] = opts.agent;\n        this[kOrigin] = origin;\n        this[kDispatches] = [];\n        this[kConnected] = 1;\n        this[kOriginalDispatch] = this.dispatch;\n        this[kOriginalClose] = this.close.bind(this);\n        this.dispatch = buildMockDispatch.call(this);\n        this.close = this[kClose];\n    }\n    get [Symbols.kConnected]() {\n        return this[kConnected];\n    }\n    /**\n   * Sets up the base interceptor for mocking replies from undici.\n   */ intercept(opts) {\n        return new MockInterceptor(opts, this[kDispatches]);\n    }\n    async [kClose]() {\n        await promisify(this[kOriginalClose])();\n        this[kConnected] = 0;\n        this[kMockAgent][Symbols.kClients].delete(this[kOrigin]);\n    }\n}\nmodule.exports = MockPool;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9tb2NrL21vY2stcG9vbC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU0sRUFBRUEsU0FBUyxFQUFFLEdBQUdDLG1CQUFPQSxDQUFDLDRCQUFXO0FBQ3pDLE1BQU1DLE9BQU9ELG1CQUFPQSxDQUFDLDhFQUFvQjtBQUN6QyxNQUFNLEVBQUVFLGlCQUFpQixFQUFFLEdBQUdGLG1CQUFPQSxDQUFDLHdFQUFjO0FBQ3BELE1BQU0sRUFDSkcsV0FBVyxFQUNYQyxVQUFVLEVBQ1ZDLE1BQU0sRUFDTkMsY0FBYyxFQUNkQyxPQUFPLEVBQ1BDLGlCQUFpQixFQUNqQkMsVUFBVSxFQUNYLEdBQUdULG1CQUFPQSxDQUFDLDRFQUFnQjtBQUM1QixNQUFNLEVBQUVVLGVBQWUsRUFBRSxHQUFHVixtQkFBT0EsQ0FBQyxvRkFBb0I7QUFDeEQsTUFBTVcsVUFBVVgsbUJBQU9BLENBQUMsd0VBQWlCO0FBQ3pDLE1BQU0sRUFBRVksb0JBQW9CLEVBQUUsR0FBR1osbUJBQU9BLENBQUMsc0VBQWdCO0FBRXpEOztDQUVDLEdBQ0QsTUFBTWEsaUJBQWlCWjtJQUNyQixZQUFhYSxNQUFNLEVBQUVDLElBQUksQ0FBRTtRQUN6QixLQUFLLENBQUNELFFBQVFDO1FBRWQsSUFBSSxDQUFDQSxRQUFRLENBQUNBLEtBQUtDLEtBQUssSUFBSSxPQUFPRCxLQUFLQyxLQUFLLENBQUNDLFFBQVEsS0FBSyxZQUFZO1lBQ3JFLE1BQU0sSUFBSUwscUJBQXFCO1FBQ2pDO1FBRUEsSUFBSSxDQUFDUixXQUFXLEdBQUdXLEtBQUtDLEtBQUs7UUFDN0IsSUFBSSxDQUFDVCxRQUFRLEdBQUdPO1FBQ2hCLElBQUksQ0FBQ1gsWUFBWSxHQUFHLEVBQUU7UUFDdEIsSUFBSSxDQUFDTSxXQUFXLEdBQUc7UUFDbkIsSUFBSSxDQUFDRCxrQkFBa0IsR0FBRyxJQUFJLENBQUNTLFFBQVE7UUFDdkMsSUFBSSxDQUFDWCxlQUFlLEdBQUcsSUFBSSxDQUFDWSxLQUFLLENBQUNDLElBQUksQ0FBQyxJQUFJO1FBRTNDLElBQUksQ0FBQ0YsUUFBUSxHQUFHZixrQkFBa0JrQixJQUFJLENBQUMsSUFBSTtRQUMzQyxJQUFJLENBQUNGLEtBQUssR0FBRyxJQUFJLENBQUNiLE9BQU87SUFDM0I7SUFFQSxJQUFJLENBQUNNLFFBQVFGLFVBQVUsQ0FBQyxHQUFJO1FBQzFCLE9BQU8sSUFBSSxDQUFDQSxXQUFXO0lBQ3pCO0lBRUE7O0dBRUMsR0FDRFksVUFBV04sSUFBSSxFQUFFO1FBQ2YsT0FBTyxJQUFJTCxnQkFBZ0JLLE1BQU0sSUFBSSxDQUFDWixZQUFZO0lBQ3BEO0lBRUEsTUFBTSxDQUFDRSxPQUFPLEdBQUk7UUFDaEIsTUFBTU4sVUFBVSxJQUFJLENBQUNPLGVBQWU7UUFDcEMsSUFBSSxDQUFDRyxXQUFXLEdBQUc7UUFDbkIsSUFBSSxDQUFDTCxXQUFXLENBQUNPLFFBQVFXLFFBQVEsQ0FBQyxDQUFDQyxNQUFNLENBQUMsSUFBSSxDQUFDaEIsUUFBUTtJQUN6RDtBQUNGO0FBRUFpQixPQUFPQyxPQUFPLEdBQUdaIiwic291cmNlcyI6WyJEOlxcSGVsaXhcXG5vZGVfbW9kdWxlc1xcdW5kaWNpXFxsaWJcXG1vY2tcXG1vY2stcG9vbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgeyBwcm9taXNpZnkgfSA9IHJlcXVpcmUoJ25vZGU6dXRpbCcpXG5jb25zdCBQb29sID0gcmVxdWlyZSgnLi4vZGlzcGF0Y2hlci9wb29sJylcbmNvbnN0IHsgYnVpbGRNb2NrRGlzcGF0Y2ggfSA9IHJlcXVpcmUoJy4vbW9jay11dGlscycpXG5jb25zdCB7XG4gIGtEaXNwYXRjaGVzLFxuICBrTW9ja0FnZW50LFxuICBrQ2xvc2UsXG4gIGtPcmlnaW5hbENsb3NlLFxuICBrT3JpZ2luLFxuICBrT3JpZ2luYWxEaXNwYXRjaCxcbiAga0Nvbm5lY3RlZFxufSA9IHJlcXVpcmUoJy4vbW9jay1zeW1ib2xzJylcbmNvbnN0IHsgTW9ja0ludGVyY2VwdG9yIH0gPSByZXF1aXJlKCcuL21vY2staW50ZXJjZXB0b3InKVxuY29uc3QgU3ltYm9scyA9IHJlcXVpcmUoJy4uL2NvcmUvc3ltYm9scycpXG5jb25zdCB7IEludmFsaWRBcmd1bWVudEVycm9yIH0gPSByZXF1aXJlKCcuLi9jb3JlL2Vycm9ycycpXG5cbi8qKlxuICogTW9ja1Bvb2wgcHJvdmlkZXMgYW4gQVBJIHRoYXQgZXh0ZW5kcyB0aGUgUG9vbCB0byBpbmZsdWVuY2UgdGhlIG1vY2tEaXNwYXRjaGVzLlxuICovXG5jbGFzcyBNb2NrUG9vbCBleHRlbmRzIFBvb2wge1xuICBjb25zdHJ1Y3RvciAob3JpZ2luLCBvcHRzKSB7XG4gICAgc3VwZXIob3JpZ2luLCBvcHRzKVxuXG4gICAgaWYgKCFvcHRzIHx8ICFvcHRzLmFnZW50IHx8IHR5cGVvZiBvcHRzLmFnZW50LmRpc3BhdGNoICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoJ0FyZ3VtZW50IG9wdHMuYWdlbnQgbXVzdCBpbXBsZW1lbnQgQWdlbnQnKVxuICAgIH1cblxuICAgIHRoaXNba01vY2tBZ2VudF0gPSBvcHRzLmFnZW50XG4gICAgdGhpc1trT3JpZ2luXSA9IG9yaWdpblxuICAgIHRoaXNba0Rpc3BhdGNoZXNdID0gW11cbiAgICB0aGlzW2tDb25uZWN0ZWRdID0gMVxuICAgIHRoaXNba09yaWdpbmFsRGlzcGF0Y2hdID0gdGhpcy5kaXNwYXRjaFxuICAgIHRoaXNba09yaWdpbmFsQ2xvc2VdID0gdGhpcy5jbG9zZS5iaW5kKHRoaXMpXG5cbiAgICB0aGlzLmRpc3BhdGNoID0gYnVpbGRNb2NrRGlzcGF0Y2guY2FsbCh0aGlzKVxuICAgIHRoaXMuY2xvc2UgPSB0aGlzW2tDbG9zZV1cbiAgfVxuXG4gIGdldCBbU3ltYm9scy5rQ29ubmVjdGVkXSAoKSB7XG4gICAgcmV0dXJuIHRoaXNba0Nvbm5lY3RlZF1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHVwIHRoZSBiYXNlIGludGVyY2VwdG9yIGZvciBtb2NraW5nIHJlcGxpZXMgZnJvbSB1bmRpY2kuXG4gICAqL1xuICBpbnRlcmNlcHQgKG9wdHMpIHtcbiAgICByZXR1cm4gbmV3IE1vY2tJbnRlcmNlcHRvcihvcHRzLCB0aGlzW2tEaXNwYXRjaGVzXSlcbiAgfVxuXG4gIGFzeW5jIFtrQ2xvc2VdICgpIHtcbiAgICBhd2FpdCBwcm9taXNpZnkodGhpc1trT3JpZ2luYWxDbG9zZV0pKClcbiAgICB0aGlzW2tDb25uZWN0ZWRdID0gMFxuICAgIHRoaXNba01vY2tBZ2VudF1bU3ltYm9scy5rQ2xpZW50c10uZGVsZXRlKHRoaXNba09yaWdpbl0pXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBNb2NrUG9vbFxuIl0sIm5hbWVzIjpbInByb21pc2lmeSIsInJlcXVpcmUiLCJQb29sIiwiYnVpbGRNb2NrRGlzcGF0Y2giLCJrRGlzcGF0Y2hlcyIsImtNb2NrQWdlbnQiLCJrQ2xvc2UiLCJrT3JpZ2luYWxDbG9zZSIsImtPcmlnaW4iLCJrT3JpZ2luYWxEaXNwYXRjaCIsImtDb25uZWN0ZWQiLCJNb2NrSW50ZXJjZXB0b3IiLCJTeW1ib2xzIiwiSW52YWxpZEFyZ3VtZW50RXJyb3IiLCJNb2NrUG9vbCIsIm9yaWdpbiIsIm9wdHMiLCJhZ2VudCIsImRpc3BhdGNoIiwiY2xvc2UiLCJiaW5kIiwiY2FsbCIsImludGVyY2VwdCIsImtDbGllbnRzIiwiZGVsZXRlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/mock/mock-pool.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/mock/mock-symbols.js":
/*!******************************************************!*\
  !*** ./node_modules/undici/lib/mock/mock-symbols.js ***!
  \******************************************************/
/***/ ((module) => {

eval("\nmodule.exports = {\n    kAgent: Symbol('agent'),\n    kOptions: Symbol('options'),\n    kFactory: Symbol('factory'),\n    kDispatches: Symbol('dispatches'),\n    kDispatchKey: Symbol('dispatch key'),\n    kDefaultHeaders: Symbol('default headers'),\n    kDefaultTrailers: Symbol('default trailers'),\n    kContentLength: Symbol('content length'),\n    kMockAgent: Symbol('mock agent'),\n    kMockAgentSet: Symbol('mock agent set'),\n    kMockAgentGet: Symbol('mock agent get'),\n    kMockDispatch: Symbol('mock dispatch'),\n    kClose: Symbol('close'),\n    kOriginalClose: Symbol('original agent close'),\n    kOrigin: Symbol('origin'),\n    kIsMockActive: Symbol('is mock active'),\n    kNetConnect: Symbol('net connect'),\n    kGetNetConnect: Symbol('get net connect'),\n    kConnected: Symbol('connected')\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9tb2NrL21vY2stc3ltYm9scy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBQSxPQUFPQyxPQUFPLEdBQUc7SUFDZkMsUUFBUUMsT0FBTztJQUNmQyxVQUFVRCxPQUFPO0lBQ2pCRSxVQUFVRixPQUFPO0lBQ2pCRyxhQUFhSCxPQUFPO0lBQ3BCSSxjQUFjSixPQUFPO0lBQ3JCSyxpQkFBaUJMLE9BQU87SUFDeEJNLGtCQUFrQk4sT0FBTztJQUN6Qk8sZ0JBQWdCUCxPQUFPO0lBQ3ZCUSxZQUFZUixPQUFPO0lBQ25CUyxlQUFlVCxPQUFPO0lBQ3RCVSxlQUFlVixPQUFPO0lBQ3RCVyxlQUFlWCxPQUFPO0lBQ3RCWSxRQUFRWixPQUFPO0lBQ2ZhLGdCQUFnQmIsT0FBTztJQUN2QmMsU0FBU2QsT0FBTztJQUNoQmUsZUFBZWYsT0FBTztJQUN0QmdCLGFBQWFoQixPQUFPO0lBQ3BCaUIsZ0JBQWdCakIsT0FBTztJQUN2QmtCLFlBQVlsQixPQUFPO0FBQ3JCIiwic291cmNlcyI6WyJEOlxcSGVsaXhcXG5vZGVfbW9kdWxlc1xcdW5kaWNpXFxsaWJcXG1vY2tcXG1vY2stc3ltYm9scy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGtBZ2VudDogU3ltYm9sKCdhZ2VudCcpLFxuICBrT3B0aW9uczogU3ltYm9sKCdvcHRpb25zJyksXG4gIGtGYWN0b3J5OiBTeW1ib2woJ2ZhY3RvcnknKSxcbiAga0Rpc3BhdGNoZXM6IFN5bWJvbCgnZGlzcGF0Y2hlcycpLFxuICBrRGlzcGF0Y2hLZXk6IFN5bWJvbCgnZGlzcGF0Y2gga2V5JyksXG4gIGtEZWZhdWx0SGVhZGVyczogU3ltYm9sKCdkZWZhdWx0IGhlYWRlcnMnKSxcbiAga0RlZmF1bHRUcmFpbGVyczogU3ltYm9sKCdkZWZhdWx0IHRyYWlsZXJzJyksXG4gIGtDb250ZW50TGVuZ3RoOiBTeW1ib2woJ2NvbnRlbnQgbGVuZ3RoJyksXG4gIGtNb2NrQWdlbnQ6IFN5bWJvbCgnbW9jayBhZ2VudCcpLFxuICBrTW9ja0FnZW50U2V0OiBTeW1ib2woJ21vY2sgYWdlbnQgc2V0JyksXG4gIGtNb2NrQWdlbnRHZXQ6IFN5bWJvbCgnbW9jayBhZ2VudCBnZXQnKSxcbiAga01vY2tEaXNwYXRjaDogU3ltYm9sKCdtb2NrIGRpc3BhdGNoJyksXG4gIGtDbG9zZTogU3ltYm9sKCdjbG9zZScpLFxuICBrT3JpZ2luYWxDbG9zZTogU3ltYm9sKCdvcmlnaW5hbCBhZ2VudCBjbG9zZScpLFxuICBrT3JpZ2luOiBTeW1ib2woJ29yaWdpbicpLFxuICBrSXNNb2NrQWN0aXZlOiBTeW1ib2woJ2lzIG1vY2sgYWN0aXZlJyksXG4gIGtOZXRDb25uZWN0OiBTeW1ib2woJ25ldCBjb25uZWN0JyksXG4gIGtHZXROZXRDb25uZWN0OiBTeW1ib2woJ2dldCBuZXQgY29ubmVjdCcpLFxuICBrQ29ubmVjdGVkOiBTeW1ib2woJ2Nvbm5lY3RlZCcpXG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImtBZ2VudCIsIlN5bWJvbCIsImtPcHRpb25zIiwia0ZhY3RvcnkiLCJrRGlzcGF0Y2hlcyIsImtEaXNwYXRjaEtleSIsImtEZWZhdWx0SGVhZGVycyIsImtEZWZhdWx0VHJhaWxlcnMiLCJrQ29udGVudExlbmd0aCIsImtNb2NrQWdlbnQiLCJrTW9ja0FnZW50U2V0Iiwia01vY2tBZ2VudEdldCIsImtNb2NrRGlzcGF0Y2giLCJrQ2xvc2UiLCJrT3JpZ2luYWxDbG9zZSIsImtPcmlnaW4iLCJrSXNNb2NrQWN0aXZlIiwia05ldENvbm5lY3QiLCJrR2V0TmV0Q29ubmVjdCIsImtDb25uZWN0ZWQiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/mock/mock-symbols.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/mock/mock-utils.js":
/*!****************************************************!*\
  !*** ./node_modules/undici/lib/mock/mock-utils.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { MockNotMatchedError } = __webpack_require__(/*! ./mock-errors */ \"(ssr)/./node_modules/undici/lib/mock/mock-errors.js\");\nconst { kDispatches, kMockAgent, kOriginalDispatch, kOrigin, kGetNetConnect } = __webpack_require__(/*! ./mock-symbols */ \"(ssr)/./node_modules/undici/lib/mock/mock-symbols.js\");\nconst { buildURL } = __webpack_require__(/*! ../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst { STATUS_CODES } = __webpack_require__(/*! node:http */ \"node:http\");\nconst { types: { isPromise } } = __webpack_require__(/*! node:util */ \"node:util\");\nfunction matchValue(match, value) {\n    if (typeof match === 'string') {\n        return match === value;\n    }\n    if (match instanceof RegExp) {\n        return match.test(value);\n    }\n    if (typeof match === 'function') {\n        return match(value) === true;\n    }\n    return false;\n}\nfunction lowerCaseEntries(headers) {\n    return Object.fromEntries(Object.entries(headers).map(([headerName, headerValue])=>{\n        return [\n            headerName.toLocaleLowerCase(),\n            headerValue\n        ];\n    }));\n}\n/**\n * @param {import('../../index').Headers|string[]|Record<string, string>} headers\n * @param {string} key\n */ function getHeaderByName(headers, key) {\n    if (Array.isArray(headers)) {\n        for(let i = 0; i < headers.length; i += 2){\n            if (headers[i].toLocaleLowerCase() === key.toLocaleLowerCase()) {\n                return headers[i + 1];\n            }\n        }\n        return undefined;\n    } else if (typeof headers.get === 'function') {\n        return headers.get(key);\n    } else {\n        return lowerCaseEntries(headers)[key.toLocaleLowerCase()];\n    }\n}\n/** @param {string[]} headers */ function buildHeadersFromArray(headers) {\n    const clone = headers.slice();\n    const entries = [];\n    for(let index = 0; index < clone.length; index += 2){\n        entries.push([\n            clone[index],\n            clone[index + 1]\n        ]);\n    }\n    return Object.fromEntries(entries);\n}\nfunction matchHeaders(mockDispatch, headers) {\n    if (typeof mockDispatch.headers === 'function') {\n        if (Array.isArray(headers)) {\n            headers = buildHeadersFromArray(headers);\n        }\n        return mockDispatch.headers(headers ? lowerCaseEntries(headers) : {});\n    }\n    if (typeof mockDispatch.headers === 'undefined') {\n        return true;\n    }\n    if (typeof headers !== 'object' || typeof mockDispatch.headers !== 'object') {\n        return false;\n    }\n    for (const [matchHeaderName, matchHeaderValue] of Object.entries(mockDispatch.headers)){\n        const headerValue = getHeaderByName(headers, matchHeaderName);\n        if (!matchValue(matchHeaderValue, headerValue)) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction safeUrl(path) {\n    if (typeof path !== 'string') {\n        return path;\n    }\n    const pathSegments = path.split('?');\n    if (pathSegments.length !== 2) {\n        return path;\n    }\n    const qp = new URLSearchParams(pathSegments.pop());\n    qp.sort();\n    return [\n        ...pathSegments,\n        qp.toString()\n    ].join('?');\n}\nfunction matchKey(mockDispatch, { path, method, body, headers }) {\n    const pathMatch = matchValue(mockDispatch.path, path);\n    const methodMatch = matchValue(mockDispatch.method, method);\n    const bodyMatch = typeof mockDispatch.body !== 'undefined' ? matchValue(mockDispatch.body, body) : true;\n    const headersMatch = matchHeaders(mockDispatch, headers);\n    return pathMatch && methodMatch && bodyMatch && headersMatch;\n}\nfunction getResponseData(data) {\n    if (Buffer.isBuffer(data)) {\n        return data;\n    } else if (typeof data === 'object') {\n        return JSON.stringify(data);\n    } else {\n        return data.toString();\n    }\n}\nfunction getMockDispatch(mockDispatches, key) {\n    const basePath = key.query ? buildURL(key.path, key.query) : key.path;\n    const resolvedPath = typeof basePath === 'string' ? safeUrl(basePath) : basePath;\n    // Match path\n    let matchedMockDispatches = mockDispatches.filter(({ consumed })=>!consumed).filter(({ path })=>matchValue(safeUrl(path), resolvedPath));\n    if (matchedMockDispatches.length === 0) {\n        throw new MockNotMatchedError(`Mock dispatch not matched for path '${resolvedPath}'`);\n    }\n    // Match method\n    matchedMockDispatches = matchedMockDispatches.filter(({ method })=>matchValue(method, key.method));\n    if (matchedMockDispatches.length === 0) {\n        throw new MockNotMatchedError(`Mock dispatch not matched for method '${key.method}' on path '${resolvedPath}'`);\n    }\n    // Match body\n    matchedMockDispatches = matchedMockDispatches.filter(({ body })=>typeof body !== 'undefined' ? matchValue(body, key.body) : true);\n    if (matchedMockDispatches.length === 0) {\n        throw new MockNotMatchedError(`Mock dispatch not matched for body '${key.body}' on path '${resolvedPath}'`);\n    }\n    // Match headers\n    matchedMockDispatches = matchedMockDispatches.filter((mockDispatch)=>matchHeaders(mockDispatch, key.headers));\n    if (matchedMockDispatches.length === 0) {\n        const headers = typeof key.headers === 'object' ? JSON.stringify(key.headers) : key.headers;\n        throw new MockNotMatchedError(`Mock dispatch not matched for headers '${headers}' on path '${resolvedPath}'`);\n    }\n    return matchedMockDispatches[0];\n}\nfunction addMockDispatch(mockDispatches, key, data) {\n    const baseData = {\n        timesInvoked: 0,\n        times: 1,\n        persist: false,\n        consumed: false\n    };\n    const replyData = typeof data === 'function' ? {\n        callback: data\n    } : {\n        ...data\n    };\n    const newMockDispatch = {\n        ...baseData,\n        ...key,\n        pending: true,\n        data: {\n            error: null,\n            ...replyData\n        }\n    };\n    mockDispatches.push(newMockDispatch);\n    return newMockDispatch;\n}\nfunction deleteMockDispatch(mockDispatches, key) {\n    const index = mockDispatches.findIndex((dispatch)=>{\n        if (!dispatch.consumed) {\n            return false;\n        }\n        return matchKey(dispatch, key);\n    });\n    if (index !== -1) {\n        mockDispatches.splice(index, 1);\n    }\n}\nfunction buildKey(opts) {\n    const { path, method, body, headers, query } = opts;\n    return {\n        path,\n        method,\n        body,\n        headers,\n        query\n    };\n}\nfunction generateKeyValues(data) {\n    const keys = Object.keys(data);\n    const result = [];\n    for(let i = 0; i < keys.length; ++i){\n        const key = keys[i];\n        const value = data[key];\n        const name = Buffer.from(`${key}`);\n        if (Array.isArray(value)) {\n            for(let j = 0; j < value.length; ++j){\n                result.push(name, Buffer.from(`${value[j]}`));\n            }\n        } else {\n            result.push(name, Buffer.from(`${value}`));\n        }\n    }\n    return result;\n}\n/**\n * @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Status\n * @param {number} statusCode\n */ function getStatusText(statusCode) {\n    return STATUS_CODES[statusCode] || 'unknown';\n}\nasync function getResponse(body) {\n    const buffers = [];\n    for await (const data of body){\n        buffers.push(data);\n    }\n    return Buffer.concat(buffers).toString('utf8');\n}\n/**\n * Mock dispatch function used to simulate undici dispatches\n */ function mockDispatch(opts, handler) {\n    // Get mock dispatch from built key\n    const key = buildKey(opts);\n    const mockDispatch = getMockDispatch(this[kDispatches], key);\n    mockDispatch.timesInvoked++;\n    // Here's where we resolve a callback if a callback is present for the dispatch data.\n    if (mockDispatch.data.callback) {\n        mockDispatch.data = {\n            ...mockDispatch.data,\n            ...mockDispatch.data.callback(opts)\n        };\n    }\n    // Parse mockDispatch data\n    const { data: { statusCode, data, headers, trailers, error }, delay, persist } = mockDispatch;\n    const { timesInvoked, times } = mockDispatch;\n    // If it's used up and not persistent, mark as consumed\n    mockDispatch.consumed = !persist && timesInvoked >= times;\n    mockDispatch.pending = timesInvoked < times;\n    // If specified, trigger dispatch error\n    if (error !== null) {\n        deleteMockDispatch(this[kDispatches], key);\n        handler.onError(error);\n        return true;\n    }\n    // Handle the request with a delay if necessary\n    if (typeof delay === 'number' && delay > 0) {\n        setTimeout(()=>{\n            handleReply(this[kDispatches]);\n        }, delay);\n    } else {\n        handleReply(this[kDispatches]);\n    }\n    function handleReply(mockDispatches, _data = data) {\n        // fetch's HeadersList is a 1D string array\n        const optsHeaders = Array.isArray(opts.headers) ? buildHeadersFromArray(opts.headers) : opts.headers;\n        const body = typeof _data === 'function' ? _data({\n            ...opts,\n            headers: optsHeaders\n        }) : _data;\n        // util.types.isPromise is likely needed for jest.\n        if (isPromise(body)) {\n            // If handleReply is asynchronous, throwing an error\n            // in the callback will reject the promise, rather than\n            // synchronously throw the error, which breaks some tests.\n            // Rather, we wait for the callback to resolve if it is a\n            // promise, and then re-run handleReply with the new body.\n            body.then((newData)=>handleReply(mockDispatches, newData));\n            return;\n        }\n        const responseData = getResponseData(body);\n        const responseHeaders = generateKeyValues(headers);\n        const responseTrailers = generateKeyValues(trailers);\n        handler.onConnect?.((err)=>handler.onError(err), null);\n        handler.onHeaders?.(statusCode, responseHeaders, resume, getStatusText(statusCode));\n        handler.onData?.(Buffer.from(responseData));\n        handler.onComplete?.(responseTrailers);\n        deleteMockDispatch(mockDispatches, key);\n    }\n    function resume() {}\n    return true;\n}\nfunction buildMockDispatch() {\n    const agent = this[kMockAgent];\n    const origin = this[kOrigin];\n    const originalDispatch = this[kOriginalDispatch];\n    return function dispatch(opts, handler) {\n        if (agent.isMockActive) {\n            try {\n                mockDispatch.call(this, opts, handler);\n            } catch (error) {\n                if (error instanceof MockNotMatchedError) {\n                    const netConnect = agent[kGetNetConnect]();\n                    if (netConnect === false) {\n                        throw new MockNotMatchedError(`${error.message}: subsequent request to origin ${origin} was not allowed (net.connect disabled)`);\n                    }\n                    if (checkNetConnect(netConnect, origin)) {\n                        originalDispatch.call(this, opts, handler);\n                    } else {\n                        throw new MockNotMatchedError(`${error.message}: subsequent request to origin ${origin} was not allowed (net.connect is not enabled for this origin)`);\n                    }\n                } else {\n                    throw error;\n                }\n            }\n        } else {\n            originalDispatch.call(this, opts, handler);\n        }\n    };\n}\nfunction checkNetConnect(netConnect, origin) {\n    const url = new URL(origin);\n    if (netConnect === true) {\n        return true;\n    } else if (Array.isArray(netConnect) && netConnect.some((matcher)=>matchValue(matcher, url.host))) {\n        return true;\n    }\n    return false;\n}\nfunction buildMockOptions(opts) {\n    if (opts) {\n        const { agent, ...mockOptions } = opts;\n        return mockOptions;\n    }\n}\nmodule.exports = {\n    getResponseData,\n    getMockDispatch,\n    addMockDispatch,\n    deleteMockDispatch,\n    buildKey,\n    generateKeyValues,\n    matchValue,\n    getResponse,\n    getStatusText,\n    mockDispatch,\n    buildMockDispatch,\n    checkNetConnect,\n    buildMockOptions,\n    getHeaderByName,\n    buildHeadersFromArray\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/mock/mock-utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/mock/pending-interceptors-formatter.js":
/*!************************************************************************!*\
  !*** ./node_modules/undici/lib/mock/pending-interceptors-formatter.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { Transform } = __webpack_require__(/*! node:stream */ \"node:stream\");\nconst { Console } = __webpack_require__(/*! node:console */ \"node:console\");\nconst PERSISTENT = process.versions.icu ? '✅' : 'Y ';\nconst NOT_PERSISTENT = process.versions.icu ? '❌' : 'N ';\n/**\n * Gets the output of `console.table(…)` as a string.\n */ module.exports = class PendingInterceptorsFormatter {\n    constructor({ disableColors } = {}){\n        this.transform = new Transform({\n            transform (chunk, _enc, cb) {\n                cb(null, chunk);\n            }\n        });\n        this.logger = new Console({\n            stdout: this.transform,\n            inspectOptions: {\n                colors: !disableColors && !process.env.CI\n            }\n        });\n    }\n    format(pendingInterceptors) {\n        const withPrettyHeaders = pendingInterceptors.map(({ method, path, data: { statusCode }, persist, times, timesInvoked, origin })=>({\n                Method: method,\n                Origin: origin,\n                Path: path,\n                'Status code': statusCode,\n                Persistent: persist ? PERSISTENT : NOT_PERSISTENT,\n                Invocations: timesInvoked,\n                Remaining: persist ? Infinity : times - timesInvoked\n            }));\n        this.logger.table(withPrettyHeaders);\n        return this.transform.read().toString();\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9tb2NrL3BlbmRpbmctaW50ZXJjZXB0b3JzLWZvcm1hdHRlci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU0sRUFBRUEsU0FBUyxFQUFFLEdBQUdDLG1CQUFPQSxDQUFDLGdDQUFhO0FBQzNDLE1BQU0sRUFBRUMsT0FBTyxFQUFFLEdBQUdELG1CQUFPQSxDQUFDLGtDQUFjO0FBRTFDLE1BQU1FLGFBQWFDLFFBQVFDLFFBQVEsQ0FBQ0MsR0FBRyxHQUFHLE1BQU07QUFDaEQsTUFBTUMsaUJBQWlCSCxRQUFRQyxRQUFRLENBQUNDLEdBQUcsR0FBRyxNQUFNO0FBRXBEOztDQUVDLEdBQ0RFLE9BQU9DLE9BQU8sR0FBRyxNQUFNQztJQUNyQixZQUFhLEVBQUVDLGFBQWEsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFFO1FBQ25DLElBQUksQ0FBQ0MsU0FBUyxHQUFHLElBQUlaLFVBQVU7WUFDN0JZLFdBQVdDLEtBQUssRUFBRUMsSUFBSSxFQUFFQyxFQUFFO2dCQUN4QkEsR0FBRyxNQUFNRjtZQUNYO1FBQ0Y7UUFFQSxJQUFJLENBQUNHLE1BQU0sR0FBRyxJQUFJZCxRQUFRO1lBQ3hCZSxRQUFRLElBQUksQ0FBQ0wsU0FBUztZQUN0Qk0sZ0JBQWdCO2dCQUNkQyxRQUFRLENBQUNSLGlCQUFpQixDQUFDUCxRQUFRZ0IsR0FBRyxDQUFDQyxFQUFFO1lBQzNDO1FBQ0Y7SUFDRjtJQUVBQyxPQUFRQyxtQkFBbUIsRUFBRTtRQUMzQixNQUFNQyxvQkFBb0JELG9CQUFvQkUsR0FBRyxDQUMvQyxDQUFDLEVBQUVDLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxNQUFNLEVBQUVDLFVBQVUsRUFBRSxFQUFFQyxPQUFPLEVBQUVDLEtBQUssRUFBRUMsWUFBWSxFQUFFQyxNQUFNLEVBQUUsR0FBTTtnQkFDakZDLFFBQVFSO2dCQUNSUyxRQUFRRjtnQkFDUkcsTUFBTVQ7Z0JBQ04sZUFBZUU7Z0JBQ2ZRLFlBQVlQLFVBQVUzQixhQUFhSTtnQkFDbkMrQixhQUFhTjtnQkFDYk8sV0FBV1QsVUFBVVUsV0FBV1QsUUFBUUM7WUFDMUM7UUFFRixJQUFJLENBQUNoQixNQUFNLENBQUN5QixLQUFLLENBQUNqQjtRQUNsQixPQUFPLElBQUksQ0FBQ1osU0FBUyxDQUFDOEIsSUFBSSxHQUFHQyxRQUFRO0lBQ3ZDO0FBQ0YiLCJzb3VyY2VzIjpbIkQ6XFxIZWxpeFxcbm9kZV9tb2R1bGVzXFx1bmRpY2lcXGxpYlxcbW9ja1xccGVuZGluZy1pbnRlcmNlcHRvcnMtZm9ybWF0dGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jb25zdCB7IFRyYW5zZm9ybSB9ID0gcmVxdWlyZSgnbm9kZTpzdHJlYW0nKVxuY29uc3QgeyBDb25zb2xlIH0gPSByZXF1aXJlKCdub2RlOmNvbnNvbGUnKVxuXG5jb25zdCBQRVJTSVNURU5UID0gcHJvY2Vzcy52ZXJzaW9ucy5pY3UgPyAn4pyFJyA6ICdZICdcbmNvbnN0IE5PVF9QRVJTSVNURU5UID0gcHJvY2Vzcy52ZXJzaW9ucy5pY3UgPyAn4p2MJyA6ICdOICdcblxuLyoqXG4gKiBHZXRzIHRoZSBvdXRwdXQgb2YgYGNvbnNvbGUudGFibGUo4oCmKWAgYXMgYSBzdHJpbmcuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgUGVuZGluZ0ludGVyY2VwdG9yc0Zvcm1hdHRlciB7XG4gIGNvbnN0cnVjdG9yICh7IGRpc2FibGVDb2xvcnMgfSA9IHt9KSB7XG4gICAgdGhpcy50cmFuc2Zvcm0gPSBuZXcgVHJhbnNmb3JtKHtcbiAgICAgIHRyYW5zZm9ybSAoY2h1bmssIF9lbmMsIGNiKSB7XG4gICAgICAgIGNiKG51bGwsIGNodW5rKVxuICAgICAgfVxuICAgIH0pXG5cbiAgICB0aGlzLmxvZ2dlciA9IG5ldyBDb25zb2xlKHtcbiAgICAgIHN0ZG91dDogdGhpcy50cmFuc2Zvcm0sXG4gICAgICBpbnNwZWN0T3B0aW9uczoge1xuICAgICAgICBjb2xvcnM6ICFkaXNhYmxlQ29sb3JzICYmICFwcm9jZXNzLmVudi5DSVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBmb3JtYXQgKHBlbmRpbmdJbnRlcmNlcHRvcnMpIHtcbiAgICBjb25zdCB3aXRoUHJldHR5SGVhZGVycyA9IHBlbmRpbmdJbnRlcmNlcHRvcnMubWFwKFxuICAgICAgKHsgbWV0aG9kLCBwYXRoLCBkYXRhOiB7IHN0YXR1c0NvZGUgfSwgcGVyc2lzdCwgdGltZXMsIHRpbWVzSW52b2tlZCwgb3JpZ2luIH0pID0+ICh7XG4gICAgICAgIE1ldGhvZDogbWV0aG9kLFxuICAgICAgICBPcmlnaW46IG9yaWdpbixcbiAgICAgICAgUGF0aDogcGF0aCxcbiAgICAgICAgJ1N0YXR1cyBjb2RlJzogc3RhdHVzQ29kZSxcbiAgICAgICAgUGVyc2lzdGVudDogcGVyc2lzdCA/IFBFUlNJU1RFTlQgOiBOT1RfUEVSU0lTVEVOVCxcbiAgICAgICAgSW52b2NhdGlvbnM6IHRpbWVzSW52b2tlZCxcbiAgICAgICAgUmVtYWluaW5nOiBwZXJzaXN0ID8gSW5maW5pdHkgOiB0aW1lcyAtIHRpbWVzSW52b2tlZFxuICAgICAgfSkpXG5cbiAgICB0aGlzLmxvZ2dlci50YWJsZSh3aXRoUHJldHR5SGVhZGVycylcbiAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm0ucmVhZCgpLnRvU3RyaW5nKClcbiAgfVxufVxuIl0sIm5hbWVzIjpbIlRyYW5zZm9ybSIsInJlcXVpcmUiLCJDb25zb2xlIiwiUEVSU0lTVEVOVCIsInByb2Nlc3MiLCJ2ZXJzaW9ucyIsImljdSIsIk5PVF9QRVJTSVNURU5UIiwibW9kdWxlIiwiZXhwb3J0cyIsIlBlbmRpbmdJbnRlcmNlcHRvcnNGb3JtYXR0ZXIiLCJkaXNhYmxlQ29sb3JzIiwidHJhbnNmb3JtIiwiY2h1bmsiLCJfZW5jIiwiY2IiLCJsb2dnZXIiLCJzdGRvdXQiLCJpbnNwZWN0T3B0aW9ucyIsImNvbG9ycyIsImVudiIsIkNJIiwiZm9ybWF0IiwicGVuZGluZ0ludGVyY2VwdG9ycyIsIndpdGhQcmV0dHlIZWFkZXJzIiwibWFwIiwibWV0aG9kIiwicGF0aCIsImRhdGEiLCJzdGF0dXNDb2RlIiwicGVyc2lzdCIsInRpbWVzIiwidGltZXNJbnZva2VkIiwib3JpZ2luIiwiTWV0aG9kIiwiT3JpZ2luIiwiUGF0aCIsIlBlcnNpc3RlbnQiLCJJbnZvY2F0aW9ucyIsIlJlbWFpbmluZyIsIkluZmluaXR5IiwidGFibGUiLCJyZWFkIiwidG9TdHJpbmciXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/mock/pending-interceptors-formatter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/mock/pluralizer.js":
/*!****************************************************!*\
  !*** ./node_modules/undici/lib/mock/pluralizer.js ***!
  \****************************************************/
/***/ ((module) => {

eval("\nconst singulars = {\n    pronoun: 'it',\n    is: 'is',\n    was: 'was',\n    this: 'this'\n};\nconst plurals = {\n    pronoun: 'they',\n    is: 'are',\n    was: 'were',\n    this: 'these'\n};\nmodule.exports = class Pluralizer {\n    constructor(singular, plural){\n        this.singular = singular;\n        this.plural = plural;\n    }\n    pluralize(count) {\n        const one = count === 1;\n        const keys = one ? singulars : plurals;\n        const noun = one ? this.singular : this.plural;\n        return {\n            ...keys,\n            count,\n            noun\n        };\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9tb2NrL3BsdXJhbGl6ZXIuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQSxZQUFZO0lBQ2hCQyxTQUFTO0lBQ1RDLElBQUk7SUFDSkMsS0FBSztJQUNMQyxNQUFNO0FBQ1I7QUFFQSxNQUFNQyxVQUFVO0lBQ2RKLFNBQVM7SUFDVEMsSUFBSTtJQUNKQyxLQUFLO0lBQ0xDLE1BQU07QUFDUjtBQUVBRSxPQUFPQyxPQUFPLEdBQUcsTUFBTUM7SUFDckIsWUFBYUMsUUFBUSxFQUFFQyxNQUFNLENBQUU7UUFDN0IsSUFBSSxDQUFDRCxRQUFRLEdBQUdBO1FBQ2hCLElBQUksQ0FBQ0MsTUFBTSxHQUFHQTtJQUNoQjtJQUVBQyxVQUFXQyxLQUFLLEVBQUU7UUFDaEIsTUFBTUMsTUFBTUQsVUFBVTtRQUN0QixNQUFNRSxPQUFPRCxNQUFNYixZQUFZSztRQUMvQixNQUFNVSxPQUFPRixNQUFNLElBQUksQ0FBQ0osUUFBUSxHQUFHLElBQUksQ0FBQ0MsTUFBTTtRQUM5QyxPQUFPO1lBQUUsR0FBR0ksSUFBSTtZQUFFRjtZQUFPRztRQUFLO0lBQ2hDO0FBQ0YiLCJzb3VyY2VzIjpbIkQ6XFxIZWxpeFxcbm9kZV9tb2R1bGVzXFx1bmRpY2lcXGxpYlxcbW9ja1xccGx1cmFsaXplci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3Qgc2luZ3VsYXJzID0ge1xuICBwcm9ub3VuOiAnaXQnLFxuICBpczogJ2lzJyxcbiAgd2FzOiAnd2FzJyxcbiAgdGhpczogJ3RoaXMnXG59XG5cbmNvbnN0IHBsdXJhbHMgPSB7XG4gIHByb25vdW46ICd0aGV5JyxcbiAgaXM6ICdhcmUnLFxuICB3YXM6ICd3ZXJlJyxcbiAgdGhpczogJ3RoZXNlJ1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzIFBsdXJhbGl6ZXIge1xuICBjb25zdHJ1Y3RvciAoc2luZ3VsYXIsIHBsdXJhbCkge1xuICAgIHRoaXMuc2luZ3VsYXIgPSBzaW5ndWxhclxuICAgIHRoaXMucGx1cmFsID0gcGx1cmFsXG4gIH1cblxuICBwbHVyYWxpemUgKGNvdW50KSB7XG4gICAgY29uc3Qgb25lID0gY291bnQgPT09IDFcbiAgICBjb25zdCBrZXlzID0gb25lID8gc2luZ3VsYXJzIDogcGx1cmFsc1xuICAgIGNvbnN0IG5vdW4gPSBvbmUgPyB0aGlzLnNpbmd1bGFyIDogdGhpcy5wbHVyYWxcbiAgICByZXR1cm4geyAuLi5rZXlzLCBjb3VudCwgbm91biB9XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJzaW5ndWxhcnMiLCJwcm9ub3VuIiwiaXMiLCJ3YXMiLCJ0aGlzIiwicGx1cmFscyIsIm1vZHVsZSIsImV4cG9ydHMiLCJQbHVyYWxpemVyIiwic2luZ3VsYXIiLCJwbHVyYWwiLCJwbHVyYWxpemUiLCJjb3VudCIsIm9uZSIsImtleXMiLCJub3VuIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/mock/pluralizer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/util/timers.js":
/*!************************************************!*\
  !*** ./node_modules/undici/lib/util/timers.js ***!
  \************************************************/
/***/ ((module) => {

eval("\nconst TICK_MS = 499;\nlet fastNow = Date.now();\nlet fastNowTimeout;\nconst fastTimers = [];\nfunction onTimeout() {\n    fastNow = Date.now();\n    let len = fastTimers.length;\n    let idx = 0;\n    while(idx < len){\n        const timer = fastTimers[idx];\n        if (timer.state === 0) {\n            timer.state = fastNow + timer.delay - TICK_MS;\n        } else if (timer.state > 0 && fastNow >= timer.state) {\n            timer.state = -1;\n            timer.callback(timer.opaque);\n        }\n        if (timer.state === -1) {\n            timer.state = -2;\n            if (idx !== len - 1) {\n                fastTimers[idx] = fastTimers.pop();\n            } else {\n                fastTimers.pop();\n            }\n            len -= 1;\n        } else {\n            idx += 1;\n        }\n    }\n    if (fastTimers.length > 0) {\n        refreshTimeout();\n    }\n}\nfunction refreshTimeout() {\n    if (fastNowTimeout?.refresh) {\n        fastNowTimeout.refresh();\n    } else {\n        clearTimeout(fastNowTimeout);\n        fastNowTimeout = setTimeout(onTimeout, TICK_MS);\n        if (fastNowTimeout.unref) {\n            fastNowTimeout.unref();\n        }\n    }\n}\nclass Timeout {\n    constructor(callback, delay, opaque){\n        this.callback = callback;\n        this.delay = delay;\n        this.opaque = opaque;\n        //  -2 not in timer list\n        //  -1 in timer list but inactive\n        //   0 in timer list waiting for time\n        // > 0 in timer list waiting for time to expire\n        this.state = -2;\n        this.refresh();\n    }\n    refresh() {\n        if (this.state === -2) {\n            fastTimers.push(this);\n            if (!fastNowTimeout || fastTimers.length === 1) {\n                refreshTimeout();\n            }\n        }\n        this.state = 0;\n    }\n    clear() {\n        this.state = -1;\n    }\n}\nmodule.exports = {\n    setTimeout (callback, delay, opaque) {\n        return delay <= 1e3 ? setTimeout(callback, delay, opaque) : new Timeout(callback, delay, opaque);\n    },\n    clearTimeout (timeout) {\n        if (timeout instanceof Timeout) {\n            timeout.clear();\n        } else {\n            clearTimeout(timeout);\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi91dGlsL3RpbWVycy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU1BLFVBQVU7QUFFaEIsSUFBSUMsVUFBVUMsS0FBS0MsR0FBRztBQUN0QixJQUFJQztBQUVKLE1BQU1DLGFBQWEsRUFBRTtBQUVyQixTQUFTQztJQUNQTCxVQUFVQyxLQUFLQyxHQUFHO0lBRWxCLElBQUlJLE1BQU1GLFdBQVdHLE1BQU07SUFDM0IsSUFBSUMsTUFBTTtJQUNWLE1BQU9BLE1BQU1GLElBQUs7UUFDaEIsTUFBTUcsUUFBUUwsVUFBVSxDQUFDSSxJQUFJO1FBRTdCLElBQUlDLE1BQU1DLEtBQUssS0FBSyxHQUFHO1lBQ3JCRCxNQUFNQyxLQUFLLEdBQUdWLFVBQVVTLE1BQU1FLEtBQUssR0FBR1o7UUFDeEMsT0FBTyxJQUFJVSxNQUFNQyxLQUFLLEdBQUcsS0FBS1YsV0FBV1MsTUFBTUMsS0FBSyxFQUFFO1lBQ3BERCxNQUFNQyxLQUFLLEdBQUcsQ0FBQztZQUNmRCxNQUFNRyxRQUFRLENBQUNILE1BQU1JLE1BQU07UUFDN0I7UUFFQSxJQUFJSixNQUFNQyxLQUFLLEtBQUssQ0FBQyxHQUFHO1lBQ3RCRCxNQUFNQyxLQUFLLEdBQUcsQ0FBQztZQUNmLElBQUlGLFFBQVFGLE1BQU0sR0FBRztnQkFDbkJGLFVBQVUsQ0FBQ0ksSUFBSSxHQUFHSixXQUFXVSxHQUFHO1lBQ2xDLE9BQU87Z0JBQ0xWLFdBQVdVLEdBQUc7WUFDaEI7WUFDQVIsT0FBTztRQUNULE9BQU87WUFDTEUsT0FBTztRQUNUO0lBQ0Y7SUFFQSxJQUFJSixXQUFXRyxNQUFNLEdBQUcsR0FBRztRQUN6QlE7SUFDRjtBQUNGO0FBRUEsU0FBU0E7SUFDUCxJQUFJWixnQkFBZ0JhLFNBQVM7UUFDM0JiLGVBQWVhLE9BQU87SUFDeEIsT0FBTztRQUNMQyxhQUFhZDtRQUNiQSxpQkFBaUJlLFdBQVdiLFdBQVdOO1FBQ3ZDLElBQUlJLGVBQWVnQixLQUFLLEVBQUU7WUFDeEJoQixlQUFlZ0IsS0FBSztRQUN0QjtJQUNGO0FBQ0Y7QUFFQSxNQUFNQztJQUNKLFlBQWFSLFFBQVEsRUFBRUQsS0FBSyxFQUFFRSxNQUFNLENBQUU7UUFDcEMsSUFBSSxDQUFDRCxRQUFRLEdBQUdBO1FBQ2hCLElBQUksQ0FBQ0QsS0FBSyxHQUFHQTtRQUNiLElBQUksQ0FBQ0UsTUFBTSxHQUFHQTtRQUVkLHdCQUF3QjtRQUN4QixpQ0FBaUM7UUFDakMscUNBQXFDO1FBQ3JDLCtDQUErQztRQUMvQyxJQUFJLENBQUNILEtBQUssR0FBRyxDQUFDO1FBRWQsSUFBSSxDQUFDTSxPQUFPO0lBQ2Q7SUFFQUEsVUFBVztRQUNULElBQUksSUFBSSxDQUFDTixLQUFLLEtBQUssQ0FBQyxHQUFHO1lBQ3JCTixXQUFXaUIsSUFBSSxDQUFDLElBQUk7WUFDcEIsSUFBSSxDQUFDbEIsa0JBQWtCQyxXQUFXRyxNQUFNLEtBQUssR0FBRztnQkFDOUNRO1lBQ0Y7UUFDRjtRQUVBLElBQUksQ0FBQ0wsS0FBSyxHQUFHO0lBQ2Y7SUFFQVksUUFBUztRQUNQLElBQUksQ0FBQ1osS0FBSyxHQUFHLENBQUM7SUFDaEI7QUFDRjtBQUVBYSxPQUFPQyxPQUFPLEdBQUc7SUFDZk4sWUFBWU4sUUFBUSxFQUFFRCxLQUFLLEVBQUVFLE1BQU07UUFDakMsT0FBT0YsU0FBUyxNQUNaTyxXQUFXTixVQUFVRCxPQUFPRSxVQUM1QixJQUFJTyxRQUFRUixVQUFVRCxPQUFPRTtJQUNuQztJQUNBSSxjQUFjUSxPQUFPO1FBQ25CLElBQUlBLG1CQUFtQkwsU0FBUztZQUM5QkssUUFBUUgsS0FBSztRQUNmLE9BQU87WUFDTEwsYUFBYVE7UUFDZjtJQUNGO0FBQ0YiLCJzb3VyY2VzIjpbIkQ6XFxIZWxpeFxcbm9kZV9tb2R1bGVzXFx1bmRpY2lcXGxpYlxcdXRpbFxcdGltZXJzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jb25zdCBUSUNLX01TID0gNDk5XG5cbmxldCBmYXN0Tm93ID0gRGF0ZS5ub3coKVxubGV0IGZhc3ROb3dUaW1lb3V0XG5cbmNvbnN0IGZhc3RUaW1lcnMgPSBbXVxuXG5mdW5jdGlvbiBvblRpbWVvdXQgKCkge1xuICBmYXN0Tm93ID0gRGF0ZS5ub3coKVxuXG4gIGxldCBsZW4gPSBmYXN0VGltZXJzLmxlbmd0aFxuICBsZXQgaWR4ID0gMFxuICB3aGlsZSAoaWR4IDwgbGVuKSB7XG4gICAgY29uc3QgdGltZXIgPSBmYXN0VGltZXJzW2lkeF1cblxuICAgIGlmICh0aW1lci5zdGF0ZSA9PT0gMCkge1xuICAgICAgdGltZXIuc3RhdGUgPSBmYXN0Tm93ICsgdGltZXIuZGVsYXkgLSBUSUNLX01TXG4gICAgfSBlbHNlIGlmICh0aW1lci5zdGF0ZSA+IDAgJiYgZmFzdE5vdyA+PSB0aW1lci5zdGF0ZSkge1xuICAgICAgdGltZXIuc3RhdGUgPSAtMVxuICAgICAgdGltZXIuY2FsbGJhY2sodGltZXIub3BhcXVlKVxuICAgIH1cblxuICAgIGlmICh0aW1lci5zdGF0ZSA9PT0gLTEpIHtcbiAgICAgIHRpbWVyLnN0YXRlID0gLTJcbiAgICAgIGlmIChpZHggIT09IGxlbiAtIDEpIHtcbiAgICAgICAgZmFzdFRpbWVyc1tpZHhdID0gZmFzdFRpbWVycy5wb3AoKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmFzdFRpbWVycy5wb3AoKVxuICAgICAgfVxuICAgICAgbGVuIC09IDFcbiAgICB9IGVsc2Uge1xuICAgICAgaWR4ICs9IDFcbiAgICB9XG4gIH1cblxuICBpZiAoZmFzdFRpbWVycy5sZW5ndGggPiAwKSB7XG4gICAgcmVmcmVzaFRpbWVvdXQoKVxuICB9XG59XG5cbmZ1bmN0aW9uIHJlZnJlc2hUaW1lb3V0ICgpIHtcbiAgaWYgKGZhc3ROb3dUaW1lb3V0Py5yZWZyZXNoKSB7XG4gICAgZmFzdE5vd1RpbWVvdXQucmVmcmVzaCgpXG4gIH0gZWxzZSB7XG4gICAgY2xlYXJUaW1lb3V0KGZhc3ROb3dUaW1lb3V0KVxuICAgIGZhc3ROb3dUaW1lb3V0ID0gc2V0VGltZW91dChvblRpbWVvdXQsIFRJQ0tfTVMpXG4gICAgaWYgKGZhc3ROb3dUaW1lb3V0LnVucmVmKSB7XG4gICAgICBmYXN0Tm93VGltZW91dC51bnJlZigpXG4gICAgfVxuICB9XG59XG5cbmNsYXNzIFRpbWVvdXQge1xuICBjb25zdHJ1Y3RvciAoY2FsbGJhY2ssIGRlbGF5LCBvcGFxdWUpIHtcbiAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2tcbiAgICB0aGlzLmRlbGF5ID0gZGVsYXlcbiAgICB0aGlzLm9wYXF1ZSA9IG9wYXF1ZVxuXG4gICAgLy8gIC0yIG5vdCBpbiB0aW1lciBsaXN0XG4gICAgLy8gIC0xIGluIHRpbWVyIGxpc3QgYnV0IGluYWN0aXZlXG4gICAgLy8gICAwIGluIHRpbWVyIGxpc3Qgd2FpdGluZyBmb3IgdGltZVxuICAgIC8vID4gMCBpbiB0aW1lciBsaXN0IHdhaXRpbmcgZm9yIHRpbWUgdG8gZXhwaXJlXG4gICAgdGhpcy5zdGF0ZSA9IC0yXG5cbiAgICB0aGlzLnJlZnJlc2goKVxuICB9XG5cbiAgcmVmcmVzaCAoKSB7XG4gICAgaWYgKHRoaXMuc3RhdGUgPT09IC0yKSB7XG4gICAgICBmYXN0VGltZXJzLnB1c2godGhpcylcbiAgICAgIGlmICghZmFzdE5vd1RpbWVvdXQgfHwgZmFzdFRpbWVycy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgcmVmcmVzaFRpbWVvdXQoKVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuc3RhdGUgPSAwXG4gIH1cblxuICBjbGVhciAoKSB7XG4gICAgdGhpcy5zdGF0ZSA9IC0xXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldFRpbWVvdXQgKGNhbGxiYWNrLCBkZWxheSwgb3BhcXVlKSB7XG4gICAgcmV0dXJuIGRlbGF5IDw9IDFlM1xuICAgICAgPyBzZXRUaW1lb3V0KGNhbGxiYWNrLCBkZWxheSwgb3BhcXVlKVxuICAgICAgOiBuZXcgVGltZW91dChjYWxsYmFjaywgZGVsYXksIG9wYXF1ZSlcbiAgfSxcbiAgY2xlYXJUaW1lb3V0ICh0aW1lb3V0KSB7XG4gICAgaWYgKHRpbWVvdXQgaW5zdGFuY2VvZiBUaW1lb3V0KSB7XG4gICAgICB0aW1lb3V0LmNsZWFyKClcbiAgICB9IGVsc2Uge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpXG4gICAgfVxuICB9XG59XG4iXSwibmFtZXMiOlsiVElDS19NUyIsImZhc3ROb3ciLCJEYXRlIiwibm93IiwiZmFzdE5vd1RpbWVvdXQiLCJmYXN0VGltZXJzIiwib25UaW1lb3V0IiwibGVuIiwibGVuZ3RoIiwiaWR4IiwidGltZXIiLCJzdGF0ZSIsImRlbGF5IiwiY2FsbGJhY2siLCJvcGFxdWUiLCJwb3AiLCJyZWZyZXNoVGltZW91dCIsInJlZnJlc2giLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwidW5yZWYiLCJUaW1lb3V0IiwicHVzaCIsImNsZWFyIiwibW9kdWxlIiwiZXhwb3J0cyIsInRpbWVvdXQiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/util/timers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/cache/cache.js":
/*!****************************************************!*\
  !*** ./node_modules/undici/lib/web/cache/cache.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { kConstruct } = __webpack_require__(/*! ./symbols */ \"(ssr)/./node_modules/undici/lib/web/cache/symbols.js\");\nconst { urlEquals, getFieldValues } = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/web/cache/util.js\");\nconst { kEnumerableProperty, isDisturbed } = __webpack_require__(/*! ../../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst { webidl } = __webpack_require__(/*! ../fetch/webidl */ \"(ssr)/./node_modules/undici/lib/web/fetch/webidl.js\");\nconst { Response, cloneResponse, fromInnerResponse } = __webpack_require__(/*! ../fetch/response */ \"(ssr)/./node_modules/undici/lib/web/fetch/response.js\");\nconst { Request, fromInnerRequest } = __webpack_require__(/*! ../fetch/request */ \"(ssr)/./node_modules/undici/lib/web/fetch/request.js\");\nconst { kState } = __webpack_require__(/*! ../fetch/symbols */ \"(ssr)/./node_modules/undici/lib/web/fetch/symbols.js\");\nconst { fetching } = __webpack_require__(/*! ../fetch/index */ \"(ssr)/./node_modules/undici/lib/web/fetch/index.js\");\nconst { urlIsHttpHttpsScheme, createDeferredPromise, readAllBytes } = __webpack_require__(/*! ../fetch/util */ \"(ssr)/./node_modules/undici/lib/web/fetch/util.js\");\nconst assert = __webpack_require__(/*! node:assert */ \"node:assert\");\n/**\n * @see https://w3c.github.io/ServiceWorker/#dfn-cache-batch-operation\n * @typedef {Object} CacheBatchOperation\n * @property {'delete' | 'put'} type\n * @property {any} request\n * @property {any} response\n * @property {import('../../types/cache').CacheQueryOptions} options\n */ /**\n * @see https://w3c.github.io/ServiceWorker/#dfn-request-response-list\n * @typedef {[any, any][]} requestResponseList\n */ class Cache {\n    /**\n   * @see https://w3c.github.io/ServiceWorker/#dfn-relevant-request-response-list\n   * @type {requestResponseList}\n   */ #relevantRequestResponseList;\n    constructor(){\n        if (arguments[0] !== kConstruct) {\n            webidl.illegalConstructor();\n        }\n        this.#relevantRequestResponseList = arguments[1];\n    }\n    async match(request, options = {}) {\n        webidl.brandCheck(this, Cache);\n        const prefix = 'Cache.match';\n        webidl.argumentLengthCheck(arguments, 1, prefix);\n        request = webidl.converters.RequestInfo(request, prefix, 'request');\n        options = webidl.converters.CacheQueryOptions(options, prefix, 'options');\n        const p = this.#internalMatchAll(request, options, 1);\n        if (p.length === 0) {\n            return;\n        }\n        return p[0];\n    }\n    async matchAll(request = undefined, options = {}) {\n        webidl.brandCheck(this, Cache);\n        const prefix = 'Cache.matchAll';\n        if (request !== undefined) request = webidl.converters.RequestInfo(request, prefix, 'request');\n        options = webidl.converters.CacheQueryOptions(options, prefix, 'options');\n        return this.#internalMatchAll(request, options);\n    }\n    async add(request) {\n        webidl.brandCheck(this, Cache);\n        const prefix = 'Cache.add';\n        webidl.argumentLengthCheck(arguments, 1, prefix);\n        request = webidl.converters.RequestInfo(request, prefix, 'request');\n        // 1.\n        const requests = [\n            request\n        ];\n        // 2.\n        const responseArrayPromise = this.addAll(requests);\n        // 3.\n        return await responseArrayPromise;\n    }\n    async addAll(requests) {\n        webidl.brandCheck(this, Cache);\n        const prefix = 'Cache.addAll';\n        webidl.argumentLengthCheck(arguments, 1, prefix);\n        // 1.\n        const responsePromises = [];\n        // 2.\n        const requestList = [];\n        // 3.\n        for (let request of requests){\n            if (request === undefined) {\n                throw webidl.errors.conversionFailed({\n                    prefix,\n                    argument: 'Argument 1',\n                    types: [\n                        'undefined is not allowed'\n                    ]\n                });\n            }\n            request = webidl.converters.RequestInfo(request);\n            if (typeof request === 'string') {\n                continue;\n            }\n            // 3.1\n            const r = request[kState];\n            // 3.2\n            if (!urlIsHttpHttpsScheme(r.url) || r.method !== 'GET') {\n                throw webidl.errors.exception({\n                    header: prefix,\n                    message: 'Expected http/s scheme when method is not GET.'\n                });\n            }\n        }\n        // 4.\n        /** @type {ReturnType<typeof fetching>[]} */ const fetchControllers = [];\n        // 5.\n        for (const request of requests){\n            // 5.1\n            const r = new Request(request)[kState];\n            // 5.2\n            if (!urlIsHttpHttpsScheme(r.url)) {\n                throw webidl.errors.exception({\n                    header: prefix,\n                    message: 'Expected http/s scheme.'\n                });\n            }\n            // 5.4\n            r.initiator = 'fetch';\n            r.destination = 'subresource';\n            // 5.5\n            requestList.push(r);\n            // 5.6\n            const responsePromise = createDeferredPromise();\n            // 5.7\n            fetchControllers.push(fetching({\n                request: r,\n                processResponse (response) {\n                    // 1.\n                    if (response.type === 'error' || response.status === 206 || response.status < 200 || response.status > 299) {\n                        responsePromise.reject(webidl.errors.exception({\n                            header: 'Cache.addAll',\n                            message: 'Received an invalid status code or the request failed.'\n                        }));\n                    } else if (response.headersList.contains('vary')) {\n                        // 2.1\n                        const fieldValues = getFieldValues(response.headersList.get('vary'));\n                        // 2.2\n                        for (const fieldValue of fieldValues){\n                            // 2.2.1\n                            if (fieldValue === '*') {\n                                responsePromise.reject(webidl.errors.exception({\n                                    header: 'Cache.addAll',\n                                    message: 'invalid vary field value'\n                                }));\n                                for (const controller of fetchControllers){\n                                    controller.abort();\n                                }\n                                return;\n                            }\n                        }\n                    }\n                },\n                processResponseEndOfBody (response) {\n                    // 1.\n                    if (response.aborted) {\n                        responsePromise.reject(new DOMException('aborted', 'AbortError'));\n                        return;\n                    }\n                    // 2.\n                    responsePromise.resolve(response);\n                }\n            }));\n            // 5.8\n            responsePromises.push(responsePromise.promise);\n        }\n        // 6.\n        const p = Promise.all(responsePromises);\n        // 7.\n        const responses = await p;\n        // 7.1\n        const operations = [];\n        // 7.2\n        let index = 0;\n        // 7.3\n        for (const response of responses){\n            // 7.3.1\n            /** @type {CacheBatchOperation} */ const operation = {\n                type: 'put',\n                request: requestList[index],\n                response\n            };\n            operations.push(operation); // 7.3.5\n            index++; // 7.3.6\n        }\n        // 7.5\n        const cacheJobPromise = createDeferredPromise();\n        // 7.6.1\n        let errorData = null;\n        // 7.6.2\n        try {\n            this.#batchCacheOperations(operations);\n        } catch (e) {\n            errorData = e;\n        }\n        // 7.6.3\n        queueMicrotask(()=>{\n            // 7.6.3.1\n            if (errorData === null) {\n                cacheJobPromise.resolve(undefined);\n            } else {\n                // 7.6.3.2\n                cacheJobPromise.reject(errorData);\n            }\n        });\n        // 7.7\n        return cacheJobPromise.promise;\n    }\n    async put(request, response) {\n        webidl.brandCheck(this, Cache);\n        const prefix = 'Cache.put';\n        webidl.argumentLengthCheck(arguments, 2, prefix);\n        request = webidl.converters.RequestInfo(request, prefix, 'request');\n        response = webidl.converters.Response(response, prefix, 'response');\n        // 1.\n        let innerRequest = null;\n        // 2.\n        if (request instanceof Request) {\n            innerRequest = request[kState];\n        } else {\n            innerRequest = new Request(request)[kState];\n        }\n        // 4.\n        if (!urlIsHttpHttpsScheme(innerRequest.url) || innerRequest.method !== 'GET') {\n            throw webidl.errors.exception({\n                header: prefix,\n                message: 'Expected an http/s scheme when method is not GET'\n            });\n        }\n        // 5.\n        const innerResponse = response[kState];\n        // 6.\n        if (innerResponse.status === 206) {\n            throw webidl.errors.exception({\n                header: prefix,\n                message: 'Got 206 status'\n            });\n        }\n        // 7.\n        if (innerResponse.headersList.contains('vary')) {\n            // 7.1.\n            const fieldValues = getFieldValues(innerResponse.headersList.get('vary'));\n            // 7.2.\n            for (const fieldValue of fieldValues){\n                // 7.2.1\n                if (fieldValue === '*') {\n                    throw webidl.errors.exception({\n                        header: prefix,\n                        message: 'Got * vary field value'\n                    });\n                }\n            }\n        }\n        // 8.\n        if (innerResponse.body && (isDisturbed(innerResponse.body.stream) || innerResponse.body.stream.locked)) {\n            throw webidl.errors.exception({\n                header: prefix,\n                message: 'Response body is locked or disturbed'\n            });\n        }\n        // 9.\n        const clonedResponse = cloneResponse(innerResponse);\n        // 10.\n        const bodyReadPromise = createDeferredPromise();\n        // 11.\n        if (innerResponse.body != null) {\n            // 11.1\n            const stream = innerResponse.body.stream;\n            // 11.2\n            const reader = stream.getReader();\n            // 11.3\n            readAllBytes(reader).then(bodyReadPromise.resolve, bodyReadPromise.reject);\n        } else {\n            bodyReadPromise.resolve(undefined);\n        }\n        // 12.\n        /** @type {CacheBatchOperation[]} */ const operations = [];\n        // 13.\n        /** @type {CacheBatchOperation} */ const operation = {\n            type: 'put',\n            request: innerRequest,\n            response: clonedResponse // 16.\n        };\n        // 17.\n        operations.push(operation);\n        // 19.\n        const bytes = await bodyReadPromise.promise;\n        if (clonedResponse.body != null) {\n            clonedResponse.body.source = bytes;\n        }\n        // 19.1\n        const cacheJobPromise = createDeferredPromise();\n        // 19.2.1\n        let errorData = null;\n        // 19.2.2\n        try {\n            this.#batchCacheOperations(operations);\n        } catch (e) {\n            errorData = e;\n        }\n        // 19.2.3\n        queueMicrotask(()=>{\n            // 19.2.3.1\n            if (errorData === null) {\n                cacheJobPromise.resolve();\n            } else {\n                cacheJobPromise.reject(errorData);\n            }\n        });\n        return cacheJobPromise.promise;\n    }\n    async delete(request, options = {}) {\n        webidl.brandCheck(this, Cache);\n        const prefix = 'Cache.delete';\n        webidl.argumentLengthCheck(arguments, 1, prefix);\n        request = webidl.converters.RequestInfo(request, prefix, 'request');\n        options = webidl.converters.CacheQueryOptions(options, prefix, 'options');\n        /**\n     * @type {Request}\n     */ let r = null;\n        if (request instanceof Request) {\n            r = request[kState];\n            if (r.method !== 'GET' && !options.ignoreMethod) {\n                return false;\n            }\n        } else {\n            assert(typeof request === 'string');\n            r = new Request(request)[kState];\n        }\n        /** @type {CacheBatchOperation[]} */ const operations = [];\n        /** @type {CacheBatchOperation} */ const operation = {\n            type: 'delete',\n            request: r,\n            options\n        };\n        operations.push(operation);\n        const cacheJobPromise = createDeferredPromise();\n        let errorData = null;\n        let requestResponses;\n        try {\n            requestResponses = this.#batchCacheOperations(operations);\n        } catch (e) {\n            errorData = e;\n        }\n        queueMicrotask(()=>{\n            if (errorData === null) {\n                cacheJobPromise.resolve(!!requestResponses?.length);\n            } else {\n                cacheJobPromise.reject(errorData);\n            }\n        });\n        return cacheJobPromise.promise;\n    }\n    /**\n   * @see https://w3c.github.io/ServiceWorker/#dom-cache-keys\n   * @param {any} request\n   * @param {import('../../types/cache').CacheQueryOptions} options\n   * @returns {Promise<readonly Request[]>}\n   */ async keys(request = undefined, options = {}) {\n        webidl.brandCheck(this, Cache);\n        const prefix = 'Cache.keys';\n        if (request !== undefined) request = webidl.converters.RequestInfo(request, prefix, 'request');\n        options = webidl.converters.CacheQueryOptions(options, prefix, 'options');\n        // 1.\n        let r = null;\n        // 2.\n        if (request !== undefined) {\n            // 2.1\n            if (request instanceof Request) {\n                // 2.1.1\n                r = request[kState];\n                // 2.1.2\n                if (r.method !== 'GET' && !options.ignoreMethod) {\n                    return [];\n                }\n            } else if (typeof request === 'string') {\n                r = new Request(request)[kState];\n            }\n        }\n        // 4.\n        const promise = createDeferredPromise();\n        // 5.\n        // 5.1\n        const requests = [];\n        // 5.2\n        if (request === undefined) {\n            // 5.2.1\n            for (const requestResponse of this.#relevantRequestResponseList){\n                // 5.2.1.1\n                requests.push(requestResponse[0]);\n            }\n        } else {\n            // 5.3.1\n            const requestResponses = this.#queryCache(r, options);\n            // 5.3.2\n            for (const requestResponse of requestResponses){\n                // 5.3.2.1\n                requests.push(requestResponse[0]);\n            }\n        }\n        // 5.4\n        queueMicrotask(()=>{\n            // 5.4.1\n            const requestList = [];\n            // 5.4.2\n            for (const request of requests){\n                const requestObject = fromInnerRequest(request, new AbortController().signal, 'immutable');\n                // 5.4.2.1\n                requestList.push(requestObject);\n            }\n            // 5.4.3\n            promise.resolve(Object.freeze(requestList));\n        });\n        return promise.promise;\n    }\n    /**\n   * @see https://w3c.github.io/ServiceWorker/#batch-cache-operations-algorithm\n   * @param {CacheBatchOperation[]} operations\n   * @returns {requestResponseList}\n   */ #batchCacheOperations(operations) {\n        // 1.\n        const cache = this.#relevantRequestResponseList;\n        // 2.\n        const backupCache = [\n            ...cache\n        ];\n        // 3.\n        const addedItems = [];\n        // 4.1\n        const resultList = [];\n        try {\n            // 4.2\n            for (const operation of operations){\n                // 4.2.1\n                if (operation.type !== 'delete' && operation.type !== 'put') {\n                    throw webidl.errors.exception({\n                        header: 'Cache.#batchCacheOperations',\n                        message: 'operation type does not match \"delete\" or \"put\"'\n                    });\n                }\n                // 4.2.2\n                if (operation.type === 'delete' && operation.response != null) {\n                    throw webidl.errors.exception({\n                        header: 'Cache.#batchCacheOperations',\n                        message: 'delete operation should not have an associated response'\n                    });\n                }\n                // 4.2.3\n                if (this.#queryCache(operation.request, operation.options, addedItems).length) {\n                    throw new DOMException('???', 'InvalidStateError');\n                }\n                // 4.2.4\n                let requestResponses;\n                // 4.2.5\n                if (operation.type === 'delete') {\n                    // 4.2.5.1\n                    requestResponses = this.#queryCache(operation.request, operation.options);\n                    // TODO: the spec is wrong, this is needed to pass WPTs\n                    if (requestResponses.length === 0) {\n                        return [];\n                    }\n                    // 4.2.5.2\n                    for (const requestResponse of requestResponses){\n                        const idx = cache.indexOf(requestResponse);\n                        assert(idx !== -1);\n                        // 4.2.5.2.1\n                        cache.splice(idx, 1);\n                    }\n                } else if (operation.type === 'put') {\n                    // 4.2.6.1\n                    if (operation.response == null) {\n                        throw webidl.errors.exception({\n                            header: 'Cache.#batchCacheOperations',\n                            message: 'put operation should have an associated response'\n                        });\n                    }\n                    // 4.2.6.2\n                    const r = operation.request;\n                    // 4.2.6.3\n                    if (!urlIsHttpHttpsScheme(r.url)) {\n                        throw webidl.errors.exception({\n                            header: 'Cache.#batchCacheOperations',\n                            message: 'expected http or https scheme'\n                        });\n                    }\n                    // 4.2.6.4\n                    if (r.method !== 'GET') {\n                        throw webidl.errors.exception({\n                            header: 'Cache.#batchCacheOperations',\n                            message: 'not get method'\n                        });\n                    }\n                    // 4.2.6.5\n                    if (operation.options != null) {\n                        throw webidl.errors.exception({\n                            header: 'Cache.#batchCacheOperations',\n                            message: 'options must not be defined'\n                        });\n                    }\n                    // 4.2.6.6\n                    requestResponses = this.#queryCache(operation.request);\n                    // 4.2.6.7\n                    for (const requestResponse of requestResponses){\n                        const idx = cache.indexOf(requestResponse);\n                        assert(idx !== -1);\n                        // 4.2.6.7.1\n                        cache.splice(idx, 1);\n                    }\n                    // 4.2.6.8\n                    cache.push([\n                        operation.request,\n                        operation.response\n                    ]);\n                    // 4.2.6.10\n                    addedItems.push([\n                        operation.request,\n                        operation.response\n                    ]);\n                }\n                // 4.2.7\n                resultList.push([\n                    operation.request,\n                    operation.response\n                ]);\n            }\n            // 4.3\n            return resultList;\n        } catch (e) {\n            // 5.1\n            this.#relevantRequestResponseList.length = 0;\n            // 5.2\n            this.#relevantRequestResponseList = backupCache;\n            // 5.3\n            throw e;\n        }\n    }\n    /**\n   * @see https://w3c.github.io/ServiceWorker/#query-cache\n   * @param {any} requestQuery\n   * @param {import('../../types/cache').CacheQueryOptions} options\n   * @param {requestResponseList} targetStorage\n   * @returns {requestResponseList}\n   */ #queryCache(requestQuery, options, targetStorage) {\n        /** @type {requestResponseList} */ const resultList = [];\n        const storage = targetStorage ?? this.#relevantRequestResponseList;\n        for (const requestResponse of storage){\n            const [cachedRequest, cachedResponse] = requestResponse;\n            if (this.#requestMatchesCachedItem(requestQuery, cachedRequest, cachedResponse, options)) {\n                resultList.push(requestResponse);\n            }\n        }\n        return resultList;\n    }\n    /**\n   * @see https://w3c.github.io/ServiceWorker/#request-matches-cached-item-algorithm\n   * @param {any} requestQuery\n   * @param {any} request\n   * @param {any | null} response\n   * @param {import('../../types/cache').CacheQueryOptions | undefined} options\n   * @returns {boolean}\n   */ #requestMatchesCachedItem(requestQuery, request, response = null, options) {\n        // if (options?.ignoreMethod === false && request.method === 'GET') {\n        //   return false\n        // }\n        const queryURL = new URL(requestQuery.url);\n        const cachedURL = new URL(request.url);\n        if (options?.ignoreSearch) {\n            cachedURL.search = '';\n            queryURL.search = '';\n        }\n        if (!urlEquals(queryURL, cachedURL, true)) {\n            return false;\n        }\n        if (response == null || options?.ignoreVary || !response.headersList.contains('vary')) {\n            return true;\n        }\n        const fieldValues = getFieldValues(response.headersList.get('vary'));\n        for (const fieldValue of fieldValues){\n            if (fieldValue === '*') {\n                return false;\n            }\n            const requestValue = request.headersList.get(fieldValue);\n            const queryValue = requestQuery.headersList.get(fieldValue);\n            // If one has the header and the other doesn't, or one has\n            // a different value than the other, return false\n            if (requestValue !== queryValue) {\n                return false;\n            }\n        }\n        return true;\n    }\n    #internalMatchAll(request, options, maxResponses = Infinity) {\n        // 1.\n        let r = null;\n        // 2.\n        if (request !== undefined) {\n            if (request instanceof Request) {\n                // 2.1.1\n                r = request[kState];\n                // 2.1.2\n                if (r.method !== 'GET' && !options.ignoreMethod) {\n                    return [];\n                }\n            } else if (typeof request === 'string') {\n                // 2.2.1\n                r = new Request(request)[kState];\n            }\n        }\n        // 5.\n        // 5.1\n        const responses = [];\n        // 5.2\n        if (request === undefined) {\n            // 5.2.1\n            for (const requestResponse of this.#relevantRequestResponseList){\n                responses.push(requestResponse[1]);\n            }\n        } else {\n            // 5.3.1\n            const requestResponses = this.#queryCache(r, options);\n            // 5.3.2\n            for (const requestResponse of requestResponses){\n                responses.push(requestResponse[1]);\n            }\n        }\n        // 5.4\n        // We don't implement CORs so we don't need to loop over the responses, yay!\n        // 5.5.1\n        const responseList = [];\n        // 5.5.2\n        for (const response of responses){\n            // 5.5.2.1\n            const responseObject = fromInnerResponse(response, 'immutable');\n            responseList.push(responseObject.clone());\n            if (responseList.length >= maxResponses) {\n                break;\n            }\n        }\n        // 6.\n        return Object.freeze(responseList);\n    }\n}\nObject.defineProperties(Cache.prototype, {\n    [Symbol.toStringTag]: {\n        value: 'Cache',\n        configurable: true\n    },\n    match: kEnumerableProperty,\n    matchAll: kEnumerableProperty,\n    add: kEnumerableProperty,\n    addAll: kEnumerableProperty,\n    put: kEnumerableProperty,\n    delete: kEnumerableProperty,\n    keys: kEnumerableProperty\n});\nconst cacheQueryOptionConverters = [\n    {\n        key: 'ignoreSearch',\n        converter: webidl.converters.boolean,\n        defaultValue: ()=>false\n    },\n    {\n        key: 'ignoreMethod',\n        converter: webidl.converters.boolean,\n        defaultValue: ()=>false\n    },\n    {\n        key: 'ignoreVary',\n        converter: webidl.converters.boolean,\n        defaultValue: ()=>false\n    }\n];\nwebidl.converters.CacheQueryOptions = webidl.dictionaryConverter(cacheQueryOptionConverters);\nwebidl.converters.MultiCacheQueryOptions = webidl.dictionaryConverter([\n    ...cacheQueryOptionConverters,\n    {\n        key: 'cacheName',\n        converter: webidl.converters.DOMString\n    }\n]);\nwebidl.converters.Response = webidl.interfaceConverter(Response);\nwebidl.converters['sequence<RequestInfo>'] = webidl.sequenceConverter(webidl.converters.RequestInfo);\nmodule.exports = {\n    Cache\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/cache/cache.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/cache/cachestorage.js":
/*!***********************************************************!*\
  !*** ./node_modules/undici/lib/web/cache/cachestorage.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { kConstruct } = __webpack_require__(/*! ./symbols */ \"(ssr)/./node_modules/undici/lib/web/cache/symbols.js\");\nconst { Cache } = __webpack_require__(/*! ./cache */ \"(ssr)/./node_modules/undici/lib/web/cache/cache.js\");\nconst { webidl } = __webpack_require__(/*! ../fetch/webidl */ \"(ssr)/./node_modules/undici/lib/web/fetch/webidl.js\");\nconst { kEnumerableProperty } = __webpack_require__(/*! ../../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nclass CacheStorage {\n    /**\n   * @see https://w3c.github.io/ServiceWorker/#dfn-relevant-name-to-cache-map\n   * @type {Map<string, import('./cache').requestResponseList}\n   */ #caches;\n    constructor(){\n        this.#caches = new Map();\n        if (arguments[0] !== kConstruct) {\n            webidl.illegalConstructor();\n        }\n    }\n    async match(request, options = {}) {\n        webidl.brandCheck(this, CacheStorage);\n        webidl.argumentLengthCheck(arguments, 1, 'CacheStorage.match');\n        request = webidl.converters.RequestInfo(request);\n        options = webidl.converters.MultiCacheQueryOptions(options);\n        // 1.\n        if (options.cacheName != null) {\n            // 1.1.1.1\n            if (this.#caches.has(options.cacheName)) {\n                // 1.1.1.1.1\n                const cacheList = this.#caches.get(options.cacheName);\n                const cache = new Cache(kConstruct, cacheList);\n                return await cache.match(request, options);\n            }\n        } else {\n            // 2.2\n            for (const cacheList of this.#caches.values()){\n                const cache = new Cache(kConstruct, cacheList);\n                // 2.2.1.2\n                const response = await cache.match(request, options);\n                if (response !== undefined) {\n                    return response;\n                }\n            }\n        }\n    }\n    /**\n   * @see https://w3c.github.io/ServiceWorker/#cache-storage-has\n   * @param {string} cacheName\n   * @returns {Promise<boolean>}\n   */ async has(cacheName) {\n        webidl.brandCheck(this, CacheStorage);\n        const prefix = 'CacheStorage.has';\n        webidl.argumentLengthCheck(arguments, 1, prefix);\n        cacheName = webidl.converters.DOMString(cacheName, prefix, 'cacheName');\n        // 2.1.1\n        // 2.2\n        return this.#caches.has(cacheName);\n    }\n    /**\n   * @see https://w3c.github.io/ServiceWorker/#dom-cachestorage-open\n   * @param {string} cacheName\n   * @returns {Promise<Cache>}\n   */ async open(cacheName) {\n        webidl.brandCheck(this, CacheStorage);\n        const prefix = 'CacheStorage.open';\n        webidl.argumentLengthCheck(arguments, 1, prefix);\n        cacheName = webidl.converters.DOMString(cacheName, prefix, 'cacheName');\n        // 2.1\n        if (this.#caches.has(cacheName)) {\n            // await caches.open('v1') !== await caches.open('v1')\n            // 2.1.1\n            const cache = this.#caches.get(cacheName);\n            // 2.1.1.1\n            return new Cache(kConstruct, cache);\n        }\n        // 2.2\n        const cache = [];\n        // 2.3\n        this.#caches.set(cacheName, cache);\n        // 2.4\n        return new Cache(kConstruct, cache);\n    }\n    /**\n   * @see https://w3c.github.io/ServiceWorker/#cache-storage-delete\n   * @param {string} cacheName\n   * @returns {Promise<boolean>}\n   */ async delete(cacheName) {\n        webidl.brandCheck(this, CacheStorage);\n        const prefix = 'CacheStorage.delete';\n        webidl.argumentLengthCheck(arguments, 1, prefix);\n        cacheName = webidl.converters.DOMString(cacheName, prefix, 'cacheName');\n        return this.#caches.delete(cacheName);\n    }\n    /**\n   * @see https://w3c.github.io/ServiceWorker/#cache-storage-keys\n   * @returns {Promise<string[]>}\n   */ async keys() {\n        webidl.brandCheck(this, CacheStorage);\n        // 2.1\n        const keys = this.#caches.keys();\n        // 2.2\n        return [\n            ...keys\n        ];\n    }\n}\nObject.defineProperties(CacheStorage.prototype, {\n    [Symbol.toStringTag]: {\n        value: 'CacheStorage',\n        configurable: true\n    },\n    match: kEnumerableProperty,\n    has: kEnumerableProperty,\n    open: kEnumerableProperty,\n    delete: kEnumerableProperty,\n    keys: kEnumerableProperty\n});\nmodule.exports = {\n    CacheStorage\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/cache/cachestorage.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/cache/symbols.js":
/*!******************************************************!*\
  !*** ./node_modules/undici/lib/web/cache/symbols.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = {\n    kConstruct: (__webpack_require__(/*! ../../core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\").kConstruct)\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi93ZWIvY2FjaGUvc3ltYm9scy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBQSxPQUFPQyxPQUFPLEdBQUc7SUFDZkMsWUFBWUMsNkdBQXdDO0FBQ3REIiwic291cmNlcyI6WyJEOlxcSGVsaXhcXG5vZGVfbW9kdWxlc1xcdW5kaWNpXFxsaWJcXHdlYlxcY2FjaGVcXHN5bWJvbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBrQ29uc3RydWN0OiByZXF1aXJlKCcuLi8uLi9jb3JlL3N5bWJvbHMnKS5rQ29uc3RydWN0XG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImtDb25zdHJ1Y3QiLCJyZXF1aXJlIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/cache/symbols.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/cache/util.js":
/*!***************************************************!*\
  !*** ./node_modules/undici/lib/web/cache/util.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst assert = __webpack_require__(/*! node:assert */ \"node:assert\");\nconst { URLSerializer } = __webpack_require__(/*! ../fetch/data-url */ \"(ssr)/./node_modules/undici/lib/web/fetch/data-url.js\");\nconst { isValidHeaderName } = __webpack_require__(/*! ../fetch/util */ \"(ssr)/./node_modules/undici/lib/web/fetch/util.js\");\n/**\n * @see https://url.spec.whatwg.org/#concept-url-equals\n * @param {URL} A\n * @param {URL} B\n * @param {boolean | undefined} excludeFragment\n * @returns {boolean}\n */ function urlEquals(A, B, excludeFragment = false) {\n    const serializedA = URLSerializer(A, excludeFragment);\n    const serializedB = URLSerializer(B, excludeFragment);\n    return serializedA === serializedB;\n}\n/**\n * @see https://github.com/chromium/chromium/blob/694d20d134cb553d8d89e5500b9148012b1ba299/content/browser/cache_storage/cache_storage_cache.cc#L260-L262\n * @param {string} header\n */ function getFieldValues(header) {\n    assert(header !== null);\n    const values = [];\n    for (let value of header.split(',')){\n        value = value.trim();\n        if (isValidHeaderName(value)) {\n            values.push(value);\n        }\n    }\n    return values;\n}\nmodule.exports = {\n    urlEquals,\n    getFieldValues\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi93ZWIvY2FjaGUvdXRpbC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU1BLFNBQVNDLG1CQUFPQSxDQUFDLGdDQUFhO0FBQ3BDLE1BQU0sRUFBRUMsYUFBYSxFQUFFLEdBQUdELG1CQUFPQSxDQUFDLGdGQUFtQjtBQUNyRCxNQUFNLEVBQUVFLGlCQUFpQixFQUFFLEdBQUdGLG1CQUFPQSxDQUFDLHdFQUFlO0FBRXJEOzs7Ozs7Q0FNQyxHQUNELFNBQVNHLFVBQVdDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxrQkFBa0IsS0FBSztJQUMvQyxNQUFNQyxjQUFjTixjQUFjRyxHQUFHRTtJQUVyQyxNQUFNRSxjQUFjUCxjQUFjSSxHQUFHQztJQUVyQyxPQUFPQyxnQkFBZ0JDO0FBQ3pCO0FBRUE7OztDQUdDLEdBQ0QsU0FBU0MsZUFBZ0JDLE1BQU07SUFDN0JYLE9BQU9XLFdBQVc7SUFFbEIsTUFBTUMsU0FBUyxFQUFFO0lBRWpCLEtBQUssSUFBSUMsU0FBU0YsT0FBT0csS0FBSyxDQUFDLEtBQU07UUFDbkNELFFBQVFBLE1BQU1FLElBQUk7UUFFbEIsSUFBSVosa0JBQWtCVSxRQUFRO1lBQzVCRCxPQUFPSSxJQUFJLENBQUNIO1FBQ2Q7SUFDRjtJQUVBLE9BQU9EO0FBQ1Q7QUFFQUssT0FBT0MsT0FBTyxHQUFHO0lBQ2ZkO0lBQ0FNO0FBQ0YiLCJzb3VyY2VzIjpbIkQ6XFxIZWxpeFxcbm9kZV9tb2R1bGVzXFx1bmRpY2lcXGxpYlxcd2ViXFxjYWNoZVxcdXRpbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgYXNzZXJ0ID0gcmVxdWlyZSgnbm9kZTphc3NlcnQnKVxuY29uc3QgeyBVUkxTZXJpYWxpemVyIH0gPSByZXF1aXJlKCcuLi9mZXRjaC9kYXRhLXVybCcpXG5jb25zdCB7IGlzVmFsaWRIZWFkZXJOYW1lIH0gPSByZXF1aXJlKCcuLi9mZXRjaC91dGlsJylcblxuLyoqXG4gKiBAc2VlIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jY29uY2VwdC11cmwtZXF1YWxzXG4gKiBAcGFyYW0ge1VSTH0gQVxuICogQHBhcmFtIHtVUkx9IEJcbiAqIEBwYXJhbSB7Ym9vbGVhbiB8IHVuZGVmaW5lZH0gZXhjbHVkZUZyYWdtZW50XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gdXJsRXF1YWxzIChBLCBCLCBleGNsdWRlRnJhZ21lbnQgPSBmYWxzZSkge1xuICBjb25zdCBzZXJpYWxpemVkQSA9IFVSTFNlcmlhbGl6ZXIoQSwgZXhjbHVkZUZyYWdtZW50KVxuXG4gIGNvbnN0IHNlcmlhbGl6ZWRCID0gVVJMU2VyaWFsaXplcihCLCBleGNsdWRlRnJhZ21lbnQpXG5cbiAgcmV0dXJuIHNlcmlhbGl6ZWRBID09PSBzZXJpYWxpemVkQlxufVxuXG4vKipcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2Nocm9taXVtL2Nocm9taXVtL2Jsb2IvNjk0ZDIwZDEzNGNiNTUzZDhkODllNTUwMGI5MTQ4MDEyYjFiYTI5OS9jb250ZW50L2Jyb3dzZXIvY2FjaGVfc3RvcmFnZS9jYWNoZV9zdG9yYWdlX2NhY2hlLmNjI0wyNjAtTDI2MlxuICogQHBhcmFtIHtzdHJpbmd9IGhlYWRlclxuICovXG5mdW5jdGlvbiBnZXRGaWVsZFZhbHVlcyAoaGVhZGVyKSB7XG4gIGFzc2VydChoZWFkZXIgIT09IG51bGwpXG5cbiAgY29uc3QgdmFsdWVzID0gW11cblxuICBmb3IgKGxldCB2YWx1ZSBvZiBoZWFkZXIuc3BsaXQoJywnKSkge1xuICAgIHZhbHVlID0gdmFsdWUudHJpbSgpXG5cbiAgICBpZiAoaXNWYWxpZEhlYWRlck5hbWUodmFsdWUpKSB7XG4gICAgICB2YWx1ZXMucHVzaCh2YWx1ZSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdmFsdWVzXG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICB1cmxFcXVhbHMsXG4gIGdldEZpZWxkVmFsdWVzXG59XG4iXSwibmFtZXMiOlsiYXNzZXJ0IiwicmVxdWlyZSIsIlVSTFNlcmlhbGl6ZXIiLCJpc1ZhbGlkSGVhZGVyTmFtZSIsInVybEVxdWFscyIsIkEiLCJCIiwiZXhjbHVkZUZyYWdtZW50Iiwic2VyaWFsaXplZEEiLCJzZXJpYWxpemVkQiIsImdldEZpZWxkVmFsdWVzIiwiaGVhZGVyIiwidmFsdWVzIiwidmFsdWUiLCJzcGxpdCIsInRyaW0iLCJwdXNoIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/cache/util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/cookies/constants.js":
/*!**********************************************************!*\
  !*** ./node_modules/undici/lib/web/cookies/constants.js ***!
  \**********************************************************/
/***/ ((module) => {

eval("\n// https://wicg.github.io/cookie-store/#cookie-maximum-attribute-value-size\nconst maxAttributeValueSize = 1024;\n// https://wicg.github.io/cookie-store/#cookie-maximum-name-value-pair-size\nconst maxNameValuePairSize = 4096;\nmodule.exports = {\n    maxAttributeValueSize,\n    maxNameValuePairSize\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi93ZWIvY29va2llcy9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSwyRUFBMkU7QUFDM0UsTUFBTUEsd0JBQXdCO0FBRTlCLDJFQUEyRTtBQUMzRSxNQUFNQyx1QkFBdUI7QUFFN0JDLE9BQU9DLE9BQU8sR0FBRztJQUNmSDtJQUNBQztBQUNGIiwic291cmNlcyI6WyJEOlxcSGVsaXhcXG5vZGVfbW9kdWxlc1xcdW5kaWNpXFxsaWJcXHdlYlxcY29va2llc1xcY29uc3RhbnRzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG4vLyBodHRwczovL3dpY2cuZ2l0aHViLmlvL2Nvb2tpZS1zdG9yZS8jY29va2llLW1heGltdW0tYXR0cmlidXRlLXZhbHVlLXNpemVcbmNvbnN0IG1heEF0dHJpYnV0ZVZhbHVlU2l6ZSA9IDEwMjRcblxuLy8gaHR0cHM6Ly93aWNnLmdpdGh1Yi5pby9jb29raWUtc3RvcmUvI2Nvb2tpZS1tYXhpbXVtLW5hbWUtdmFsdWUtcGFpci1zaXplXG5jb25zdCBtYXhOYW1lVmFsdWVQYWlyU2l6ZSA9IDQwOTZcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIG1heEF0dHJpYnV0ZVZhbHVlU2l6ZSxcbiAgbWF4TmFtZVZhbHVlUGFpclNpemVcbn1cbiJdLCJuYW1lcyI6WyJtYXhBdHRyaWJ1dGVWYWx1ZVNpemUiLCJtYXhOYW1lVmFsdWVQYWlyU2l6ZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/cookies/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/cookies/index.js":
/*!******************************************************!*\
  !*** ./node_modules/undici/lib/web/cookies/index.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { parseSetCookie } = __webpack_require__(/*! ./parse */ \"(ssr)/./node_modules/undici/lib/web/cookies/parse.js\");\nconst { stringify } = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/web/cookies/util.js\");\nconst { webidl } = __webpack_require__(/*! ../fetch/webidl */ \"(ssr)/./node_modules/undici/lib/web/fetch/webidl.js\");\nconst { Headers } = __webpack_require__(/*! ../fetch/headers */ \"(ssr)/./node_modules/undici/lib/web/fetch/headers.js\");\n/**\n * @typedef {Object} Cookie\n * @property {string} name\n * @property {string} value\n * @property {Date|number|undefined} expires\n * @property {number|undefined} maxAge\n * @property {string|undefined} domain\n * @property {string|undefined} path\n * @property {boolean|undefined} secure\n * @property {boolean|undefined} httpOnly\n * @property {'Strict'|'Lax'|'None'} sameSite\n * @property {string[]} unparsed\n */ /**\n * @param {Headers} headers\n * @returns {Record<string, string>}\n */ function getCookies(headers) {\n    webidl.argumentLengthCheck(arguments, 1, 'getCookies');\n    webidl.brandCheck(headers, Headers, {\n        strict: false\n    });\n    const cookie = headers.get('cookie');\n    const out = {};\n    if (!cookie) {\n        return out;\n    }\n    for (const piece of cookie.split(';')){\n        const [name, ...value] = piece.split('=');\n        out[name.trim()] = value.join('=');\n    }\n    return out;\n}\n/**\n * @param {Headers} headers\n * @param {string} name\n * @param {{ path?: string, domain?: string }|undefined} attributes\n * @returns {void}\n */ function deleteCookie(headers, name, attributes) {\n    webidl.brandCheck(headers, Headers, {\n        strict: false\n    });\n    const prefix = 'deleteCookie';\n    webidl.argumentLengthCheck(arguments, 2, prefix);\n    name = webidl.converters.DOMString(name, prefix, 'name');\n    attributes = webidl.converters.DeleteCookieAttributes(attributes);\n    // Matches behavior of\n    // https://github.com/denoland/deno_std/blob/63827b16330b82489a04614027c33b7904e08be5/http/cookie.ts#L278\n    setCookie(headers, {\n        name,\n        value: '',\n        expires: new Date(0),\n        ...attributes\n    });\n}\n/**\n * @param {Headers} headers\n * @returns {Cookie[]}\n */ function getSetCookies(headers) {\n    webidl.argumentLengthCheck(arguments, 1, 'getSetCookies');\n    webidl.brandCheck(headers, Headers, {\n        strict: false\n    });\n    const cookies = headers.getSetCookie();\n    if (!cookies) {\n        return [];\n    }\n    return cookies.map((pair)=>parseSetCookie(pair));\n}\n/**\n * @param {Headers} headers\n * @param {Cookie} cookie\n * @returns {void}\n */ function setCookie(headers, cookie) {\n    webidl.argumentLengthCheck(arguments, 2, 'setCookie');\n    webidl.brandCheck(headers, Headers, {\n        strict: false\n    });\n    cookie = webidl.converters.Cookie(cookie);\n    const str = stringify(cookie);\n    if (str) {\n        headers.append('Set-Cookie', str);\n    }\n}\nwebidl.converters.DeleteCookieAttributes = webidl.dictionaryConverter([\n    {\n        converter: webidl.nullableConverter(webidl.converters.DOMString),\n        key: 'path',\n        defaultValue: ()=>null\n    },\n    {\n        converter: webidl.nullableConverter(webidl.converters.DOMString),\n        key: 'domain',\n        defaultValue: ()=>null\n    }\n]);\nwebidl.converters.Cookie = webidl.dictionaryConverter([\n    {\n        converter: webidl.converters.DOMString,\n        key: 'name'\n    },\n    {\n        converter: webidl.converters.DOMString,\n        key: 'value'\n    },\n    {\n        converter: webidl.nullableConverter((value)=>{\n            if (typeof value === 'number') {\n                return webidl.converters['unsigned long long'](value);\n            }\n            return new Date(value);\n        }),\n        key: 'expires',\n        defaultValue: ()=>null\n    },\n    {\n        converter: webidl.nullableConverter(webidl.converters['long long']),\n        key: 'maxAge',\n        defaultValue: ()=>null\n    },\n    {\n        converter: webidl.nullableConverter(webidl.converters.DOMString),\n        key: 'domain',\n        defaultValue: ()=>null\n    },\n    {\n        converter: webidl.nullableConverter(webidl.converters.DOMString),\n        key: 'path',\n        defaultValue: ()=>null\n    },\n    {\n        converter: webidl.nullableConverter(webidl.converters.boolean),\n        key: 'secure',\n        defaultValue: ()=>null\n    },\n    {\n        converter: webidl.nullableConverter(webidl.converters.boolean),\n        key: 'httpOnly',\n        defaultValue: ()=>null\n    },\n    {\n        converter: webidl.converters.USVString,\n        key: 'sameSite',\n        allowedValues: [\n            'Strict',\n            'Lax',\n            'None'\n        ]\n    },\n    {\n        converter: webidl.sequenceConverter(webidl.converters.DOMString),\n        key: 'unparsed',\n        defaultValue: ()=>new Array(0)\n    }\n]);\nmodule.exports = {\n    getCookies,\n    deleteCookie,\n    getSetCookies,\n    setCookie\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi93ZWIvY29va2llcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU0sRUFBRUEsY0FBYyxFQUFFLEdBQUdDLG1CQUFPQSxDQUFDLHFFQUFTO0FBQzVDLE1BQU0sRUFBRUMsU0FBUyxFQUFFLEdBQUdELG1CQUFPQSxDQUFDLG1FQUFRO0FBQ3RDLE1BQU0sRUFBRUUsTUFBTSxFQUFFLEdBQUdGLG1CQUFPQSxDQUFDLDRFQUFpQjtBQUM1QyxNQUFNLEVBQUVHLE9BQU8sRUFBRSxHQUFHSCxtQkFBT0EsQ0FBQyw4RUFBa0I7QUFFOUM7Ozs7Ozs7Ozs7OztDQVlDLEdBRUQ7OztDQUdDLEdBQ0QsU0FBU0ksV0FBWUMsT0FBTztJQUMxQkgsT0FBT0ksbUJBQW1CLENBQUNDLFdBQVcsR0FBRztJQUV6Q0wsT0FBT00sVUFBVSxDQUFDSCxTQUFTRixTQUFTO1FBQUVNLFFBQVE7SUFBTTtJQUVwRCxNQUFNQyxTQUFTTCxRQUFRTSxHQUFHLENBQUM7SUFDM0IsTUFBTUMsTUFBTSxDQUFDO0lBRWIsSUFBSSxDQUFDRixRQUFRO1FBQ1gsT0FBT0U7SUFDVDtJQUVBLEtBQUssTUFBTUMsU0FBU0gsT0FBT0ksS0FBSyxDQUFDLEtBQU07UUFDckMsTUFBTSxDQUFDQyxNQUFNLEdBQUdDLE1BQU0sR0FBR0gsTUFBTUMsS0FBSyxDQUFDO1FBRXJDRixHQUFHLENBQUNHLEtBQUtFLElBQUksR0FBRyxHQUFHRCxNQUFNRSxJQUFJLENBQUM7SUFDaEM7SUFFQSxPQUFPTjtBQUNUO0FBRUE7Ozs7O0NBS0MsR0FDRCxTQUFTTyxhQUFjZCxPQUFPLEVBQUVVLElBQUksRUFBRUssVUFBVTtJQUM5Q2xCLE9BQU9NLFVBQVUsQ0FBQ0gsU0FBU0YsU0FBUztRQUFFTSxRQUFRO0lBQU07SUFFcEQsTUFBTVksU0FBUztJQUNmbkIsT0FBT0ksbUJBQW1CLENBQUNDLFdBQVcsR0FBR2M7SUFFekNOLE9BQU9iLE9BQU9vQixVQUFVLENBQUNDLFNBQVMsQ0FBQ1IsTUFBTU0sUUFBUTtJQUNqREQsYUFBYWxCLE9BQU9vQixVQUFVLENBQUNFLHNCQUFzQixDQUFDSjtJQUV0RCxzQkFBc0I7SUFDdEIseUdBQXlHO0lBQ3pHSyxVQUFVcEIsU0FBUztRQUNqQlU7UUFDQUMsT0FBTztRQUNQVSxTQUFTLElBQUlDLEtBQUs7UUFDbEIsR0FBR1AsVUFBVTtJQUNmO0FBQ0Y7QUFFQTs7O0NBR0MsR0FDRCxTQUFTUSxjQUFldkIsT0FBTztJQUM3QkgsT0FBT0ksbUJBQW1CLENBQUNDLFdBQVcsR0FBRztJQUV6Q0wsT0FBT00sVUFBVSxDQUFDSCxTQUFTRixTQUFTO1FBQUVNLFFBQVE7SUFBTTtJQUVwRCxNQUFNb0IsVUFBVXhCLFFBQVF5QixZQUFZO0lBRXBDLElBQUksQ0FBQ0QsU0FBUztRQUNaLE9BQU8sRUFBRTtJQUNYO0lBRUEsT0FBT0EsUUFBUUUsR0FBRyxDQUFDLENBQUNDLE9BQVNqQyxlQUFlaUM7QUFDOUM7QUFFQTs7OztDQUlDLEdBQ0QsU0FBU1AsVUFBV3BCLE9BQU8sRUFBRUssTUFBTTtJQUNqQ1IsT0FBT0ksbUJBQW1CLENBQUNDLFdBQVcsR0FBRztJQUV6Q0wsT0FBT00sVUFBVSxDQUFDSCxTQUFTRixTQUFTO1FBQUVNLFFBQVE7SUFBTTtJQUVwREMsU0FBU1IsT0FBT29CLFVBQVUsQ0FBQ1csTUFBTSxDQUFDdkI7SUFFbEMsTUFBTXdCLE1BQU1qQyxVQUFVUztJQUV0QixJQUFJd0IsS0FBSztRQUNQN0IsUUFBUThCLE1BQU0sQ0FBQyxjQUFjRDtJQUMvQjtBQUNGO0FBRUFoQyxPQUFPb0IsVUFBVSxDQUFDRSxzQkFBc0IsR0FBR3RCLE9BQU9rQyxtQkFBbUIsQ0FBQztJQUNwRTtRQUNFQyxXQUFXbkMsT0FBT29DLGlCQUFpQixDQUFDcEMsT0FBT29CLFVBQVUsQ0FBQ0MsU0FBUztRQUMvRGdCLEtBQUs7UUFDTEMsY0FBYyxJQUFNO0lBQ3RCO0lBQ0E7UUFDRUgsV0FBV25DLE9BQU9vQyxpQkFBaUIsQ0FBQ3BDLE9BQU9vQixVQUFVLENBQUNDLFNBQVM7UUFDL0RnQixLQUFLO1FBQ0xDLGNBQWMsSUFBTTtJQUN0QjtDQUNEO0FBRUR0QyxPQUFPb0IsVUFBVSxDQUFDVyxNQUFNLEdBQUcvQixPQUFPa0MsbUJBQW1CLENBQUM7SUFDcEQ7UUFDRUMsV0FBV25DLE9BQU9vQixVQUFVLENBQUNDLFNBQVM7UUFDdENnQixLQUFLO0lBQ1A7SUFDQTtRQUNFRixXQUFXbkMsT0FBT29CLFVBQVUsQ0FBQ0MsU0FBUztRQUN0Q2dCLEtBQUs7SUFDUDtJQUNBO1FBQ0VGLFdBQVduQyxPQUFPb0MsaUJBQWlCLENBQUMsQ0FBQ3RCO1lBQ25DLElBQUksT0FBT0EsVUFBVSxVQUFVO2dCQUM3QixPQUFPZCxPQUFPb0IsVUFBVSxDQUFDLHFCQUFxQixDQUFDTjtZQUNqRDtZQUVBLE9BQU8sSUFBSVcsS0FBS1g7UUFDbEI7UUFDQXVCLEtBQUs7UUFDTEMsY0FBYyxJQUFNO0lBQ3RCO0lBQ0E7UUFDRUgsV0FBV25DLE9BQU9vQyxpQkFBaUIsQ0FBQ3BDLE9BQU9vQixVQUFVLENBQUMsWUFBWTtRQUNsRWlCLEtBQUs7UUFDTEMsY0FBYyxJQUFNO0lBQ3RCO0lBQ0E7UUFDRUgsV0FBV25DLE9BQU9vQyxpQkFBaUIsQ0FBQ3BDLE9BQU9vQixVQUFVLENBQUNDLFNBQVM7UUFDL0RnQixLQUFLO1FBQ0xDLGNBQWMsSUFBTTtJQUN0QjtJQUNBO1FBQ0VILFdBQVduQyxPQUFPb0MsaUJBQWlCLENBQUNwQyxPQUFPb0IsVUFBVSxDQUFDQyxTQUFTO1FBQy9EZ0IsS0FBSztRQUNMQyxjQUFjLElBQU07SUFDdEI7SUFDQTtRQUNFSCxXQUFXbkMsT0FBT29DLGlCQUFpQixDQUFDcEMsT0FBT29CLFVBQVUsQ0FBQ21CLE9BQU87UUFDN0RGLEtBQUs7UUFDTEMsY0FBYyxJQUFNO0lBQ3RCO0lBQ0E7UUFDRUgsV0FBV25DLE9BQU9vQyxpQkFBaUIsQ0FBQ3BDLE9BQU9vQixVQUFVLENBQUNtQixPQUFPO1FBQzdERixLQUFLO1FBQ0xDLGNBQWMsSUFBTTtJQUN0QjtJQUNBO1FBQ0VILFdBQVduQyxPQUFPb0IsVUFBVSxDQUFDb0IsU0FBUztRQUN0Q0gsS0FBSztRQUNMSSxlQUFlO1lBQUM7WUFBVTtZQUFPO1NBQU87SUFDMUM7SUFDQTtRQUNFTixXQUFXbkMsT0FBTzBDLGlCQUFpQixDQUFDMUMsT0FBT29CLFVBQVUsQ0FBQ0MsU0FBUztRQUMvRGdCLEtBQUs7UUFDTEMsY0FBYyxJQUFNLElBQUlLLE1BQU07SUFDaEM7Q0FDRDtBQUVEQyxPQUFPQyxPQUFPLEdBQUc7SUFDZjNDO0lBQ0FlO0lBQ0FTO0lBQ0FIO0FBQ0YiLCJzb3VyY2VzIjpbIkQ6XFxIZWxpeFxcbm9kZV9tb2R1bGVzXFx1bmRpY2lcXGxpYlxcd2ViXFxjb29raWVzXFxpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgeyBwYXJzZVNldENvb2tpZSB9ID0gcmVxdWlyZSgnLi9wYXJzZScpXG5jb25zdCB7IHN0cmluZ2lmeSB9ID0gcmVxdWlyZSgnLi91dGlsJylcbmNvbnN0IHsgd2ViaWRsIH0gPSByZXF1aXJlKCcuLi9mZXRjaC93ZWJpZGwnKVxuY29uc3QgeyBIZWFkZXJzIH0gPSByZXF1aXJlKCcuLi9mZXRjaC9oZWFkZXJzJylcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBDb29raWVcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBuYW1lXG4gKiBAcHJvcGVydHkge3N0cmluZ30gdmFsdWVcbiAqIEBwcm9wZXJ0eSB7RGF0ZXxudW1iZXJ8dW5kZWZpbmVkfSBleHBpcmVzXG4gKiBAcHJvcGVydHkge251bWJlcnx1bmRlZmluZWR9IG1heEFnZVxuICogQHByb3BlcnR5IHtzdHJpbmd8dW5kZWZpbmVkfSBkb21haW5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfHVuZGVmaW5lZH0gcGF0aFxuICogQHByb3BlcnR5IHtib29sZWFufHVuZGVmaW5lZH0gc2VjdXJlXG4gKiBAcHJvcGVydHkge2Jvb2xlYW58dW5kZWZpbmVkfSBodHRwT25seVxuICogQHByb3BlcnR5IHsnU3RyaWN0J3wnTGF4J3wnTm9uZSd9IHNhbWVTaXRlXG4gKiBAcHJvcGVydHkge3N0cmluZ1tdfSB1bnBhcnNlZFxuICovXG5cbi8qKlxuICogQHBhcmFtIHtIZWFkZXJzfSBoZWFkZXJzXG4gKiBAcmV0dXJucyB7UmVjb3JkPHN0cmluZywgc3RyaW5nPn1cbiAqL1xuZnVuY3Rpb24gZ2V0Q29va2llcyAoaGVhZGVycykge1xuICB3ZWJpZGwuYXJndW1lbnRMZW5ndGhDaGVjayhhcmd1bWVudHMsIDEsICdnZXRDb29raWVzJylcblxuICB3ZWJpZGwuYnJhbmRDaGVjayhoZWFkZXJzLCBIZWFkZXJzLCB7IHN0cmljdDogZmFsc2UgfSlcblxuICBjb25zdCBjb29raWUgPSBoZWFkZXJzLmdldCgnY29va2llJylcbiAgY29uc3Qgb3V0ID0ge31cblxuICBpZiAoIWNvb2tpZSkge1xuICAgIHJldHVybiBvdXRcbiAgfVxuXG4gIGZvciAoY29uc3QgcGllY2Ugb2YgY29va2llLnNwbGl0KCc7JykpIHtcbiAgICBjb25zdCBbbmFtZSwgLi4udmFsdWVdID0gcGllY2Uuc3BsaXQoJz0nKVxuXG4gICAgb3V0W25hbWUudHJpbSgpXSA9IHZhbHVlLmpvaW4oJz0nKVxuICB9XG5cbiAgcmV0dXJuIG91dFxufVxuXG4vKipcbiAqIEBwYXJhbSB7SGVhZGVyc30gaGVhZGVyc1xuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqIEBwYXJhbSB7eyBwYXRoPzogc3RyaW5nLCBkb21haW4/OiBzdHJpbmcgfXx1bmRlZmluZWR9IGF0dHJpYnV0ZXNcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiBkZWxldGVDb29raWUgKGhlYWRlcnMsIG5hbWUsIGF0dHJpYnV0ZXMpIHtcbiAgd2ViaWRsLmJyYW5kQ2hlY2soaGVhZGVycywgSGVhZGVycywgeyBzdHJpY3Q6IGZhbHNlIH0pXG5cbiAgY29uc3QgcHJlZml4ID0gJ2RlbGV0ZUNvb2tpZSdcbiAgd2ViaWRsLmFyZ3VtZW50TGVuZ3RoQ2hlY2soYXJndW1lbnRzLCAyLCBwcmVmaXgpXG5cbiAgbmFtZSA9IHdlYmlkbC5jb252ZXJ0ZXJzLkRPTVN0cmluZyhuYW1lLCBwcmVmaXgsICduYW1lJylcbiAgYXR0cmlidXRlcyA9IHdlYmlkbC5jb252ZXJ0ZXJzLkRlbGV0ZUNvb2tpZUF0dHJpYnV0ZXMoYXR0cmlidXRlcylcblxuICAvLyBNYXRjaGVzIGJlaGF2aW9yIG9mXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9kZW5vbGFuZC9kZW5vX3N0ZC9ibG9iLzYzODI3YjE2MzMwYjgyNDg5YTA0NjE0MDI3YzMzYjc5MDRlMDhiZTUvaHR0cC9jb29raWUudHMjTDI3OFxuICBzZXRDb29raWUoaGVhZGVycywge1xuICAgIG5hbWUsXG4gICAgdmFsdWU6ICcnLFxuICAgIGV4cGlyZXM6IG5ldyBEYXRlKDApLFxuICAgIC4uLmF0dHJpYnV0ZXNcbiAgfSlcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0hlYWRlcnN9IGhlYWRlcnNcbiAqIEByZXR1cm5zIHtDb29raWVbXX1cbiAqL1xuZnVuY3Rpb24gZ2V0U2V0Q29va2llcyAoaGVhZGVycykge1xuICB3ZWJpZGwuYXJndW1lbnRMZW5ndGhDaGVjayhhcmd1bWVudHMsIDEsICdnZXRTZXRDb29raWVzJylcblxuICB3ZWJpZGwuYnJhbmRDaGVjayhoZWFkZXJzLCBIZWFkZXJzLCB7IHN0cmljdDogZmFsc2UgfSlcblxuICBjb25zdCBjb29raWVzID0gaGVhZGVycy5nZXRTZXRDb29raWUoKVxuXG4gIGlmICghY29va2llcykge1xuICAgIHJldHVybiBbXVxuICB9XG5cbiAgcmV0dXJuIGNvb2tpZXMubWFwKChwYWlyKSA9PiBwYXJzZVNldENvb2tpZShwYWlyKSlcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0hlYWRlcnN9IGhlYWRlcnNcbiAqIEBwYXJhbSB7Q29va2llfSBjb29raWVcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiBzZXRDb29raWUgKGhlYWRlcnMsIGNvb2tpZSkge1xuICB3ZWJpZGwuYXJndW1lbnRMZW5ndGhDaGVjayhhcmd1bWVudHMsIDIsICdzZXRDb29raWUnKVxuXG4gIHdlYmlkbC5icmFuZENoZWNrKGhlYWRlcnMsIEhlYWRlcnMsIHsgc3RyaWN0OiBmYWxzZSB9KVxuXG4gIGNvb2tpZSA9IHdlYmlkbC5jb252ZXJ0ZXJzLkNvb2tpZShjb29raWUpXG5cbiAgY29uc3Qgc3RyID0gc3RyaW5naWZ5KGNvb2tpZSlcblxuICBpZiAoc3RyKSB7XG4gICAgaGVhZGVycy5hcHBlbmQoJ1NldC1Db29raWUnLCBzdHIpXG4gIH1cbn1cblxud2ViaWRsLmNvbnZlcnRlcnMuRGVsZXRlQ29va2llQXR0cmlidXRlcyA9IHdlYmlkbC5kaWN0aW9uYXJ5Q29udmVydGVyKFtcbiAge1xuICAgIGNvbnZlcnRlcjogd2ViaWRsLm51bGxhYmxlQ29udmVydGVyKHdlYmlkbC5jb252ZXJ0ZXJzLkRPTVN0cmluZyksXG4gICAga2V5OiAncGF0aCcsXG4gICAgZGVmYXVsdFZhbHVlOiAoKSA9PiBudWxsXG4gIH0sXG4gIHtcbiAgICBjb252ZXJ0ZXI6IHdlYmlkbC5udWxsYWJsZUNvbnZlcnRlcih3ZWJpZGwuY29udmVydGVycy5ET01TdHJpbmcpLFxuICAgIGtleTogJ2RvbWFpbicsXG4gICAgZGVmYXVsdFZhbHVlOiAoKSA9PiBudWxsXG4gIH1cbl0pXG5cbndlYmlkbC5jb252ZXJ0ZXJzLkNvb2tpZSA9IHdlYmlkbC5kaWN0aW9uYXJ5Q29udmVydGVyKFtcbiAge1xuICAgIGNvbnZlcnRlcjogd2ViaWRsLmNvbnZlcnRlcnMuRE9NU3RyaW5nLFxuICAgIGtleTogJ25hbWUnXG4gIH0sXG4gIHtcbiAgICBjb252ZXJ0ZXI6IHdlYmlkbC5jb252ZXJ0ZXJzLkRPTVN0cmluZyxcbiAgICBrZXk6ICd2YWx1ZSdcbiAgfSxcbiAge1xuICAgIGNvbnZlcnRlcjogd2ViaWRsLm51bGxhYmxlQ29udmVydGVyKCh2YWx1ZSkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIHdlYmlkbC5jb252ZXJ0ZXJzWyd1bnNpZ25lZCBsb25nIGxvbmcnXSh2YWx1ZSlcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ldyBEYXRlKHZhbHVlKVxuICAgIH0pLFxuICAgIGtleTogJ2V4cGlyZXMnLFxuICAgIGRlZmF1bHRWYWx1ZTogKCkgPT4gbnVsbFxuICB9LFxuICB7XG4gICAgY29udmVydGVyOiB3ZWJpZGwubnVsbGFibGVDb252ZXJ0ZXIod2ViaWRsLmNvbnZlcnRlcnNbJ2xvbmcgbG9uZyddKSxcbiAgICBrZXk6ICdtYXhBZ2UnLFxuICAgIGRlZmF1bHRWYWx1ZTogKCkgPT4gbnVsbFxuICB9LFxuICB7XG4gICAgY29udmVydGVyOiB3ZWJpZGwubnVsbGFibGVDb252ZXJ0ZXIod2ViaWRsLmNvbnZlcnRlcnMuRE9NU3RyaW5nKSxcbiAgICBrZXk6ICdkb21haW4nLFxuICAgIGRlZmF1bHRWYWx1ZTogKCkgPT4gbnVsbFxuICB9LFxuICB7XG4gICAgY29udmVydGVyOiB3ZWJpZGwubnVsbGFibGVDb252ZXJ0ZXIod2ViaWRsLmNvbnZlcnRlcnMuRE9NU3RyaW5nKSxcbiAgICBrZXk6ICdwYXRoJyxcbiAgICBkZWZhdWx0VmFsdWU6ICgpID0+IG51bGxcbiAgfSxcbiAge1xuICAgIGNvbnZlcnRlcjogd2ViaWRsLm51bGxhYmxlQ29udmVydGVyKHdlYmlkbC5jb252ZXJ0ZXJzLmJvb2xlYW4pLFxuICAgIGtleTogJ3NlY3VyZScsXG4gICAgZGVmYXVsdFZhbHVlOiAoKSA9PiBudWxsXG4gIH0sXG4gIHtcbiAgICBjb252ZXJ0ZXI6IHdlYmlkbC5udWxsYWJsZUNvbnZlcnRlcih3ZWJpZGwuY29udmVydGVycy5ib29sZWFuKSxcbiAgICBrZXk6ICdodHRwT25seScsXG4gICAgZGVmYXVsdFZhbHVlOiAoKSA9PiBudWxsXG4gIH0sXG4gIHtcbiAgICBjb252ZXJ0ZXI6IHdlYmlkbC5jb252ZXJ0ZXJzLlVTVlN0cmluZyxcbiAgICBrZXk6ICdzYW1lU2l0ZScsXG4gICAgYWxsb3dlZFZhbHVlczogWydTdHJpY3QnLCAnTGF4JywgJ05vbmUnXVxuICB9LFxuICB7XG4gICAgY29udmVydGVyOiB3ZWJpZGwuc2VxdWVuY2VDb252ZXJ0ZXIod2ViaWRsLmNvbnZlcnRlcnMuRE9NU3RyaW5nKSxcbiAgICBrZXk6ICd1bnBhcnNlZCcsXG4gICAgZGVmYXVsdFZhbHVlOiAoKSA9PiBuZXcgQXJyYXkoMClcbiAgfVxuXSlcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvb2tpZXMsXG4gIGRlbGV0ZUNvb2tpZSxcbiAgZ2V0U2V0Q29va2llcyxcbiAgc2V0Q29va2llXG59XG4iXSwibmFtZXMiOlsicGFyc2VTZXRDb29raWUiLCJyZXF1aXJlIiwic3RyaW5naWZ5Iiwid2ViaWRsIiwiSGVhZGVycyIsImdldENvb2tpZXMiLCJoZWFkZXJzIiwiYXJndW1lbnRMZW5ndGhDaGVjayIsImFyZ3VtZW50cyIsImJyYW5kQ2hlY2siLCJzdHJpY3QiLCJjb29raWUiLCJnZXQiLCJvdXQiLCJwaWVjZSIsInNwbGl0IiwibmFtZSIsInZhbHVlIiwidHJpbSIsImpvaW4iLCJkZWxldGVDb29raWUiLCJhdHRyaWJ1dGVzIiwicHJlZml4IiwiY29udmVydGVycyIsIkRPTVN0cmluZyIsIkRlbGV0ZUNvb2tpZUF0dHJpYnV0ZXMiLCJzZXRDb29raWUiLCJleHBpcmVzIiwiRGF0ZSIsImdldFNldENvb2tpZXMiLCJjb29raWVzIiwiZ2V0U2V0Q29va2llIiwibWFwIiwicGFpciIsIkNvb2tpZSIsInN0ciIsImFwcGVuZCIsImRpY3Rpb25hcnlDb252ZXJ0ZXIiLCJjb252ZXJ0ZXIiLCJudWxsYWJsZUNvbnZlcnRlciIsImtleSIsImRlZmF1bHRWYWx1ZSIsImJvb2xlYW4iLCJVU1ZTdHJpbmciLCJhbGxvd2VkVmFsdWVzIiwic2VxdWVuY2VDb252ZXJ0ZXIiLCJBcnJheSIsIm1vZHVsZSIsImV4cG9ydHMiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/cookies/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/cookies/parse.js":
/*!******************************************************!*\
  !*** ./node_modules/undici/lib/web/cookies/parse.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { maxNameValuePairSize, maxAttributeValueSize } = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/undici/lib/web/cookies/constants.js\");\nconst { isCTLExcludingHtab } = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/web/cookies/util.js\");\nconst { collectASequenceOfCodePointsFast } = __webpack_require__(/*! ../fetch/data-url */ \"(ssr)/./node_modules/undici/lib/web/fetch/data-url.js\");\nconst assert = __webpack_require__(/*! node:assert */ \"node:assert\");\n/**\n * @description Parses the field-value attributes of a set-cookie header string.\n * @see https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4\n * @param {string} header\n * @returns if the header is invalid, null will be returned\n */ function parseSetCookie(header) {\n    // 1. If the set-cookie-string contains a %x00-08 / %x0A-1F / %x7F\n    //    character (CTL characters excluding HTAB): Abort these steps and\n    //    ignore the set-cookie-string entirely.\n    if (isCTLExcludingHtab(header)) {\n        return null;\n    }\n    let nameValuePair = '';\n    let unparsedAttributes = '';\n    let name = '';\n    let value = '';\n    // 2. If the set-cookie-string contains a %x3B (\";\") character:\n    if (header.includes(';')) {\n        // 1. The name-value-pair string consists of the characters up to,\n        //    but not including, the first %x3B (\";\"), and the unparsed-\n        //    attributes consist of the remainder of the set-cookie-string\n        //    (including the %x3B (\";\") in question).\n        const position = {\n            position: 0\n        };\n        nameValuePair = collectASequenceOfCodePointsFast(';', header, position);\n        unparsedAttributes = header.slice(position.position);\n    } else {\n        // Otherwise:\n        // 1. The name-value-pair string consists of all the characters\n        //    contained in the set-cookie-string, and the unparsed-\n        //    attributes is the empty string.\n        nameValuePair = header;\n    }\n    // 3. If the name-value-pair string lacks a %x3D (\"=\") character, then\n    //    the name string is empty, and the value string is the value of\n    //    name-value-pair.\n    if (!nameValuePair.includes('=')) {\n        value = nameValuePair;\n    } else {\n        //    Otherwise, the name string consists of the characters up to, but\n        //    not including, the first %x3D (\"=\") character, and the (possibly\n        //    empty) value string consists of the characters after the first\n        //    %x3D (\"=\") character.\n        const position = {\n            position: 0\n        };\n        name = collectASequenceOfCodePointsFast('=', nameValuePair, position);\n        value = nameValuePair.slice(position.position + 1);\n    }\n    // 4. Remove any leading or trailing WSP characters from the name\n    //    string and the value string.\n    name = name.trim();\n    value = value.trim();\n    // 5. If the sum of the lengths of the name string and the value string\n    //    is more than 4096 octets, abort these steps and ignore the set-\n    //    cookie-string entirely.\n    if (name.length + value.length > maxNameValuePairSize) {\n        return null;\n    }\n    // 6. The cookie-name is the name string, and the cookie-value is the\n    //    value string.\n    return {\n        name,\n        value,\n        ...parseUnparsedAttributes(unparsedAttributes)\n    };\n}\n/**\n * Parses the remaining attributes of a set-cookie header\n * @see https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4\n * @param {string} unparsedAttributes\n * @param {[Object.<string, unknown>]={}} cookieAttributeList\n */ function parseUnparsedAttributes(unparsedAttributes, cookieAttributeList = {}) {\n    // 1. If the unparsed-attributes string is empty, skip the rest of\n    //    these steps.\n    if (unparsedAttributes.length === 0) {\n        return cookieAttributeList;\n    }\n    // 2. Discard the first character of the unparsed-attributes (which\n    //    will be a %x3B (\";\") character).\n    assert(unparsedAttributes[0] === ';');\n    unparsedAttributes = unparsedAttributes.slice(1);\n    let cookieAv = '';\n    // 3. If the remaining unparsed-attributes contains a %x3B (\";\")\n    //    character:\n    if (unparsedAttributes.includes(';')) {\n        // 1. Consume the characters of the unparsed-attributes up to, but\n        //    not including, the first %x3B (\";\") character.\n        cookieAv = collectASequenceOfCodePointsFast(';', unparsedAttributes, {\n            position: 0\n        });\n        unparsedAttributes = unparsedAttributes.slice(cookieAv.length);\n    } else {\n        // Otherwise:\n        // 1. Consume the remainder of the unparsed-attributes.\n        cookieAv = unparsedAttributes;\n        unparsedAttributes = '';\n    }\n    // Let the cookie-av string be the characters consumed in this step.\n    let attributeName = '';\n    let attributeValue = '';\n    // 4. If the cookie-av string contains a %x3D (\"=\") character:\n    if (cookieAv.includes('=')) {\n        // 1. The (possibly empty) attribute-name string consists of the\n        //    characters up to, but not including, the first %x3D (\"=\")\n        //    character, and the (possibly empty) attribute-value string\n        //    consists of the characters after the first %x3D (\"=\")\n        //    character.\n        const position = {\n            position: 0\n        };\n        attributeName = collectASequenceOfCodePointsFast('=', cookieAv, position);\n        attributeValue = cookieAv.slice(position.position + 1);\n    } else {\n        // Otherwise:\n        // 1. The attribute-name string consists of the entire cookie-av\n        //    string, and the attribute-value string is empty.\n        attributeName = cookieAv;\n    }\n    // 5. Remove any leading or trailing WSP characters from the attribute-\n    //    name string and the attribute-value string.\n    attributeName = attributeName.trim();\n    attributeValue = attributeValue.trim();\n    // 6. If the attribute-value is longer than 1024 octets, ignore the\n    //    cookie-av string and return to Step 1 of this algorithm.\n    if (attributeValue.length > maxAttributeValueSize) {\n        return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);\n    }\n    // 7. Process the attribute-name and attribute-value according to the\n    //    requirements in the following subsections.  (Notice that\n    //    attributes with unrecognized attribute-names are ignored.)\n    const attributeNameLowercase = attributeName.toLowerCase();\n    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.1\n    // If the attribute-name case-insensitively matches the string\n    // \"Expires\", the user agent MUST process the cookie-av as follows.\n    if (attributeNameLowercase === 'expires') {\n        // 1. Let the expiry-time be the result of parsing the attribute-value\n        //    as cookie-date (see Section 5.1.1).\n        const expiryTime = new Date(attributeValue);\n        // 2. If the attribute-value failed to parse as a cookie date, ignore\n        //    the cookie-av.\n        cookieAttributeList.expires = expiryTime;\n    } else if (attributeNameLowercase === 'max-age') {\n        // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.2\n        // If the attribute-name case-insensitively matches the string \"Max-\n        // Age\", the user agent MUST process the cookie-av as follows.\n        // 1. If the first character of the attribute-value is not a DIGIT or a\n        //    \"-\" character, ignore the cookie-av.\n        const charCode = attributeValue.charCodeAt(0);\n        if ((charCode < 48 || charCode > 57) && attributeValue[0] !== '-') {\n            return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);\n        }\n        // 2. If the remainder of attribute-value contains a non-DIGIT\n        //    character, ignore the cookie-av.\n        if (!/^\\d+$/.test(attributeValue)) {\n            return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);\n        }\n        // 3. Let delta-seconds be the attribute-value converted to an integer.\n        const deltaSeconds = Number(attributeValue);\n        // 4. Let cookie-age-limit be the maximum age of the cookie (which\n        //    SHOULD be 400 days or less, see Section 4.1.2.2).\n        // 5. Set delta-seconds to the smaller of its present value and cookie-\n        //    age-limit.\n        // deltaSeconds = Math.min(deltaSeconds * 1000, maxExpiresMs)\n        // 6. If delta-seconds is less than or equal to zero (0), let expiry-\n        //    time be the earliest representable date and time.  Otherwise, let\n        //    the expiry-time be the current date and time plus delta-seconds\n        //    seconds.\n        // const expiryTime = deltaSeconds <= 0 ? Date.now() : Date.now() + deltaSeconds\n        // 7. Append an attribute to the cookie-attribute-list with an\n        //    attribute-name of Max-Age and an attribute-value of expiry-time.\n        cookieAttributeList.maxAge = deltaSeconds;\n    } else if (attributeNameLowercase === 'domain') {\n        // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.3\n        // If the attribute-name case-insensitively matches the string \"Domain\",\n        // the user agent MUST process the cookie-av as follows.\n        // 1. Let cookie-domain be the attribute-value.\n        let cookieDomain = attributeValue;\n        // 2. If cookie-domain starts with %x2E (\".\"), let cookie-domain be\n        //    cookie-domain without its leading %x2E (\".\").\n        if (cookieDomain[0] === '.') {\n            cookieDomain = cookieDomain.slice(1);\n        }\n        // 3. Convert the cookie-domain to lower case.\n        cookieDomain = cookieDomain.toLowerCase();\n        // 4. Append an attribute to the cookie-attribute-list with an\n        //    attribute-name of Domain and an attribute-value of cookie-domain.\n        cookieAttributeList.domain = cookieDomain;\n    } else if (attributeNameLowercase === 'path') {\n        // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.4\n        // If the attribute-name case-insensitively matches the string \"Path\",\n        // the user agent MUST process the cookie-av as follows.\n        // 1. If the attribute-value is empty or if the first character of the\n        //    attribute-value is not %x2F (\"/\"):\n        let cookiePath = '';\n        if (attributeValue.length === 0 || attributeValue[0] !== '/') {\n            // 1. Let cookie-path be the default-path.\n            cookiePath = '/';\n        } else {\n            // Otherwise:\n            // 1. Let cookie-path be the attribute-value.\n            cookiePath = attributeValue;\n        }\n        // 2. Append an attribute to the cookie-attribute-list with an\n        //    attribute-name of Path and an attribute-value of cookie-path.\n        cookieAttributeList.path = cookiePath;\n    } else if (attributeNameLowercase === 'secure') {\n        // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.5\n        // If the attribute-name case-insensitively matches the string \"Secure\",\n        // the user agent MUST append an attribute to the cookie-attribute-list\n        // with an attribute-name of Secure and an empty attribute-value.\n        cookieAttributeList.secure = true;\n    } else if (attributeNameLowercase === 'httponly') {\n        // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.6\n        // If the attribute-name case-insensitively matches the string\n        // \"HttpOnly\", the user agent MUST append an attribute to the cookie-\n        // attribute-list with an attribute-name of HttpOnly and an empty\n        // attribute-value.\n        cookieAttributeList.httpOnly = true;\n    } else if (attributeNameLowercase === 'samesite') {\n        // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.7\n        // If the attribute-name case-insensitively matches the string\n        // \"SameSite\", the user agent MUST process the cookie-av as follows:\n        // 1. Let enforcement be \"Default\".\n        let enforcement = 'Default';\n        const attributeValueLowercase = attributeValue.toLowerCase();\n        // 2. If cookie-av's attribute-value is a case-insensitive match for\n        //    \"None\", set enforcement to \"None\".\n        if (attributeValueLowercase.includes('none')) {\n            enforcement = 'None';\n        }\n        // 3. If cookie-av's attribute-value is a case-insensitive match for\n        //    \"Strict\", set enforcement to \"Strict\".\n        if (attributeValueLowercase.includes('strict')) {\n            enforcement = 'Strict';\n        }\n        // 4. If cookie-av's attribute-value is a case-insensitive match for\n        //    \"Lax\", set enforcement to \"Lax\".\n        if (attributeValueLowercase.includes('lax')) {\n            enforcement = 'Lax';\n        }\n        // 5. Append an attribute to the cookie-attribute-list with an\n        //    attribute-name of \"SameSite\" and an attribute-value of\n        //    enforcement.\n        cookieAttributeList.sameSite = enforcement;\n    } else {\n        cookieAttributeList.unparsed ??= [];\n        cookieAttributeList.unparsed.push(`${attributeName}=${attributeValue}`);\n    }\n    // 8. Return to Step 1 of this algorithm.\n    return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);\n}\nmodule.exports = {\n    parseSetCookie,\n    parseUnparsedAttributes\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/cookies/parse.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/cookies/util.js":
/*!*****************************************************!*\
  !*** ./node_modules/undici/lib/web/cookies/util.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("\n/**\n * @param {string} value\n * @returns {boolean}\n */ function isCTLExcludingHtab(value) {\n    for(let i = 0; i < value.length; ++i){\n        const code = value.charCodeAt(i);\n        if (code >= 0x00 && code <= 0x08 || code >= 0x0A && code <= 0x1F || code === 0x7F) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n CHAR           = <any US-ASCII character (octets 0 - 127)>\n token          = 1*<any CHAR except CTLs or separators>\n separators     = \"(\" | \")\" | \"<\" | \">\" | \"@\"\n                | \",\" | \";\" | \":\" | \"\\\" | <\">\n                | \"/\" | \"[\" | \"]\" | \"?\" | \"=\"\n                | \"{\" | \"}\" | SP | HT\n * @param {string} name\n */ function validateCookieName(name) {\n    for(let i = 0; i < name.length; ++i){\n        const code = name.charCodeAt(i);\n        if (code < 0x21 || // exclude CTLs (0-31), SP and HT\n        code > 0x7E || // exclude non-ascii and DEL\n        code === 0x22 || // \"\n        code === 0x28 || // (\n        code === 0x29 || // )\n        code === 0x3C || // <\n        code === 0x3E || // >\n        code === 0x40 || // @\n        code === 0x2C || // ,\n        code === 0x3B || // ;\n        code === 0x3A || // :\n        code === 0x5C || // \\\n        code === 0x2F || // /\n        code === 0x5B || // [\n        code === 0x5D || // ]\n        code === 0x3F || // ?\n        code === 0x3D || // =\n        code === 0x7B || // {\n        code === 0x7D // }\n        ) {\n            throw new Error('Invalid cookie name');\n        }\n    }\n}\n/**\n cookie-value      = *cookie-octet / ( DQUOTE *cookie-octet DQUOTE )\n cookie-octet      = %x21 / %x23-2B / %x2D-3A / %x3C-5B / %x5D-7E\n                       ; US-ASCII characters excluding CTLs,\n                       ; whitespace DQUOTE, comma, semicolon,\n                       ; and backslash\n * @param {string} value\n */ function validateCookieValue(value) {\n    let len = value.length;\n    let i = 0;\n    // if the value is wrapped in DQUOTE\n    if (value[0] === '\"') {\n        if (len === 1 || value[len - 1] !== '\"') {\n            throw new Error('Invalid cookie value');\n        }\n        --len;\n        ++i;\n    }\n    while(i < len){\n        const code = value.charCodeAt(i++);\n        if (code < 0x21 || // exclude CTLs (0-31)\n        code > 0x7E || // non-ascii and DEL (127)\n        code === 0x22 || // \"\n        code === 0x2C || // ,\n        code === 0x3B || // ;\n        code === 0x5C // \\\n        ) {\n            throw new Error('Invalid cookie value');\n        }\n    }\n}\n/**\n * path-value        = <any CHAR except CTLs or \";\">\n * @param {string} path\n */ function validateCookiePath(path) {\n    for(let i = 0; i < path.length; ++i){\n        const code = path.charCodeAt(i);\n        if (code < 0x20 || // exclude CTLs (0-31)\n        code === 0x7F || // DEL\n        code === 0x3B // ;\n        ) {\n            throw new Error('Invalid cookie path');\n        }\n    }\n}\n/**\n * I have no idea why these values aren't allowed to be honest,\n * but Deno tests these. - Khafra\n * @param {string} domain\n */ function validateCookieDomain(domain) {\n    if (domain.startsWith('-') || domain.endsWith('.') || domain.endsWith('-')) {\n        throw new Error('Invalid cookie domain');\n    }\n}\nconst IMFDays = [\n    'Sun',\n    'Mon',\n    'Tue',\n    'Wed',\n    'Thu',\n    'Fri',\n    'Sat'\n];\nconst IMFMonths = [\n    'Jan',\n    'Feb',\n    'Mar',\n    'Apr',\n    'May',\n    'Jun',\n    'Jul',\n    'Aug',\n    'Sep',\n    'Oct',\n    'Nov',\n    'Dec'\n];\nconst IMFPaddedNumbers = Array(61).fill(0).map((_, i)=>i.toString().padStart(2, '0'));\n/**\n * @see https://www.rfc-editor.org/rfc/rfc7231#section-7.1.1.1\n * @param {number|Date} date\n  IMF-fixdate  = day-name \",\" SP date1 SP time-of-day SP GMT\n  ; fixed length/zone/capitalization subset of the format\n  ; see Section 3.3 of [RFC5322]\n\n  day-name     = %x4D.6F.6E ; \"Mon\", case-sensitive\n              / %x54.75.65 ; \"Tue\", case-sensitive\n              / %x57.65.64 ; \"Wed\", case-sensitive\n              / %x54.68.75 ; \"Thu\", case-sensitive\n              / %x46.72.69 ; \"Fri\", case-sensitive\n              / %x53.61.74 ; \"Sat\", case-sensitive\n              / %x53.75.6E ; \"Sun\", case-sensitive\n  date1        = day SP month SP year\n                  ; e.g., 02 Jun 1982\n\n  day          = 2DIGIT\n  month        = %x4A.61.6E ; \"Jan\", case-sensitive\n              / %x46.65.62 ; \"Feb\", case-sensitive\n              / %x4D.61.72 ; \"Mar\", case-sensitive\n              / %x41.70.72 ; \"Apr\", case-sensitive\n              / %x4D.61.79 ; \"May\", case-sensitive\n              / %x4A.75.6E ; \"Jun\", case-sensitive\n              / %x4A.75.6C ; \"Jul\", case-sensitive\n              / %x41.75.67 ; \"Aug\", case-sensitive\n              / %x53.65.70 ; \"Sep\", case-sensitive\n              / %x4F.63.74 ; \"Oct\", case-sensitive\n              / %x4E.6F.76 ; \"Nov\", case-sensitive\n              / %x44.65.63 ; \"Dec\", case-sensitive\n  year         = 4DIGIT\n\n  GMT          = %x47.4D.54 ; \"GMT\", case-sensitive\n\n  time-of-day  = hour \":\" minute \":\" second\n              ; 00:00:00 - 23:59:60 (leap second)\n\n  hour         = 2DIGIT\n  minute       = 2DIGIT\n  second       = 2DIGIT\n */ function toIMFDate(date) {\n    if (typeof date === 'number') {\n        date = new Date(date);\n    }\n    return `${IMFDays[date.getUTCDay()]}, ${IMFPaddedNumbers[date.getUTCDate()]} ${IMFMonths[date.getUTCMonth()]} ${date.getUTCFullYear()} ${IMFPaddedNumbers[date.getUTCHours()]}:${IMFPaddedNumbers[date.getUTCMinutes()]}:${IMFPaddedNumbers[date.getUTCSeconds()]} GMT`;\n}\n/**\n max-age-av        = \"Max-Age=\" non-zero-digit *DIGIT\n                       ; In practice, both expires-av and max-age-av\n                       ; are limited to dates representable by the\n                       ; user agent.\n * @param {number} maxAge\n */ function validateCookieMaxAge(maxAge) {\n    if (maxAge < 0) {\n        throw new Error('Invalid cookie max-age');\n    }\n}\n/**\n * @see https://www.rfc-editor.org/rfc/rfc6265#section-4.1.1\n * @param {import('./index').Cookie} cookie\n */ function stringify(cookie) {\n    if (cookie.name.length === 0) {\n        return null;\n    }\n    validateCookieName(cookie.name);\n    validateCookieValue(cookie.value);\n    const out = [\n        `${cookie.name}=${cookie.value}`\n    ];\n    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-cookie-prefixes-00#section-3.1\n    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-cookie-prefixes-00#section-3.2\n    if (cookie.name.startsWith('__Secure-')) {\n        cookie.secure = true;\n    }\n    if (cookie.name.startsWith('__Host-')) {\n        cookie.secure = true;\n        cookie.domain = null;\n        cookie.path = '/';\n    }\n    if (cookie.secure) {\n        out.push('Secure');\n    }\n    if (cookie.httpOnly) {\n        out.push('HttpOnly');\n    }\n    if (typeof cookie.maxAge === 'number') {\n        validateCookieMaxAge(cookie.maxAge);\n        out.push(`Max-Age=${cookie.maxAge}`);\n    }\n    if (cookie.domain) {\n        validateCookieDomain(cookie.domain);\n        out.push(`Domain=${cookie.domain}`);\n    }\n    if (cookie.path) {\n        validateCookiePath(cookie.path);\n        out.push(`Path=${cookie.path}`);\n    }\n    if (cookie.expires && cookie.expires.toString() !== 'Invalid Date') {\n        out.push(`Expires=${toIMFDate(cookie.expires)}`);\n    }\n    if (cookie.sameSite) {\n        out.push(`SameSite=${cookie.sameSite}`);\n    }\n    for (const part of cookie.unparsed){\n        if (!part.includes('=')) {\n            throw new Error('Invalid unparsed');\n        }\n        const [key, ...value] = part.split('=');\n        out.push(`${key.trim()}=${value.join('=')}`);\n    }\n    return out.join('; ');\n}\nmodule.exports = {\n    isCTLExcludingHtab,\n    validateCookieName,\n    validateCookiePath,\n    validateCookieValue,\n    toIMFDate,\n    stringify\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/cookies/util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/eventsource/eventsource-stream.js":
/*!***********************************************************************!*\
  !*** ./node_modules/undici/lib/web/eventsource/eventsource-stream.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { Transform } = __webpack_require__(/*! node:stream */ \"node:stream\");\nconst { isASCIINumber, isValidLastEventId } = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/web/eventsource/util.js\");\n/**\n * @type {number[]} BOM\n */ const BOM = [\n    0xEF,\n    0xBB,\n    0xBF\n];\n/**\n * @type {10} LF\n */ const LF = 0x0A;\n/**\n * @type {13} CR\n */ const CR = 0x0D;\n/**\n * @type {58} COLON\n */ const COLON = 0x3A;\n/**\n * @type {32} SPACE\n */ const SPACE = 0x20;\n/**\n * @typedef {object} EventSourceStreamEvent\n * @type {object}\n * @property {string} [event] The event type.\n * @property {string} [data] The data of the message.\n * @property {string} [id] A unique ID for the event.\n * @property {string} [retry] The reconnection time, in milliseconds.\n */ /**\n * @typedef eventSourceSettings\n * @type {object}\n * @property {string} lastEventId The last event ID received from the server.\n * @property {string} origin The origin of the event source.\n * @property {number} reconnectionTime The reconnection time, in milliseconds.\n */ class EventSourceStream extends Transform {\n    /**\n   * @param {object} options\n   * @param {eventSourceSettings} options.eventSourceSettings\n   * @param {Function} [options.push]\n   */ constructor(options = {}){\n        // Enable object mode as EventSourceStream emits objects of shape\n        // EventSourceStreamEvent\n        options.readableObjectMode = true;\n        super(options), /**\n   * @type {eventSourceSettings}\n   */ this.state = null, /**\n   * Leading byte-order-mark check.\n   * @type {boolean}\n   */ this.checkBOM = true, /**\n   * @type {boolean}\n   */ this.crlfCheck = false, /**\n   * @type {boolean}\n   */ this.eventEndCheck = false, /**\n   * @type {Buffer}\n   */ this.buffer = null, this.pos = 0, this.event = {\n            data: undefined,\n            event: undefined,\n            id: undefined,\n            retry: undefined\n        };\n        this.state = options.eventSourceSettings || {};\n        if (options.push) {\n            this.push = options.push;\n        }\n    }\n    /**\n   * @param {Buffer} chunk\n   * @param {string} _encoding\n   * @param {Function} callback\n   * @returns {void}\n   */ _transform(chunk, _encoding, callback) {\n        if (chunk.length === 0) {\n            callback();\n            return;\n        }\n        // Cache the chunk in the buffer, as the data might not be complete while\n        // processing it\n        // TODO: Investigate if there is a more performant way to handle\n        // incoming chunks\n        // see: https://github.com/nodejs/undici/issues/2630\n        if (this.buffer) {\n            this.buffer = Buffer.concat([\n                this.buffer,\n                chunk\n            ]);\n        } else {\n            this.buffer = chunk;\n        }\n        // Strip leading byte-order-mark if we opened the stream and started\n        // the processing of the incoming data\n        if (this.checkBOM) {\n            switch(this.buffer.length){\n                case 1:\n                    // Check if the first byte is the same as the first byte of the BOM\n                    if (this.buffer[0] === BOM[0]) {\n                        // If it is, we need to wait for more data\n                        callback();\n                        return;\n                    }\n                    // Set the checkBOM flag to false as we don't need to check for the\n                    // BOM anymore\n                    this.checkBOM = false;\n                    // The buffer only contains one byte so we need to wait for more data\n                    callback();\n                    return;\n                case 2:\n                    // Check if the first two bytes are the same as the first two bytes\n                    // of the BOM\n                    if (this.buffer[0] === BOM[0] && this.buffer[1] === BOM[1]) {\n                        // If it is, we need to wait for more data, because the third byte\n                        // is needed to determine if it is the BOM or not\n                        callback();\n                        return;\n                    }\n                    // Set the checkBOM flag to false as we don't need to check for the\n                    // BOM anymore\n                    this.checkBOM = false;\n                    break;\n                case 3:\n                    // Check if the first three bytes are the same as the first three\n                    // bytes of the BOM\n                    if (this.buffer[0] === BOM[0] && this.buffer[1] === BOM[1] && this.buffer[2] === BOM[2]) {\n                        // If it is, we can drop the buffered data, as it is only the BOM\n                        this.buffer = Buffer.alloc(0);\n                        // Set the checkBOM flag to false as we don't need to check for the\n                        // BOM anymore\n                        this.checkBOM = false;\n                        // Await more data\n                        callback();\n                        return;\n                    }\n                    // If it is not the BOM, we can start processing the data\n                    this.checkBOM = false;\n                    break;\n                default:\n                    // The buffer is longer than 3 bytes, so we can drop the BOM if it is\n                    // present\n                    if (this.buffer[0] === BOM[0] && this.buffer[1] === BOM[1] && this.buffer[2] === BOM[2]) {\n                        // Remove the BOM from the buffer\n                        this.buffer = this.buffer.subarray(3);\n                    }\n                    // Set the checkBOM flag to false as we don't need to check for the\n                    this.checkBOM = false;\n                    break;\n            }\n        }\n        while(this.pos < this.buffer.length){\n            // If the previous line ended with an end-of-line, we need to check\n            // if the next character is also an end-of-line.\n            if (this.eventEndCheck) {\n                // If the the current character is an end-of-line, then the event\n                // is finished and we can process it\n                // If the previous line ended with a carriage return, we need to\n                // check if the current character is a line feed and remove it\n                // from the buffer.\n                if (this.crlfCheck) {\n                    // If the current character is a line feed, we can remove it\n                    // from the buffer and reset the crlfCheck flag\n                    if (this.buffer[this.pos] === LF) {\n                        this.buffer = this.buffer.subarray(this.pos + 1);\n                        this.pos = 0;\n                        this.crlfCheck = false;\n                        continue;\n                    }\n                    this.crlfCheck = false;\n                }\n                if (this.buffer[this.pos] === LF || this.buffer[this.pos] === CR) {\n                    // If the current character is a carriage return, we need to\n                    // set the crlfCheck flag to true, as we need to check if the\n                    // next character is a line feed so we can remove it from the\n                    // buffer\n                    if (this.buffer[this.pos] === CR) {\n                        this.crlfCheck = true;\n                    }\n                    this.buffer = this.buffer.subarray(this.pos + 1);\n                    this.pos = 0;\n                    if (this.event.data !== undefined || this.event.event || this.event.id || this.event.retry) {\n                        this.processEvent(this.event);\n                    }\n                    this.clearEvent();\n                    continue;\n                }\n                // If the current character is not an end-of-line, then the event\n                // is not finished and we have to reset the eventEndCheck flag\n                this.eventEndCheck = false;\n                continue;\n            }\n            // If the current character is an end-of-line, we can process the\n            // line\n            if (this.buffer[this.pos] === LF || this.buffer[this.pos] === CR) {\n                // If the current character is a carriage return, we need to\n                // set the crlfCheck flag to true, as we need to check if the\n                // next character is a line feed\n                if (this.buffer[this.pos] === CR) {\n                    this.crlfCheck = true;\n                }\n                // In any case, we can process the line as we reached an\n                // end-of-line character\n                this.parseLine(this.buffer.subarray(0, this.pos), this.event);\n                // Remove the processed line from the buffer\n                this.buffer = this.buffer.subarray(this.pos + 1);\n                // Reset the position as we removed the processed line from the buffer\n                this.pos = 0;\n                // A line was processed and this could be the end of the event. We need\n                // to check if the next line is empty to determine if the event is\n                // finished.\n                this.eventEndCheck = true;\n                continue;\n            }\n            this.pos++;\n        }\n        callback();\n    }\n    /**\n   * @param {Buffer} line\n   * @param {EventStreamEvent} event\n   */ parseLine(line, event) {\n        // If the line is empty (a blank line)\n        // Dispatch the event, as defined below.\n        // This will be handled in the _transform method\n        if (line.length === 0) {\n            return;\n        }\n        // If the line starts with a U+003A COLON character (:)\n        // Ignore the line.\n        const colonPosition = line.indexOf(COLON);\n        if (colonPosition === 0) {\n            return;\n        }\n        let field = '';\n        let value = '';\n        // If the line contains a U+003A COLON character (:)\n        if (colonPosition !== -1) {\n            // Collect the characters on the line before the first U+003A COLON\n            // character (:), and let field be that string.\n            // TODO: Investigate if there is a more performant way to extract the\n            // field\n            // see: https://github.com/nodejs/undici/issues/2630\n            field = line.subarray(0, colonPosition).toString('utf8');\n            // Collect the characters on the line after the first U+003A COLON\n            // character (:), and let value be that string.\n            // If value starts with a U+0020 SPACE character, remove it from value.\n            let valueStart = colonPosition + 1;\n            if (line[valueStart] === SPACE) {\n                ++valueStart;\n            }\n            // TODO: Investigate if there is a more performant way to extract the\n            // value\n            // see: https://github.com/nodejs/undici/issues/2630\n            value = line.subarray(valueStart).toString('utf8');\n        // Otherwise, the string is not empty but does not contain a U+003A COLON\n        // character (:)\n        } else {\n            // Process the field using the steps described below, using the whole\n            // line as the field name, and the empty string as the field value.\n            field = line.toString('utf8');\n            value = '';\n        }\n        // Modify the event with the field name and value. The value is also\n        // decoded as UTF-8\n        switch(field){\n            case 'data':\n                if (event[field] === undefined) {\n                    event[field] = value;\n                } else {\n                    event[field] += `\\n${value}`;\n                }\n                break;\n            case 'retry':\n                if (isASCIINumber(value)) {\n                    event[field] = value;\n                }\n                break;\n            case 'id':\n                if (isValidLastEventId(value)) {\n                    event[field] = value;\n                }\n                break;\n            case 'event':\n                if (value.length > 0) {\n                    event[field] = value;\n                }\n                break;\n        }\n    }\n    /**\n   * @param {EventSourceStreamEvent} event\n   */ processEvent(event) {\n        if (event.retry && isASCIINumber(event.retry)) {\n            this.state.reconnectionTime = parseInt(event.retry, 10);\n        }\n        if (event.id && isValidLastEventId(event.id)) {\n            this.state.lastEventId = event.id;\n        }\n        // only dispatch event, when data is provided\n        if (event.data !== undefined) {\n            this.push({\n                type: event.event || 'message',\n                options: {\n                    data: event.data,\n                    lastEventId: this.state.lastEventId,\n                    origin: this.state.origin\n                }\n            });\n        }\n    }\n    clearEvent() {\n        this.event = {\n            data: undefined,\n            event: undefined,\n            id: undefined,\n            retry: undefined\n        };\n    }\n}\nmodule.exports = {\n    EventSourceStream\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/eventsource/eventsource-stream.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/eventsource/eventsource.js":
/*!****************************************************************!*\
  !*** ./node_modules/undici/lib/web/eventsource/eventsource.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { pipeline } = __webpack_require__(/*! node:stream */ \"node:stream\");\nconst { fetching } = __webpack_require__(/*! ../fetch */ \"(ssr)/./node_modules/undici/lib/web/fetch/index.js\");\nconst { makeRequest } = __webpack_require__(/*! ../fetch/request */ \"(ssr)/./node_modules/undici/lib/web/fetch/request.js\");\nconst { webidl } = __webpack_require__(/*! ../fetch/webidl */ \"(ssr)/./node_modules/undici/lib/web/fetch/webidl.js\");\nconst { EventSourceStream } = __webpack_require__(/*! ./eventsource-stream */ \"(ssr)/./node_modules/undici/lib/web/eventsource/eventsource-stream.js\");\nconst { parseMIMEType } = __webpack_require__(/*! ../fetch/data-url */ \"(ssr)/./node_modules/undici/lib/web/fetch/data-url.js\");\nconst { createFastMessageEvent } = __webpack_require__(/*! ../websocket/events */ \"(ssr)/./node_modules/undici/lib/web/websocket/events.js\");\nconst { isNetworkError } = __webpack_require__(/*! ../fetch/response */ \"(ssr)/./node_modules/undici/lib/web/fetch/response.js\");\nconst { delay } = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/web/eventsource/util.js\");\nconst { kEnumerableProperty } = __webpack_require__(/*! ../../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst { environmentSettingsObject } = __webpack_require__(/*! ../fetch/util */ \"(ssr)/./node_modules/undici/lib/web/fetch/util.js\");\nlet experimentalWarned = false;\n/**\n * A reconnection time, in milliseconds. This must initially be an implementation-defined value,\n * probably in the region of a few seconds.\n *\n * In Comparison:\n * - Chrome uses 3000ms.\n * - Deno uses 5000ms.\n *\n * @type {3000}\n */ const defaultReconnectionTime = 3000;\n/**\n * The readyState attribute represents the state of the connection.\n * @enum\n * @readonly\n * @see https://html.spec.whatwg.org/multipage/server-sent-events.html#dom-eventsource-readystate-dev\n */ /**\n * The connection has not yet been established, or it was closed and the user\n * agent is reconnecting.\n * @type {0}\n */ const CONNECTING = 0;\n/**\n * The user agent has an open connection and is dispatching events as it\n * receives them.\n * @type {1}\n */ const OPEN = 1;\n/**\n * The connection is not open, and the user agent is not trying to reconnect.\n * @type {2}\n */ const CLOSED = 2;\n/**\n * Requests for the element will have their mode set to \"cors\" and their credentials mode set to \"same-origin\".\n * @type {'anonymous'}\n */ const ANONYMOUS = 'anonymous';\n/**\n * Requests for the element will have their mode set to \"cors\" and their credentials mode set to \"include\".\n * @type {'use-credentials'}\n */ const USE_CREDENTIALS = 'use-credentials';\n/**\n * The EventSource interface is used to receive server-sent events. It\n * connects to a server over HTTP and receives events in text/event-stream\n * format without closing the connection.\n * @extends {EventTarget}\n * @see https://html.spec.whatwg.org/multipage/server-sent-events.html#server-sent-events\n * @api public\n */ class EventSource extends EventTarget {\n    #events;\n    #url;\n    #withCredentials;\n    #readyState;\n    #request;\n    #controller;\n    #dispatcher;\n    /**\n   * @type {import('./eventsource-stream').eventSourceSettings}\n   */ #state;\n    /**\n   * Creates a new EventSource object.\n   * @param {string} url\n   * @param {EventSourceInit} [eventSourceInitDict]\n   * @see https://html.spec.whatwg.org/multipage/server-sent-events.html#the-eventsource-interface\n   */ constructor(url, eventSourceInitDict = {}){\n        // 1. Let ev be a new EventSource object.\n        super(), this.#events = {\n            open: null,\n            error: null,\n            message: null\n        }, this.#url = null, this.#withCredentials = false, this.#readyState = CONNECTING, this.#request = null, this.#controller = null;\n        const prefix = 'EventSource constructor';\n        webidl.argumentLengthCheck(arguments, 1, prefix);\n        if (!experimentalWarned) {\n            experimentalWarned = true;\n            process.emitWarning('EventSource is experimental, expect them to change at any time.', {\n                code: 'UNDICI-ES'\n            });\n        }\n        url = webidl.converters.USVString(url, prefix, 'url');\n        eventSourceInitDict = webidl.converters.EventSourceInitDict(eventSourceInitDict, prefix, 'eventSourceInitDict');\n        this.#dispatcher = eventSourceInitDict.dispatcher;\n        this.#state = {\n            lastEventId: '',\n            reconnectionTime: defaultReconnectionTime\n        };\n        // 2. Let settings be ev's relevant settings object.\n        // https://html.spec.whatwg.org/multipage/webappapis.html#environment-settings-object\n        const settings = environmentSettingsObject;\n        let urlRecord;\n        try {\n            // 3. Let urlRecord be the result of encoding-parsing a URL given url, relative to settings.\n            urlRecord = new URL(url, settings.settingsObject.baseUrl);\n            this.#state.origin = urlRecord.origin;\n        } catch (e) {\n            // 4. If urlRecord is failure, then throw a \"SyntaxError\" DOMException.\n            throw new DOMException(e, 'SyntaxError');\n        }\n        // 5. Set ev's url to urlRecord.\n        this.#url = urlRecord.href;\n        // 6. Let corsAttributeState be Anonymous.\n        let corsAttributeState = ANONYMOUS;\n        // 7. If the value of eventSourceInitDict's withCredentials member is true,\n        // then set corsAttributeState to Use Credentials and set ev's\n        // withCredentials attribute to true.\n        if (eventSourceInitDict.withCredentials) {\n            corsAttributeState = USE_CREDENTIALS;\n            this.#withCredentials = true;\n        }\n        // 8. Let request be the result of creating a potential-CORS request given\n        // urlRecord, the empty string, and corsAttributeState.\n        const initRequest = {\n            redirect: 'follow',\n            keepalive: true,\n            // @see https://html.spec.whatwg.org/multipage/urls-and-fetching.html#cors-settings-attributes\n            mode: 'cors',\n            credentials: corsAttributeState === 'anonymous' ? 'same-origin' : 'omit',\n            referrer: 'no-referrer'\n        };\n        // 9. Set request's client to settings.\n        initRequest.client = environmentSettingsObject.settingsObject;\n        // 10. User agents may set (`Accept`, `text/event-stream`) in request's header list.\n        initRequest.headersList = [\n            [\n                'accept',\n                {\n                    name: 'accept',\n                    value: 'text/event-stream'\n                }\n            ]\n        ];\n        // 11. Set request's cache mode to \"no-store\".\n        initRequest.cache = 'no-store';\n        // 12. Set request's initiator type to \"other\".\n        initRequest.initiator = 'other';\n        initRequest.urlList = [\n            new URL(this.#url)\n        ];\n        // 13. Set ev's request to request.\n        this.#request = makeRequest(initRequest);\n        this.#connect();\n    }\n    /**\n   * Returns the state of this EventSource object's connection. It can have the\n   * values described below.\n   * @returns {0|1|2}\n   * @readonly\n   */ get readyState() {\n        return this.#readyState;\n    }\n    /**\n   * Returns the URL providing the event stream.\n   * @readonly\n   * @returns {string}\n   */ get url() {\n        return this.#url;\n    }\n    /**\n   * Returns a boolean indicating whether the EventSource object was\n   * instantiated with CORS credentials set (true), or not (false, the default).\n   */ get withCredentials() {\n        return this.#withCredentials;\n    }\n    #connect() {\n        if (this.#readyState === CLOSED) return;\n        this.#readyState = CONNECTING;\n        const fetchParams = {\n            request: this.#request,\n            dispatcher: this.#dispatcher\n        };\n        // 14. Let processEventSourceEndOfBody given response res be the following step: if res is not a network error, then reestablish the connection.\n        const processEventSourceEndOfBody = (response)=>{\n            if (isNetworkError(response)) {\n                this.dispatchEvent(new Event('error'));\n                this.close();\n            }\n            this.#reconnect();\n        };\n        // 15. Fetch request, with processResponseEndOfBody set to processEventSourceEndOfBody...\n        fetchParams.processResponseEndOfBody = processEventSourceEndOfBody;\n        // and processResponse set to the following steps given response res:\n        fetchParams.processResponse = (response)=>{\n            // 1. If res is an aborted network error, then fail the connection.\n            if (isNetworkError(response)) {\n                // 1. When a user agent is to fail the connection, the user agent\n                // must queue a task which, if the readyState attribute is set to a\n                // value other than CLOSED, sets the readyState attribute to CLOSED\n                // and fires an event named error at the EventSource object. Once the\n                // user agent has failed the connection, it does not attempt to\n                // reconnect.\n                if (response.aborted) {\n                    this.close();\n                    this.dispatchEvent(new Event('error'));\n                    return;\n                // 2. Otherwise, if res is a network error, then reestablish the\n                // connection, unless the user agent knows that to be futile, in\n                // which case the user agent may fail the connection.\n                } else {\n                    this.#reconnect();\n                    return;\n                }\n            }\n            // 3. Otherwise, if res's status is not 200, or if res's `Content-Type`\n            // is not `text/event-stream`, then fail the connection.\n            const contentType = response.headersList.get('content-type', true);\n            const mimeType = contentType !== null ? parseMIMEType(contentType) : 'failure';\n            const contentTypeValid = mimeType !== 'failure' && mimeType.essence === 'text/event-stream';\n            if (response.status !== 200 || contentTypeValid === false) {\n                this.close();\n                this.dispatchEvent(new Event('error'));\n                return;\n            }\n            // 4. Otherwise, announce the connection and interpret res's body\n            // line by line.\n            // When a user agent is to announce the connection, the user agent\n            // must queue a task which, if the readyState attribute is set to a\n            // value other than CLOSED, sets the readyState attribute to OPEN\n            // and fires an event named open at the EventSource object.\n            // @see https://html.spec.whatwg.org/multipage/server-sent-events.html#sse-processing-model\n            this.#readyState = OPEN;\n            this.dispatchEvent(new Event('open'));\n            // If redirected to a different origin, set the origin to the new origin.\n            this.#state.origin = response.urlList[response.urlList.length - 1].origin;\n            const eventSourceStream = new EventSourceStream({\n                eventSourceSettings: this.#state,\n                push: (event)=>{\n                    this.dispatchEvent(createFastMessageEvent(event.type, event.options));\n                }\n            });\n            pipeline(response.body.stream, eventSourceStream, (error)=>{\n                if (error?.aborted === false) {\n                    this.close();\n                    this.dispatchEvent(new Event('error'));\n                }\n            });\n        };\n        this.#controller = fetching(fetchParams);\n    }\n    /**\n   * @see https://html.spec.whatwg.org/multipage/server-sent-events.html#sse-processing-model\n   * @returns {Promise<void>}\n   */ async #reconnect() {\n        // When a user agent is to reestablish the connection, the user agent must\n        // run the following steps. These steps are run in parallel, not as part of\n        // a task. (The tasks that it queues, of course, are run like normal tasks\n        // and not themselves in parallel.)\n        // 1. Queue a task to run the following steps:\n        //   1. If the readyState attribute is set to CLOSED, abort the task.\n        if (this.#readyState === CLOSED) return;\n        //   2. Set the readyState attribute to CONNECTING.\n        this.#readyState = CONNECTING;\n        //   3. Fire an event named error at the EventSource object.\n        this.dispatchEvent(new Event('error'));\n        // 2. Wait a delay equal to the reconnection time of the event source.\n        await delay(this.#state.reconnectionTime);\n        // 5. Queue a task to run the following steps:\n        //   1. If the EventSource object's readyState attribute is not set to\n        //      CONNECTING, then return.\n        if (this.#readyState !== CONNECTING) return;\n        //   2. Let request be the EventSource object's request.\n        //   3. If the EventSource object's last event ID string is not the empty\n        //      string, then:\n        //      1. Let lastEventIDValue be the EventSource object's last event ID\n        //         string, encoded as UTF-8.\n        //      2. Set (`Last-Event-ID`, lastEventIDValue) in request's header\n        //         list.\n        if (this.#state.lastEventId.length) {\n            this.#request.headersList.set('last-event-id', this.#state.lastEventId, true);\n        }\n        //   4. Fetch request and process the response obtained in this fashion, if any, as described earlier in this section.\n        this.#connect();\n    }\n    /**\n   * Closes the connection, if any, and sets the readyState attribute to\n   * CLOSED.\n   */ close() {\n        webidl.brandCheck(this, EventSource);\n        if (this.#readyState === CLOSED) return;\n        this.#readyState = CLOSED;\n        this.#controller.abort();\n        this.#request = null;\n    }\n    get onopen() {\n        return this.#events.open;\n    }\n    set onopen(fn) {\n        if (this.#events.open) {\n            this.removeEventListener('open', this.#events.open);\n        }\n        if (typeof fn === 'function') {\n            this.#events.open = fn;\n            this.addEventListener('open', fn);\n        } else {\n            this.#events.open = null;\n        }\n    }\n    get onmessage() {\n        return this.#events.message;\n    }\n    set onmessage(fn) {\n        if (this.#events.message) {\n            this.removeEventListener('message', this.#events.message);\n        }\n        if (typeof fn === 'function') {\n            this.#events.message = fn;\n            this.addEventListener('message', fn);\n        } else {\n            this.#events.message = null;\n        }\n    }\n    get onerror() {\n        return this.#events.error;\n    }\n    set onerror(fn) {\n        if (this.#events.error) {\n            this.removeEventListener('error', this.#events.error);\n        }\n        if (typeof fn === 'function') {\n            this.#events.error = fn;\n            this.addEventListener('error', fn);\n        } else {\n            this.#events.error = null;\n        }\n    }\n}\nconst constantsPropertyDescriptors = {\n    CONNECTING: {\n        __proto__: null,\n        configurable: false,\n        enumerable: true,\n        value: CONNECTING,\n        writable: false\n    },\n    OPEN: {\n        __proto__: null,\n        configurable: false,\n        enumerable: true,\n        value: OPEN,\n        writable: false\n    },\n    CLOSED: {\n        __proto__: null,\n        configurable: false,\n        enumerable: true,\n        value: CLOSED,\n        writable: false\n    }\n};\nObject.defineProperties(EventSource, constantsPropertyDescriptors);\nObject.defineProperties(EventSource.prototype, constantsPropertyDescriptors);\nObject.defineProperties(EventSource.prototype, {\n    close: kEnumerableProperty,\n    onerror: kEnumerableProperty,\n    onmessage: kEnumerableProperty,\n    onopen: kEnumerableProperty,\n    readyState: kEnumerableProperty,\n    url: kEnumerableProperty,\n    withCredentials: kEnumerableProperty\n});\nwebidl.converters.EventSourceInitDict = webidl.dictionaryConverter([\n    {\n        key: 'withCredentials',\n        converter: webidl.converters.boolean,\n        defaultValue: ()=>false\n    },\n    {\n        key: 'dispatcher',\n        converter: webidl.converters.any\n    }\n]);\nmodule.exports = {\n    EventSource,\n    defaultReconnectionTime\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/eventsource/eventsource.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/eventsource/util.js":
/*!*********************************************************!*\
  !*** ./node_modules/undici/lib/web/eventsource/util.js ***!
  \*********************************************************/
/***/ ((module) => {

eval("\n/**\n * Checks if the given value is a valid LastEventId.\n * @param {string} value\n * @returns {boolean}\n */ function isValidLastEventId(value) {\n    // LastEventId should not contain U+0000 NULL\n    return value.indexOf('\\u0000') === -1;\n}\n/**\n * Checks if the given value is a base 10 digit.\n * @param {string} value\n * @returns {boolean}\n */ function isASCIINumber(value) {\n    if (value.length === 0) return false;\n    for(let i = 0; i < value.length; i++){\n        if (value.charCodeAt(i) < 0x30 || value.charCodeAt(i) > 0x39) return false;\n    }\n    return true;\n}\n// https://github.com/nodejs/undici/issues/2664\nfunction delay(ms) {\n    return new Promise((resolve)=>{\n        setTimeout(resolve, ms).unref();\n    });\n}\nmodule.exports = {\n    isValidLastEventId,\n    isASCIINumber,\n    delay\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi93ZWIvZXZlbnRzb3VyY2UvdXRpbC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBOzs7O0NBSUMsR0FDRCxTQUFTQSxtQkFBb0JDLEtBQUs7SUFDaEMsNkNBQTZDO0lBQzdDLE9BQU9BLE1BQU1DLE9BQU8sQ0FBQyxjQUFjLENBQUM7QUFDdEM7QUFFQTs7OztDQUlDLEdBQ0QsU0FBU0MsY0FBZUYsS0FBSztJQUMzQixJQUFJQSxNQUFNRyxNQUFNLEtBQUssR0FBRyxPQUFPO0lBQy9CLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJSixNQUFNRyxNQUFNLEVBQUVDLElBQUs7UUFDckMsSUFBSUosTUFBTUssVUFBVSxDQUFDRCxLQUFLLFFBQVFKLE1BQU1LLFVBQVUsQ0FBQ0QsS0FBSyxNQUFNLE9BQU87SUFDdkU7SUFDQSxPQUFPO0FBQ1Q7QUFFQSwrQ0FBK0M7QUFDL0MsU0FBU0UsTUFBT0MsRUFBRTtJQUNoQixPQUFPLElBQUlDLFFBQVEsQ0FBQ0M7UUFDbEJDLFdBQVdELFNBQVNGLElBQUlJLEtBQUs7SUFDL0I7QUFDRjtBQUVBQyxPQUFPQyxPQUFPLEdBQUc7SUFDZmQ7SUFDQUc7SUFDQUk7QUFDRiIsInNvdXJjZXMiOlsiRDpcXEhlbGl4XFxub2RlX21vZHVsZXNcXHVuZGljaVxcbGliXFx3ZWJcXGV2ZW50c291cmNlXFx1dGlsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYSB2YWxpZCBMYXN0RXZlbnRJZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzVmFsaWRMYXN0RXZlbnRJZCAodmFsdWUpIHtcbiAgLy8gTGFzdEV2ZW50SWQgc2hvdWxkIG5vdCBjb250YWluIFUrMDAwMCBOVUxMXG4gIHJldHVybiB2YWx1ZS5pbmRleE9mKCdcXHUwMDAwJykgPT09IC0xXG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBhIGJhc2UgMTAgZGlnaXQuXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc0FTQ0lJTnVtYmVyICh2YWx1ZSkge1xuICBpZiAodmFsdWUubGVuZ3RoID09PSAwKSByZXR1cm4gZmFsc2VcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgIGlmICh2YWx1ZS5jaGFyQ29kZUF0KGkpIDwgMHgzMCB8fCB2YWx1ZS5jaGFyQ29kZUF0KGkpID4gMHgzOSkgcmV0dXJuIGZhbHNlXG4gIH1cbiAgcmV0dXJuIHRydWVcbn1cblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy91bmRpY2kvaXNzdWVzLzI2NjRcbmZ1bmN0aW9uIGRlbGF5IChtcykge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICBzZXRUaW1lb3V0KHJlc29sdmUsIG1zKS51bnJlZigpXG4gIH0pXG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc1ZhbGlkTGFzdEV2ZW50SWQsXG4gIGlzQVNDSUlOdW1iZXIsXG4gIGRlbGF5XG59XG4iXSwibmFtZXMiOlsiaXNWYWxpZExhc3RFdmVudElkIiwidmFsdWUiLCJpbmRleE9mIiwiaXNBU0NJSU51bWJlciIsImxlbmd0aCIsImkiLCJjaGFyQ29kZUF0IiwiZGVsYXkiLCJtcyIsIlByb21pc2UiLCJyZXNvbHZlIiwic2V0VGltZW91dCIsInVucmVmIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/eventsource/util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/fetch/body.js":
/*!***************************************************!*\
  !*** ./node_modules/undici/lib/web/fetch/body.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst util = __webpack_require__(/*! ../../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst { ReadableStreamFrom, isBlobLike, isReadableStreamLike, readableStreamClose, createDeferredPromise, fullyReadBody, extractMimeType, utf8DecodeBytes } = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/web/fetch/util.js\");\nconst { FormData } = __webpack_require__(/*! ./formdata */ \"(ssr)/./node_modules/undici/lib/web/fetch/formdata.js\");\nconst { kState } = __webpack_require__(/*! ./symbols */ \"(ssr)/./node_modules/undici/lib/web/fetch/symbols.js\");\nconst { webidl } = __webpack_require__(/*! ./webidl */ \"(ssr)/./node_modules/undici/lib/web/fetch/webidl.js\");\nconst { Blob } = __webpack_require__(/*! node:buffer */ \"node:buffer\");\nconst assert = __webpack_require__(/*! node:assert */ \"node:assert\");\nconst { isErrored } = __webpack_require__(/*! ../../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst { isArrayBuffer } = __webpack_require__(/*! node:util/types */ \"node:util/types\");\nconst { serializeAMimeType } = __webpack_require__(/*! ./data-url */ \"(ssr)/./node_modules/undici/lib/web/fetch/data-url.js\");\nconst { multipartFormDataParser } = __webpack_require__(/*! ./formdata-parser */ \"(ssr)/./node_modules/undici/lib/web/fetch/formdata-parser.js\");\nconst textEncoder = new TextEncoder();\n// https://fetch.spec.whatwg.org/#concept-bodyinit-extract\nfunction extractBody(object, keepalive = false) {\n    // 1. Let stream be null.\n    let stream = null;\n    // 2. If object is a ReadableStream object, then set stream to object.\n    if (object instanceof ReadableStream) {\n        stream = object;\n    } else if (isBlobLike(object)) {\n        // 3. Otherwise, if object is a Blob object, set stream to the\n        //    result of running object’s get stream.\n        stream = object.stream();\n    } else {\n        // 4. Otherwise, set stream to a new ReadableStream object, and set\n        //    up stream with byte reading support.\n        stream = new ReadableStream({\n            async pull (controller) {\n                const buffer = typeof source === 'string' ? textEncoder.encode(source) : source;\n                if (buffer.byteLength) {\n                    controller.enqueue(buffer);\n                }\n                queueMicrotask(()=>readableStreamClose(controller));\n            },\n            start () {},\n            type: 'bytes'\n        });\n    }\n    // 5. Assert: stream is a ReadableStream object.\n    assert(isReadableStreamLike(stream));\n    // 6. Let action be null.\n    let action = null;\n    // 7. Let source be null.\n    let source = null;\n    // 8. Let length be null.\n    let length = null;\n    // 9. Let type be null.\n    let type = null;\n    // 10. Switch on object:\n    if (typeof object === 'string') {\n        // Set source to the UTF-8 encoding of object.\n        // Note: setting source to a Uint8Array here breaks some mocking assumptions.\n        source = object;\n        // Set type to `text/plain;charset=UTF-8`.\n        type = 'text/plain;charset=UTF-8';\n    } else if (object instanceof URLSearchParams) {\n        // URLSearchParams\n        // spec says to run application/x-www-form-urlencoded on body.list\n        // this is implemented in Node.js as apart of an URLSearchParams instance toString method\n        // See: https://github.com/nodejs/node/blob/e46c680bf2b211bbd52cf959ca17ee98c7f657f5/lib/internal/url.js#L490\n        // and https://github.com/nodejs/node/blob/e46c680bf2b211bbd52cf959ca17ee98c7f657f5/lib/internal/url.js#L1100\n        // Set source to the result of running the application/x-www-form-urlencoded serializer with object’s list.\n        source = object.toString();\n        // Set type to `application/x-www-form-urlencoded;charset=UTF-8`.\n        type = 'application/x-www-form-urlencoded;charset=UTF-8';\n    } else if (isArrayBuffer(object)) {\n        // BufferSource/ArrayBuffer\n        // Set source to a copy of the bytes held by object.\n        source = new Uint8Array(object.slice());\n    } else if (ArrayBuffer.isView(object)) {\n        // BufferSource/ArrayBufferView\n        // Set source to a copy of the bytes held by object.\n        source = new Uint8Array(object.buffer.slice(object.byteOffset, object.byteOffset + object.byteLength));\n    } else if (util.isFormDataLike(object)) {\n        const boundary = `----formdata-undici-0${`${Math.floor(Math.random() * 1e11)}`.padStart(11, '0')}`;\n        const prefix = `--${boundary}\\r\\nContent-Disposition: form-data`;\n        /*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */ const escape = (str)=>str.replace(/\\n/g, '%0A').replace(/\\r/g, '%0D').replace(/\"/g, '%22');\n        const normalizeLinefeeds = (value)=>value.replace(/\\r?\\n|\\r/g, '\\r\\n');\n        // Set action to this step: run the multipart/form-data\n        // encoding algorithm, with object’s entry list and UTF-8.\n        // - This ensures that the body is immutable and can't be changed afterwords\n        // - That the content-length is calculated in advance.\n        // - And that all parts are pre-encoded and ready to be sent.\n        const blobParts = [];\n        const rn = new Uint8Array([\n            13,\n            10\n        ]) // '\\r\\n'\n        ;\n        length = 0;\n        let hasUnknownSizeValue = false;\n        for (const [name, value] of object){\n            if (typeof value === 'string') {\n                const chunk = textEncoder.encode(prefix + `; name=\"${escape(normalizeLinefeeds(name))}\"` + `\\r\\n\\r\\n${normalizeLinefeeds(value)}\\r\\n`);\n                blobParts.push(chunk);\n                length += chunk.byteLength;\n            } else {\n                const chunk = textEncoder.encode(`${prefix}; name=\"${escape(normalizeLinefeeds(name))}\"` + (value.name ? `; filename=\"${escape(value.name)}\"` : '') + '\\r\\n' + `Content-Type: ${value.type || 'application/octet-stream'}\\r\\n\\r\\n`);\n                blobParts.push(chunk, value, rn);\n                if (typeof value.size === 'number') {\n                    length += chunk.byteLength + value.size + rn.byteLength;\n                } else {\n                    hasUnknownSizeValue = true;\n                }\n            }\n        }\n        const chunk = textEncoder.encode(`--${boundary}--`);\n        blobParts.push(chunk);\n        length += chunk.byteLength;\n        if (hasUnknownSizeValue) {\n            length = null;\n        }\n        // Set source to object.\n        source = object;\n        action = async function*() {\n            for (const part of blobParts){\n                if (part.stream) {\n                    yield* part.stream();\n                } else {\n                    yield part;\n                }\n            }\n        };\n        // Set type to `multipart/form-data; boundary=`,\n        // followed by the multipart/form-data boundary string generated\n        // by the multipart/form-data encoding algorithm.\n        type = `multipart/form-data; boundary=${boundary}`;\n    } else if (isBlobLike(object)) {\n        // Blob\n        // Set source to object.\n        source = object;\n        // Set length to object’s size.\n        length = object.size;\n        // If object’s type attribute is not the empty byte sequence, set\n        // type to its value.\n        if (object.type) {\n            type = object.type;\n        }\n    } else if (typeof object[Symbol.asyncIterator] === 'function') {\n        // If keepalive is true, then throw a TypeError.\n        if (keepalive) {\n            throw new TypeError('keepalive');\n        }\n        // If object is disturbed or locked, then throw a TypeError.\n        if (util.isDisturbed(object) || object.locked) {\n            throw new TypeError('Response body object should not be disturbed or locked');\n        }\n        stream = object instanceof ReadableStream ? object : ReadableStreamFrom(object);\n    }\n    // 11. If source is a byte sequence, then set action to a\n    // step that returns source and length to source’s length.\n    if (typeof source === 'string' || util.isBuffer(source)) {\n        length = Buffer.byteLength(source);\n    }\n    // 12. If action is non-null, then run these steps in in parallel:\n    if (action != null) {\n        // Run action.\n        let iterator;\n        stream = new ReadableStream({\n            async start () {\n                iterator = action(object)[Symbol.asyncIterator]();\n            },\n            async pull (controller) {\n                const { value, done } = await iterator.next();\n                if (done) {\n                    // When running action is done, close stream.\n                    queueMicrotask(()=>{\n                        controller.close();\n                        controller.byobRequest?.respond(0);\n                    });\n                } else {\n                    // Whenever one or more bytes are available and stream is not errored,\n                    // enqueue a Uint8Array wrapping an ArrayBuffer containing the available\n                    // bytes into stream.\n                    if (!isErrored(stream)) {\n                        const buffer = new Uint8Array(value);\n                        if (buffer.byteLength) {\n                            controller.enqueue(buffer);\n                        }\n                    }\n                }\n                return controller.desiredSize > 0;\n            },\n            async cancel (reason) {\n                await iterator.return();\n            },\n            type: 'bytes'\n        });\n    }\n    // 13. Let body be a body whose stream is stream, source is source,\n    // and length is length.\n    const body = {\n        stream,\n        source,\n        length\n    };\n    // 14. Return (body, type).\n    return [\n        body,\n        type\n    ];\n}\n// https://fetch.spec.whatwg.org/#bodyinit-safely-extract\nfunction safelyExtractBody(object, keepalive = false) {\n    // To safely extract a body and a `Content-Type` value from\n    // a byte sequence or BodyInit object object, run these steps:\n    // 1. If object is a ReadableStream object, then:\n    if (object instanceof ReadableStream) {\n        // Assert: object is neither disturbed nor locked.\n        // istanbul ignore next\n        assert(!util.isDisturbed(object), 'The body has already been consumed.');\n        // istanbul ignore next\n        assert(!object.locked, 'The stream is locked.');\n    }\n    // 2. Return the results of extracting object.\n    return extractBody(object, keepalive);\n}\nfunction cloneBody(body) {\n    // To clone a body body, run these steps:\n    // https://fetch.spec.whatwg.org/#concept-body-clone\n    // 1. Let « out1, out2 » be the result of teeing body’s stream.\n    const [out1, out2] = body.stream.tee();\n    // 2. Set body’s stream to out1.\n    body.stream = out1;\n    // 3. Return a body whose stream is out2 and other members are copied from body.\n    return {\n        stream: out2,\n        length: body.length,\n        source: body.source\n    };\n}\nfunction throwIfAborted(state) {\n    if (state.aborted) {\n        throw new DOMException('The operation was aborted.', 'AbortError');\n    }\n}\nfunction bodyMixinMethods(instance) {\n    const methods = {\n        blob () {\n            // The blob() method steps are to return the result of\n            // running consume body with this and the following step\n            // given a byte sequence bytes: return a Blob whose\n            // contents are bytes and whose type attribute is this’s\n            // MIME type.\n            return consumeBody(this, (bytes)=>{\n                let mimeType = bodyMimeType(this);\n                if (mimeType === null) {\n                    mimeType = '';\n                } else if (mimeType) {\n                    mimeType = serializeAMimeType(mimeType);\n                }\n                // Return a Blob whose contents are bytes and type attribute\n                // is mimeType.\n                return new Blob([\n                    bytes\n                ], {\n                    type: mimeType\n                });\n            }, instance);\n        },\n        arrayBuffer () {\n            // The arrayBuffer() method steps are to return the result\n            // of running consume body with this and the following step\n            // given a byte sequence bytes: return a new ArrayBuffer\n            // whose contents are bytes.\n            return consumeBody(this, (bytes)=>{\n                return new Uint8Array(bytes).buffer;\n            }, instance);\n        },\n        text () {\n            // The text() method steps are to return the result of running\n            // consume body with this and UTF-8 decode.\n            return consumeBody(this, utf8DecodeBytes, instance);\n        },\n        json () {\n            // The json() method steps are to return the result of running\n            // consume body with this and parse JSON from bytes.\n            return consumeBody(this, parseJSONFromBytes, instance);\n        },\n        formData () {\n            // The formData() method steps are to return the result of running\n            // consume body with this and the following step given a byte sequence bytes:\n            return consumeBody(this, (value)=>{\n                // 1. Let mimeType be the result of get the MIME type with this.\n                const mimeType = bodyMimeType(this);\n                // 2. If mimeType is non-null, then switch on mimeType’s essence and run\n                //    the corresponding steps:\n                if (mimeType !== null) {\n                    switch(mimeType.essence){\n                        case 'multipart/form-data':\n                            {\n                                // 1. ... [long step]\n                                const parsed = multipartFormDataParser(value, mimeType);\n                                // 2. If that fails for some reason, then throw a TypeError.\n                                if (parsed === 'failure') {\n                                    throw new TypeError('Failed to parse body as FormData.');\n                                }\n                                // 3. Return a new FormData object, appending each entry,\n                                //    resulting from the parsing operation, to its entry list.\n                                const fd = new FormData();\n                                fd[kState] = parsed;\n                                return fd;\n                            }\n                        case 'application/x-www-form-urlencoded':\n                            {\n                                // 1. Let entries be the result of parsing bytes.\n                                const entries = new URLSearchParams(value.toString());\n                                // 2. If entries is failure, then throw a TypeError.\n                                // 3. Return a new FormData object whose entry list is entries.\n                                const fd = new FormData();\n                                for (const [name, value] of entries){\n                                    fd.append(name, value);\n                                }\n                                return fd;\n                            }\n                    }\n                }\n                // 3. Throw a TypeError.\n                throw new TypeError('Content-Type was not one of \"multipart/form-data\" or \"application/x-www-form-urlencoded\".');\n            }, instance);\n        },\n        bytes () {\n            // The bytes() method steps are to return the result of running consume body\n            // with this and the following step given a byte sequence bytes: return the\n            // result of creating a Uint8Array from bytes in this’s relevant realm.\n            return consumeBody(this, (bytes)=>{\n                return new Uint8Array(bytes);\n            }, instance);\n        }\n    };\n    return methods;\n}\nfunction mixinBody(prototype) {\n    Object.assign(prototype.prototype, bodyMixinMethods(prototype));\n}\n/**\n * @see https://fetch.spec.whatwg.org/#concept-body-consume-body\n * @param {Response|Request} object\n * @param {(value: unknown) => unknown} convertBytesToJSValue\n * @param {Response|Request} instance\n */ async function consumeBody(object, convertBytesToJSValue, instance) {\n    webidl.brandCheck(object, instance);\n    // 1. If object is unusable, then return a promise rejected\n    //    with a TypeError.\n    if (bodyUnusable(object[kState].body)) {\n        throw new TypeError('Body is unusable: Body has already been read');\n    }\n    throwIfAborted(object[kState]);\n    // 2. Let promise be a new promise.\n    const promise = createDeferredPromise();\n    // 3. Let errorSteps given error be to reject promise with error.\n    const errorSteps = (error)=>promise.reject(error);\n    // 4. Let successSteps given a byte sequence data be to resolve\n    //    promise with the result of running convertBytesToJSValue\n    //    with data. If that threw an exception, then run errorSteps\n    //    with that exception.\n    const successSteps = (data)=>{\n        try {\n            promise.resolve(convertBytesToJSValue(data));\n        } catch (e) {\n            errorSteps(e);\n        }\n    };\n    // 5. If object’s body is null, then run successSteps with an\n    //    empty byte sequence.\n    if (object[kState].body == null) {\n        successSteps(Buffer.allocUnsafe(0));\n        return promise.promise;\n    }\n    // 6. Otherwise, fully read object’s body given successSteps,\n    //    errorSteps, and object’s relevant global object.\n    await fullyReadBody(object[kState].body, successSteps, errorSteps);\n    // 7. Return promise.\n    return promise.promise;\n}\n// https://fetch.spec.whatwg.org/#body-unusable\nfunction bodyUnusable(body) {\n    // An object including the Body interface mixin is\n    // said to be unusable if its body is non-null and\n    // its body’s stream is disturbed or locked.\n    return body != null && (body.stream.locked || util.isDisturbed(body.stream));\n}\n/**\n * @see https://infra.spec.whatwg.org/#parse-json-bytes-to-a-javascript-value\n * @param {Uint8Array} bytes\n */ function parseJSONFromBytes(bytes) {\n    return JSON.parse(utf8DecodeBytes(bytes));\n}\n/**\n * @see https://fetch.spec.whatwg.org/#concept-body-mime-type\n * @param {import('./response').Response|import('./request').Request} requestOrResponse\n */ function bodyMimeType(requestOrResponse) {\n    // 1. Let headers be null.\n    // 2. If requestOrResponse is a Request object, then set headers to requestOrResponse’s request’s header list.\n    // 3. Otherwise, set headers to requestOrResponse’s response’s header list.\n    /** @type {import('./headers').HeadersList} */ const headers = requestOrResponse[kState].headersList;\n    // 4. Let mimeType be the result of extracting a MIME type from headers.\n    const mimeType = extractMimeType(headers);\n    // 5. If mimeType is failure, then return null.\n    if (mimeType === 'failure') {\n        return null;\n    }\n    // 6. Return mimeType.\n    return mimeType;\n}\nmodule.exports = {\n    extractBody,\n    safelyExtractBody,\n    cloneBody,\n    mixinBody\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/fetch/body.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/fetch/constants.js":
/*!********************************************************!*\
  !*** ./node_modules/undici/lib/web/fetch/constants.js ***!
  \********************************************************/
/***/ ((module) => {

eval("\nconst corsSafeListedMethods = [\n    'GET',\n    'HEAD',\n    'POST'\n];\nconst corsSafeListedMethodsSet = new Set(corsSafeListedMethods);\nconst nullBodyStatus = [\n    101,\n    204,\n    205,\n    304\n];\nconst redirectStatus = [\n    301,\n    302,\n    303,\n    307,\n    308\n];\nconst redirectStatusSet = new Set(redirectStatus);\n// https://fetch.spec.whatwg.org/#block-bad-port\nconst badPorts = [\n    '1',\n    '7',\n    '9',\n    '11',\n    '13',\n    '15',\n    '17',\n    '19',\n    '20',\n    '21',\n    '22',\n    '23',\n    '25',\n    '37',\n    '42',\n    '43',\n    '53',\n    '69',\n    '77',\n    '79',\n    '87',\n    '95',\n    '101',\n    '102',\n    '103',\n    '104',\n    '109',\n    '110',\n    '111',\n    '113',\n    '115',\n    '117',\n    '119',\n    '123',\n    '135',\n    '137',\n    '139',\n    '143',\n    '161',\n    '179',\n    '389',\n    '427',\n    '465',\n    '512',\n    '513',\n    '514',\n    '515',\n    '526',\n    '530',\n    '531',\n    '532',\n    '540',\n    '548',\n    '554',\n    '556',\n    '563',\n    '587',\n    '601',\n    '636',\n    '989',\n    '990',\n    '993',\n    '995',\n    '1719',\n    '1720',\n    '1723',\n    '2049',\n    '3659',\n    '4045',\n    '4190',\n    '5060',\n    '5061',\n    '6000',\n    '6566',\n    '6665',\n    '6666',\n    '6667',\n    '6668',\n    '6669',\n    '6679',\n    '6697',\n    '10080'\n];\nconst badPortsSet = new Set(badPorts);\n// https://w3c.github.io/webappsec-referrer-policy/#referrer-policies\nconst referrerPolicy = [\n    '',\n    'no-referrer',\n    'no-referrer-when-downgrade',\n    'same-origin',\n    'origin',\n    'strict-origin',\n    'origin-when-cross-origin',\n    'strict-origin-when-cross-origin',\n    'unsafe-url'\n];\nconst referrerPolicySet = new Set(referrerPolicy);\nconst requestRedirect = [\n    'follow',\n    'manual',\n    'error'\n];\nconst safeMethods = [\n    'GET',\n    'HEAD',\n    'OPTIONS',\n    'TRACE'\n];\nconst safeMethodsSet = new Set(safeMethods);\nconst requestMode = [\n    'navigate',\n    'same-origin',\n    'no-cors',\n    'cors'\n];\nconst requestCredentials = [\n    'omit',\n    'same-origin',\n    'include'\n];\nconst requestCache = [\n    'default',\n    'no-store',\n    'reload',\n    'no-cache',\n    'force-cache',\n    'only-if-cached'\n];\n// https://fetch.spec.whatwg.org/#request-body-header-name\nconst requestBodyHeader = [\n    'content-encoding',\n    'content-language',\n    'content-location',\n    'content-type',\n    // See https://github.com/nodejs/undici/issues/2021\n    // 'Content-Length' is a forbidden header name, which is typically\n    // removed in the Headers implementation. However, undici doesn't\n    // filter out headers, so we add it here.\n    'content-length'\n];\n// https://fetch.spec.whatwg.org/#enumdef-requestduplex\nconst requestDuplex = [\n    'half'\n];\n// http://fetch.spec.whatwg.org/#forbidden-method\nconst forbiddenMethods = [\n    'CONNECT',\n    'TRACE',\n    'TRACK'\n];\nconst forbiddenMethodsSet = new Set(forbiddenMethods);\nconst subresource = [\n    'audio',\n    'audioworklet',\n    'font',\n    'image',\n    'manifest',\n    'paintworklet',\n    'script',\n    'style',\n    'track',\n    'video',\n    'xslt',\n    ''\n];\nconst subresourceSet = new Set(subresource);\nmodule.exports = {\n    subresource,\n    forbiddenMethods,\n    requestBodyHeader,\n    referrerPolicy,\n    requestRedirect,\n    requestMode,\n    requestCredentials,\n    requestCache,\n    redirectStatus,\n    corsSafeListedMethods,\n    nullBodyStatus,\n    safeMethods,\n    badPorts,\n    requestDuplex,\n    subresourceSet,\n    badPortsSet,\n    redirectStatusSet,\n    corsSafeListedMethodsSet,\n    safeMethodsSet,\n    forbiddenMethodsSet,\n    referrerPolicySet\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi93ZWIvZmV0Y2gvY29uc3RhbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTUEsd0JBQXdCO0lBQUM7SUFBTztJQUFRO0NBQU87QUFDckQsTUFBTUMsMkJBQTJCLElBQUlDLElBQUlGO0FBRXpDLE1BQU1HLGlCQUFpQjtJQUFDO0lBQUs7SUFBSztJQUFLO0NBQUk7QUFFM0MsTUFBTUMsaUJBQWlCO0lBQUM7SUFBSztJQUFLO0lBQUs7SUFBSztDQUFJO0FBQ2hELE1BQU1DLG9CQUFvQixJQUFJSCxJQUFJRTtBQUVsQyxnREFBZ0Q7QUFDaEQsTUFBTUUsV0FBVztJQUNmO0lBQUs7SUFBSztJQUFLO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFDL0c7SUFBTTtJQUFNO0lBQU87SUFBTztJQUFPO0lBQU87SUFBTztJQUFPO0lBQU87SUFBTztJQUFPO0lBQU87SUFBTztJQUFPO0lBQU87SUFDdkc7SUFBTztJQUFPO0lBQU87SUFBTztJQUFPO0lBQU87SUFBTztJQUFPO0lBQU87SUFBTztJQUFPO0lBQU87SUFBTztJQUFPO0lBQ2xHO0lBQU87SUFBTztJQUFPO0lBQU87SUFBTztJQUFPO0lBQU87SUFBTztJQUFPO0lBQU87SUFBTztJQUFPO0lBQVE7SUFBUTtJQUNwRztJQUFRO0lBQVE7SUFBUTtJQUFRO0lBQVE7SUFBUTtJQUFRO0lBQVE7SUFBUTtJQUFRO0lBQVE7SUFBUTtJQUFRO0lBQ3hHO0lBQVE7Q0FDVDtBQUVELE1BQU1DLGNBQWMsSUFBSUwsSUFBSUk7QUFFNUIscUVBQXFFO0FBQ3JFLE1BQU1FLGlCQUFpQjtJQUNyQjtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7Q0FDRDtBQUNELE1BQU1DLG9CQUFvQixJQUFJUCxJQUFJTTtBQUVsQyxNQUFNRSxrQkFBa0I7SUFBQztJQUFVO0lBQVU7Q0FBUTtBQUVyRCxNQUFNQyxjQUFjO0lBQUM7SUFBTztJQUFRO0lBQVc7Q0FBUTtBQUN2RCxNQUFNQyxpQkFBaUIsSUFBSVYsSUFBSVM7QUFFL0IsTUFBTUUsY0FBYztJQUFDO0lBQVk7SUFBZTtJQUFXO0NBQU87QUFFbEUsTUFBTUMscUJBQXFCO0lBQUM7SUFBUTtJQUFlO0NBQVU7QUFFN0QsTUFBTUMsZUFBZTtJQUNuQjtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7Q0FDRDtBQUVELDBEQUEwRDtBQUMxRCxNQUFNQyxvQkFBb0I7SUFDeEI7SUFDQTtJQUNBO0lBQ0E7SUFDQSxtREFBbUQ7SUFDbkQsa0VBQWtFO0lBQ2xFLGlFQUFpRTtJQUNqRSx5Q0FBeUM7SUFDekM7Q0FDRDtBQUVELHVEQUF1RDtBQUN2RCxNQUFNQyxnQkFBZ0I7SUFDcEI7Q0FDRDtBQUVELGlEQUFpRDtBQUNqRCxNQUFNQyxtQkFBbUI7SUFBQztJQUFXO0lBQVM7Q0FBUTtBQUN0RCxNQUFNQyxzQkFBc0IsSUFBSWpCLElBQUlnQjtBQUVwQyxNQUFNRSxjQUFjO0lBQ2xCO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtDQUNEO0FBQ0QsTUFBTUMsaUJBQWlCLElBQUluQixJQUFJa0I7QUFFL0JFLE9BQU9DLE9BQU8sR0FBRztJQUNmSDtJQUNBRjtJQUNBRjtJQUNBUjtJQUNBRTtJQUNBRztJQUNBQztJQUNBQztJQUNBWDtJQUNBSjtJQUNBRztJQUNBUTtJQUNBTDtJQUNBVztJQUNBSTtJQUNBZDtJQUNBRjtJQUNBSjtJQUNBVztJQUNBTztJQUNBVjtBQUNGIiwic291cmNlcyI6WyJEOlxcSGVsaXhcXG5vZGVfbW9kdWxlc1xcdW5kaWNpXFxsaWJcXHdlYlxcZmV0Y2hcXGNvbnN0YW50cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgY29yc1NhZmVMaXN0ZWRNZXRob2RzID0gWydHRVQnLCAnSEVBRCcsICdQT1NUJ11cbmNvbnN0IGNvcnNTYWZlTGlzdGVkTWV0aG9kc1NldCA9IG5ldyBTZXQoY29yc1NhZmVMaXN0ZWRNZXRob2RzKVxuXG5jb25zdCBudWxsQm9keVN0YXR1cyA9IFsxMDEsIDIwNCwgMjA1LCAzMDRdXG5cbmNvbnN0IHJlZGlyZWN0U3RhdHVzID0gWzMwMSwgMzAyLCAzMDMsIDMwNywgMzA4XVxuY29uc3QgcmVkaXJlY3RTdGF0dXNTZXQgPSBuZXcgU2V0KHJlZGlyZWN0U3RhdHVzKVxuXG4vLyBodHRwczovL2ZldGNoLnNwZWMud2hhdHdnLm9yZy8jYmxvY2stYmFkLXBvcnRcbmNvbnN0IGJhZFBvcnRzID0gW1xuICAnMScsICc3JywgJzknLCAnMTEnLCAnMTMnLCAnMTUnLCAnMTcnLCAnMTknLCAnMjAnLCAnMjEnLCAnMjInLCAnMjMnLCAnMjUnLCAnMzcnLCAnNDInLCAnNDMnLCAnNTMnLCAnNjknLCAnNzcnLCAnNzknLFxuICAnODcnLCAnOTUnLCAnMTAxJywgJzEwMicsICcxMDMnLCAnMTA0JywgJzEwOScsICcxMTAnLCAnMTExJywgJzExMycsICcxMTUnLCAnMTE3JywgJzExOScsICcxMjMnLCAnMTM1JywgJzEzNycsXG4gICcxMzknLCAnMTQzJywgJzE2MScsICcxNzknLCAnMzg5JywgJzQyNycsICc0NjUnLCAnNTEyJywgJzUxMycsICc1MTQnLCAnNTE1JywgJzUyNicsICc1MzAnLCAnNTMxJywgJzUzMicsXG4gICc1NDAnLCAnNTQ4JywgJzU1NCcsICc1NTYnLCAnNTYzJywgJzU4NycsICc2MDEnLCAnNjM2JywgJzk4OScsICc5OTAnLCAnOTkzJywgJzk5NScsICcxNzE5JywgJzE3MjAnLCAnMTcyMycsXG4gICcyMDQ5JywgJzM2NTknLCAnNDA0NScsICc0MTkwJywgJzUwNjAnLCAnNTA2MScsICc2MDAwJywgJzY1NjYnLCAnNjY2NScsICc2NjY2JywgJzY2NjcnLCAnNjY2OCcsICc2NjY5JywgJzY2NzknLFxuICAnNjY5NycsICcxMDA4MCdcbl1cblxuY29uc3QgYmFkUG9ydHNTZXQgPSBuZXcgU2V0KGJhZFBvcnRzKVxuXG4vLyBodHRwczovL3czYy5naXRodWIuaW8vd2ViYXBwc2VjLXJlZmVycmVyLXBvbGljeS8jcmVmZXJyZXItcG9saWNpZXNcbmNvbnN0IHJlZmVycmVyUG9saWN5ID0gW1xuICAnJyxcbiAgJ25vLXJlZmVycmVyJyxcbiAgJ25vLXJlZmVycmVyLXdoZW4tZG93bmdyYWRlJyxcbiAgJ3NhbWUtb3JpZ2luJyxcbiAgJ29yaWdpbicsXG4gICdzdHJpY3Qtb3JpZ2luJyxcbiAgJ29yaWdpbi13aGVuLWNyb3NzLW9yaWdpbicsXG4gICdzdHJpY3Qtb3JpZ2luLXdoZW4tY3Jvc3Mtb3JpZ2luJyxcbiAgJ3Vuc2FmZS11cmwnXG5dXG5jb25zdCByZWZlcnJlclBvbGljeVNldCA9IG5ldyBTZXQocmVmZXJyZXJQb2xpY3kpXG5cbmNvbnN0IHJlcXVlc3RSZWRpcmVjdCA9IFsnZm9sbG93JywgJ21hbnVhbCcsICdlcnJvciddXG5cbmNvbnN0IHNhZmVNZXRob2RzID0gWydHRVQnLCAnSEVBRCcsICdPUFRJT05TJywgJ1RSQUNFJ11cbmNvbnN0IHNhZmVNZXRob2RzU2V0ID0gbmV3IFNldChzYWZlTWV0aG9kcylcblxuY29uc3QgcmVxdWVzdE1vZGUgPSBbJ25hdmlnYXRlJywgJ3NhbWUtb3JpZ2luJywgJ25vLWNvcnMnLCAnY29ycyddXG5cbmNvbnN0IHJlcXVlc3RDcmVkZW50aWFscyA9IFsnb21pdCcsICdzYW1lLW9yaWdpbicsICdpbmNsdWRlJ11cblxuY29uc3QgcmVxdWVzdENhY2hlID0gW1xuICAnZGVmYXVsdCcsXG4gICduby1zdG9yZScsXG4gICdyZWxvYWQnLFxuICAnbm8tY2FjaGUnLFxuICAnZm9yY2UtY2FjaGUnLFxuICAnb25seS1pZi1jYWNoZWQnXG5dXG5cbi8vIGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNyZXF1ZXN0LWJvZHktaGVhZGVyLW5hbWVcbmNvbnN0IHJlcXVlc3RCb2R5SGVhZGVyID0gW1xuICAnY29udGVudC1lbmNvZGluZycsXG4gICdjb250ZW50LWxhbmd1YWdlJyxcbiAgJ2NvbnRlbnQtbG9jYXRpb24nLFxuICAnY29udGVudC10eXBlJyxcbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvdW5kaWNpL2lzc3Vlcy8yMDIxXG4gIC8vICdDb250ZW50LUxlbmd0aCcgaXMgYSBmb3JiaWRkZW4gaGVhZGVyIG5hbWUsIHdoaWNoIGlzIHR5cGljYWxseVxuICAvLyByZW1vdmVkIGluIHRoZSBIZWFkZXJzIGltcGxlbWVudGF0aW9uLiBIb3dldmVyLCB1bmRpY2kgZG9lc24ndFxuICAvLyBmaWx0ZXIgb3V0IGhlYWRlcnMsIHNvIHdlIGFkZCBpdCBoZXJlLlxuICAnY29udGVudC1sZW5ndGgnXG5dXG5cbi8vIGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNlbnVtZGVmLXJlcXVlc3RkdXBsZXhcbmNvbnN0IHJlcXVlc3REdXBsZXggPSBbXG4gICdoYWxmJ1xuXVxuXG4vLyBodHRwOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNmb3JiaWRkZW4tbWV0aG9kXG5jb25zdCBmb3JiaWRkZW5NZXRob2RzID0gWydDT05ORUNUJywgJ1RSQUNFJywgJ1RSQUNLJ11cbmNvbnN0IGZvcmJpZGRlbk1ldGhvZHNTZXQgPSBuZXcgU2V0KGZvcmJpZGRlbk1ldGhvZHMpXG5cbmNvbnN0IHN1YnJlc291cmNlID0gW1xuICAnYXVkaW8nLFxuICAnYXVkaW93b3JrbGV0JyxcbiAgJ2ZvbnQnLFxuICAnaW1hZ2UnLFxuICAnbWFuaWZlc3QnLFxuICAncGFpbnR3b3JrbGV0JyxcbiAgJ3NjcmlwdCcsXG4gICdzdHlsZScsXG4gICd0cmFjaycsXG4gICd2aWRlbycsXG4gICd4c2x0JyxcbiAgJydcbl1cbmNvbnN0IHN1YnJlc291cmNlU2V0ID0gbmV3IFNldChzdWJyZXNvdXJjZSlcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHN1YnJlc291cmNlLFxuICBmb3JiaWRkZW5NZXRob2RzLFxuICByZXF1ZXN0Qm9keUhlYWRlcixcbiAgcmVmZXJyZXJQb2xpY3ksXG4gIHJlcXVlc3RSZWRpcmVjdCxcbiAgcmVxdWVzdE1vZGUsXG4gIHJlcXVlc3RDcmVkZW50aWFscyxcbiAgcmVxdWVzdENhY2hlLFxuICByZWRpcmVjdFN0YXR1cyxcbiAgY29yc1NhZmVMaXN0ZWRNZXRob2RzLFxuICBudWxsQm9keVN0YXR1cyxcbiAgc2FmZU1ldGhvZHMsXG4gIGJhZFBvcnRzLFxuICByZXF1ZXN0RHVwbGV4LFxuICBzdWJyZXNvdXJjZVNldCxcbiAgYmFkUG9ydHNTZXQsXG4gIHJlZGlyZWN0U3RhdHVzU2V0LFxuICBjb3JzU2FmZUxpc3RlZE1ldGhvZHNTZXQsXG4gIHNhZmVNZXRob2RzU2V0LFxuICBmb3JiaWRkZW5NZXRob2RzU2V0LFxuICByZWZlcnJlclBvbGljeVNldFxufVxuIl0sIm5hbWVzIjpbImNvcnNTYWZlTGlzdGVkTWV0aG9kcyIsImNvcnNTYWZlTGlzdGVkTWV0aG9kc1NldCIsIlNldCIsIm51bGxCb2R5U3RhdHVzIiwicmVkaXJlY3RTdGF0dXMiLCJyZWRpcmVjdFN0YXR1c1NldCIsImJhZFBvcnRzIiwiYmFkUG9ydHNTZXQiLCJyZWZlcnJlclBvbGljeSIsInJlZmVycmVyUG9saWN5U2V0IiwicmVxdWVzdFJlZGlyZWN0Iiwic2FmZU1ldGhvZHMiLCJzYWZlTWV0aG9kc1NldCIsInJlcXVlc3RNb2RlIiwicmVxdWVzdENyZWRlbnRpYWxzIiwicmVxdWVzdENhY2hlIiwicmVxdWVzdEJvZHlIZWFkZXIiLCJyZXF1ZXN0RHVwbGV4IiwiZm9yYmlkZGVuTWV0aG9kcyIsImZvcmJpZGRlbk1ldGhvZHNTZXQiLCJzdWJyZXNvdXJjZSIsInN1YnJlc291cmNlU2V0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/fetch/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/fetch/data-url.js":
/*!*******************************************************!*\
  !*** ./node_modules/undici/lib/web/fetch/data-url.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst assert = __webpack_require__(/*! node:assert */ \"node:assert\");\nconst encoder = new TextEncoder();\n/**\n * @see https://mimesniff.spec.whatwg.org/#http-token-code-point\n */ const HTTP_TOKEN_CODEPOINTS = /^[!#$%&'*+\\-.^_|~A-Za-z0-9]+$/;\nconst HTTP_WHITESPACE_REGEX = /[\\u000A\\u000D\\u0009\\u0020]/ // eslint-disable-line\n;\nconst ASCII_WHITESPACE_REPLACE_REGEX = /[\\u0009\\u000A\\u000C\\u000D\\u0020]/g // eslint-disable-line\n;\n/**\n * @see https://mimesniff.spec.whatwg.org/#http-quoted-string-token-code-point\n */ const HTTP_QUOTED_STRING_TOKENS = /^[\\u0009\\u0020-\\u007E\\u0080-\\u00FF]+$/ // eslint-disable-line\n;\n// https://fetch.spec.whatwg.org/#data-url-processor\n/** @param {URL} dataURL */ function dataURLProcessor(dataURL) {\n    // 1. Assert: dataURL’s scheme is \"data\".\n    assert(dataURL.protocol === 'data:');\n    // 2. Let input be the result of running the URL\n    // serializer on dataURL with exclude fragment\n    // set to true.\n    let input = URLSerializer(dataURL, true);\n    // 3. Remove the leading \"data:\" string from input.\n    input = input.slice(5);\n    // 4. Let position point at the start of input.\n    const position = {\n        position: 0\n    };\n    // 5. Let mimeType be the result of collecting a\n    // sequence of code points that are not equal\n    // to U+002C (,), given position.\n    let mimeType = collectASequenceOfCodePointsFast(',', input, position);\n    // 6. Strip leading and trailing ASCII whitespace\n    // from mimeType.\n    // Undici implementation note: we need to store the\n    // length because if the mimetype has spaces removed,\n    // the wrong amount will be sliced from the input in\n    // step #9\n    const mimeTypeLength = mimeType.length;\n    mimeType = removeASCIIWhitespace(mimeType, true, true);\n    // 7. If position is past the end of input, then\n    // return failure\n    if (position.position >= input.length) {\n        return 'failure';\n    }\n    // 8. Advance position by 1.\n    position.position++;\n    // 9. Let encodedBody be the remainder of input.\n    const encodedBody = input.slice(mimeTypeLength + 1);\n    // 10. Let body be the percent-decoding of encodedBody.\n    let body = stringPercentDecode(encodedBody);\n    // 11. If mimeType ends with U+003B (;), followed by\n    // zero or more U+0020 SPACE, followed by an ASCII\n    // case-insensitive match for \"base64\", then:\n    if (/;(\\u0020){0,}base64$/i.test(mimeType)) {\n        // 1. Let stringBody be the isomorphic decode of body.\n        const stringBody = isomorphicDecode(body);\n        // 2. Set body to the forgiving-base64 decode of\n        // stringBody.\n        body = forgivingBase64(stringBody);\n        // 3. If body is failure, then return failure.\n        if (body === 'failure') {\n            return 'failure';\n        }\n        // 4. Remove the last 6 code points from mimeType.\n        mimeType = mimeType.slice(0, -6);\n        // 5. Remove trailing U+0020 SPACE code points from mimeType,\n        // if any.\n        mimeType = mimeType.replace(/(\\u0020)+$/, '');\n        // 6. Remove the last U+003B (;) code point from mimeType.\n        mimeType = mimeType.slice(0, -1);\n    }\n    // 12. If mimeType starts with U+003B (;), then prepend\n    // \"text/plain\" to mimeType.\n    if (mimeType.startsWith(';')) {\n        mimeType = 'text/plain' + mimeType;\n    }\n    // 13. Let mimeTypeRecord be the result of parsing\n    // mimeType.\n    let mimeTypeRecord = parseMIMEType(mimeType);\n    // 14. If mimeTypeRecord is failure, then set\n    // mimeTypeRecord to text/plain;charset=US-ASCII.\n    if (mimeTypeRecord === 'failure') {\n        mimeTypeRecord = parseMIMEType('text/plain;charset=US-ASCII');\n    }\n    // 15. Return a new data: URL struct whose MIME\n    // type is mimeTypeRecord and body is body.\n    // https://fetch.spec.whatwg.org/#data-url-struct\n    return {\n        mimeType: mimeTypeRecord,\n        body\n    };\n}\n// https://url.spec.whatwg.org/#concept-url-serializer\n/**\n * @param {URL} url\n * @param {boolean} excludeFragment\n */ function URLSerializer(url, excludeFragment = false) {\n    if (!excludeFragment) {\n        return url.href;\n    }\n    const href = url.href;\n    const hashLength = url.hash.length;\n    const serialized = hashLength === 0 ? href : href.substring(0, href.length - hashLength);\n    if (!hashLength && href.endsWith('#')) {\n        return serialized.slice(0, -1);\n    }\n    return serialized;\n}\n// https://infra.spec.whatwg.org/#collect-a-sequence-of-code-points\n/**\n * @param {(char: string) => boolean} condition\n * @param {string} input\n * @param {{ position: number }} position\n */ function collectASequenceOfCodePoints(condition, input, position) {\n    // 1. Let result be the empty string.\n    let result = '';\n    // 2. While position doesn’t point past the end of input and the\n    // code point at position within input meets the condition condition:\n    while(position.position < input.length && condition(input[position.position])){\n        // 1. Append that code point to the end of result.\n        result += input[position.position];\n        // 2. Advance position by 1.\n        position.position++;\n    }\n    // 3. Return result.\n    return result;\n}\n/**\n * A faster collectASequenceOfCodePoints that only works when comparing a single character.\n * @param {string} char\n * @param {string} input\n * @param {{ position: number }} position\n */ function collectASequenceOfCodePointsFast(char, input, position) {\n    const idx = input.indexOf(char, position.position);\n    const start = position.position;\n    if (idx === -1) {\n        position.position = input.length;\n        return input.slice(start);\n    }\n    position.position = idx;\n    return input.slice(start, position.position);\n}\n// https://url.spec.whatwg.org/#string-percent-decode\n/** @param {string} input */ function stringPercentDecode(input) {\n    // 1. Let bytes be the UTF-8 encoding of input.\n    const bytes = encoder.encode(input);\n    // 2. Return the percent-decoding of bytes.\n    return percentDecode(bytes);\n}\n/**\n * @param {number} byte\n */ function isHexCharByte(byte) {\n    // 0-9 A-F a-f\n    return byte >= 0x30 && byte <= 0x39 || byte >= 0x41 && byte <= 0x46 || byte >= 0x61 && byte <= 0x66;\n}\n/**\n * @param {number} byte\n */ function hexByteToNumber(byte) {\n    return(// 0-9\n    byte >= 0x30 && byte <= 0x39 ? byte - 48 : (byte & 0xDF) - 55);\n}\n// https://url.spec.whatwg.org/#percent-decode\n/** @param {Uint8Array} input */ function percentDecode(input) {\n    const length = input.length;\n    // 1. Let output be an empty byte sequence.\n    /** @type {Uint8Array} */ const output = new Uint8Array(length);\n    let j = 0;\n    // 2. For each byte byte in input:\n    for(let i = 0; i < length; ++i){\n        const byte = input[i];\n        // 1. If byte is not 0x25 (%), then append byte to output.\n        if (byte !== 0x25) {\n            output[j++] = byte;\n        // 2. Otherwise, if byte is 0x25 (%) and the next two bytes\n        // after byte in input are not in the ranges\n        // 0x30 (0) to 0x39 (9), 0x41 (A) to 0x46 (F),\n        // and 0x61 (a) to 0x66 (f), all inclusive, append byte\n        // to output.\n        } else if (byte === 0x25 && !(isHexCharByte(input[i + 1]) && isHexCharByte(input[i + 2]))) {\n            output[j++] = 0x25;\n        // 3. Otherwise:\n        } else {\n            // 1. Let bytePoint be the two bytes after byte in input,\n            // decoded, and then interpreted as hexadecimal number.\n            // 2. Append a byte whose value is bytePoint to output.\n            output[j++] = hexByteToNumber(input[i + 1]) << 4 | hexByteToNumber(input[i + 2]);\n            // 3. Skip the next two bytes in input.\n            i += 2;\n        }\n    }\n    // 3. Return output.\n    return length === j ? output : output.subarray(0, j);\n}\n// https://mimesniff.spec.whatwg.org/#parse-a-mime-type\n/** @param {string} input */ function parseMIMEType(input) {\n    // 1. Remove any leading and trailing HTTP whitespace\n    // from input.\n    input = removeHTTPWhitespace(input, true, true);\n    // 2. Let position be a position variable for input,\n    // initially pointing at the start of input.\n    const position = {\n        position: 0\n    };\n    // 3. Let type be the result of collecting a sequence\n    // of code points that are not U+002F (/) from\n    // input, given position.\n    const type = collectASequenceOfCodePointsFast('/', input, position);\n    // 4. If type is the empty string or does not solely\n    // contain HTTP token code points, then return failure.\n    // https://mimesniff.spec.whatwg.org/#http-token-code-point\n    if (type.length === 0 || !HTTP_TOKEN_CODEPOINTS.test(type)) {\n        return 'failure';\n    }\n    // 5. If position is past the end of input, then return\n    // failure\n    if (position.position > input.length) {\n        return 'failure';\n    }\n    // 6. Advance position by 1. (This skips past U+002F (/).)\n    position.position++;\n    // 7. Let subtype be the result of collecting a sequence of\n    // code points that are not U+003B (;) from input, given\n    // position.\n    let subtype = collectASequenceOfCodePointsFast(';', input, position);\n    // 8. Remove any trailing HTTP whitespace from subtype.\n    subtype = removeHTTPWhitespace(subtype, false, true);\n    // 9. If subtype is the empty string or does not solely\n    // contain HTTP token code points, then return failure.\n    if (subtype.length === 0 || !HTTP_TOKEN_CODEPOINTS.test(subtype)) {\n        return 'failure';\n    }\n    const typeLowercase = type.toLowerCase();\n    const subtypeLowercase = subtype.toLowerCase();\n    // 10. Let mimeType be a new MIME type record whose type\n    // is type, in ASCII lowercase, and subtype is subtype,\n    // in ASCII lowercase.\n    // https://mimesniff.spec.whatwg.org/#mime-type\n    const mimeType = {\n        type: typeLowercase,\n        subtype: subtypeLowercase,\n        /** @type {Map<string, string>} */ parameters: new Map(),\n        // https://mimesniff.spec.whatwg.org/#mime-type-essence\n        essence: `${typeLowercase}/${subtypeLowercase}`\n    };\n    // 11. While position is not past the end of input:\n    while(position.position < input.length){\n        // 1. Advance position by 1. (This skips past U+003B (;).)\n        position.position++;\n        // 2. Collect a sequence of code points that are HTTP\n        // whitespace from input given position.\n        collectASequenceOfCodePoints(// https://fetch.spec.whatwg.org/#http-whitespace\n        (char)=>HTTP_WHITESPACE_REGEX.test(char), input, position);\n        // 3. Let parameterName be the result of collecting a\n        // sequence of code points that are not U+003B (;)\n        // or U+003D (=) from input, given position.\n        let parameterName = collectASequenceOfCodePoints((char)=>char !== ';' && char !== '=', input, position);\n        // 4. Set parameterName to parameterName, in ASCII\n        // lowercase.\n        parameterName = parameterName.toLowerCase();\n        // 5. If position is not past the end of input, then:\n        if (position.position < input.length) {\n            // 1. If the code point at position within input is\n            // U+003B (;), then continue.\n            if (input[position.position] === ';') {\n                continue;\n            }\n            // 2. Advance position by 1. (This skips past U+003D (=).)\n            position.position++;\n        }\n        // 6. If position is past the end of input, then break.\n        if (position.position > input.length) {\n            break;\n        }\n        // 7. Let parameterValue be null.\n        let parameterValue = null;\n        // 8. If the code point at position within input is\n        // U+0022 (\"), then:\n        if (input[position.position] === '\"') {\n            // 1. Set parameterValue to the result of collecting\n            // an HTTP quoted string from input, given position\n            // and the extract-value flag.\n            parameterValue = collectAnHTTPQuotedString(input, position, true);\n            // 2. Collect a sequence of code points that are not\n            // U+003B (;) from input, given position.\n            collectASequenceOfCodePointsFast(';', input, position);\n        // 9. Otherwise:\n        } else {\n            // 1. Set parameterValue to the result of collecting\n            // a sequence of code points that are not U+003B (;)\n            // from input, given position.\n            parameterValue = collectASequenceOfCodePointsFast(';', input, position);\n            // 2. Remove any trailing HTTP whitespace from parameterValue.\n            parameterValue = removeHTTPWhitespace(parameterValue, false, true);\n            // 3. If parameterValue is the empty string, then continue.\n            if (parameterValue.length === 0) {\n                continue;\n            }\n        }\n        // 10. If all of the following are true\n        // - parameterName is not the empty string\n        // - parameterName solely contains HTTP token code points\n        // - parameterValue solely contains HTTP quoted-string token code points\n        // - mimeType’s parameters[parameterName] does not exist\n        // then set mimeType’s parameters[parameterName] to parameterValue.\n        if (parameterName.length !== 0 && HTTP_TOKEN_CODEPOINTS.test(parameterName) && (parameterValue.length === 0 || HTTP_QUOTED_STRING_TOKENS.test(parameterValue)) && !mimeType.parameters.has(parameterName)) {\n            mimeType.parameters.set(parameterName, parameterValue);\n        }\n    }\n    // 12. Return mimeType.\n    return mimeType;\n}\n// https://infra.spec.whatwg.org/#forgiving-base64-decode\n/** @param {string} data */ function forgivingBase64(data) {\n    // 1. Remove all ASCII whitespace from data.\n    data = data.replace(ASCII_WHITESPACE_REPLACE_REGEX, ''); // eslint-disable-line\n    let dataLength = data.length;\n    // 2. If data’s code point length divides by 4 leaving\n    // no remainder, then:\n    if (dataLength % 4 === 0) {\n        // 1. If data ends with one or two U+003D (=) code points,\n        // then remove them from data.\n        if (data.charCodeAt(dataLength - 1) === 0x003D) {\n            --dataLength;\n            if (data.charCodeAt(dataLength - 1) === 0x003D) {\n                --dataLength;\n            }\n        }\n    }\n    // 3. If data’s code point length divides by 4 leaving\n    // a remainder of 1, then return failure.\n    if (dataLength % 4 === 1) {\n        return 'failure';\n    }\n    // 4. If data contains a code point that is not one of\n    //  U+002B (+)\n    //  U+002F (/)\n    //  ASCII alphanumeric\n    // then return failure.\n    if (/[^+/0-9A-Za-z]/.test(data.length === dataLength ? data : data.substring(0, dataLength))) {\n        return 'failure';\n    }\n    const buffer = Buffer.from(data, 'base64');\n    return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n}\n// https://fetch.spec.whatwg.org/#collect-an-http-quoted-string\n// tests: https://fetch.spec.whatwg.org/#example-http-quoted-string\n/**\n * @param {string} input\n * @param {{ position: number }} position\n * @param {boolean?} extractValue\n */ function collectAnHTTPQuotedString(input, position, extractValue) {\n    // 1. Let positionStart be position.\n    const positionStart = position.position;\n    // 2. Let value be the empty string.\n    let value = '';\n    // 3. Assert: the code point at position within input\n    // is U+0022 (\").\n    assert(input[position.position] === '\"');\n    // 4. Advance position by 1.\n    position.position++;\n    // 5. While true:\n    while(true){\n        // 1. Append the result of collecting a sequence of code points\n        // that are not U+0022 (\") or U+005C (\\) from input, given\n        // position, to value.\n        value += collectASequenceOfCodePoints((char)=>char !== '\"' && char !== '\\\\', input, position);\n        // 2. If position is past the end of input, then break.\n        if (position.position >= input.length) {\n            break;\n        }\n        // 3. Let quoteOrBackslash be the code point at position within\n        // input.\n        const quoteOrBackslash = input[position.position];\n        // 4. Advance position by 1.\n        position.position++;\n        // 5. If quoteOrBackslash is U+005C (\\), then:\n        if (quoteOrBackslash === '\\\\') {\n            // 1. If position is past the end of input, then append\n            // U+005C (\\) to value and break.\n            if (position.position >= input.length) {\n                value += '\\\\';\n                break;\n            }\n            // 2. Append the code point at position within input to value.\n            value += input[position.position];\n            // 3. Advance position by 1.\n            position.position++;\n        // 6. Otherwise:\n        } else {\n            // 1. Assert: quoteOrBackslash is U+0022 (\").\n            assert(quoteOrBackslash === '\"');\n            break;\n        }\n    }\n    // 6. If the extract-value flag is set, then return value.\n    if (extractValue) {\n        return value;\n    }\n    // 7. Return the code points from positionStart to position,\n    // inclusive, within input.\n    return input.slice(positionStart, position.position);\n}\n/**\n * @see https://mimesniff.spec.whatwg.org/#serialize-a-mime-type\n */ function serializeAMimeType(mimeType) {\n    assert(mimeType !== 'failure');\n    const { parameters, essence } = mimeType;\n    // 1. Let serialization be the concatenation of mimeType’s\n    //    type, U+002F (/), and mimeType’s subtype.\n    let serialization = essence;\n    // 2. For each name → value of mimeType’s parameters:\n    for (let [name, value] of parameters.entries()){\n        // 1. Append U+003B (;) to serialization.\n        serialization += ';';\n        // 2. Append name to serialization.\n        serialization += name;\n        // 3. Append U+003D (=) to serialization.\n        serialization += '=';\n        // 4. If value does not solely contain HTTP token code\n        //    points or value is the empty string, then:\n        if (!HTTP_TOKEN_CODEPOINTS.test(value)) {\n            // 1. Precede each occurrence of U+0022 (\") or\n            //    U+005C (\\) in value with U+005C (\\).\n            value = value.replace(/(\\\\|\")/g, '\\\\$1');\n            // 2. Prepend U+0022 (\") to value.\n            value = '\"' + value;\n            // 3. Append U+0022 (\") to value.\n            value += '\"';\n        }\n        // 5. Append value to serialization.\n        serialization += value;\n    }\n    // 3. Return serialization.\n    return serialization;\n}\n/**\n * @see https://fetch.spec.whatwg.org/#http-whitespace\n * @param {number} char\n */ function isHTTPWhiteSpace(char) {\n    // \"\\r\\n\\t \"\n    return char === 0x00d || char === 0x00a || char === 0x009 || char === 0x020;\n}\n/**\n * @see https://fetch.spec.whatwg.org/#http-whitespace\n * @param {string} str\n * @param {boolean} [leading=true]\n * @param {boolean} [trailing=true]\n */ function removeHTTPWhitespace(str, leading = true, trailing = true) {\n    return removeChars(str, leading, trailing, isHTTPWhiteSpace);\n}\n/**\n * @see https://infra.spec.whatwg.org/#ascii-whitespace\n * @param {number} char\n */ function isASCIIWhitespace(char) {\n    // \"\\r\\n\\t\\f \"\n    return char === 0x00d || char === 0x00a || char === 0x009 || char === 0x00c || char === 0x020;\n}\n/**\n * @see https://infra.spec.whatwg.org/#strip-leading-and-trailing-ascii-whitespace\n * @param {string} str\n * @param {boolean} [leading=true]\n * @param {boolean} [trailing=true]\n */ function removeASCIIWhitespace(str, leading = true, trailing = true) {\n    return removeChars(str, leading, trailing, isASCIIWhitespace);\n}\n/**\n * @param {string} str\n * @param {boolean} leading\n * @param {boolean} trailing\n * @param {(charCode: number) => boolean} predicate\n * @returns\n */ function removeChars(str, leading, trailing, predicate) {\n    let lead = 0;\n    let trail = str.length - 1;\n    if (leading) {\n        while(lead < str.length && predicate(str.charCodeAt(lead)))lead++;\n    }\n    if (trailing) {\n        while(trail > 0 && predicate(str.charCodeAt(trail)))trail--;\n    }\n    return lead === 0 && trail === str.length - 1 ? str : str.slice(lead, trail + 1);\n}\n/**\n * @see https://infra.spec.whatwg.org/#isomorphic-decode\n * @param {Uint8Array} input\n * @returns {string}\n */ function isomorphicDecode(input) {\n    // 1. To isomorphic decode a byte sequence input, return a string whose code point\n    //    length is equal to input’s length and whose code points have the same values\n    //    as the values of input’s bytes, in the same order.\n    const length = input.length;\n    if ((2 << 15) - 1 > length) {\n        return String.fromCharCode.apply(null, input);\n    }\n    let result = '';\n    let i = 0;\n    let addition = (2 << 15) - 1;\n    while(i < length){\n        if (i + addition > length) {\n            addition = length - i;\n        }\n        result += String.fromCharCode.apply(null, input.subarray(i, i += addition));\n    }\n    return result;\n}\n/**\n * @see https://mimesniff.spec.whatwg.org/#minimize-a-supported-mime-type\n * @param {Exclude<ReturnType<typeof parseMIMEType>, 'failure'>} mimeType\n */ function minimizeSupportedMimeType(mimeType) {\n    switch(mimeType.essence){\n        case 'application/ecmascript':\n        case 'application/javascript':\n        case 'application/x-ecmascript':\n        case 'application/x-javascript':\n        case 'text/ecmascript':\n        case 'text/javascript':\n        case 'text/javascript1.0':\n        case 'text/javascript1.1':\n        case 'text/javascript1.2':\n        case 'text/javascript1.3':\n        case 'text/javascript1.4':\n        case 'text/javascript1.5':\n        case 'text/jscript':\n        case 'text/livescript':\n        case 'text/x-ecmascript':\n        case 'text/x-javascript':\n            // 1. If mimeType is a JavaScript MIME type, then return \"text/javascript\".\n            return 'text/javascript';\n        case 'application/json':\n        case 'text/json':\n            // 2. If mimeType is a JSON MIME type, then return \"application/json\".\n            return 'application/json';\n        case 'image/svg+xml':\n            // 3. If mimeType’s essence is \"image/svg+xml\", then return \"image/svg+xml\".\n            return 'image/svg+xml';\n        case 'text/xml':\n        case 'application/xml':\n            // 4. If mimeType is an XML MIME type, then return \"application/xml\".\n            return 'application/xml';\n    }\n    // 2. If mimeType is a JSON MIME type, then return \"application/json\".\n    if (mimeType.subtype.endsWith('+json')) {\n        return 'application/json';\n    }\n    // 4. If mimeType is an XML MIME type, then return \"application/xml\".\n    if (mimeType.subtype.endsWith('+xml')) {\n        return 'application/xml';\n    }\n    // 5. If mimeType is supported by the user agent, then return mimeType’s essence.\n    // Technically, node doesn't support any mimetypes.\n    // 6. Return the empty string.\n    return '';\n}\nmodule.exports = {\n    dataURLProcessor,\n    URLSerializer,\n    collectASequenceOfCodePoints,\n    collectASequenceOfCodePointsFast,\n    stringPercentDecode,\n    parseMIMEType,\n    collectAnHTTPQuotedString,\n    serializeAMimeType,\n    removeChars,\n    removeHTTPWhitespace,\n    minimizeSupportedMimeType,\n    HTTP_TOKEN_CODEPOINTS,\n    isomorphicDecode\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/fetch/data-url.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/fetch/dispatcher-weakref.js":
/*!*****************************************************************!*\
  !*** ./node_modules/undici/lib/web/fetch/dispatcher-weakref.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { kConnected, kSize } = __webpack_require__(/*! ../../core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nclass CompatWeakRef {\n    constructor(value){\n        this.value = value;\n    }\n    deref() {\n        return this.value[kConnected] === 0 && this.value[kSize] === 0 ? undefined : this.value;\n    }\n}\nclass CompatFinalizer {\n    constructor(finalizer){\n        this.finalizer = finalizer;\n    }\n    register(dispatcher, key) {\n        if (dispatcher.on) {\n            dispatcher.on('disconnect', ()=>{\n                if (dispatcher[kConnected] === 0 && dispatcher[kSize] === 0) {\n                    this.finalizer(key);\n                }\n            });\n        }\n    }\n    unregister(key) {}\n}\nmodule.exports = function() {\n    // FIXME: remove workaround when the Node bug is backported to v18\n    // https://github.com/nodejs/node/issues/49344#issuecomment-1741776308\n    if (process.env.NODE_V8_COVERAGE && process.version.startsWith('v18')) {\n        process._rawDebug('Using compatibility WeakRef and FinalizationRegistry');\n        return {\n            WeakRef: CompatWeakRef,\n            FinalizationRegistry: CompatFinalizer\n        };\n    }\n    return {\n        WeakRef,\n        FinalizationRegistry\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi93ZWIvZmV0Y2gvZGlzcGF0Y2hlci13ZWFrcmVmLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTSxFQUFFQSxVQUFVLEVBQUVDLEtBQUssRUFBRSxHQUFHQyxtQkFBT0EsQ0FBQywyRUFBb0I7QUFFMUQsTUFBTUM7SUFDSixZQUFhQyxLQUFLLENBQUU7UUFDbEIsSUFBSSxDQUFDQSxLQUFLLEdBQUdBO0lBQ2Y7SUFFQUMsUUFBUztRQUNQLE9BQU8sSUFBSSxDQUFDRCxLQUFLLENBQUNKLFdBQVcsS0FBSyxLQUFLLElBQUksQ0FBQ0ksS0FBSyxDQUFDSCxNQUFNLEtBQUssSUFDekRLLFlBQ0EsSUFBSSxDQUFDRixLQUFLO0lBQ2hCO0FBQ0Y7QUFFQSxNQUFNRztJQUNKLFlBQWFDLFNBQVMsQ0FBRTtRQUN0QixJQUFJLENBQUNBLFNBQVMsR0FBR0E7SUFDbkI7SUFFQUMsU0FBVUMsVUFBVSxFQUFFQyxHQUFHLEVBQUU7UUFDekIsSUFBSUQsV0FBV0UsRUFBRSxFQUFFO1lBQ2pCRixXQUFXRSxFQUFFLENBQUMsY0FBYztnQkFDMUIsSUFBSUYsVUFBVSxDQUFDVixXQUFXLEtBQUssS0FBS1UsVUFBVSxDQUFDVCxNQUFNLEtBQUssR0FBRztvQkFDM0QsSUFBSSxDQUFDTyxTQUFTLENBQUNHO2dCQUNqQjtZQUNGO1FBQ0Y7SUFDRjtJQUVBRSxXQUFZRixHQUFHLEVBQUUsQ0FBQztBQUNwQjtBQUVBRyxPQUFPQyxPQUFPLEdBQUc7SUFDZixrRUFBa0U7SUFDbEUsc0VBQXNFO0lBQ3RFLElBQUlDLFFBQVFDLEdBQUcsQ0FBQ0MsZ0JBQWdCLElBQUlGLFFBQVFHLE9BQU8sQ0FBQ0MsVUFBVSxDQUFDLFFBQVE7UUFDckVKLFFBQVFLLFNBQVMsQ0FBQztRQUNsQixPQUFPO1lBQ0xDLFNBQVNuQjtZQUNUb0Isc0JBQXNCaEI7UUFDeEI7SUFDRjtJQUNBLE9BQU87UUFBRWU7UUFBU0M7SUFBcUI7QUFDekMiLCJzb3VyY2VzIjpbIkQ6XFxIZWxpeFxcbm9kZV9tb2R1bGVzXFx1bmRpY2lcXGxpYlxcd2ViXFxmZXRjaFxcZGlzcGF0Y2hlci13ZWFrcmVmLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jb25zdCB7IGtDb25uZWN0ZWQsIGtTaXplIH0gPSByZXF1aXJlKCcuLi8uLi9jb3JlL3N5bWJvbHMnKVxuXG5jbGFzcyBDb21wYXRXZWFrUmVmIHtcbiAgY29uc3RydWN0b3IgKHZhbHVlKSB7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlXG4gIH1cblxuICBkZXJlZiAoKSB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWVba0Nvbm5lY3RlZF0gPT09IDAgJiYgdGhpcy52YWx1ZVtrU2l6ZV0gPT09IDBcbiAgICAgID8gdW5kZWZpbmVkXG4gICAgICA6IHRoaXMudmFsdWVcbiAgfVxufVxuXG5jbGFzcyBDb21wYXRGaW5hbGl6ZXIge1xuICBjb25zdHJ1Y3RvciAoZmluYWxpemVyKSB7XG4gICAgdGhpcy5maW5hbGl6ZXIgPSBmaW5hbGl6ZXJcbiAgfVxuXG4gIHJlZ2lzdGVyIChkaXNwYXRjaGVyLCBrZXkpIHtcbiAgICBpZiAoZGlzcGF0Y2hlci5vbikge1xuICAgICAgZGlzcGF0Y2hlci5vbignZGlzY29ubmVjdCcsICgpID0+IHtcbiAgICAgICAgaWYgKGRpc3BhdGNoZXJba0Nvbm5lY3RlZF0gPT09IDAgJiYgZGlzcGF0Y2hlcltrU2l6ZV0gPT09IDApIHtcbiAgICAgICAgICB0aGlzLmZpbmFsaXplcihrZXkpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgdW5yZWdpc3RlciAoa2V5KSB7fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gRklYTUU6IHJlbW92ZSB3b3JrYXJvdW5kIHdoZW4gdGhlIE5vZGUgYnVnIGlzIGJhY2twb3J0ZWQgdG8gdjE4XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9pc3N1ZXMvNDkzNDQjaXNzdWVjb21tZW50LTE3NDE3NzYzMDhcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfVjhfQ09WRVJBR0UgJiYgcHJvY2Vzcy52ZXJzaW9uLnN0YXJ0c1dpdGgoJ3YxOCcpKSB7XG4gICAgcHJvY2Vzcy5fcmF3RGVidWcoJ1VzaW5nIGNvbXBhdGliaWxpdHkgV2Vha1JlZiBhbmQgRmluYWxpemF0aW9uUmVnaXN0cnknKVxuICAgIHJldHVybiB7XG4gICAgICBXZWFrUmVmOiBDb21wYXRXZWFrUmVmLFxuICAgICAgRmluYWxpemF0aW9uUmVnaXN0cnk6IENvbXBhdEZpbmFsaXplclxuICAgIH1cbiAgfVxuICByZXR1cm4geyBXZWFrUmVmLCBGaW5hbGl6YXRpb25SZWdpc3RyeSB9XG59XG4iXSwibmFtZXMiOlsia0Nvbm5lY3RlZCIsImtTaXplIiwicmVxdWlyZSIsIkNvbXBhdFdlYWtSZWYiLCJ2YWx1ZSIsImRlcmVmIiwidW5kZWZpbmVkIiwiQ29tcGF0RmluYWxpemVyIiwiZmluYWxpemVyIiwicmVnaXN0ZXIiLCJkaXNwYXRjaGVyIiwia2V5Iiwib24iLCJ1bnJlZ2lzdGVyIiwibW9kdWxlIiwiZXhwb3J0cyIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX1Y4X0NPVkVSQUdFIiwidmVyc2lvbiIsInN0YXJ0c1dpdGgiLCJfcmF3RGVidWciLCJXZWFrUmVmIiwiRmluYWxpemF0aW9uUmVnaXN0cnkiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/fetch/dispatcher-weakref.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/fetch/file.js":
/*!***************************************************!*\
  !*** ./node_modules/undici/lib/web/fetch/file.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { Blob, File } = __webpack_require__(/*! node:buffer */ \"node:buffer\");\nconst { kState } = __webpack_require__(/*! ./symbols */ \"(ssr)/./node_modules/undici/lib/web/fetch/symbols.js\");\nconst { webidl } = __webpack_require__(/*! ./webidl */ \"(ssr)/./node_modules/undici/lib/web/fetch/webidl.js\");\n// TODO(@KhafraDev): remove\nclass FileLike {\n    constructor(blobLike, fileName, options = {}){\n        // TODO: argument idl type check\n        // The File constructor is invoked with two or three parameters, depending\n        // on whether the optional dictionary parameter is used. When the File()\n        // constructor is invoked, user agents must run the following steps:\n        // 1. Let bytes be the result of processing blob parts given fileBits and\n        // options.\n        // 2. Let n be the fileName argument to the constructor.\n        const n = fileName;\n        // 3. Process FilePropertyBag dictionary argument by running the following\n        // substeps:\n        //    1. If the type member is provided and is not the empty string, let t\n        //    be set to the type dictionary member. If t contains any characters\n        //    outside the range U+0020 to U+007E, then set t to the empty string\n        //    and return from these substeps.\n        //    TODO\n        const t = options.type;\n        //    2. Convert every character in t to ASCII lowercase.\n        //    TODO\n        //    3. If the lastModified member is provided, let d be set to the\n        //    lastModified dictionary member. If it is not provided, set d to the\n        //    current date and time represented as the number of milliseconds since\n        //    the Unix Epoch (which is the equivalent of Date.now() [ECMA-262]).\n        const d = options.lastModified ?? Date.now();\n        // 4. Return a new File object F such that:\n        // F refers to the bytes byte sequence.\n        // F.size is set to the number of total bytes in bytes.\n        // F.name is set to n.\n        // F.type is set to t.\n        // F.lastModified is set to d.\n        this[kState] = {\n            blobLike,\n            name: n,\n            type: t,\n            lastModified: d\n        };\n    }\n    stream(...args) {\n        webidl.brandCheck(this, FileLike);\n        return this[kState].blobLike.stream(...args);\n    }\n    arrayBuffer(...args) {\n        webidl.brandCheck(this, FileLike);\n        return this[kState].blobLike.arrayBuffer(...args);\n    }\n    slice(...args) {\n        webidl.brandCheck(this, FileLike);\n        return this[kState].blobLike.slice(...args);\n    }\n    text(...args) {\n        webidl.brandCheck(this, FileLike);\n        return this[kState].blobLike.text(...args);\n    }\n    get size() {\n        webidl.brandCheck(this, FileLike);\n        return this[kState].blobLike.size;\n    }\n    get type() {\n        webidl.brandCheck(this, FileLike);\n        return this[kState].blobLike.type;\n    }\n    get name() {\n        webidl.brandCheck(this, FileLike);\n        return this[kState].name;\n    }\n    get lastModified() {\n        webidl.brandCheck(this, FileLike);\n        return this[kState].lastModified;\n    }\n    get [Symbol.toStringTag]() {\n        return 'File';\n    }\n}\nwebidl.converters.Blob = webidl.interfaceConverter(Blob);\n// If this function is moved to ./util.js, some tools (such as\n// rollup) will warn about circular dependencies. See:\n// https://github.com/nodejs/undici/issues/1629\nfunction isFileLike(object) {\n    return object instanceof File || object && (typeof object.stream === 'function' || typeof object.arrayBuffer === 'function') && object[Symbol.toStringTag] === 'File';\n}\nmodule.exports = {\n    FileLike,\n    isFileLike\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi93ZWIvZmV0Y2gvZmlsZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU0sRUFBRUEsSUFBSSxFQUFFQyxJQUFJLEVBQUUsR0FBR0MsbUJBQU9BLENBQUMsZ0NBQWE7QUFDNUMsTUFBTSxFQUFFQyxNQUFNLEVBQUUsR0FBR0QsbUJBQU9BLENBQUMsdUVBQVc7QUFDdEMsTUFBTSxFQUFFRSxNQUFNLEVBQUUsR0FBR0YsbUJBQU9BLENBQUMscUVBQVU7QUFFckMsMkJBQTJCO0FBQzNCLE1BQU1HO0lBQ0osWUFBYUMsUUFBUSxFQUFFQyxRQUFRLEVBQUVDLFVBQVUsQ0FBQyxDQUFDLENBQUU7UUFDN0MsZ0NBQWdDO1FBRWhDLDBFQUEwRTtRQUMxRSx3RUFBd0U7UUFDeEUsb0VBQW9FO1FBRXBFLHlFQUF5RTtRQUN6RSxXQUFXO1FBRVgsd0RBQXdEO1FBQ3hELE1BQU1DLElBQUlGO1FBRVYsMEVBQTBFO1FBQzFFLFlBQVk7UUFFWiwwRUFBMEU7UUFDMUUsd0VBQXdFO1FBQ3hFLHdFQUF3RTtRQUN4RSxxQ0FBcUM7UUFDckMsVUFBVTtRQUNWLE1BQU1HLElBQUlGLFFBQVFHLElBQUk7UUFFdEIseURBQXlEO1FBQ3pELFVBQVU7UUFFVixvRUFBb0U7UUFDcEUseUVBQXlFO1FBQ3pFLDJFQUEyRTtRQUMzRSx3RUFBd0U7UUFDeEUsTUFBTUMsSUFBSUosUUFBUUssWUFBWSxJQUFJQyxLQUFLQyxHQUFHO1FBRTFDLDJDQUEyQztRQUMzQyx1Q0FBdUM7UUFDdkMsdURBQXVEO1FBQ3ZELHNCQUFzQjtRQUN0QixzQkFBc0I7UUFDdEIsOEJBQThCO1FBRTlCLElBQUksQ0FBQ1osT0FBTyxHQUFHO1lBQ2JHO1lBQ0FVLE1BQU1QO1lBQ05FLE1BQU1EO1lBQ05HLGNBQWNEO1FBQ2hCO0lBQ0Y7SUFFQUssT0FBUSxHQUFHQyxJQUFJLEVBQUU7UUFDZmQsT0FBT2UsVUFBVSxDQUFDLElBQUksRUFBRWQ7UUFFeEIsT0FBTyxJQUFJLENBQUNGLE9BQU8sQ0FBQ0csUUFBUSxDQUFDVyxNQUFNLElBQUlDO0lBQ3pDO0lBRUFFLFlBQWEsR0FBR0YsSUFBSSxFQUFFO1FBQ3BCZCxPQUFPZSxVQUFVLENBQUMsSUFBSSxFQUFFZDtRQUV4QixPQUFPLElBQUksQ0FBQ0YsT0FBTyxDQUFDRyxRQUFRLENBQUNjLFdBQVcsSUFBSUY7SUFDOUM7SUFFQUcsTUFBTyxHQUFHSCxJQUFJLEVBQUU7UUFDZGQsT0FBT2UsVUFBVSxDQUFDLElBQUksRUFBRWQ7UUFFeEIsT0FBTyxJQUFJLENBQUNGLE9BQU8sQ0FBQ0csUUFBUSxDQUFDZSxLQUFLLElBQUlIO0lBQ3hDO0lBRUFJLEtBQU0sR0FBR0osSUFBSSxFQUFFO1FBQ2JkLE9BQU9lLFVBQVUsQ0FBQyxJQUFJLEVBQUVkO1FBRXhCLE9BQU8sSUFBSSxDQUFDRixPQUFPLENBQUNHLFFBQVEsQ0FBQ2dCLElBQUksSUFBSUo7SUFDdkM7SUFFQSxJQUFJSyxPQUFRO1FBQ1ZuQixPQUFPZSxVQUFVLENBQUMsSUFBSSxFQUFFZDtRQUV4QixPQUFPLElBQUksQ0FBQ0YsT0FBTyxDQUFDRyxRQUFRLENBQUNpQixJQUFJO0lBQ25DO0lBRUEsSUFBSVosT0FBUTtRQUNWUCxPQUFPZSxVQUFVLENBQUMsSUFBSSxFQUFFZDtRQUV4QixPQUFPLElBQUksQ0FBQ0YsT0FBTyxDQUFDRyxRQUFRLENBQUNLLElBQUk7SUFDbkM7SUFFQSxJQUFJSyxPQUFRO1FBQ1ZaLE9BQU9lLFVBQVUsQ0FBQyxJQUFJLEVBQUVkO1FBRXhCLE9BQU8sSUFBSSxDQUFDRixPQUFPLENBQUNhLElBQUk7SUFDMUI7SUFFQSxJQUFJSCxlQUFnQjtRQUNsQlQsT0FBT2UsVUFBVSxDQUFDLElBQUksRUFBRWQ7UUFFeEIsT0FBTyxJQUFJLENBQUNGLE9BQU8sQ0FBQ1UsWUFBWTtJQUNsQztJQUVBLElBQUksQ0FBQ1csT0FBT0MsV0FBVyxDQUFDLEdBQUk7UUFDMUIsT0FBTztJQUNUO0FBQ0Y7QUFFQXJCLE9BQU9zQixVQUFVLENBQUMxQixJQUFJLEdBQUdJLE9BQU91QixrQkFBa0IsQ0FBQzNCO0FBRW5ELDhEQUE4RDtBQUM5RCxzREFBc0Q7QUFDdEQsK0NBQStDO0FBQy9DLFNBQVM0QixXQUFZQyxNQUFNO0lBQ3pCLE9BQ0Usa0JBQW1CNUIsUUFFakI0QixVQUNDLFFBQU9BLE9BQU9aLE1BQU0sS0FBSyxjQUMxQixPQUFPWSxPQUFPVCxXQUFXLEtBQUssVUFBUyxLQUN2Q1MsTUFBTSxDQUFDTCxPQUFPQyxXQUFXLENBQUMsS0FBSztBQUdyQztBQUVBSyxPQUFPQyxPQUFPLEdBQUc7SUFBRTFCO0lBQVV1QjtBQUFXIiwic291cmNlcyI6WyJEOlxcSGVsaXhcXG5vZGVfbW9kdWxlc1xcdW5kaWNpXFxsaWJcXHdlYlxcZmV0Y2hcXGZpbGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IHsgQmxvYiwgRmlsZSB9ID0gcmVxdWlyZSgnbm9kZTpidWZmZXInKVxuY29uc3QgeyBrU3RhdGUgfSA9IHJlcXVpcmUoJy4vc3ltYm9scycpXG5jb25zdCB7IHdlYmlkbCB9ID0gcmVxdWlyZSgnLi93ZWJpZGwnKVxuXG4vLyBUT0RPKEBLaGFmcmFEZXYpOiByZW1vdmVcbmNsYXNzIEZpbGVMaWtlIHtcbiAgY29uc3RydWN0b3IgKGJsb2JMaWtlLCBmaWxlTmFtZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgLy8gVE9ETzogYXJndW1lbnQgaWRsIHR5cGUgY2hlY2tcblxuICAgIC8vIFRoZSBGaWxlIGNvbnN0cnVjdG9yIGlzIGludm9rZWQgd2l0aCB0d28gb3IgdGhyZWUgcGFyYW1ldGVycywgZGVwZW5kaW5nXG4gICAgLy8gb24gd2hldGhlciB0aGUgb3B0aW9uYWwgZGljdGlvbmFyeSBwYXJhbWV0ZXIgaXMgdXNlZC4gV2hlbiB0aGUgRmlsZSgpXG4gICAgLy8gY29uc3RydWN0b3IgaXMgaW52b2tlZCwgdXNlciBhZ2VudHMgbXVzdCBydW4gdGhlIGZvbGxvd2luZyBzdGVwczpcblxuICAgIC8vIDEuIExldCBieXRlcyBiZSB0aGUgcmVzdWx0IG9mIHByb2Nlc3NpbmcgYmxvYiBwYXJ0cyBnaXZlbiBmaWxlQml0cyBhbmRcbiAgICAvLyBvcHRpb25zLlxuXG4gICAgLy8gMi4gTGV0IG4gYmUgdGhlIGZpbGVOYW1lIGFyZ3VtZW50IHRvIHRoZSBjb25zdHJ1Y3Rvci5cbiAgICBjb25zdCBuID0gZmlsZU5hbWVcblxuICAgIC8vIDMuIFByb2Nlc3MgRmlsZVByb3BlcnR5QmFnIGRpY3Rpb25hcnkgYXJndW1lbnQgYnkgcnVubmluZyB0aGUgZm9sbG93aW5nXG4gICAgLy8gc3Vic3RlcHM6XG5cbiAgICAvLyAgICAxLiBJZiB0aGUgdHlwZSBtZW1iZXIgaXMgcHJvdmlkZWQgYW5kIGlzIG5vdCB0aGUgZW1wdHkgc3RyaW5nLCBsZXQgdFxuICAgIC8vICAgIGJlIHNldCB0byB0aGUgdHlwZSBkaWN0aW9uYXJ5IG1lbWJlci4gSWYgdCBjb250YWlucyBhbnkgY2hhcmFjdGVyc1xuICAgIC8vICAgIG91dHNpZGUgdGhlIHJhbmdlIFUrMDAyMCB0byBVKzAwN0UsIHRoZW4gc2V0IHQgdG8gdGhlIGVtcHR5IHN0cmluZ1xuICAgIC8vICAgIGFuZCByZXR1cm4gZnJvbSB0aGVzZSBzdWJzdGVwcy5cbiAgICAvLyAgICBUT0RPXG4gICAgY29uc3QgdCA9IG9wdGlvbnMudHlwZVxuXG4gICAgLy8gICAgMi4gQ29udmVydCBldmVyeSBjaGFyYWN0ZXIgaW4gdCB0byBBU0NJSSBsb3dlcmNhc2UuXG4gICAgLy8gICAgVE9ET1xuXG4gICAgLy8gICAgMy4gSWYgdGhlIGxhc3RNb2RpZmllZCBtZW1iZXIgaXMgcHJvdmlkZWQsIGxldCBkIGJlIHNldCB0byB0aGVcbiAgICAvLyAgICBsYXN0TW9kaWZpZWQgZGljdGlvbmFyeSBtZW1iZXIuIElmIGl0IGlzIG5vdCBwcm92aWRlZCwgc2V0IGQgdG8gdGhlXG4gICAgLy8gICAgY3VycmVudCBkYXRlIGFuZCB0aW1lIHJlcHJlc2VudGVkIGFzIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHNpbmNlXG4gICAgLy8gICAgdGhlIFVuaXggRXBvY2ggKHdoaWNoIGlzIHRoZSBlcXVpdmFsZW50IG9mIERhdGUubm93KCkgW0VDTUEtMjYyXSkuXG4gICAgY29uc3QgZCA9IG9wdGlvbnMubGFzdE1vZGlmaWVkID8/IERhdGUubm93KClcblxuICAgIC8vIDQuIFJldHVybiBhIG5ldyBGaWxlIG9iamVjdCBGIHN1Y2ggdGhhdDpcbiAgICAvLyBGIHJlZmVycyB0byB0aGUgYnl0ZXMgYnl0ZSBzZXF1ZW5jZS5cbiAgICAvLyBGLnNpemUgaXMgc2V0IHRvIHRoZSBudW1iZXIgb2YgdG90YWwgYnl0ZXMgaW4gYnl0ZXMuXG4gICAgLy8gRi5uYW1lIGlzIHNldCB0byBuLlxuICAgIC8vIEYudHlwZSBpcyBzZXQgdG8gdC5cbiAgICAvLyBGLmxhc3RNb2RpZmllZCBpcyBzZXQgdG8gZC5cblxuICAgIHRoaXNba1N0YXRlXSA9IHtcbiAgICAgIGJsb2JMaWtlLFxuICAgICAgbmFtZTogbixcbiAgICAgIHR5cGU6IHQsXG4gICAgICBsYXN0TW9kaWZpZWQ6IGRcbiAgICB9XG4gIH1cblxuICBzdHJlYW0gKC4uLmFyZ3MpIHtcbiAgICB3ZWJpZGwuYnJhbmRDaGVjayh0aGlzLCBGaWxlTGlrZSlcblxuICAgIHJldHVybiB0aGlzW2tTdGF0ZV0uYmxvYkxpa2Uuc3RyZWFtKC4uLmFyZ3MpXG4gIH1cblxuICBhcnJheUJ1ZmZlciAoLi4uYXJncykge1xuICAgIHdlYmlkbC5icmFuZENoZWNrKHRoaXMsIEZpbGVMaWtlKVxuXG4gICAgcmV0dXJuIHRoaXNba1N0YXRlXS5ibG9iTGlrZS5hcnJheUJ1ZmZlciguLi5hcmdzKVxuICB9XG5cbiAgc2xpY2UgKC4uLmFyZ3MpIHtcbiAgICB3ZWJpZGwuYnJhbmRDaGVjayh0aGlzLCBGaWxlTGlrZSlcblxuICAgIHJldHVybiB0aGlzW2tTdGF0ZV0uYmxvYkxpa2Uuc2xpY2UoLi4uYXJncylcbiAgfVxuXG4gIHRleHQgKC4uLmFyZ3MpIHtcbiAgICB3ZWJpZGwuYnJhbmRDaGVjayh0aGlzLCBGaWxlTGlrZSlcblxuICAgIHJldHVybiB0aGlzW2tTdGF0ZV0uYmxvYkxpa2UudGV4dCguLi5hcmdzKVxuICB9XG5cbiAgZ2V0IHNpemUgKCkge1xuICAgIHdlYmlkbC5icmFuZENoZWNrKHRoaXMsIEZpbGVMaWtlKVxuXG4gICAgcmV0dXJuIHRoaXNba1N0YXRlXS5ibG9iTGlrZS5zaXplXG4gIH1cblxuICBnZXQgdHlwZSAoKSB7XG4gICAgd2ViaWRsLmJyYW5kQ2hlY2sodGhpcywgRmlsZUxpa2UpXG5cbiAgICByZXR1cm4gdGhpc1trU3RhdGVdLmJsb2JMaWtlLnR5cGVcbiAgfVxuXG4gIGdldCBuYW1lICgpIHtcbiAgICB3ZWJpZGwuYnJhbmRDaGVjayh0aGlzLCBGaWxlTGlrZSlcblxuICAgIHJldHVybiB0aGlzW2tTdGF0ZV0ubmFtZVxuICB9XG5cbiAgZ2V0IGxhc3RNb2RpZmllZCAoKSB7XG4gICAgd2ViaWRsLmJyYW5kQ2hlY2sodGhpcywgRmlsZUxpa2UpXG5cbiAgICByZXR1cm4gdGhpc1trU3RhdGVdLmxhc3RNb2RpZmllZFxuICB9XG5cbiAgZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddICgpIHtcbiAgICByZXR1cm4gJ0ZpbGUnXG4gIH1cbn1cblxud2ViaWRsLmNvbnZlcnRlcnMuQmxvYiA9IHdlYmlkbC5pbnRlcmZhY2VDb252ZXJ0ZXIoQmxvYilcblxuLy8gSWYgdGhpcyBmdW5jdGlvbiBpcyBtb3ZlZCB0byAuL3V0aWwuanMsIHNvbWUgdG9vbHMgKHN1Y2ggYXNcbi8vIHJvbGx1cCkgd2lsbCB3YXJuIGFib3V0IGNpcmN1bGFyIGRlcGVuZGVuY2llcy4gU2VlOlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy91bmRpY2kvaXNzdWVzLzE2MjlcbmZ1bmN0aW9uIGlzRmlsZUxpa2UgKG9iamVjdCkge1xuICByZXR1cm4gKFxuICAgIChvYmplY3QgaW5zdGFuY2VvZiBGaWxlKSB8fFxuICAgIChcbiAgICAgIG9iamVjdCAmJlxuICAgICAgKHR5cGVvZiBvYmplY3Quc3RyZWFtID09PSAnZnVuY3Rpb24nIHx8XG4gICAgICB0eXBlb2Ygb2JqZWN0LmFycmF5QnVmZmVyID09PSAnZnVuY3Rpb24nKSAmJlxuICAgICAgb2JqZWN0W1N5bWJvbC50b1N0cmluZ1RhZ10gPT09ICdGaWxlJ1xuICAgIClcbiAgKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHsgRmlsZUxpa2UsIGlzRmlsZUxpa2UgfVxuIl0sIm5hbWVzIjpbIkJsb2IiLCJGaWxlIiwicmVxdWlyZSIsImtTdGF0ZSIsIndlYmlkbCIsIkZpbGVMaWtlIiwiYmxvYkxpa2UiLCJmaWxlTmFtZSIsIm9wdGlvbnMiLCJuIiwidCIsInR5cGUiLCJkIiwibGFzdE1vZGlmaWVkIiwiRGF0ZSIsIm5vdyIsIm5hbWUiLCJzdHJlYW0iLCJhcmdzIiwiYnJhbmRDaGVjayIsImFycmF5QnVmZmVyIiwic2xpY2UiLCJ0ZXh0Iiwic2l6ZSIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwiY29udmVydGVycyIsImludGVyZmFjZUNvbnZlcnRlciIsImlzRmlsZUxpa2UiLCJvYmplY3QiLCJtb2R1bGUiLCJleHBvcnRzIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/fetch/file.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/fetch/formdata-parser.js":
/*!**************************************************************!*\
  !*** ./node_modules/undici/lib/web/fetch/formdata-parser.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { isUSVString, bufferToLowerCasedHeaderName } = __webpack_require__(/*! ../../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst { utf8DecodeBytes } = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/web/fetch/util.js\");\nconst { HTTP_TOKEN_CODEPOINTS, isomorphicDecode } = __webpack_require__(/*! ./data-url */ \"(ssr)/./node_modules/undici/lib/web/fetch/data-url.js\");\nconst { isFileLike } = __webpack_require__(/*! ./file */ \"(ssr)/./node_modules/undici/lib/web/fetch/file.js\");\nconst { makeEntry } = __webpack_require__(/*! ./formdata */ \"(ssr)/./node_modules/undici/lib/web/fetch/formdata.js\");\nconst assert = __webpack_require__(/*! node:assert */ \"node:assert\");\nconst { File: NodeFile } = __webpack_require__(/*! node:buffer */ \"node:buffer\");\nconst File = globalThis.File ?? NodeFile;\nconst formDataNameBuffer = Buffer.from('form-data; name=\"');\nconst filenameBuffer = Buffer.from('; filename');\nconst dd = Buffer.from('--');\nconst ddcrlf = Buffer.from('--\\r\\n');\n/**\n * @param {string} chars\n */ function isAsciiString(chars) {\n    for(let i = 0; i < chars.length; ++i){\n        if ((chars.charCodeAt(i) & ~0x7F) !== 0) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * @see https://andreubotella.github.io/multipart-form-data/#multipart-form-data-boundary\n * @param {string} boundary\n */ function validateBoundary(boundary) {\n    const length = boundary.length;\n    // - its length is greater or equal to 27 and lesser or equal to 70, and\n    if (length < 27 || length > 70) {\n        return false;\n    }\n    // - it is composed by bytes in the ranges 0x30 to 0x39, 0x41 to 0x5A, or\n    //   0x61 to 0x7A, inclusive (ASCII alphanumeric), or which are 0x27 ('),\n    //   0x2D (-) or 0x5F (_).\n    for(let i = 0; i < length; ++i){\n        const cp = boundary.charCodeAt(i);\n        if (!(cp >= 0x30 && cp <= 0x39 || cp >= 0x41 && cp <= 0x5a || cp >= 0x61 && cp <= 0x7a || cp === 0x27 || cp === 0x2d || cp === 0x5f)) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * @see https://andreubotella.github.io/multipart-form-data/#multipart-form-data-parser\n * @param {Buffer} input\n * @param {ReturnType<import('./data-url')['parseMIMEType']>} mimeType\n */ function multipartFormDataParser(input, mimeType) {\n    // 1. Assert: mimeType’s essence is \"multipart/form-data\".\n    assert(mimeType !== 'failure' && mimeType.essence === 'multipart/form-data');\n    const boundaryString = mimeType.parameters.get('boundary');\n    // 2. If mimeType’s parameters[\"boundary\"] does not exist, return failure.\n    //    Otherwise, let boundary be the result of UTF-8 decoding mimeType’s\n    //    parameters[\"boundary\"].\n    if (boundaryString === undefined) {\n        return 'failure';\n    }\n    const boundary = Buffer.from(`--${boundaryString}`, 'utf8');\n    // 3. Let entry list be an empty entry list.\n    const entryList = [];\n    // 4. Let position be a pointer to a byte in input, initially pointing at\n    //    the first byte.\n    const position = {\n        position: 0\n    };\n    // Note: undici addition, allow \\r\\n before the body.\n    if (input[0] === 0x0d && input[1] === 0x0a) {\n        position.position += 2;\n    }\n    // 5. While true:\n    while(true){\n        // 5.1. If position points to a sequence of bytes starting with 0x2D 0x2D\n        //      (`--`) followed by boundary, advance position by 2 + the length of\n        //      boundary. Otherwise, return failure.\n        // Note: boundary is padded with 2 dashes already, no need to add 2.\n        if (input.subarray(position.position, position.position + boundary.length).equals(boundary)) {\n            position.position += boundary.length;\n        } else {\n            return 'failure';\n        }\n        // 5.2. If position points to the sequence of bytes 0x2D 0x2D 0x0D 0x0A\n        //      (`--` followed by CR LF) followed by the end of input, return entry list.\n        // Note: a body does NOT need to end with CRLF. It can end with --.\n        if (position.position === input.length - 2 && bufferStartsWith(input, dd, position) || position.position === input.length - 4 && bufferStartsWith(input, ddcrlf, position)) {\n            return entryList;\n        }\n        // 5.3. If position does not point to a sequence of bytes starting with 0x0D\n        //      0x0A (CR LF), return failure.\n        if (input[position.position] !== 0x0d || input[position.position + 1] !== 0x0a) {\n            return 'failure';\n        }\n        // 5.4. Advance position by 2. (This skips past the newline.)\n        position.position += 2;\n        // 5.5. Let name, filename and contentType be the result of parsing\n        //      multipart/form-data headers on input and position, if the result\n        //      is not failure. Otherwise, return failure.\n        const result = parseMultipartFormDataHeaders(input, position);\n        if (result === 'failure') {\n            return 'failure';\n        }\n        let { name, filename, contentType, encoding } = result;\n        // 5.6. Advance position by 2. (This skips past the empty line that marks\n        //      the end of the headers.)\n        position.position += 2;\n        // 5.7. Let body be the empty byte sequence.\n        let body;\n        // 5.8. Body loop: While position is not past the end of input:\n        // TODO: the steps here are completely wrong\n        {\n            const boundaryIndex = input.indexOf(boundary.subarray(2), position.position);\n            if (boundaryIndex === -1) {\n                return 'failure';\n            }\n            body = input.subarray(position.position, boundaryIndex - 4);\n            position.position += body.length;\n            // Note: position must be advanced by the body's length before being\n            // decoded, otherwise the parsing will fail.\n            if (encoding === 'base64') {\n                body = Buffer.from(body.toString(), 'base64');\n            }\n        }\n        // 5.9. If position does not point to a sequence of bytes starting with\n        //      0x0D 0x0A (CR LF), return failure. Otherwise, advance position by 2.\n        if (input[position.position] !== 0x0d || input[position.position + 1] !== 0x0a) {\n            return 'failure';\n        } else {\n            position.position += 2;\n        }\n        // 5.10. If filename is not null:\n        let value;\n        if (filename !== null) {\n            // 5.10.1. If contentType is null, set contentType to \"text/plain\".\n            contentType ??= 'text/plain';\n            // 5.10.2. If contentType is not an ASCII string, set contentType to the empty string.\n            // Note: `buffer.isAscii` can be used at zero-cost, but converting a string to a buffer is a high overhead.\n            // Content-Type is a relatively small string, so it is faster to use `String#charCodeAt`.\n            if (!isAsciiString(contentType)) {\n                contentType = '';\n            }\n            // 5.10.3. Let value be a new File object with name filename, type contentType, and body body.\n            value = new File([\n                body\n            ], filename, {\n                type: contentType\n            });\n        } else {\n            // 5.11. Otherwise:\n            // 5.11.1. Let value be the UTF-8 decoding without BOM of body.\n            value = utf8DecodeBytes(Buffer.from(body));\n        }\n        // 5.12. Assert: name is a scalar value string and value is either a scalar value string or a File object.\n        assert(isUSVString(name));\n        assert(typeof value === 'string' && isUSVString(value) || isFileLike(value));\n        // 5.13. Create an entry with name and value, and append it to entry list.\n        entryList.push(makeEntry(name, value, filename));\n    }\n}\n/**\n * @see https://andreubotella.github.io/multipart-form-data/#parse-multipart-form-data-headers\n * @param {Buffer} input\n * @param {{ position: number }} position\n */ function parseMultipartFormDataHeaders(input, position) {\n    // 1. Let name, filename and contentType be null.\n    let name = null;\n    let filename = null;\n    let contentType = null;\n    let encoding = null;\n    // 2. While true:\n    while(true){\n        // 2.1. If position points to a sequence of bytes starting with 0x0D 0x0A (CR LF):\n        if (input[position.position] === 0x0d && input[position.position + 1] === 0x0a) {\n            // 2.1.1. If name is null, return failure.\n            if (name === null) {\n                return 'failure';\n            }\n            // 2.1.2. Return name, filename and contentType.\n            return {\n                name,\n                filename,\n                contentType,\n                encoding\n            };\n        }\n        // 2.2. Let header name be the result of collecting a sequence of bytes that are\n        //      not 0x0A (LF), 0x0D (CR) or 0x3A (:), given position.\n        let headerName = collectASequenceOfBytes((char)=>char !== 0x0a && char !== 0x0d && char !== 0x3a, input, position);\n        // 2.3. Remove any HTTP tab or space bytes from the start or end of header name.\n        headerName = removeChars(headerName, true, true, (char)=>char === 0x9 || char === 0x20);\n        // 2.4. If header name does not match the field-name token production, return failure.\n        if (!HTTP_TOKEN_CODEPOINTS.test(headerName.toString())) {\n            return 'failure';\n        }\n        // 2.5. If the byte at position is not 0x3A (:), return failure.\n        if (input[position.position] !== 0x3a) {\n            return 'failure';\n        }\n        // 2.6. Advance position by 1.\n        position.position++;\n        // 2.7. Collect a sequence of bytes that are HTTP tab or space bytes given position.\n        //      (Do nothing with those bytes.)\n        collectASequenceOfBytes((char)=>char === 0x20 || char === 0x09, input, position);\n        // 2.8. Byte-lowercase header name and switch on the result:\n        switch(bufferToLowerCasedHeaderName(headerName)){\n            case 'content-disposition':\n                {\n                    // 1. Set name and filename to null.\n                    name = filename = null;\n                    // 2. If position does not point to a sequence of bytes starting with\n                    //    `form-data; name=\"`, return failure.\n                    if (!bufferStartsWith(input, formDataNameBuffer, position)) {\n                        return 'failure';\n                    }\n                    // 3. Advance position so it points at the byte after the next 0x22 (\")\n                    //    byte (the one in the sequence of bytes matched above).\n                    position.position += 17;\n                    // 4. Set name to the result of parsing a multipart/form-data name given\n                    //    input and position, if the result is not failure. Otherwise, return\n                    //    failure.\n                    name = parseMultipartFormDataName(input, position);\n                    if (name === null) {\n                        return 'failure';\n                    }\n                    // 5. If position points to a sequence of bytes starting with `; filename=\"`:\n                    if (bufferStartsWith(input, filenameBuffer, position)) {\n                        // Note: undici also handles filename*\n                        let check = position.position + filenameBuffer.length;\n                        if (input[check] === 0x2a) {\n                            position.position += 1;\n                            check += 1;\n                        }\n                        if (input[check] !== 0x3d || input[check + 1] !== 0x22) {\n                            return 'failure';\n                        }\n                        // 1. Advance position so it points at the byte after the next 0x22 (\") byte\n                        //    (the one in the sequence of bytes matched above).\n                        position.position += 12;\n                        // 2. Set filename to the result of parsing a multipart/form-data name given\n                        //    input and position, if the result is not failure. Otherwise, return failure.\n                        filename = parseMultipartFormDataName(input, position);\n                        if (filename === null) {\n                            return 'failure';\n                        }\n                    }\n                    break;\n                }\n            case 'content-type':\n                {\n                    // 1. Let header value be the result of collecting a sequence of bytes that are\n                    //    not 0x0A (LF) or 0x0D (CR), given position.\n                    let headerValue = collectASequenceOfBytes((char)=>char !== 0x0a && char !== 0x0d, input, position);\n                    // 2. Remove any HTTP tab or space bytes from the end of header value.\n                    headerValue = removeChars(headerValue, false, true, (char)=>char === 0x9 || char === 0x20);\n                    // 3. Set contentType to the isomorphic decoding of header value.\n                    contentType = isomorphicDecode(headerValue);\n                    break;\n                }\n            case 'content-transfer-encoding':\n                {\n                    let headerValue = collectASequenceOfBytes((char)=>char !== 0x0a && char !== 0x0d, input, position);\n                    headerValue = removeChars(headerValue, false, true, (char)=>char === 0x9 || char === 0x20);\n                    encoding = isomorphicDecode(headerValue);\n                    break;\n                }\n            default:\n                {\n                    // Collect a sequence of bytes that are not 0x0A (LF) or 0x0D (CR), given position.\n                    // (Do nothing with those bytes.)\n                    collectASequenceOfBytes((char)=>char !== 0x0a && char !== 0x0d, input, position);\n                }\n        }\n        // 2.9. If position does not point to a sequence of bytes starting with 0x0D 0x0A\n        //      (CR LF), return failure. Otherwise, advance position by 2 (past the newline).\n        if (input[position.position] !== 0x0d && input[position.position + 1] !== 0x0a) {\n            return 'failure';\n        } else {\n            position.position += 2;\n        }\n    }\n}\n/**\n * @see https://andreubotella.github.io/multipart-form-data/#parse-a-multipart-form-data-name\n * @param {Buffer} input\n * @param {{ position: number }} position\n */ function parseMultipartFormDataName(input, position) {\n    // 1. Assert: The byte at (position - 1) is 0x22 (\").\n    assert(input[position.position - 1] === 0x22);\n    // 2. Let name be the result of collecting a sequence of bytes that are not 0x0A (LF), 0x0D (CR) or 0x22 (\"), given position.\n    /** @type {string | Buffer} */ let name = collectASequenceOfBytes((char)=>char !== 0x0a && char !== 0x0d && char !== 0x22, input, position);\n    // 3. If the byte at position is not 0x22 (\"), return failure. Otherwise, advance position by 1.\n    if (input[position.position] !== 0x22) {\n        return null // name could be 'failure'\n        ;\n    } else {\n        position.position++;\n    }\n    // 4. Replace any occurrence of the following subsequences in name with the given byte:\n    // - `%0A`: 0x0A (LF)\n    // - `%0D`: 0x0D (CR)\n    // - `%22`: 0x22 (\")\n    name = new TextDecoder().decode(name).replace(/%0A/ig, '\\n').replace(/%0D/ig, '\\r').replace(/%22/g, '\"');\n    // 5. Return the UTF-8 decoding without BOM of name.\n    return name;\n}\n/**\n * @param {(char: number) => boolean} condition\n * @param {Buffer} input\n * @param {{ position: number }} position\n */ function collectASequenceOfBytes(condition, input, position) {\n    let start = position.position;\n    while(start < input.length && condition(input[start])){\n        ++start;\n    }\n    return input.subarray(position.position, position.position = start);\n}\n/**\n * @param {Buffer} buf\n * @param {boolean} leading\n * @param {boolean} trailing\n * @param {(charCode: number) => boolean} predicate\n * @returns {Buffer}\n */ function removeChars(buf, leading, trailing, predicate) {\n    let lead = 0;\n    let trail = buf.length - 1;\n    if (leading) {\n        while(lead < buf.length && predicate(buf[lead]))lead++;\n    }\n    if (trailing) {\n        while(trail > 0 && predicate(buf[trail]))trail--;\n    }\n    return lead === 0 && trail === buf.length - 1 ? buf : buf.subarray(lead, trail + 1);\n}\n/**\n * Checks if {@param buffer} starts with {@param start}\n * @param {Buffer} buffer\n * @param {Buffer} start\n * @param {{ position: number }} position\n */ function bufferStartsWith(buffer, start, position) {\n    if (buffer.length < start.length) {\n        return false;\n    }\n    for(let i = 0; i < start.length; i++){\n        if (start[i] !== buffer[position.position + i]) {\n            return false;\n        }\n    }\n    return true;\n}\nmodule.exports = {\n    multipartFormDataParser,\n    validateBoundary\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi93ZWIvZmV0Y2gvZm9ybWRhdGEtcGFyc2VyLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTSxFQUFFQSxXQUFXLEVBQUVDLDRCQUE0QixFQUFFLEdBQUdDLG1CQUFPQSxDQUFDLHFFQUFpQjtBQUMvRSxNQUFNLEVBQUVDLGVBQWUsRUFBRSxHQUFHRCxtQkFBT0EsQ0FBQyxpRUFBUTtBQUM1QyxNQUFNLEVBQUVFLHFCQUFxQixFQUFFQyxnQkFBZ0IsRUFBRSxHQUFHSCxtQkFBT0EsQ0FBQyx5RUFBWTtBQUN4RSxNQUFNLEVBQUVJLFVBQVUsRUFBRSxHQUFHSixtQkFBT0EsQ0FBQyxpRUFBUTtBQUN2QyxNQUFNLEVBQUVLLFNBQVMsRUFBRSxHQUFHTCxtQkFBT0EsQ0FBQyx5RUFBWTtBQUMxQyxNQUFNTSxTQUFTTixtQkFBT0EsQ0FBQyxnQ0FBYTtBQUNwQyxNQUFNLEVBQUVPLE1BQU1DLFFBQVEsRUFBRSxHQUFHUixtQkFBT0EsQ0FBQyxnQ0FBYTtBQUVoRCxNQUFNTyxPQUFPRSxXQUFXRixJQUFJLElBQUlDO0FBRWhDLE1BQU1FLHFCQUFxQkMsT0FBT0MsSUFBSSxDQUFDO0FBQ3ZDLE1BQU1DLGlCQUFpQkYsT0FBT0MsSUFBSSxDQUFDO0FBQ25DLE1BQU1FLEtBQUtILE9BQU9DLElBQUksQ0FBQztBQUN2QixNQUFNRyxTQUFTSixPQUFPQyxJQUFJLENBQUM7QUFFM0I7O0NBRUMsR0FDRCxTQUFTSSxjQUFlQyxLQUFLO0lBQzNCLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJRCxNQUFNRSxNQUFNLEVBQUUsRUFBRUQsRUFBRztRQUNyQyxJQUFJLENBQUNELE1BQU1HLFVBQVUsQ0FBQ0YsS0FBSyxDQUFDLElBQUcsTUFBTyxHQUFHO1lBQ3ZDLE9BQU87UUFDVDtJQUNGO0lBQ0EsT0FBTztBQUNUO0FBRUE7OztDQUdDLEdBQ0QsU0FBU0csaUJBQWtCQyxRQUFRO0lBQ2pDLE1BQU1ILFNBQVNHLFNBQVNILE1BQU07SUFFOUIsd0VBQXdFO0lBQ3hFLElBQUlBLFNBQVMsTUFBTUEsU0FBUyxJQUFJO1FBQzlCLE9BQU87SUFDVDtJQUVBLHlFQUF5RTtJQUN6RSx5RUFBeUU7SUFDekUsMEJBQTBCO0lBQzFCLElBQUssSUFBSUQsSUFBSSxHQUFHQSxJQUFJQyxRQUFRLEVBQUVELEVBQUc7UUFDL0IsTUFBTUssS0FBS0QsU0FBU0YsVUFBVSxDQUFDRjtRQUUvQixJQUFJLENBQ0YsT0FBTyxRQUFRSyxNQUFNLFFBQ3BCQSxNQUFNLFFBQVFBLE1BQU0sUUFDcEJBLE1BQU0sUUFBUUEsTUFBTSxRQUNyQkEsT0FBTyxRQUNQQSxPQUFPLFFBQ1BBLE9BQU8sSUFBRyxHQUNUO1lBQ0QsT0FBTztRQUNUO0lBQ0Y7SUFFQSxPQUFPO0FBQ1Q7QUFFQTs7OztDQUlDLEdBQ0QsU0FBU0Msd0JBQXlCQyxLQUFLLEVBQUVDLFFBQVE7SUFDL0MsMERBQTBEO0lBQzFEcEIsT0FBT29CLGFBQWEsYUFBYUEsU0FBU0MsT0FBTyxLQUFLO0lBRXRELE1BQU1DLGlCQUFpQkYsU0FBU0csVUFBVSxDQUFDQyxHQUFHLENBQUM7SUFFL0MsMEVBQTBFO0lBQzFFLHdFQUF3RTtJQUN4RSw2QkFBNkI7SUFDN0IsSUFBSUYsbUJBQW1CRyxXQUFXO1FBQ2hDLE9BQU87SUFDVDtJQUVBLE1BQU1ULFdBQVdYLE9BQU9DLElBQUksQ0FBQyxDQUFDLEVBQUUsRUFBRWdCLGdCQUFnQixFQUFFO0lBRXBELDRDQUE0QztJQUM1QyxNQUFNSSxZQUFZLEVBQUU7SUFFcEIseUVBQXlFO0lBQ3pFLHFCQUFxQjtJQUNyQixNQUFNQyxXQUFXO1FBQUVBLFVBQVU7SUFBRTtJQUUvQixxREFBcUQ7SUFDckQsSUFBSVIsS0FBSyxDQUFDLEVBQUUsS0FBSyxRQUFRQSxLQUFLLENBQUMsRUFBRSxLQUFLLE1BQU07UUFDMUNRLFNBQVNBLFFBQVEsSUFBSTtJQUN2QjtJQUVBLGlCQUFpQjtJQUNqQixNQUFPLEtBQU07UUFDWCx5RUFBeUU7UUFDekUsMEVBQTBFO1FBQzFFLDRDQUE0QztRQUM1QyxvRUFBb0U7UUFDcEUsSUFBSVIsTUFBTVMsUUFBUSxDQUFDRCxTQUFTQSxRQUFRLEVBQUVBLFNBQVNBLFFBQVEsR0FBR1gsU0FBU0gsTUFBTSxFQUFFZ0IsTUFBTSxDQUFDYixXQUFXO1lBQzNGVyxTQUFTQSxRQUFRLElBQUlYLFNBQVNILE1BQU07UUFDdEMsT0FBTztZQUNMLE9BQU87UUFDVDtRQUVBLHVFQUF1RTtRQUN2RSxpRkFBaUY7UUFDakYsbUVBQW1FO1FBQ25FLElBQ0UsU0FBVWMsUUFBUSxLQUFLUixNQUFNTixNQUFNLEdBQUcsS0FBS2lCLGlCQUFpQlgsT0FBT1gsSUFBSW1CLGFBQ3RFQSxTQUFTQSxRQUFRLEtBQUtSLE1BQU1OLE1BQU0sR0FBRyxLQUFLaUIsaUJBQWlCWCxPQUFPVixRQUFRa0IsV0FDM0U7WUFDQSxPQUFPRDtRQUNUO1FBRUEsNEVBQTRFO1FBQzVFLHFDQUFxQztRQUNyQyxJQUFJUCxLQUFLLENBQUNRLFNBQVNBLFFBQVEsQ0FBQyxLQUFLLFFBQVFSLEtBQUssQ0FBQ1EsU0FBU0EsUUFBUSxHQUFHLEVBQUUsS0FBSyxNQUFNO1lBQzlFLE9BQU87UUFDVDtRQUVBLDZEQUE2RDtRQUM3REEsU0FBU0EsUUFBUSxJQUFJO1FBRXJCLG1FQUFtRTtRQUNuRSx3RUFBd0U7UUFDeEUsa0RBQWtEO1FBQ2xELE1BQU1JLFNBQVNDLDhCQUE4QmIsT0FBT1E7UUFFcEQsSUFBSUksV0FBVyxXQUFXO1lBQ3hCLE9BQU87UUFDVDtRQUVBLElBQUksRUFBRUUsSUFBSSxFQUFFQyxRQUFRLEVBQUVDLFdBQVcsRUFBRUMsUUFBUSxFQUFFLEdBQUdMO1FBRWhELHlFQUF5RTtRQUN6RSxnQ0FBZ0M7UUFDaENKLFNBQVNBLFFBQVEsSUFBSTtRQUVyQiw0Q0FBNEM7UUFDNUMsSUFBSVU7UUFFSiwrREFBK0Q7UUFDL0QsNENBQTRDO1FBQzVDO1lBQ0UsTUFBTUMsZ0JBQWdCbkIsTUFBTW9CLE9BQU8sQ0FBQ3ZCLFNBQVNZLFFBQVEsQ0FBQyxJQUFJRCxTQUFTQSxRQUFRO1lBRTNFLElBQUlXLGtCQUFrQixDQUFDLEdBQUc7Z0JBQ3hCLE9BQU87WUFDVDtZQUVBRCxPQUFPbEIsTUFBTVMsUUFBUSxDQUFDRCxTQUFTQSxRQUFRLEVBQUVXLGdCQUFnQjtZQUV6RFgsU0FBU0EsUUFBUSxJQUFJVSxLQUFLeEIsTUFBTTtZQUVoQyxvRUFBb0U7WUFDcEUsNENBQTRDO1lBQzVDLElBQUl1QixhQUFhLFVBQVU7Z0JBQ3pCQyxPQUFPaEMsT0FBT0MsSUFBSSxDQUFDK0IsS0FBS0csUUFBUSxJQUFJO1lBQ3RDO1FBQ0Y7UUFFQSx1RUFBdUU7UUFDdkUsNEVBQTRFO1FBQzVFLElBQUlyQixLQUFLLENBQUNRLFNBQVNBLFFBQVEsQ0FBQyxLQUFLLFFBQVFSLEtBQUssQ0FBQ1EsU0FBU0EsUUFBUSxHQUFHLEVBQUUsS0FBSyxNQUFNO1lBQzlFLE9BQU87UUFDVCxPQUFPO1lBQ0xBLFNBQVNBLFFBQVEsSUFBSTtRQUN2QjtRQUVBLGlDQUFpQztRQUNqQyxJQUFJYztRQUVKLElBQUlQLGFBQWEsTUFBTTtZQUNyQixtRUFBbUU7WUFDbkVDLGdCQUFnQjtZQUVoQixzRkFBc0Y7WUFFdEYsMkdBQTJHO1lBQzNHLHlGQUF5RjtZQUN6RixJQUFJLENBQUN6QixjQUFjeUIsY0FBYztnQkFDL0JBLGNBQWM7WUFDaEI7WUFFQSw4RkFBOEY7WUFDOUZNLFFBQVEsSUFBSXhDLEtBQUs7Z0JBQUNvQzthQUFLLEVBQUVILFVBQVU7Z0JBQUVRLE1BQU1QO1lBQVk7UUFDekQsT0FBTztZQUNMLG1CQUFtQjtZQUVuQiwrREFBK0Q7WUFDL0RNLFFBQVE5QyxnQkFBZ0JVLE9BQU9DLElBQUksQ0FBQytCO1FBQ3RDO1FBRUEsMEdBQTBHO1FBQzFHckMsT0FBT1IsWUFBWXlDO1FBQ25CakMsT0FBTyxPQUFReUMsVUFBVSxZQUFZakQsWUFBWWlELFVBQVczQyxXQUFXMkM7UUFFdkUsMEVBQTBFO1FBQzFFZixVQUFVaUIsSUFBSSxDQUFDNUMsVUFBVWtDLE1BQU1RLE9BQU9QO0lBQ3hDO0FBQ0Y7QUFFQTs7OztDQUlDLEdBQ0QsU0FBU0YsOEJBQStCYixLQUFLLEVBQUVRLFFBQVE7SUFDckQsaURBQWlEO0lBQ2pELElBQUlNLE9BQU87SUFDWCxJQUFJQyxXQUFXO0lBQ2YsSUFBSUMsY0FBYztJQUNsQixJQUFJQyxXQUFXO0lBRWYsaUJBQWlCO0lBQ2pCLE1BQU8sS0FBTTtRQUNYLGtGQUFrRjtRQUNsRixJQUFJakIsS0FBSyxDQUFDUSxTQUFTQSxRQUFRLENBQUMsS0FBSyxRQUFRUixLQUFLLENBQUNRLFNBQVNBLFFBQVEsR0FBRyxFQUFFLEtBQUssTUFBTTtZQUM5RSwwQ0FBMEM7WUFDMUMsSUFBSU0sU0FBUyxNQUFNO2dCQUNqQixPQUFPO1lBQ1Q7WUFFQSxnREFBZ0Q7WUFDaEQsT0FBTztnQkFBRUE7Z0JBQU1DO2dCQUFVQztnQkFBYUM7WUFBUztRQUNqRDtRQUVBLGdGQUFnRjtRQUNoRiw2REFBNkQ7UUFDN0QsSUFBSVEsYUFBYUMsd0JBQ2YsQ0FBQ0MsT0FBU0EsU0FBUyxRQUFRQSxTQUFTLFFBQVFBLFNBQVMsTUFDckQzQixPQUNBUTtRQUdGLGdGQUFnRjtRQUNoRmlCLGFBQWFHLFlBQVlILFlBQVksTUFBTSxNQUFNLENBQUNFLE9BQVNBLFNBQVMsT0FBT0EsU0FBUztRQUVwRixzRkFBc0Y7UUFDdEYsSUFBSSxDQUFDbEQsc0JBQXNCb0QsSUFBSSxDQUFDSixXQUFXSixRQUFRLEtBQUs7WUFDdEQsT0FBTztRQUNUO1FBRUEsZ0VBQWdFO1FBQ2hFLElBQUlyQixLQUFLLENBQUNRLFNBQVNBLFFBQVEsQ0FBQyxLQUFLLE1BQU07WUFDckMsT0FBTztRQUNUO1FBRUEsOEJBQThCO1FBQzlCQSxTQUFTQSxRQUFRO1FBRWpCLG9GQUFvRjtRQUNwRixzQ0FBc0M7UUFDdENrQix3QkFDRSxDQUFDQyxPQUFTQSxTQUFTLFFBQVFBLFNBQVMsTUFDcEMzQixPQUNBUTtRQUdGLDREQUE0RDtRQUM1RCxPQUFRbEMsNkJBQTZCbUQ7WUFDbkMsS0FBSztnQkFBdUI7b0JBQzFCLG9DQUFvQztvQkFDcENYLE9BQU9DLFdBQVc7b0JBRWxCLHFFQUFxRTtvQkFDckUsMENBQTBDO29CQUMxQyxJQUFJLENBQUNKLGlCQUFpQlgsT0FBT2Ysb0JBQW9CdUIsV0FBVzt3QkFDMUQsT0FBTztvQkFDVDtvQkFFQSx1RUFBdUU7b0JBQ3ZFLDREQUE0RDtvQkFDNURBLFNBQVNBLFFBQVEsSUFBSTtvQkFFckIsd0VBQXdFO29CQUN4RSx5RUFBeUU7b0JBQ3pFLGNBQWM7b0JBQ2RNLE9BQU9nQiwyQkFBMkI5QixPQUFPUTtvQkFFekMsSUFBSU0sU0FBUyxNQUFNO3dCQUNqQixPQUFPO29CQUNUO29CQUVBLDZFQUE2RTtvQkFDN0UsSUFBSUgsaUJBQWlCWCxPQUFPWixnQkFBZ0JvQixXQUFXO3dCQUNyRCxzQ0FBc0M7d0JBQ3RDLElBQUl1QixRQUFRdkIsU0FBU0EsUUFBUSxHQUFHcEIsZUFBZU0sTUFBTTt3QkFFckQsSUFBSU0sS0FBSyxDQUFDK0IsTUFBTSxLQUFLLE1BQU07NEJBQ3pCdkIsU0FBU0EsUUFBUSxJQUFJOzRCQUNyQnVCLFNBQVM7d0JBQ1g7d0JBRUEsSUFBSS9CLEtBQUssQ0FBQytCLE1BQU0sS0FBSyxRQUFRL0IsS0FBSyxDQUFDK0IsUUFBUSxFQUFFLEtBQUssTUFBTTs0QkFDdEQsT0FBTzt3QkFDVDt3QkFFQSw0RUFBNEU7d0JBQzVFLHVEQUF1RDt3QkFDdkR2QixTQUFTQSxRQUFRLElBQUk7d0JBRXJCLDRFQUE0RTt3QkFDNUUsa0ZBQWtGO3dCQUNsRk8sV0FBV2UsMkJBQTJCOUIsT0FBT1E7d0JBRTdDLElBQUlPLGFBQWEsTUFBTTs0QkFDckIsT0FBTzt3QkFDVDtvQkFDRjtvQkFFQTtnQkFDRjtZQUNBLEtBQUs7Z0JBQWdCO29CQUNuQiwrRUFBK0U7b0JBQy9FLGlEQUFpRDtvQkFDakQsSUFBSWlCLGNBQWNOLHdCQUNoQixDQUFDQyxPQUFTQSxTQUFTLFFBQVFBLFNBQVMsTUFDcEMzQixPQUNBUTtvQkFHRixzRUFBc0U7b0JBQ3RFd0IsY0FBY0osWUFBWUksYUFBYSxPQUFPLE1BQU0sQ0FBQ0wsT0FBU0EsU0FBUyxPQUFPQSxTQUFTO29CQUV2RixpRUFBaUU7b0JBQ2pFWCxjQUFjdEMsaUJBQWlCc0Q7b0JBRS9CO2dCQUNGO1lBQ0EsS0FBSztnQkFBNkI7b0JBQ2hDLElBQUlBLGNBQWNOLHdCQUNoQixDQUFDQyxPQUFTQSxTQUFTLFFBQVFBLFNBQVMsTUFDcEMzQixPQUNBUTtvQkFHRndCLGNBQWNKLFlBQVlJLGFBQWEsT0FBTyxNQUFNLENBQUNMLE9BQVNBLFNBQVMsT0FBT0EsU0FBUztvQkFFdkZWLFdBQVd2QyxpQkFBaUJzRDtvQkFFNUI7Z0JBQ0Y7WUFDQTtnQkFBUztvQkFDUCxtRkFBbUY7b0JBQ25GLGlDQUFpQztvQkFDakNOLHdCQUNFLENBQUNDLE9BQVNBLFNBQVMsUUFBUUEsU0FBUyxNQUNwQzNCLE9BQ0FRO2dCQUVKO1FBQ0Y7UUFFQSxpRkFBaUY7UUFDakYscUZBQXFGO1FBQ3JGLElBQUlSLEtBQUssQ0FBQ1EsU0FBU0EsUUFBUSxDQUFDLEtBQUssUUFBUVIsS0FBSyxDQUFDUSxTQUFTQSxRQUFRLEdBQUcsRUFBRSxLQUFLLE1BQU07WUFDOUUsT0FBTztRQUNULE9BQU87WUFDTEEsU0FBU0EsUUFBUSxJQUFJO1FBQ3ZCO0lBQ0Y7QUFDRjtBQUVBOzs7O0NBSUMsR0FDRCxTQUFTc0IsMkJBQTRCOUIsS0FBSyxFQUFFUSxRQUFRO0lBQ2xELHFEQUFxRDtJQUNyRDNCLE9BQU9tQixLQUFLLENBQUNRLFNBQVNBLFFBQVEsR0FBRyxFQUFFLEtBQUs7SUFFeEMsNkhBQTZIO0lBQzdILDRCQUE0QixHQUM1QixJQUFJTSxPQUFPWSx3QkFDVCxDQUFDQyxPQUFTQSxTQUFTLFFBQVFBLFNBQVMsUUFBUUEsU0FBUyxNQUNyRDNCLE9BQ0FRO0lBR0YsZ0dBQWdHO0lBQ2hHLElBQUlSLEtBQUssQ0FBQ1EsU0FBU0EsUUFBUSxDQUFDLEtBQUssTUFBTTtRQUNyQyxPQUFPLEtBQUssMEJBQTBCOztJQUN4QyxPQUFPO1FBQ0xBLFNBQVNBLFFBQVE7SUFDbkI7SUFFQSx1RkFBdUY7SUFDdkYscUJBQXFCO0lBQ3JCLHFCQUFxQjtJQUNyQixvQkFBb0I7SUFDcEJNLE9BQU8sSUFBSW1CLGNBQWNDLE1BQU0sQ0FBQ3BCLE1BQzdCcUIsT0FBTyxDQUFDLFNBQVMsTUFDakJBLE9BQU8sQ0FBQyxTQUFTLE1BQ2pCQSxPQUFPLENBQUMsUUFBUTtJQUVuQixvREFBb0Q7SUFDcEQsT0FBT3JCO0FBQ1Q7QUFFQTs7OztDQUlDLEdBQ0QsU0FBU1ksd0JBQXlCVSxTQUFTLEVBQUVwQyxLQUFLLEVBQUVRLFFBQVE7SUFDMUQsSUFBSTZCLFFBQVE3QixTQUFTQSxRQUFRO0lBRTdCLE1BQU82QixRQUFRckMsTUFBTU4sTUFBTSxJQUFJMEMsVUFBVXBDLEtBQUssQ0FBQ3FDLE1BQU0sRUFBRztRQUN0RCxFQUFFQTtJQUNKO0lBRUEsT0FBT3JDLE1BQU1TLFFBQVEsQ0FBQ0QsU0FBU0EsUUFBUSxFQUFHQSxTQUFTQSxRQUFRLEdBQUc2QjtBQUNoRTtBQUVBOzs7Ozs7Q0FNQyxHQUNELFNBQVNULFlBQWFVLEdBQUcsRUFBRUMsT0FBTyxFQUFFQyxRQUFRLEVBQUVDLFNBQVM7SUFDckQsSUFBSUMsT0FBTztJQUNYLElBQUlDLFFBQVFMLElBQUk1QyxNQUFNLEdBQUc7SUFFekIsSUFBSTZDLFNBQVM7UUFDWCxNQUFPRyxPQUFPSixJQUFJNUMsTUFBTSxJQUFJK0MsVUFBVUgsR0FBRyxDQUFDSSxLQUFLLEVBQUdBO0lBQ3BEO0lBRUEsSUFBSUYsVUFBVTtRQUNaLE1BQU9HLFFBQVEsS0FBS0YsVUFBVUgsR0FBRyxDQUFDSyxNQUFNLEVBQUdBO0lBQzdDO0lBRUEsT0FBT0QsU0FBUyxLQUFLQyxVQUFVTCxJQUFJNUMsTUFBTSxHQUFHLElBQUk0QyxNQUFNQSxJQUFJN0IsUUFBUSxDQUFDaUMsTUFBTUMsUUFBUTtBQUNuRjtBQUVBOzs7OztDQUtDLEdBQ0QsU0FBU2hDLGlCQUFrQmlDLE1BQU0sRUFBRVAsS0FBSyxFQUFFN0IsUUFBUTtJQUNoRCxJQUFJb0MsT0FBT2xELE1BQU0sR0FBRzJDLE1BQU0zQyxNQUFNLEVBQUU7UUFDaEMsT0FBTztJQUNUO0lBRUEsSUFBSyxJQUFJRCxJQUFJLEdBQUdBLElBQUk0QyxNQUFNM0MsTUFBTSxFQUFFRCxJQUFLO1FBQ3JDLElBQUk0QyxLQUFLLENBQUM1QyxFQUFFLEtBQUttRCxNQUFNLENBQUNwQyxTQUFTQSxRQUFRLEdBQUdmLEVBQUUsRUFBRTtZQUM5QyxPQUFPO1FBQ1Q7SUFDRjtJQUVBLE9BQU87QUFDVDtBQUVBb0QsT0FBT0MsT0FBTyxHQUFHO0lBQ2YvQztJQUNBSDtBQUNGIiwic291cmNlcyI6WyJEOlxcSGVsaXhcXG5vZGVfbW9kdWxlc1xcdW5kaWNpXFxsaWJcXHdlYlxcZmV0Y2hcXGZvcm1kYXRhLXBhcnNlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgeyBpc1VTVlN0cmluZywgYnVmZmVyVG9Mb3dlckNhc2VkSGVhZGVyTmFtZSB9ID0gcmVxdWlyZSgnLi4vLi4vY29yZS91dGlsJylcbmNvbnN0IHsgdXRmOERlY29kZUJ5dGVzIH0gPSByZXF1aXJlKCcuL3V0aWwnKVxuY29uc3QgeyBIVFRQX1RPS0VOX0NPREVQT0lOVFMsIGlzb21vcnBoaWNEZWNvZGUgfSA9IHJlcXVpcmUoJy4vZGF0YS11cmwnKVxuY29uc3QgeyBpc0ZpbGVMaWtlIH0gPSByZXF1aXJlKCcuL2ZpbGUnKVxuY29uc3QgeyBtYWtlRW50cnkgfSA9IHJlcXVpcmUoJy4vZm9ybWRhdGEnKVxuY29uc3QgYXNzZXJ0ID0gcmVxdWlyZSgnbm9kZTphc3NlcnQnKVxuY29uc3QgeyBGaWxlOiBOb2RlRmlsZSB9ID0gcmVxdWlyZSgnbm9kZTpidWZmZXInKVxuXG5jb25zdCBGaWxlID0gZ2xvYmFsVGhpcy5GaWxlID8/IE5vZGVGaWxlXG5cbmNvbnN0IGZvcm1EYXRhTmFtZUJ1ZmZlciA9IEJ1ZmZlci5mcm9tKCdmb3JtLWRhdGE7IG5hbWU9XCInKVxuY29uc3QgZmlsZW5hbWVCdWZmZXIgPSBCdWZmZXIuZnJvbSgnOyBmaWxlbmFtZScpXG5jb25zdCBkZCA9IEJ1ZmZlci5mcm9tKCctLScpXG5jb25zdCBkZGNybGYgPSBCdWZmZXIuZnJvbSgnLS1cXHJcXG4nKVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBjaGFyc1xuICovXG5mdW5jdGlvbiBpc0FzY2lpU3RyaW5nIChjaGFycykge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGNoYXJzLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKChjaGFycy5jaGFyQ29kZUF0KGkpICYgfjB4N0YpICE9PSAwKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWVcbn1cblxuLyoqXG4gKiBAc2VlIGh0dHBzOi8vYW5kcmV1Ym90ZWxsYS5naXRodWIuaW8vbXVsdGlwYXJ0LWZvcm0tZGF0YS8jbXVsdGlwYXJ0LWZvcm0tZGF0YS1ib3VuZGFyeVxuICogQHBhcmFtIHtzdHJpbmd9IGJvdW5kYXJ5XG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlQm91bmRhcnkgKGJvdW5kYXJ5KSB7XG4gIGNvbnN0IGxlbmd0aCA9IGJvdW5kYXJ5Lmxlbmd0aFxuXG4gIC8vIC0gaXRzIGxlbmd0aCBpcyBncmVhdGVyIG9yIGVxdWFsIHRvIDI3IGFuZCBsZXNzZXIgb3IgZXF1YWwgdG8gNzAsIGFuZFxuICBpZiAobGVuZ3RoIDwgMjcgfHwgbGVuZ3RoID4gNzApIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIC8vIC0gaXQgaXMgY29tcG9zZWQgYnkgYnl0ZXMgaW4gdGhlIHJhbmdlcyAweDMwIHRvIDB4MzksIDB4NDEgdG8gMHg1QSwgb3JcbiAgLy8gICAweDYxIHRvIDB4N0EsIGluY2x1c2l2ZSAoQVNDSUkgYWxwaGFudW1lcmljKSwgb3Igd2hpY2ggYXJlIDB4MjcgKCcpLFxuICAvLyAgIDB4MkQgKC0pIG9yIDB4NUYgKF8pLlxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgY29uc3QgY3AgPSBib3VuZGFyeS5jaGFyQ29kZUF0KGkpXG5cbiAgICBpZiAoIShcbiAgICAgIChjcCA+PSAweDMwICYmIGNwIDw9IDB4MzkpIHx8XG4gICAgICAoY3AgPj0gMHg0MSAmJiBjcCA8PSAweDVhKSB8fFxuICAgICAgKGNwID49IDB4NjEgJiYgY3AgPD0gMHg3YSkgfHxcbiAgICAgIGNwID09PSAweDI3IHx8XG4gICAgICBjcCA9PT0gMHgyZCB8fFxuICAgICAgY3AgPT09IDB4NWZcbiAgICApKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZVxufVxuXG4vKipcbiAqIEBzZWUgaHR0cHM6Ly9hbmRyZXVib3RlbGxhLmdpdGh1Yi5pby9tdWx0aXBhcnQtZm9ybS1kYXRhLyNtdWx0aXBhcnQtZm9ybS1kYXRhLXBhcnNlclxuICogQHBhcmFtIHtCdWZmZXJ9IGlucHV0XG4gKiBAcGFyYW0ge1JldHVyblR5cGU8aW1wb3J0KCcuL2RhdGEtdXJsJylbJ3BhcnNlTUlNRVR5cGUnXT59IG1pbWVUeXBlXG4gKi9cbmZ1bmN0aW9uIG11bHRpcGFydEZvcm1EYXRhUGFyc2VyIChpbnB1dCwgbWltZVR5cGUpIHtcbiAgLy8gMS4gQXNzZXJ0OiBtaW1lVHlwZeKAmXMgZXNzZW5jZSBpcyBcIm11bHRpcGFydC9mb3JtLWRhdGFcIi5cbiAgYXNzZXJ0KG1pbWVUeXBlICE9PSAnZmFpbHVyZScgJiYgbWltZVR5cGUuZXNzZW5jZSA9PT0gJ211bHRpcGFydC9mb3JtLWRhdGEnKVxuXG4gIGNvbnN0IGJvdW5kYXJ5U3RyaW5nID0gbWltZVR5cGUucGFyYW1ldGVycy5nZXQoJ2JvdW5kYXJ5JylcblxuICAvLyAyLiBJZiBtaW1lVHlwZeKAmXMgcGFyYW1ldGVyc1tcImJvdW5kYXJ5XCJdIGRvZXMgbm90IGV4aXN0LCByZXR1cm4gZmFpbHVyZS5cbiAgLy8gICAgT3RoZXJ3aXNlLCBsZXQgYm91bmRhcnkgYmUgdGhlIHJlc3VsdCBvZiBVVEYtOCBkZWNvZGluZyBtaW1lVHlwZeKAmXNcbiAgLy8gICAgcGFyYW1ldGVyc1tcImJvdW5kYXJ5XCJdLlxuICBpZiAoYm91bmRhcnlTdHJpbmcgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiAnZmFpbHVyZSdcbiAgfVxuXG4gIGNvbnN0IGJvdW5kYXJ5ID0gQnVmZmVyLmZyb20oYC0tJHtib3VuZGFyeVN0cmluZ31gLCAndXRmOCcpXG5cbiAgLy8gMy4gTGV0IGVudHJ5IGxpc3QgYmUgYW4gZW1wdHkgZW50cnkgbGlzdC5cbiAgY29uc3QgZW50cnlMaXN0ID0gW11cblxuICAvLyA0LiBMZXQgcG9zaXRpb24gYmUgYSBwb2ludGVyIHRvIGEgYnl0ZSBpbiBpbnB1dCwgaW5pdGlhbGx5IHBvaW50aW5nIGF0XG4gIC8vICAgIHRoZSBmaXJzdCBieXRlLlxuICBjb25zdCBwb3NpdGlvbiA9IHsgcG9zaXRpb246IDAgfVxuXG4gIC8vIE5vdGU6IHVuZGljaSBhZGRpdGlvbiwgYWxsb3cgXFxyXFxuIGJlZm9yZSB0aGUgYm9keS5cbiAgaWYgKGlucHV0WzBdID09PSAweDBkICYmIGlucHV0WzFdID09PSAweDBhKSB7XG4gICAgcG9zaXRpb24ucG9zaXRpb24gKz0gMlxuICB9XG5cbiAgLy8gNS4gV2hpbGUgdHJ1ZTpcbiAgd2hpbGUgKHRydWUpIHtcbiAgICAvLyA1LjEuIElmIHBvc2l0aW9uIHBvaW50cyB0byBhIHNlcXVlbmNlIG9mIGJ5dGVzIHN0YXJ0aW5nIHdpdGggMHgyRCAweDJEXG4gICAgLy8gICAgICAoYC0tYCkgZm9sbG93ZWQgYnkgYm91bmRhcnksIGFkdmFuY2UgcG9zaXRpb24gYnkgMiArIHRoZSBsZW5ndGggb2ZcbiAgICAvLyAgICAgIGJvdW5kYXJ5LiBPdGhlcndpc2UsIHJldHVybiBmYWlsdXJlLlxuICAgIC8vIE5vdGU6IGJvdW5kYXJ5IGlzIHBhZGRlZCB3aXRoIDIgZGFzaGVzIGFscmVhZHksIG5vIG5lZWQgdG8gYWRkIDIuXG4gICAgaWYgKGlucHV0LnN1YmFycmF5KHBvc2l0aW9uLnBvc2l0aW9uLCBwb3NpdGlvbi5wb3NpdGlvbiArIGJvdW5kYXJ5Lmxlbmd0aCkuZXF1YWxzKGJvdW5kYXJ5KSkge1xuICAgICAgcG9zaXRpb24ucG9zaXRpb24gKz0gYm91bmRhcnkubGVuZ3RoXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAnZmFpbHVyZSdcbiAgICB9XG5cbiAgICAvLyA1LjIuIElmIHBvc2l0aW9uIHBvaW50cyB0byB0aGUgc2VxdWVuY2Ugb2YgYnl0ZXMgMHgyRCAweDJEIDB4MEQgMHgwQVxuICAgIC8vICAgICAgKGAtLWAgZm9sbG93ZWQgYnkgQ1IgTEYpIGZvbGxvd2VkIGJ5IHRoZSBlbmQgb2YgaW5wdXQsIHJldHVybiBlbnRyeSBsaXN0LlxuICAgIC8vIE5vdGU6IGEgYm9keSBkb2VzIE5PVCBuZWVkIHRvIGVuZCB3aXRoIENSTEYuIEl0IGNhbiBlbmQgd2l0aCAtLS5cbiAgICBpZiAoXG4gICAgICAocG9zaXRpb24ucG9zaXRpb24gPT09IGlucHV0Lmxlbmd0aCAtIDIgJiYgYnVmZmVyU3RhcnRzV2l0aChpbnB1dCwgZGQsIHBvc2l0aW9uKSkgfHxcbiAgICAgIChwb3NpdGlvbi5wb3NpdGlvbiA9PT0gaW5wdXQubGVuZ3RoIC0gNCAmJiBidWZmZXJTdGFydHNXaXRoKGlucHV0LCBkZGNybGYsIHBvc2l0aW9uKSlcbiAgICApIHtcbiAgICAgIHJldHVybiBlbnRyeUxpc3RcbiAgICB9XG5cbiAgICAvLyA1LjMuIElmIHBvc2l0aW9uIGRvZXMgbm90IHBvaW50IHRvIGEgc2VxdWVuY2Ugb2YgYnl0ZXMgc3RhcnRpbmcgd2l0aCAweDBEXG4gICAgLy8gICAgICAweDBBIChDUiBMRiksIHJldHVybiBmYWlsdXJlLlxuICAgIGlmIChpbnB1dFtwb3NpdGlvbi5wb3NpdGlvbl0gIT09IDB4MGQgfHwgaW5wdXRbcG9zaXRpb24ucG9zaXRpb24gKyAxXSAhPT0gMHgwYSkge1xuICAgICAgcmV0dXJuICdmYWlsdXJlJ1xuICAgIH1cblxuICAgIC8vIDUuNC4gQWR2YW5jZSBwb3NpdGlvbiBieSAyLiAoVGhpcyBza2lwcyBwYXN0IHRoZSBuZXdsaW5lLilcbiAgICBwb3NpdGlvbi5wb3NpdGlvbiArPSAyXG5cbiAgICAvLyA1LjUuIExldCBuYW1lLCBmaWxlbmFtZSBhbmQgY29udGVudFR5cGUgYmUgdGhlIHJlc3VsdCBvZiBwYXJzaW5nXG4gICAgLy8gICAgICBtdWx0aXBhcnQvZm9ybS1kYXRhIGhlYWRlcnMgb24gaW5wdXQgYW5kIHBvc2l0aW9uLCBpZiB0aGUgcmVzdWx0XG4gICAgLy8gICAgICBpcyBub3QgZmFpbHVyZS4gT3RoZXJ3aXNlLCByZXR1cm4gZmFpbHVyZS5cbiAgICBjb25zdCByZXN1bHQgPSBwYXJzZU11bHRpcGFydEZvcm1EYXRhSGVhZGVycyhpbnB1dCwgcG9zaXRpb24pXG5cbiAgICBpZiAocmVzdWx0ID09PSAnZmFpbHVyZScpIHtcbiAgICAgIHJldHVybiAnZmFpbHVyZSdcbiAgICB9XG5cbiAgICBsZXQgeyBuYW1lLCBmaWxlbmFtZSwgY29udGVudFR5cGUsIGVuY29kaW5nIH0gPSByZXN1bHRcblxuICAgIC8vIDUuNi4gQWR2YW5jZSBwb3NpdGlvbiBieSAyLiAoVGhpcyBza2lwcyBwYXN0IHRoZSBlbXB0eSBsaW5lIHRoYXQgbWFya3NcbiAgICAvLyAgICAgIHRoZSBlbmQgb2YgdGhlIGhlYWRlcnMuKVxuICAgIHBvc2l0aW9uLnBvc2l0aW9uICs9IDJcblxuICAgIC8vIDUuNy4gTGV0IGJvZHkgYmUgdGhlIGVtcHR5IGJ5dGUgc2VxdWVuY2UuXG4gICAgbGV0IGJvZHlcblxuICAgIC8vIDUuOC4gQm9keSBsb29wOiBXaGlsZSBwb3NpdGlvbiBpcyBub3QgcGFzdCB0aGUgZW5kIG9mIGlucHV0OlxuICAgIC8vIFRPRE86IHRoZSBzdGVwcyBoZXJlIGFyZSBjb21wbGV0ZWx5IHdyb25nXG4gICAge1xuICAgICAgY29uc3QgYm91bmRhcnlJbmRleCA9IGlucHV0LmluZGV4T2YoYm91bmRhcnkuc3ViYXJyYXkoMiksIHBvc2l0aW9uLnBvc2l0aW9uKVxuXG4gICAgICBpZiAoYm91bmRhcnlJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgcmV0dXJuICdmYWlsdXJlJ1xuICAgICAgfVxuXG4gICAgICBib2R5ID0gaW5wdXQuc3ViYXJyYXkocG9zaXRpb24ucG9zaXRpb24sIGJvdW5kYXJ5SW5kZXggLSA0KVxuXG4gICAgICBwb3NpdGlvbi5wb3NpdGlvbiArPSBib2R5Lmxlbmd0aFxuXG4gICAgICAvLyBOb3RlOiBwb3NpdGlvbiBtdXN0IGJlIGFkdmFuY2VkIGJ5IHRoZSBib2R5J3MgbGVuZ3RoIGJlZm9yZSBiZWluZ1xuICAgICAgLy8gZGVjb2RlZCwgb3RoZXJ3aXNlIHRoZSBwYXJzaW5nIHdpbGwgZmFpbC5cbiAgICAgIGlmIChlbmNvZGluZyA9PT0gJ2Jhc2U2NCcpIHtcbiAgICAgICAgYm9keSA9IEJ1ZmZlci5mcm9tKGJvZHkudG9TdHJpbmcoKSwgJ2Jhc2U2NCcpXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gNS45LiBJZiBwb3NpdGlvbiBkb2VzIG5vdCBwb2ludCB0byBhIHNlcXVlbmNlIG9mIGJ5dGVzIHN0YXJ0aW5nIHdpdGhcbiAgICAvLyAgICAgIDB4MEQgMHgwQSAoQ1IgTEYpLCByZXR1cm4gZmFpbHVyZS4gT3RoZXJ3aXNlLCBhZHZhbmNlIHBvc2l0aW9uIGJ5IDIuXG4gICAgaWYgKGlucHV0W3Bvc2l0aW9uLnBvc2l0aW9uXSAhPT0gMHgwZCB8fCBpbnB1dFtwb3NpdGlvbi5wb3NpdGlvbiArIDFdICE9PSAweDBhKSB7XG4gICAgICByZXR1cm4gJ2ZhaWx1cmUnXG4gICAgfSBlbHNlIHtcbiAgICAgIHBvc2l0aW9uLnBvc2l0aW9uICs9IDJcbiAgICB9XG5cbiAgICAvLyA1LjEwLiBJZiBmaWxlbmFtZSBpcyBub3QgbnVsbDpcbiAgICBsZXQgdmFsdWVcblxuICAgIGlmIChmaWxlbmFtZSAhPT0gbnVsbCkge1xuICAgICAgLy8gNS4xMC4xLiBJZiBjb250ZW50VHlwZSBpcyBudWxsLCBzZXQgY29udGVudFR5cGUgdG8gXCJ0ZXh0L3BsYWluXCIuXG4gICAgICBjb250ZW50VHlwZSA/Pz0gJ3RleHQvcGxhaW4nXG5cbiAgICAgIC8vIDUuMTAuMi4gSWYgY29udGVudFR5cGUgaXMgbm90IGFuIEFTQ0lJIHN0cmluZywgc2V0IGNvbnRlbnRUeXBlIHRvIHRoZSBlbXB0eSBzdHJpbmcuXG5cbiAgICAgIC8vIE5vdGU6IGBidWZmZXIuaXNBc2NpaWAgY2FuIGJlIHVzZWQgYXQgemVyby1jb3N0LCBidXQgY29udmVydGluZyBhIHN0cmluZyB0byBhIGJ1ZmZlciBpcyBhIGhpZ2ggb3ZlcmhlYWQuXG4gICAgICAvLyBDb250ZW50LVR5cGUgaXMgYSByZWxhdGl2ZWx5IHNtYWxsIHN0cmluZywgc28gaXQgaXMgZmFzdGVyIHRvIHVzZSBgU3RyaW5nI2NoYXJDb2RlQXRgLlxuICAgICAgaWYgKCFpc0FzY2lpU3RyaW5nKGNvbnRlbnRUeXBlKSkge1xuICAgICAgICBjb250ZW50VHlwZSA9ICcnXG4gICAgICB9XG5cbiAgICAgIC8vIDUuMTAuMy4gTGV0IHZhbHVlIGJlIGEgbmV3IEZpbGUgb2JqZWN0IHdpdGggbmFtZSBmaWxlbmFtZSwgdHlwZSBjb250ZW50VHlwZSwgYW5kIGJvZHkgYm9keS5cbiAgICAgIHZhbHVlID0gbmV3IEZpbGUoW2JvZHldLCBmaWxlbmFtZSwgeyB0eXBlOiBjb250ZW50VHlwZSB9KVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyA1LjExLiBPdGhlcndpc2U6XG5cbiAgICAgIC8vIDUuMTEuMS4gTGV0IHZhbHVlIGJlIHRoZSBVVEYtOCBkZWNvZGluZyB3aXRob3V0IEJPTSBvZiBib2R5LlxuICAgICAgdmFsdWUgPSB1dGY4RGVjb2RlQnl0ZXMoQnVmZmVyLmZyb20oYm9keSkpXG4gICAgfVxuXG4gICAgLy8gNS4xMi4gQXNzZXJ0OiBuYW1lIGlzIGEgc2NhbGFyIHZhbHVlIHN0cmluZyBhbmQgdmFsdWUgaXMgZWl0aGVyIGEgc2NhbGFyIHZhbHVlIHN0cmluZyBvciBhIEZpbGUgb2JqZWN0LlxuICAgIGFzc2VydChpc1VTVlN0cmluZyhuYW1lKSlcbiAgICBhc3NlcnQoKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgaXNVU1ZTdHJpbmcodmFsdWUpKSB8fCBpc0ZpbGVMaWtlKHZhbHVlKSlcblxuICAgIC8vIDUuMTMuIENyZWF0ZSBhbiBlbnRyeSB3aXRoIG5hbWUgYW5kIHZhbHVlLCBhbmQgYXBwZW5kIGl0IHRvIGVudHJ5IGxpc3QuXG4gICAgZW50cnlMaXN0LnB1c2gobWFrZUVudHJ5KG5hbWUsIHZhbHVlLCBmaWxlbmFtZSkpXG4gIH1cbn1cblxuLyoqXG4gKiBAc2VlIGh0dHBzOi8vYW5kcmV1Ym90ZWxsYS5naXRodWIuaW8vbXVsdGlwYXJ0LWZvcm0tZGF0YS8jcGFyc2UtbXVsdGlwYXJ0LWZvcm0tZGF0YS1oZWFkZXJzXG4gKiBAcGFyYW0ge0J1ZmZlcn0gaW5wdXRcbiAqIEBwYXJhbSB7eyBwb3NpdGlvbjogbnVtYmVyIH19IHBvc2l0aW9uXG4gKi9cbmZ1bmN0aW9uIHBhcnNlTXVsdGlwYXJ0Rm9ybURhdGFIZWFkZXJzIChpbnB1dCwgcG9zaXRpb24pIHtcbiAgLy8gMS4gTGV0IG5hbWUsIGZpbGVuYW1lIGFuZCBjb250ZW50VHlwZSBiZSBudWxsLlxuICBsZXQgbmFtZSA9IG51bGxcbiAgbGV0IGZpbGVuYW1lID0gbnVsbFxuICBsZXQgY29udGVudFR5cGUgPSBudWxsXG4gIGxldCBlbmNvZGluZyA9IG51bGxcblxuICAvLyAyLiBXaGlsZSB0cnVlOlxuICB3aGlsZSAodHJ1ZSkge1xuICAgIC8vIDIuMS4gSWYgcG9zaXRpb24gcG9pbnRzIHRvIGEgc2VxdWVuY2Ugb2YgYnl0ZXMgc3RhcnRpbmcgd2l0aCAweDBEIDB4MEEgKENSIExGKTpcbiAgICBpZiAoaW5wdXRbcG9zaXRpb24ucG9zaXRpb25dID09PSAweDBkICYmIGlucHV0W3Bvc2l0aW9uLnBvc2l0aW9uICsgMV0gPT09IDB4MGEpIHtcbiAgICAgIC8vIDIuMS4xLiBJZiBuYW1lIGlzIG51bGwsIHJldHVybiBmYWlsdXJlLlxuICAgICAgaWYgKG5hbWUgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICdmYWlsdXJlJ1xuICAgICAgfVxuXG4gICAgICAvLyAyLjEuMi4gUmV0dXJuIG5hbWUsIGZpbGVuYW1lIGFuZCBjb250ZW50VHlwZS5cbiAgICAgIHJldHVybiB7IG5hbWUsIGZpbGVuYW1lLCBjb250ZW50VHlwZSwgZW5jb2RpbmcgfVxuICAgIH1cblxuICAgIC8vIDIuMi4gTGV0IGhlYWRlciBuYW1lIGJlIHRoZSByZXN1bHQgb2YgY29sbGVjdGluZyBhIHNlcXVlbmNlIG9mIGJ5dGVzIHRoYXQgYXJlXG4gICAgLy8gICAgICBub3QgMHgwQSAoTEYpLCAweDBEIChDUikgb3IgMHgzQSAoOiksIGdpdmVuIHBvc2l0aW9uLlxuICAgIGxldCBoZWFkZXJOYW1lID0gY29sbGVjdEFTZXF1ZW5jZU9mQnl0ZXMoXG4gICAgICAoY2hhcikgPT4gY2hhciAhPT0gMHgwYSAmJiBjaGFyICE9PSAweDBkICYmIGNoYXIgIT09IDB4M2EsXG4gICAgICBpbnB1dCxcbiAgICAgIHBvc2l0aW9uXG4gICAgKVxuXG4gICAgLy8gMi4zLiBSZW1vdmUgYW55IEhUVFAgdGFiIG9yIHNwYWNlIGJ5dGVzIGZyb20gdGhlIHN0YXJ0IG9yIGVuZCBvZiBoZWFkZXIgbmFtZS5cbiAgICBoZWFkZXJOYW1lID0gcmVtb3ZlQ2hhcnMoaGVhZGVyTmFtZSwgdHJ1ZSwgdHJ1ZSwgKGNoYXIpID0+IGNoYXIgPT09IDB4OSB8fCBjaGFyID09PSAweDIwKVxuXG4gICAgLy8gMi40LiBJZiBoZWFkZXIgbmFtZSBkb2VzIG5vdCBtYXRjaCB0aGUgZmllbGQtbmFtZSB0b2tlbiBwcm9kdWN0aW9uLCByZXR1cm4gZmFpbHVyZS5cbiAgICBpZiAoIUhUVFBfVE9LRU5fQ09ERVBPSU5UUy50ZXN0KGhlYWRlck5hbWUudG9TdHJpbmcoKSkpIHtcbiAgICAgIHJldHVybiAnZmFpbHVyZSdcbiAgICB9XG5cbiAgICAvLyAyLjUuIElmIHRoZSBieXRlIGF0IHBvc2l0aW9uIGlzIG5vdCAweDNBICg6KSwgcmV0dXJuIGZhaWx1cmUuXG4gICAgaWYgKGlucHV0W3Bvc2l0aW9uLnBvc2l0aW9uXSAhPT0gMHgzYSkge1xuICAgICAgcmV0dXJuICdmYWlsdXJlJ1xuICAgIH1cblxuICAgIC8vIDIuNi4gQWR2YW5jZSBwb3NpdGlvbiBieSAxLlxuICAgIHBvc2l0aW9uLnBvc2l0aW9uKytcblxuICAgIC8vIDIuNy4gQ29sbGVjdCBhIHNlcXVlbmNlIG9mIGJ5dGVzIHRoYXQgYXJlIEhUVFAgdGFiIG9yIHNwYWNlIGJ5dGVzIGdpdmVuIHBvc2l0aW9uLlxuICAgIC8vICAgICAgKERvIG5vdGhpbmcgd2l0aCB0aG9zZSBieXRlcy4pXG4gICAgY29sbGVjdEFTZXF1ZW5jZU9mQnl0ZXMoXG4gICAgICAoY2hhcikgPT4gY2hhciA9PT0gMHgyMCB8fCBjaGFyID09PSAweDA5LFxuICAgICAgaW5wdXQsXG4gICAgICBwb3NpdGlvblxuICAgIClcblxuICAgIC8vIDIuOC4gQnl0ZS1sb3dlcmNhc2UgaGVhZGVyIG5hbWUgYW5kIHN3aXRjaCBvbiB0aGUgcmVzdWx0OlxuICAgIHN3aXRjaCAoYnVmZmVyVG9Mb3dlckNhc2VkSGVhZGVyTmFtZShoZWFkZXJOYW1lKSkge1xuICAgICAgY2FzZSAnY29udGVudC1kaXNwb3NpdGlvbic6IHtcbiAgICAgICAgLy8gMS4gU2V0IG5hbWUgYW5kIGZpbGVuYW1lIHRvIG51bGwuXG4gICAgICAgIG5hbWUgPSBmaWxlbmFtZSA9IG51bGxcblxuICAgICAgICAvLyAyLiBJZiBwb3NpdGlvbiBkb2VzIG5vdCBwb2ludCB0byBhIHNlcXVlbmNlIG9mIGJ5dGVzIHN0YXJ0aW5nIHdpdGhcbiAgICAgICAgLy8gICAgYGZvcm0tZGF0YTsgbmFtZT1cImAsIHJldHVybiBmYWlsdXJlLlxuICAgICAgICBpZiAoIWJ1ZmZlclN0YXJ0c1dpdGgoaW5wdXQsIGZvcm1EYXRhTmFtZUJ1ZmZlciwgcG9zaXRpb24pKSB7XG4gICAgICAgICAgcmV0dXJuICdmYWlsdXJlJ1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gMy4gQWR2YW5jZSBwb3NpdGlvbiBzbyBpdCBwb2ludHMgYXQgdGhlIGJ5dGUgYWZ0ZXIgdGhlIG5leHQgMHgyMiAoXCIpXG4gICAgICAgIC8vICAgIGJ5dGUgKHRoZSBvbmUgaW4gdGhlIHNlcXVlbmNlIG9mIGJ5dGVzIG1hdGNoZWQgYWJvdmUpLlxuICAgICAgICBwb3NpdGlvbi5wb3NpdGlvbiArPSAxN1xuXG4gICAgICAgIC8vIDQuIFNldCBuYW1lIHRvIHRoZSByZXN1bHQgb2YgcGFyc2luZyBhIG11bHRpcGFydC9mb3JtLWRhdGEgbmFtZSBnaXZlblxuICAgICAgICAvLyAgICBpbnB1dCBhbmQgcG9zaXRpb24sIGlmIHRoZSByZXN1bHQgaXMgbm90IGZhaWx1cmUuIE90aGVyd2lzZSwgcmV0dXJuXG4gICAgICAgIC8vICAgIGZhaWx1cmUuXG4gICAgICAgIG5hbWUgPSBwYXJzZU11bHRpcGFydEZvcm1EYXRhTmFtZShpbnB1dCwgcG9zaXRpb24pXG5cbiAgICAgICAgaWYgKG5hbWUgPT09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gJ2ZhaWx1cmUnXG4gICAgICAgIH1cblxuICAgICAgICAvLyA1LiBJZiBwb3NpdGlvbiBwb2ludHMgdG8gYSBzZXF1ZW5jZSBvZiBieXRlcyBzdGFydGluZyB3aXRoIGA7IGZpbGVuYW1lPVwiYDpcbiAgICAgICAgaWYgKGJ1ZmZlclN0YXJ0c1dpdGgoaW5wdXQsIGZpbGVuYW1lQnVmZmVyLCBwb3NpdGlvbikpIHtcbiAgICAgICAgICAvLyBOb3RlOiB1bmRpY2kgYWxzbyBoYW5kbGVzIGZpbGVuYW1lKlxuICAgICAgICAgIGxldCBjaGVjayA9IHBvc2l0aW9uLnBvc2l0aW9uICsgZmlsZW5hbWVCdWZmZXIubGVuZ3RoXG5cbiAgICAgICAgICBpZiAoaW5wdXRbY2hlY2tdID09PSAweDJhKSB7XG4gICAgICAgICAgICBwb3NpdGlvbi5wb3NpdGlvbiArPSAxXG4gICAgICAgICAgICBjaGVjayArPSAxXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGlucHV0W2NoZWNrXSAhPT0gMHgzZCB8fCBpbnB1dFtjaGVjayArIDFdICE9PSAweDIyKSB7IC8vID1cIlxuICAgICAgICAgICAgcmV0dXJuICdmYWlsdXJlJ1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIDEuIEFkdmFuY2UgcG9zaXRpb24gc28gaXQgcG9pbnRzIGF0IHRoZSBieXRlIGFmdGVyIHRoZSBuZXh0IDB4MjIgKFwiKSBieXRlXG4gICAgICAgICAgLy8gICAgKHRoZSBvbmUgaW4gdGhlIHNlcXVlbmNlIG9mIGJ5dGVzIG1hdGNoZWQgYWJvdmUpLlxuICAgICAgICAgIHBvc2l0aW9uLnBvc2l0aW9uICs9IDEyXG5cbiAgICAgICAgICAvLyAyLiBTZXQgZmlsZW5hbWUgdG8gdGhlIHJlc3VsdCBvZiBwYXJzaW5nIGEgbXVsdGlwYXJ0L2Zvcm0tZGF0YSBuYW1lIGdpdmVuXG4gICAgICAgICAgLy8gICAgaW5wdXQgYW5kIHBvc2l0aW9uLCBpZiB0aGUgcmVzdWx0IGlzIG5vdCBmYWlsdXJlLiBPdGhlcndpc2UsIHJldHVybiBmYWlsdXJlLlxuICAgICAgICAgIGZpbGVuYW1lID0gcGFyc2VNdWx0aXBhcnRGb3JtRGF0YU5hbWUoaW5wdXQsIHBvc2l0aW9uKVxuXG4gICAgICAgICAgaWYgKGZpbGVuYW1lID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gJ2ZhaWx1cmUnXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIGNhc2UgJ2NvbnRlbnQtdHlwZSc6IHtcbiAgICAgICAgLy8gMS4gTGV0IGhlYWRlciB2YWx1ZSBiZSB0aGUgcmVzdWx0IG9mIGNvbGxlY3RpbmcgYSBzZXF1ZW5jZSBvZiBieXRlcyB0aGF0IGFyZVxuICAgICAgICAvLyAgICBub3QgMHgwQSAoTEYpIG9yIDB4MEQgKENSKSwgZ2l2ZW4gcG9zaXRpb24uXG4gICAgICAgIGxldCBoZWFkZXJWYWx1ZSA9IGNvbGxlY3RBU2VxdWVuY2VPZkJ5dGVzKFxuICAgICAgICAgIChjaGFyKSA9PiBjaGFyICE9PSAweDBhICYmIGNoYXIgIT09IDB4MGQsXG4gICAgICAgICAgaW5wdXQsXG4gICAgICAgICAgcG9zaXRpb25cbiAgICAgICAgKVxuXG4gICAgICAgIC8vIDIuIFJlbW92ZSBhbnkgSFRUUCB0YWIgb3Igc3BhY2UgYnl0ZXMgZnJvbSB0aGUgZW5kIG9mIGhlYWRlciB2YWx1ZS5cbiAgICAgICAgaGVhZGVyVmFsdWUgPSByZW1vdmVDaGFycyhoZWFkZXJWYWx1ZSwgZmFsc2UsIHRydWUsIChjaGFyKSA9PiBjaGFyID09PSAweDkgfHwgY2hhciA9PT0gMHgyMClcblxuICAgICAgICAvLyAzLiBTZXQgY29udGVudFR5cGUgdG8gdGhlIGlzb21vcnBoaWMgZGVjb2Rpbmcgb2YgaGVhZGVyIHZhbHVlLlxuICAgICAgICBjb250ZW50VHlwZSA9IGlzb21vcnBoaWNEZWNvZGUoaGVhZGVyVmFsdWUpXG5cbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIGNhc2UgJ2NvbnRlbnQtdHJhbnNmZXItZW5jb2RpbmcnOiB7XG4gICAgICAgIGxldCBoZWFkZXJWYWx1ZSA9IGNvbGxlY3RBU2VxdWVuY2VPZkJ5dGVzKFxuICAgICAgICAgIChjaGFyKSA9PiBjaGFyICE9PSAweDBhICYmIGNoYXIgIT09IDB4MGQsXG4gICAgICAgICAgaW5wdXQsXG4gICAgICAgICAgcG9zaXRpb25cbiAgICAgICAgKVxuXG4gICAgICAgIGhlYWRlclZhbHVlID0gcmVtb3ZlQ2hhcnMoaGVhZGVyVmFsdWUsIGZhbHNlLCB0cnVlLCAoY2hhcikgPT4gY2hhciA9PT0gMHg5IHx8IGNoYXIgPT09IDB4MjApXG5cbiAgICAgICAgZW5jb2RpbmcgPSBpc29tb3JwaGljRGVjb2RlKGhlYWRlclZhbHVlKVxuXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIC8vIENvbGxlY3QgYSBzZXF1ZW5jZSBvZiBieXRlcyB0aGF0IGFyZSBub3QgMHgwQSAoTEYpIG9yIDB4MEQgKENSKSwgZ2l2ZW4gcG9zaXRpb24uXG4gICAgICAgIC8vIChEbyBub3RoaW5nIHdpdGggdGhvc2UgYnl0ZXMuKVxuICAgICAgICBjb2xsZWN0QVNlcXVlbmNlT2ZCeXRlcyhcbiAgICAgICAgICAoY2hhcikgPT4gY2hhciAhPT0gMHgwYSAmJiBjaGFyICE9PSAweDBkLFxuICAgICAgICAgIGlucHV0LFxuICAgICAgICAgIHBvc2l0aW9uXG4gICAgICAgIClcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyAyLjkuIElmIHBvc2l0aW9uIGRvZXMgbm90IHBvaW50IHRvIGEgc2VxdWVuY2Ugb2YgYnl0ZXMgc3RhcnRpbmcgd2l0aCAweDBEIDB4MEFcbiAgICAvLyAgICAgIChDUiBMRiksIHJldHVybiBmYWlsdXJlLiBPdGhlcndpc2UsIGFkdmFuY2UgcG9zaXRpb24gYnkgMiAocGFzdCB0aGUgbmV3bGluZSkuXG4gICAgaWYgKGlucHV0W3Bvc2l0aW9uLnBvc2l0aW9uXSAhPT0gMHgwZCAmJiBpbnB1dFtwb3NpdGlvbi5wb3NpdGlvbiArIDFdICE9PSAweDBhKSB7XG4gICAgICByZXR1cm4gJ2ZhaWx1cmUnXG4gICAgfSBlbHNlIHtcbiAgICAgIHBvc2l0aW9uLnBvc2l0aW9uICs9IDJcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBAc2VlIGh0dHBzOi8vYW5kcmV1Ym90ZWxsYS5naXRodWIuaW8vbXVsdGlwYXJ0LWZvcm0tZGF0YS8jcGFyc2UtYS1tdWx0aXBhcnQtZm9ybS1kYXRhLW5hbWVcbiAqIEBwYXJhbSB7QnVmZmVyfSBpbnB1dFxuICogQHBhcmFtIHt7IHBvc2l0aW9uOiBudW1iZXIgfX0gcG9zaXRpb25cbiAqL1xuZnVuY3Rpb24gcGFyc2VNdWx0aXBhcnRGb3JtRGF0YU5hbWUgKGlucHV0LCBwb3NpdGlvbikge1xuICAvLyAxLiBBc3NlcnQ6IFRoZSBieXRlIGF0IChwb3NpdGlvbiAtIDEpIGlzIDB4MjIgKFwiKS5cbiAgYXNzZXJ0KGlucHV0W3Bvc2l0aW9uLnBvc2l0aW9uIC0gMV0gPT09IDB4MjIpXG5cbiAgLy8gMi4gTGV0IG5hbWUgYmUgdGhlIHJlc3VsdCBvZiBjb2xsZWN0aW5nIGEgc2VxdWVuY2Ugb2YgYnl0ZXMgdGhhdCBhcmUgbm90IDB4MEEgKExGKSwgMHgwRCAoQ1IpIG9yIDB4MjIgKFwiKSwgZ2l2ZW4gcG9zaXRpb24uXG4gIC8qKiBAdHlwZSB7c3RyaW5nIHwgQnVmZmVyfSAqL1xuICBsZXQgbmFtZSA9IGNvbGxlY3RBU2VxdWVuY2VPZkJ5dGVzKFxuICAgIChjaGFyKSA9PiBjaGFyICE9PSAweDBhICYmIGNoYXIgIT09IDB4MGQgJiYgY2hhciAhPT0gMHgyMixcbiAgICBpbnB1dCxcbiAgICBwb3NpdGlvblxuICApXG5cbiAgLy8gMy4gSWYgdGhlIGJ5dGUgYXQgcG9zaXRpb24gaXMgbm90IDB4MjIgKFwiKSwgcmV0dXJuIGZhaWx1cmUuIE90aGVyd2lzZSwgYWR2YW5jZSBwb3NpdGlvbiBieSAxLlxuICBpZiAoaW5wdXRbcG9zaXRpb24ucG9zaXRpb25dICE9PSAweDIyKSB7XG4gICAgcmV0dXJuIG51bGwgLy8gbmFtZSBjb3VsZCBiZSAnZmFpbHVyZSdcbiAgfSBlbHNlIHtcbiAgICBwb3NpdGlvbi5wb3NpdGlvbisrXG4gIH1cblxuICAvLyA0LiBSZXBsYWNlIGFueSBvY2N1cnJlbmNlIG9mIHRoZSBmb2xsb3dpbmcgc3Vic2VxdWVuY2VzIGluIG5hbWUgd2l0aCB0aGUgZ2l2ZW4gYnl0ZTpcbiAgLy8gLSBgJTBBYDogMHgwQSAoTEYpXG4gIC8vIC0gYCUwRGA6IDB4MEQgKENSKVxuICAvLyAtIGAlMjJgOiAweDIyIChcIilcbiAgbmFtZSA9IG5ldyBUZXh0RGVjb2RlcigpLmRlY29kZShuYW1lKVxuICAgIC5yZXBsYWNlKC8lMEEvaWcsICdcXG4nKVxuICAgIC5yZXBsYWNlKC8lMEQvaWcsICdcXHInKVxuICAgIC5yZXBsYWNlKC8lMjIvZywgJ1wiJylcblxuICAvLyA1LiBSZXR1cm4gdGhlIFVURi04IGRlY29kaW5nIHdpdGhvdXQgQk9NIG9mIG5hbWUuXG4gIHJldHVybiBuYW1lXG59XG5cbi8qKlxuICogQHBhcmFtIHsoY2hhcjogbnVtYmVyKSA9PiBib29sZWFufSBjb25kaXRpb25cbiAqIEBwYXJhbSB7QnVmZmVyfSBpbnB1dFxuICogQHBhcmFtIHt7IHBvc2l0aW9uOiBudW1iZXIgfX0gcG9zaXRpb25cbiAqL1xuZnVuY3Rpb24gY29sbGVjdEFTZXF1ZW5jZU9mQnl0ZXMgKGNvbmRpdGlvbiwgaW5wdXQsIHBvc2l0aW9uKSB7XG4gIGxldCBzdGFydCA9IHBvc2l0aW9uLnBvc2l0aW9uXG5cbiAgd2hpbGUgKHN0YXJ0IDwgaW5wdXQubGVuZ3RoICYmIGNvbmRpdGlvbihpbnB1dFtzdGFydF0pKSB7XG4gICAgKytzdGFydFxuICB9XG5cbiAgcmV0dXJuIGlucHV0LnN1YmFycmF5KHBvc2l0aW9uLnBvc2l0aW9uLCAocG9zaXRpb24ucG9zaXRpb24gPSBzdGFydCkpXG59XG5cbi8qKlxuICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZlxuICogQHBhcmFtIHtib29sZWFufSBsZWFkaW5nXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHRyYWlsaW5nXG4gKiBAcGFyYW0geyhjaGFyQ29kZTogbnVtYmVyKSA9PiBib29sZWFufSBwcmVkaWNhdGVcbiAqIEByZXR1cm5zIHtCdWZmZXJ9XG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUNoYXJzIChidWYsIGxlYWRpbmcsIHRyYWlsaW5nLCBwcmVkaWNhdGUpIHtcbiAgbGV0IGxlYWQgPSAwXG4gIGxldCB0cmFpbCA9IGJ1Zi5sZW5ndGggLSAxXG5cbiAgaWYgKGxlYWRpbmcpIHtcbiAgICB3aGlsZSAobGVhZCA8IGJ1Zi5sZW5ndGggJiYgcHJlZGljYXRlKGJ1ZltsZWFkXSkpIGxlYWQrK1xuICB9XG5cbiAgaWYgKHRyYWlsaW5nKSB7XG4gICAgd2hpbGUgKHRyYWlsID4gMCAmJiBwcmVkaWNhdGUoYnVmW3RyYWlsXSkpIHRyYWlsLS1cbiAgfVxuXG4gIHJldHVybiBsZWFkID09PSAwICYmIHRyYWlsID09PSBidWYubGVuZ3RoIC0gMSA/IGJ1ZiA6IGJ1Zi5zdWJhcnJheShsZWFkLCB0cmFpbCArIDEpXG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIHtAcGFyYW0gYnVmZmVyfSBzdGFydHMgd2l0aCB7QHBhcmFtIHN0YXJ0fVxuICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZmZlclxuICogQHBhcmFtIHtCdWZmZXJ9IHN0YXJ0XG4gKiBAcGFyYW0ge3sgcG9zaXRpb246IG51bWJlciB9fSBwb3NpdGlvblxuICovXG5mdW5jdGlvbiBidWZmZXJTdGFydHNXaXRoIChidWZmZXIsIHN0YXJ0LCBwb3NpdGlvbikge1xuICBpZiAoYnVmZmVyLmxlbmd0aCA8IHN0YXJ0Lmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdGFydC5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdGFydFtpXSAhPT0gYnVmZmVyW3Bvc2l0aW9uLnBvc2l0aW9uICsgaV0pIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlXG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBtdWx0aXBhcnRGb3JtRGF0YVBhcnNlcixcbiAgdmFsaWRhdGVCb3VuZGFyeVxufVxuIl0sIm5hbWVzIjpbImlzVVNWU3RyaW5nIiwiYnVmZmVyVG9Mb3dlckNhc2VkSGVhZGVyTmFtZSIsInJlcXVpcmUiLCJ1dGY4RGVjb2RlQnl0ZXMiLCJIVFRQX1RPS0VOX0NPREVQT0lOVFMiLCJpc29tb3JwaGljRGVjb2RlIiwiaXNGaWxlTGlrZSIsIm1ha2VFbnRyeSIsImFzc2VydCIsIkZpbGUiLCJOb2RlRmlsZSIsImdsb2JhbFRoaXMiLCJmb3JtRGF0YU5hbWVCdWZmZXIiLCJCdWZmZXIiLCJmcm9tIiwiZmlsZW5hbWVCdWZmZXIiLCJkZCIsImRkY3JsZiIsImlzQXNjaWlTdHJpbmciLCJjaGFycyIsImkiLCJsZW5ndGgiLCJjaGFyQ29kZUF0IiwidmFsaWRhdGVCb3VuZGFyeSIsImJvdW5kYXJ5IiwiY3AiLCJtdWx0aXBhcnRGb3JtRGF0YVBhcnNlciIsImlucHV0IiwibWltZVR5cGUiLCJlc3NlbmNlIiwiYm91bmRhcnlTdHJpbmciLCJwYXJhbWV0ZXJzIiwiZ2V0IiwidW5kZWZpbmVkIiwiZW50cnlMaXN0IiwicG9zaXRpb24iLCJzdWJhcnJheSIsImVxdWFscyIsImJ1ZmZlclN0YXJ0c1dpdGgiLCJyZXN1bHQiLCJwYXJzZU11bHRpcGFydEZvcm1EYXRhSGVhZGVycyIsIm5hbWUiLCJmaWxlbmFtZSIsImNvbnRlbnRUeXBlIiwiZW5jb2RpbmciLCJib2R5IiwiYm91bmRhcnlJbmRleCIsImluZGV4T2YiLCJ0b1N0cmluZyIsInZhbHVlIiwidHlwZSIsInB1c2giLCJoZWFkZXJOYW1lIiwiY29sbGVjdEFTZXF1ZW5jZU9mQnl0ZXMiLCJjaGFyIiwicmVtb3ZlQ2hhcnMiLCJ0ZXN0IiwicGFyc2VNdWx0aXBhcnRGb3JtRGF0YU5hbWUiLCJjaGVjayIsImhlYWRlclZhbHVlIiwiVGV4dERlY29kZXIiLCJkZWNvZGUiLCJyZXBsYWNlIiwiY29uZGl0aW9uIiwic3RhcnQiLCJidWYiLCJsZWFkaW5nIiwidHJhaWxpbmciLCJwcmVkaWNhdGUiLCJsZWFkIiwidHJhaWwiLCJidWZmZXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/fetch/formdata-parser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/fetch/formdata.js":
/*!*******************************************************!*\
  !*** ./node_modules/undici/lib/web/fetch/formdata.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { isBlobLike, iteratorMixin } = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/web/fetch/util.js\");\nconst { kState } = __webpack_require__(/*! ./symbols */ \"(ssr)/./node_modules/undici/lib/web/fetch/symbols.js\");\nconst { kEnumerableProperty } = __webpack_require__(/*! ../../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst { FileLike, isFileLike } = __webpack_require__(/*! ./file */ \"(ssr)/./node_modules/undici/lib/web/fetch/file.js\");\nconst { webidl } = __webpack_require__(/*! ./webidl */ \"(ssr)/./node_modules/undici/lib/web/fetch/webidl.js\");\nconst { File: NativeFile } = __webpack_require__(/*! node:buffer */ \"node:buffer\");\nconst nodeUtil = __webpack_require__(/*! node:util */ \"node:util\");\n/** @type {globalThis['File']} */ const File = globalThis.File ?? NativeFile;\n// https://xhr.spec.whatwg.org/#formdata\nclass FormData {\n    constructor(form){\n        if (form !== undefined) {\n            throw webidl.errors.conversionFailed({\n                prefix: 'FormData constructor',\n                argument: 'Argument 1',\n                types: [\n                    'undefined'\n                ]\n            });\n        }\n        this[kState] = [];\n    }\n    append(name, value, filename = undefined) {\n        webidl.brandCheck(this, FormData);\n        const prefix = 'FormData.append';\n        webidl.argumentLengthCheck(arguments, 2, prefix);\n        if (arguments.length === 3 && !isBlobLike(value)) {\n            throw new TypeError(\"Failed to execute 'append' on 'FormData': parameter 2 is not of type 'Blob'\");\n        }\n        // 1. Let value be value if given; otherwise blobValue.\n        name = webidl.converters.USVString(name, prefix, 'name');\n        value = isBlobLike(value) ? webidl.converters.Blob(value, prefix, 'value', {\n            strict: false\n        }) : webidl.converters.USVString(value, prefix, 'value');\n        filename = arguments.length === 3 ? webidl.converters.USVString(filename, prefix, 'filename') : undefined;\n        // 2. Let entry be the result of creating an entry with\n        // name, value, and filename if given.\n        const entry = makeEntry(name, value, filename);\n        // 3. Append entry to this’s entry list.\n        this[kState].push(entry);\n    }\n    delete(name) {\n        webidl.brandCheck(this, FormData);\n        const prefix = 'FormData.delete';\n        webidl.argumentLengthCheck(arguments, 1, prefix);\n        name = webidl.converters.USVString(name, prefix, 'name');\n        // The delete(name) method steps are to remove all entries whose name\n        // is name from this’s entry list.\n        this[kState] = this[kState].filter((entry)=>entry.name !== name);\n    }\n    get(name) {\n        webidl.brandCheck(this, FormData);\n        const prefix = 'FormData.get';\n        webidl.argumentLengthCheck(arguments, 1, prefix);\n        name = webidl.converters.USVString(name, prefix, 'name');\n        // 1. If there is no entry whose name is name in this’s entry list,\n        // then return null.\n        const idx = this[kState].findIndex((entry)=>entry.name === name);\n        if (idx === -1) {\n            return null;\n        }\n        // 2. Return the value of the first entry whose name is name from\n        // this’s entry list.\n        return this[kState][idx].value;\n    }\n    getAll(name) {\n        webidl.brandCheck(this, FormData);\n        const prefix = 'FormData.getAll';\n        webidl.argumentLengthCheck(arguments, 1, prefix);\n        name = webidl.converters.USVString(name, prefix, 'name');\n        // 1. If there is no entry whose name is name in this’s entry list,\n        // then return the empty list.\n        // 2. Return the values of all entries whose name is name, in order,\n        // from this’s entry list.\n        return this[kState].filter((entry)=>entry.name === name).map((entry)=>entry.value);\n    }\n    has(name) {\n        webidl.brandCheck(this, FormData);\n        const prefix = 'FormData.has';\n        webidl.argumentLengthCheck(arguments, 1, prefix);\n        name = webidl.converters.USVString(name, prefix, 'name');\n        // The has(name) method steps are to return true if there is an entry\n        // whose name is name in this’s entry list; otherwise false.\n        return this[kState].findIndex((entry)=>entry.name === name) !== -1;\n    }\n    set(name, value, filename = undefined) {\n        webidl.brandCheck(this, FormData);\n        const prefix = 'FormData.set';\n        webidl.argumentLengthCheck(arguments, 2, prefix);\n        if (arguments.length === 3 && !isBlobLike(value)) {\n            throw new TypeError(\"Failed to execute 'set' on 'FormData': parameter 2 is not of type 'Blob'\");\n        }\n        // The set(name, value) and set(name, blobValue, filename) method steps\n        // are:\n        // 1. Let value be value if given; otherwise blobValue.\n        name = webidl.converters.USVString(name, prefix, 'name');\n        value = isBlobLike(value) ? webidl.converters.Blob(value, prefix, 'name', {\n            strict: false\n        }) : webidl.converters.USVString(value, prefix, 'name');\n        filename = arguments.length === 3 ? webidl.converters.USVString(filename, prefix, 'name') : undefined;\n        // 2. Let entry be the result of creating an entry with name, value, and\n        // filename if given.\n        const entry = makeEntry(name, value, filename);\n        // 3. If there are entries in this’s entry list whose name is name, then\n        // replace the first such entry with entry and remove the others.\n        const idx = this[kState].findIndex((entry)=>entry.name === name);\n        if (idx !== -1) {\n            this[kState] = [\n                ...this[kState].slice(0, idx),\n                entry,\n                ...this[kState].slice(idx + 1).filter((entry)=>entry.name !== name)\n            ];\n        } else {\n            // 4. Otherwise, append entry to this’s entry list.\n            this[kState].push(entry);\n        }\n    }\n    [nodeUtil.inspect.custom](depth, options) {\n        const state = this[kState].reduce((a, b)=>{\n            if (a[b.name]) {\n                if (Array.isArray(a[b.name])) {\n                    a[b.name].push(b.value);\n                } else {\n                    a[b.name] = [\n                        a[b.name],\n                        b.value\n                    ];\n                }\n            } else {\n                a[b.name] = b.value;\n            }\n            return a;\n        }, {\n            __proto__: null\n        });\n        options.depth ??= depth;\n        options.colors ??= true;\n        const output = nodeUtil.formatWithOptions(options, state);\n        // remove [Object null prototype]\n        return `FormData ${output.slice(output.indexOf(']') + 2)}`;\n    }\n}\niteratorMixin('FormData', FormData, kState, 'name', 'value');\nObject.defineProperties(FormData.prototype, {\n    append: kEnumerableProperty,\n    delete: kEnumerableProperty,\n    get: kEnumerableProperty,\n    getAll: kEnumerableProperty,\n    has: kEnumerableProperty,\n    set: kEnumerableProperty,\n    [Symbol.toStringTag]: {\n        value: 'FormData',\n        configurable: true\n    }\n});\n/**\n * @see https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#create-an-entry\n * @param {string} name\n * @param {string|Blob} value\n * @param {?string} filename\n * @returns\n */ function makeEntry(name, value, filename) {\n    // 1. Set name to the result of converting name into a scalar value string.\n    // Note: This operation was done by the webidl converter USVString.\n    // 2. If value is a string, then set value to the result of converting\n    //    value into a scalar value string.\n    if (typeof value === 'string') {\n    // Note: This operation was done by the webidl converter USVString.\n    } else {\n        // 3. Otherwise:\n        // 1. If value is not a File object, then set value to a new File object,\n        //    representing the same bytes, whose name attribute value is \"blob\"\n        if (!isFileLike(value)) {\n            value = value instanceof Blob ? new File([\n                value\n            ], 'blob', {\n                type: value.type\n            }) : new FileLike(value, 'blob', {\n                type: value.type\n            });\n        }\n        // 2. If filename is given, then set value to a new File object,\n        //    representing the same bytes, whose name attribute is filename.\n        if (filename !== undefined) {\n            /** @type {FilePropertyBag} */ const options = {\n                type: value.type,\n                lastModified: value.lastModified\n            };\n            value = value instanceof NativeFile ? new File([\n                value\n            ], filename, options) : new FileLike(value, filename, options);\n        }\n    }\n    // 4. Return an entry whose name is name and whose value is value.\n    return {\n        name,\n        value\n    };\n}\nmodule.exports = {\n    FormData,\n    makeEntry\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/fetch/formdata.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/fetch/global.js":
/*!*****************************************************!*\
  !*** ./node_modules/undici/lib/web/fetch/global.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("\n// In case of breaking changes, increase the version\n// number to avoid conflicts.\nconst globalOrigin = Symbol.for('undici.globalOrigin.1');\nfunction getGlobalOrigin() {\n    return globalThis[globalOrigin];\n}\nfunction setGlobalOrigin(newOrigin) {\n    if (newOrigin === undefined) {\n        Object.defineProperty(globalThis, globalOrigin, {\n            value: undefined,\n            writable: true,\n            enumerable: false,\n            configurable: false\n        });\n        return;\n    }\n    const parsedURL = new URL(newOrigin);\n    if (parsedURL.protocol !== 'http:' && parsedURL.protocol !== 'https:') {\n        throw new TypeError(`Only http & https urls are allowed, received ${parsedURL.protocol}`);\n    }\n    Object.defineProperty(globalThis, globalOrigin, {\n        value: parsedURL,\n        writable: true,\n        enumerable: false,\n        configurable: false\n    });\n}\nmodule.exports = {\n    getGlobalOrigin,\n    setGlobalOrigin\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi93ZWIvZmV0Y2gvZ2xvYmFsLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsb0RBQW9EO0FBQ3BELDZCQUE2QjtBQUM3QixNQUFNQSxlQUFlQyxPQUFPQyxHQUFHLENBQUM7QUFFaEMsU0FBU0M7SUFDUCxPQUFPQyxVQUFVLENBQUNKLGFBQWE7QUFDakM7QUFFQSxTQUFTSyxnQkFBaUJDLFNBQVM7SUFDakMsSUFBSUEsY0FBY0MsV0FBVztRQUMzQkMsT0FBT0MsY0FBYyxDQUFDTCxZQUFZSixjQUFjO1lBQzlDVSxPQUFPSDtZQUNQSSxVQUFVO1lBQ1ZDLFlBQVk7WUFDWkMsY0FBYztRQUNoQjtRQUVBO0lBQ0Y7SUFFQSxNQUFNQyxZQUFZLElBQUlDLElBQUlUO0lBRTFCLElBQUlRLFVBQVVFLFFBQVEsS0FBSyxXQUFXRixVQUFVRSxRQUFRLEtBQUssVUFBVTtRQUNyRSxNQUFNLElBQUlDLFVBQVUsQ0FBQyw2Q0FBNkMsRUFBRUgsVUFBVUUsUUFBUSxFQUFFO0lBQzFGO0lBRUFSLE9BQU9DLGNBQWMsQ0FBQ0wsWUFBWUosY0FBYztRQUM5Q1UsT0FBT0k7UUFDUEgsVUFBVTtRQUNWQyxZQUFZO1FBQ1pDLGNBQWM7SUFDaEI7QUFDRjtBQUVBSyxPQUFPQyxPQUFPLEdBQUc7SUFDZmhCO0lBQ0FFO0FBQ0YiLCJzb3VyY2VzIjpbIkQ6XFxIZWxpeFxcbm9kZV9tb2R1bGVzXFx1bmRpY2lcXGxpYlxcd2ViXFxmZXRjaFxcZ2xvYmFsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG4vLyBJbiBjYXNlIG9mIGJyZWFraW5nIGNoYW5nZXMsIGluY3JlYXNlIHRoZSB2ZXJzaW9uXG4vLyBudW1iZXIgdG8gYXZvaWQgY29uZmxpY3RzLlxuY29uc3QgZ2xvYmFsT3JpZ2luID0gU3ltYm9sLmZvcigndW5kaWNpLmdsb2JhbE9yaWdpbi4xJylcblxuZnVuY3Rpb24gZ2V0R2xvYmFsT3JpZ2luICgpIHtcbiAgcmV0dXJuIGdsb2JhbFRoaXNbZ2xvYmFsT3JpZ2luXVxufVxuXG5mdW5jdGlvbiBzZXRHbG9iYWxPcmlnaW4gKG5ld09yaWdpbikge1xuICBpZiAobmV3T3JpZ2luID09PSB1bmRlZmluZWQpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZ2xvYmFsVGhpcywgZ2xvYmFsT3JpZ2luLCB7XG4gICAgICB2YWx1ZTogdW5kZWZpbmVkLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2VcbiAgICB9KVxuXG4gICAgcmV0dXJuXG4gIH1cblxuICBjb25zdCBwYXJzZWRVUkwgPSBuZXcgVVJMKG5ld09yaWdpbilcblxuICBpZiAocGFyc2VkVVJMLnByb3RvY29sICE9PSAnaHR0cDonICYmIHBhcnNlZFVSTC5wcm90b2NvbCAhPT0gJ2h0dHBzOicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBPbmx5IGh0dHAgJiBodHRwcyB1cmxzIGFyZSBhbGxvd2VkLCByZWNlaXZlZCAke3BhcnNlZFVSTC5wcm90b2NvbH1gKVxuICB9XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGdsb2JhbFRoaXMsIGdsb2JhbE9yaWdpbiwge1xuICAgIHZhbHVlOiBwYXJzZWRVUkwsXG4gICAgd3JpdGFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgY29uZmlndXJhYmxlOiBmYWxzZVxuICB9KVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0R2xvYmFsT3JpZ2luLFxuICBzZXRHbG9iYWxPcmlnaW5cbn1cbiJdLCJuYW1lcyI6WyJnbG9iYWxPcmlnaW4iLCJTeW1ib2wiLCJmb3IiLCJnZXRHbG9iYWxPcmlnaW4iLCJnbG9iYWxUaGlzIiwic2V0R2xvYmFsT3JpZ2luIiwibmV3T3JpZ2luIiwidW5kZWZpbmVkIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsIndyaXRhYmxlIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsInBhcnNlZFVSTCIsIlVSTCIsInByb3RvY29sIiwiVHlwZUVycm9yIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/fetch/global.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/fetch/headers.js":
/*!******************************************************!*\
  !*** ./node_modules/undici/lib/web/fetch/headers.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// https://github.com/Ethan-Arrowood/undici-fetch\n\nconst { kConstruct } = __webpack_require__(/*! ../../core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst { kEnumerableProperty } = __webpack_require__(/*! ../../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst { iteratorMixin, isValidHeaderName, isValidHeaderValue } = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/web/fetch/util.js\");\nconst { webidl } = __webpack_require__(/*! ./webidl */ \"(ssr)/./node_modules/undici/lib/web/fetch/webidl.js\");\nconst assert = __webpack_require__(/*! node:assert */ \"node:assert\");\nconst util = __webpack_require__(/*! node:util */ \"node:util\");\nconst kHeadersMap = Symbol('headers map');\nconst kHeadersSortedMap = Symbol('headers map sorted');\n/**\n * @param {number} code\n */ function isHTTPWhiteSpaceCharCode(code) {\n    return code === 0x00a || code === 0x00d || code === 0x009 || code === 0x020;\n}\n/**\n * @see https://fetch.spec.whatwg.org/#concept-header-value-normalize\n * @param {string} potentialValue\n */ function headerValueNormalize(potentialValue) {\n    //  To normalize a byte sequence potentialValue, remove\n    //  any leading and trailing HTTP whitespace bytes from\n    //  potentialValue.\n    let i = 0;\n    let j = potentialValue.length;\n    while(j > i && isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(j - 1)))--j;\n    while(j > i && isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(i)))++i;\n    return i === 0 && j === potentialValue.length ? potentialValue : potentialValue.substring(i, j);\n}\nfunction fill(headers, object) {\n    // To fill a Headers object headers with a given object object, run these steps:\n    // 1. If object is a sequence, then for each header in object:\n    // Note: webidl conversion to array has already been done.\n    if (Array.isArray(object)) {\n        for(let i = 0; i < object.length; ++i){\n            const header = object[i];\n            // 1. If header does not contain exactly two items, then throw a TypeError.\n            if (header.length !== 2) {\n                throw webidl.errors.exception({\n                    header: 'Headers constructor',\n                    message: `expected name/value pair to be length 2, found ${header.length}.`\n                });\n            }\n            // 2. Append (header’s first item, header’s second item) to headers.\n            appendHeader(headers, header[0], header[1]);\n        }\n    } else if (typeof object === 'object' && object !== null) {\n        // Note: null should throw\n        // 2. Otherwise, object is a record, then for each key → value in object,\n        //    append (key, value) to headers\n        const keys = Object.keys(object);\n        for(let i = 0; i < keys.length; ++i){\n            appendHeader(headers, keys[i], object[keys[i]]);\n        }\n    } else {\n        throw webidl.errors.conversionFailed({\n            prefix: 'Headers constructor',\n            argument: 'Argument 1',\n            types: [\n                'sequence<sequence<ByteString>>',\n                'record<ByteString, ByteString>'\n            ]\n        });\n    }\n}\n/**\n * @see https://fetch.spec.whatwg.org/#concept-headers-append\n */ function appendHeader(headers, name, value) {\n    // 1. Normalize value.\n    value = headerValueNormalize(value);\n    // 2. If name is not a header name or value is not a\n    //    header value, then throw a TypeError.\n    if (!isValidHeaderName(name)) {\n        throw webidl.errors.invalidArgument({\n            prefix: 'Headers.append',\n            value: name,\n            type: 'header name'\n        });\n    } else if (!isValidHeaderValue(value)) {\n        throw webidl.errors.invalidArgument({\n            prefix: 'Headers.append',\n            value,\n            type: 'header value'\n        });\n    }\n    // 3. If headers’s guard is \"immutable\", then throw a TypeError.\n    // 4. Otherwise, if headers’s guard is \"request\" and name is a\n    //    forbidden header name, return.\n    // 5. Otherwise, if headers’s guard is \"request-no-cors\":\n    //    TODO\n    // Note: undici does not implement forbidden header names\n    if (getHeadersGuard(headers) === 'immutable') {\n        throw new TypeError('immutable');\n    }\n    // 6. Otherwise, if headers’s guard is \"response\" and name is a\n    //    forbidden response-header name, return.\n    // 7. Append (name, value) to headers’s header list.\n    return getHeadersList(headers).append(name, value, false);\n// 8. If headers’s guard is \"request-no-cors\", then remove\n//    privileged no-CORS request headers from headers\n}\nfunction compareHeaderName(a, b) {\n    return a[0] < b[0] ? -1 : 1;\n}\nclass HeadersList {\n    constructor(init){\n        /** @type {[string, string][]|null} */ this.cookies = null;\n        if (init instanceof HeadersList) {\n            this[kHeadersMap] = new Map(init[kHeadersMap]);\n            this[kHeadersSortedMap] = init[kHeadersSortedMap];\n            this.cookies = init.cookies === null ? null : [\n                ...init.cookies\n            ];\n        } else {\n            this[kHeadersMap] = new Map(init);\n            this[kHeadersSortedMap] = null;\n        }\n    }\n    /**\n   * @see https://fetch.spec.whatwg.org/#header-list-contains\n   * @param {string} name\n   * @param {boolean} isLowerCase\n   */ contains(name, isLowerCase) {\n        // A header list list contains a header name name if list\n        // contains a header whose name is a byte-case-insensitive\n        // match for name.\n        return this[kHeadersMap].has(isLowerCase ? name : name.toLowerCase());\n    }\n    clear() {\n        this[kHeadersMap].clear();\n        this[kHeadersSortedMap] = null;\n        this.cookies = null;\n    }\n    /**\n   * @see https://fetch.spec.whatwg.org/#concept-header-list-append\n   * @param {string} name\n   * @param {string} value\n   * @param {boolean} isLowerCase\n   */ append(name, value, isLowerCase) {\n        this[kHeadersSortedMap] = null;\n        // 1. If list contains name, then set name to the first such\n        //    header’s name.\n        const lowercaseName = isLowerCase ? name : name.toLowerCase();\n        const exists = this[kHeadersMap].get(lowercaseName);\n        // 2. Append (name, value) to list.\n        if (exists) {\n            const delimiter = lowercaseName === 'cookie' ? '; ' : ', ';\n            this[kHeadersMap].set(lowercaseName, {\n                name: exists.name,\n                value: `${exists.value}${delimiter}${value}`\n            });\n        } else {\n            this[kHeadersMap].set(lowercaseName, {\n                name,\n                value\n            });\n        }\n        if (lowercaseName === 'set-cookie') {\n            (this.cookies ??= []).push(value);\n        }\n    }\n    /**\n   * @see https://fetch.spec.whatwg.org/#concept-header-list-set\n   * @param {string} name\n   * @param {string} value\n   * @param {boolean} isLowerCase\n   */ set(name, value, isLowerCase) {\n        this[kHeadersSortedMap] = null;\n        const lowercaseName = isLowerCase ? name : name.toLowerCase();\n        if (lowercaseName === 'set-cookie') {\n            this.cookies = [\n                value\n            ];\n        }\n        // 1. If list contains name, then set the value of\n        //    the first such header to value and remove the\n        //    others.\n        // 2. Otherwise, append header (name, value) to list.\n        this[kHeadersMap].set(lowercaseName, {\n            name,\n            value\n        });\n    }\n    /**\n   * @see https://fetch.spec.whatwg.org/#concept-header-list-delete\n   * @param {string} name\n   * @param {boolean} isLowerCase\n   */ delete(name, isLowerCase) {\n        this[kHeadersSortedMap] = null;\n        if (!isLowerCase) name = name.toLowerCase();\n        if (name === 'set-cookie') {\n            this.cookies = null;\n        }\n        this[kHeadersMap].delete(name);\n    }\n    /**\n   * @see https://fetch.spec.whatwg.org/#concept-header-list-get\n   * @param {string} name\n   * @param {boolean} isLowerCase\n   * @returns {string | null}\n   */ get(name, isLowerCase) {\n        // 1. If list does not contain name, then return null.\n        // 2. Return the values of all headers in list whose name\n        //    is a byte-case-insensitive match for name,\n        //    separated from each other by 0x2C 0x20, in order.\n        return this[kHeadersMap].get(isLowerCase ? name : name.toLowerCase())?.value ?? null;\n    }\n    *[Symbol.iterator]() {\n        // use the lowercased name\n        for (const { 0: name, 1: { value } } of this[kHeadersMap]){\n            yield [\n                name,\n                value\n            ];\n        }\n    }\n    get entries() {\n        const headers = {};\n        if (this[kHeadersMap].size !== 0) {\n            for (const { name, value } of this[kHeadersMap].values()){\n                headers[name] = value;\n            }\n        }\n        return headers;\n    }\n    rawValues() {\n        return this[kHeadersMap].values();\n    }\n    get entriesList() {\n        const headers = [];\n        if (this[kHeadersMap].size !== 0) {\n            for (const { 0: lowerName, 1: { name, value } } of this[kHeadersMap]){\n                if (lowerName === 'set-cookie') {\n                    for (const cookie of this.cookies){\n                        headers.push([\n                            name,\n                            cookie\n                        ]);\n                    }\n                } else {\n                    headers.push([\n                        name,\n                        value\n                    ]);\n                }\n            }\n        }\n        return headers;\n    }\n    // https://fetch.spec.whatwg.org/#convert-header-names-to-a-sorted-lowercase-set\n    toSortedArray() {\n        const size = this[kHeadersMap].size;\n        const array = new Array(size);\n        // In most cases, you will use the fast-path.\n        // fast-path: Use binary insertion sort for small arrays.\n        if (size <= 32) {\n            if (size === 0) {\n                // If empty, it is an empty array. To avoid the first index assignment.\n                return array;\n            }\n            // Improve performance by unrolling loop and avoiding double-loop.\n            // Double-loop-less version of the binary insertion sort.\n            const iterator = this[kHeadersMap][Symbol.iterator]();\n            const firstValue = iterator.next().value;\n            // set [name, value] to first index.\n            array[0] = [\n                firstValue[0],\n                firstValue[1].value\n            ];\n            // https://fetch.spec.whatwg.org/#concept-header-list-sort-and-combine\n            // 3.2.2. Assert: value is non-null.\n            assert(firstValue[1].value !== null);\n            for(let i = 1, j = 0, right = 0, left = 0, pivot = 0, x, value; i < size; ++i){\n                // get next value\n                value = iterator.next().value;\n                // set [name, value] to current index.\n                x = array[i] = [\n                    value[0],\n                    value[1].value\n                ];\n                // https://fetch.spec.whatwg.org/#concept-header-list-sort-and-combine\n                // 3.2.2. Assert: value is non-null.\n                assert(x[1] !== null);\n                left = 0;\n                right = i;\n                // binary search\n                while(left < right){\n                    // middle index\n                    pivot = left + (right - left >> 1);\n                    // compare header name\n                    if (array[pivot][0] <= x[0]) {\n                        left = pivot + 1;\n                    } else {\n                        right = pivot;\n                    }\n                }\n                if (i !== pivot) {\n                    j = i;\n                    while(j > left){\n                        array[j] = array[--j];\n                    }\n                    array[left] = x;\n                }\n            }\n            /* c8 ignore next 4 */ if (!iterator.next().done) {\n                // This is for debugging and will never be called.\n                throw new TypeError('Unreachable');\n            }\n            return array;\n        } else {\n            // This case would be a rare occurrence.\n            // slow-path: fallback\n            let i = 0;\n            for (const { 0: name, 1: { value } } of this[kHeadersMap]){\n                array[i++] = [\n                    name,\n                    value\n                ];\n                // https://fetch.spec.whatwg.org/#concept-header-list-sort-and-combine\n                // 3.2.2. Assert: value is non-null.\n                assert(value !== null);\n            }\n            return array.sort(compareHeaderName);\n        }\n    }\n}\n// https://fetch.spec.whatwg.org/#headers-class\nclass Headers {\n    #guard;\n    #headersList;\n    constructor(init = undefined){\n        if (init === kConstruct) {\n            return;\n        }\n        this.#headersList = new HeadersList();\n        // The new Headers(init) constructor steps are:\n        // 1. Set this’s guard to \"none\".\n        this.#guard = 'none';\n        // 2. If init is given, then fill this with init.\n        if (init !== undefined) {\n            init = webidl.converters.HeadersInit(init, 'Headers contructor', 'init');\n            fill(this, init);\n        }\n    }\n    // https://fetch.spec.whatwg.org/#dom-headers-append\n    append(name, value) {\n        webidl.brandCheck(this, Headers);\n        webidl.argumentLengthCheck(arguments, 2, 'Headers.append');\n        const prefix = 'Headers.append';\n        name = webidl.converters.ByteString(name, prefix, 'name');\n        value = webidl.converters.ByteString(value, prefix, 'value');\n        return appendHeader(this, name, value);\n    }\n    // https://fetch.spec.whatwg.org/#dom-headers-delete\n    delete(name) {\n        webidl.brandCheck(this, Headers);\n        webidl.argumentLengthCheck(arguments, 1, 'Headers.delete');\n        const prefix = 'Headers.delete';\n        name = webidl.converters.ByteString(name, prefix, 'name');\n        // 1. If name is not a header name, then throw a TypeError.\n        if (!isValidHeaderName(name)) {\n            throw webidl.errors.invalidArgument({\n                prefix: 'Headers.delete',\n                value: name,\n                type: 'header name'\n            });\n        }\n        // 2. If this’s guard is \"immutable\", then throw a TypeError.\n        // 3. Otherwise, if this’s guard is \"request\" and name is a\n        //    forbidden header name, return.\n        // 4. Otherwise, if this’s guard is \"request-no-cors\", name\n        //    is not a no-CORS-safelisted request-header name, and\n        //    name is not a privileged no-CORS request-header name,\n        //    return.\n        // 5. Otherwise, if this’s guard is \"response\" and name is\n        //    a forbidden response-header name, return.\n        // Note: undici does not implement forbidden header names\n        if (this.#guard === 'immutable') {\n            throw new TypeError('immutable');\n        }\n        // 6. If this’s header list does not contain name, then\n        //    return.\n        if (!this.#headersList.contains(name, false)) {\n            return;\n        }\n        // 7. Delete name from this’s header list.\n        // 8. If this’s guard is \"request-no-cors\", then remove\n        //    privileged no-CORS request headers from this.\n        this.#headersList.delete(name, false);\n    }\n    // https://fetch.spec.whatwg.org/#dom-headers-get\n    get(name) {\n        webidl.brandCheck(this, Headers);\n        webidl.argumentLengthCheck(arguments, 1, 'Headers.get');\n        const prefix = 'Headers.get';\n        name = webidl.converters.ByteString(name, prefix, 'name');\n        // 1. If name is not a header name, then throw a TypeError.\n        if (!isValidHeaderName(name)) {\n            throw webidl.errors.invalidArgument({\n                prefix,\n                value: name,\n                type: 'header name'\n            });\n        }\n        // 2. Return the result of getting name from this’s header\n        //    list.\n        return this.#headersList.get(name, false);\n    }\n    // https://fetch.spec.whatwg.org/#dom-headers-has\n    has(name) {\n        webidl.brandCheck(this, Headers);\n        webidl.argumentLengthCheck(arguments, 1, 'Headers.has');\n        const prefix = 'Headers.has';\n        name = webidl.converters.ByteString(name, prefix, 'name');\n        // 1. If name is not a header name, then throw a TypeError.\n        if (!isValidHeaderName(name)) {\n            throw webidl.errors.invalidArgument({\n                prefix,\n                value: name,\n                type: 'header name'\n            });\n        }\n        // 2. Return true if this’s header list contains name;\n        //    otherwise false.\n        return this.#headersList.contains(name, false);\n    }\n    // https://fetch.spec.whatwg.org/#dom-headers-set\n    set(name, value) {\n        webidl.brandCheck(this, Headers);\n        webidl.argumentLengthCheck(arguments, 2, 'Headers.set');\n        const prefix = 'Headers.set';\n        name = webidl.converters.ByteString(name, prefix, 'name');\n        value = webidl.converters.ByteString(value, prefix, 'value');\n        // 1. Normalize value.\n        value = headerValueNormalize(value);\n        // 2. If name is not a header name or value is not a\n        //    header value, then throw a TypeError.\n        if (!isValidHeaderName(name)) {\n            throw webidl.errors.invalidArgument({\n                prefix,\n                value: name,\n                type: 'header name'\n            });\n        } else if (!isValidHeaderValue(value)) {\n            throw webidl.errors.invalidArgument({\n                prefix,\n                value,\n                type: 'header value'\n            });\n        }\n        // 3. If this’s guard is \"immutable\", then throw a TypeError.\n        // 4. Otherwise, if this’s guard is \"request\" and name is a\n        //    forbidden header name, return.\n        // 5. Otherwise, if this’s guard is \"request-no-cors\" and\n        //    name/value is not a no-CORS-safelisted request-header,\n        //    return.\n        // 6. Otherwise, if this’s guard is \"response\" and name is a\n        //    forbidden response-header name, return.\n        // Note: undici does not implement forbidden header names\n        if (this.#guard === 'immutable') {\n            throw new TypeError('immutable');\n        }\n        // 7. Set (name, value) in this’s header list.\n        // 8. If this’s guard is \"request-no-cors\", then remove\n        //    privileged no-CORS request headers from this\n        this.#headersList.set(name, value, false);\n    }\n    // https://fetch.spec.whatwg.org/#dom-headers-getsetcookie\n    getSetCookie() {\n        webidl.brandCheck(this, Headers);\n        // 1. If this’s header list does not contain `Set-Cookie`, then return « ».\n        // 2. Return the values of all headers in this’s header list whose name is\n        //    a byte-case-insensitive match for `Set-Cookie`, in order.\n        const list = this.#headersList.cookies;\n        if (list) {\n            return [\n                ...list\n            ];\n        }\n        return [];\n    }\n    // https://fetch.spec.whatwg.org/#concept-header-list-sort-and-combine\n    get [kHeadersSortedMap]() {\n        if (this.#headersList[kHeadersSortedMap]) {\n            return this.#headersList[kHeadersSortedMap];\n        }\n        // 1. Let headers be an empty list of headers with the key being the name\n        //    and value the value.\n        const headers = [];\n        // 2. Let names be the result of convert header names to a sorted-lowercase\n        //    set with all the names of the headers in list.\n        const names = this.#headersList.toSortedArray();\n        const cookies = this.#headersList.cookies;\n        // fast-path\n        if (cookies === null || cookies.length === 1) {\n            // Note: The non-null assertion of value has already been done by `HeadersList#toSortedArray`\n            return this.#headersList[kHeadersSortedMap] = names;\n        }\n        // 3. For each name of names:\n        for(let i = 0; i < names.length; ++i){\n            const { 0: name, 1: value } = names[i];\n            // 1. If name is `set-cookie`, then:\n            if (name === 'set-cookie') {\n                // 1. Let values be a list of all values of headers in list whose name\n                //    is a byte-case-insensitive match for name, in order.\n                // 2. For each value of values:\n                // 1. Append (name, value) to headers.\n                for(let j = 0; j < cookies.length; ++j){\n                    headers.push([\n                        name,\n                        cookies[j]\n                    ]);\n                }\n            } else {\n                // 2. Otherwise:\n                // 1. Let value be the result of getting name from list.\n                // 2. Assert: value is non-null.\n                // Note: This operation was done by `HeadersList#toSortedArray`.\n                // 3. Append (name, value) to headers.\n                headers.push([\n                    name,\n                    value\n                ]);\n            }\n        }\n        // 4. Return headers.\n        return this.#headersList[kHeadersSortedMap] = headers;\n    }\n    [util.inspect.custom](depth, options) {\n        options.depth ??= depth;\n        return `Headers ${util.formatWithOptions(options, this.#headersList.entries)}`;\n    }\n    static getHeadersGuard(o) {\n        return o.#guard;\n    }\n    static setHeadersGuard(o, guard) {\n        o.#guard = guard;\n    }\n    static getHeadersList(o) {\n        return o.#headersList;\n    }\n    static setHeadersList(o, list) {\n        o.#headersList = list;\n    }\n}\nconst { getHeadersGuard, setHeadersGuard, getHeadersList, setHeadersList } = Headers;\nReflect.deleteProperty(Headers, 'getHeadersGuard');\nReflect.deleteProperty(Headers, 'setHeadersGuard');\nReflect.deleteProperty(Headers, 'getHeadersList');\nReflect.deleteProperty(Headers, 'setHeadersList');\niteratorMixin('Headers', Headers, kHeadersSortedMap, 0, 1);\nObject.defineProperties(Headers.prototype, {\n    append: kEnumerableProperty,\n    delete: kEnumerableProperty,\n    get: kEnumerableProperty,\n    has: kEnumerableProperty,\n    set: kEnumerableProperty,\n    getSetCookie: kEnumerableProperty,\n    [Symbol.toStringTag]: {\n        value: 'Headers',\n        configurable: true\n    },\n    [util.inspect.custom]: {\n        enumerable: false\n    }\n});\nwebidl.converters.HeadersInit = function(V, prefix, argument) {\n    if (webidl.util.Type(V) === 'Object') {\n        const iterator = Reflect.get(V, Symbol.iterator);\n        // A work-around to ensure we send the properly-cased Headers when V is a Headers object.\n        // Read https://github.com/nodejs/undici/pull/3159#issuecomment-2075537226 before touching, please.\n        if (!util.types.isProxy(V) && iterator === Headers.prototype.entries) {\n            try {\n                return getHeadersList(V).entriesList;\n            } catch  {\n            // fall-through\n            }\n        }\n        if (typeof iterator === 'function') {\n            return webidl.converters['sequence<sequence<ByteString>>'](V, prefix, argument, iterator.bind(V));\n        }\n        return webidl.converters['record<ByteString, ByteString>'](V, prefix, argument);\n    }\n    throw webidl.errors.conversionFailed({\n        prefix: 'Headers constructor',\n        argument: 'Argument 1',\n        types: [\n            'sequence<sequence<ByteString>>',\n            'record<ByteString, ByteString>'\n        ]\n    });\n};\nmodule.exports = {\n    fill,\n    // for test.\n    compareHeaderName,\n    Headers,\n    HeadersList,\n    getHeadersGuard,\n    setHeadersGuard,\n    setHeadersList,\n    getHeadersList\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/fetch/headers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/fetch/index.js":
/*!****************************************************!*\
  !*** ./node_modules/undici/lib/web/fetch/index.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// https://github.com/Ethan-Arrowood/undici-fetch\n\nconst { makeNetworkError, makeAppropriateNetworkError, filterResponse, makeResponse, fromInnerResponse } = __webpack_require__(/*! ./response */ \"(ssr)/./node_modules/undici/lib/web/fetch/response.js\");\nconst { HeadersList } = __webpack_require__(/*! ./headers */ \"(ssr)/./node_modules/undici/lib/web/fetch/headers.js\");\nconst { Request, cloneRequest } = __webpack_require__(/*! ./request */ \"(ssr)/./node_modules/undici/lib/web/fetch/request.js\");\nconst zlib = __webpack_require__(/*! node:zlib */ \"node:zlib\");\nconst { bytesMatch, makePolicyContainer, clonePolicyContainer, requestBadPort, TAOCheck, appendRequestOriginHeader, responseLocationURL, requestCurrentURL, setRequestReferrerPolicyOnRedirect, tryUpgradeRequestToAPotentiallyTrustworthyURL, createOpaqueTimingInfo, appendFetchMetadata, corsCheck, crossOriginResourcePolicyCheck, determineRequestsReferrer, coarsenedSharedCurrentTime, createDeferredPromise, isBlobLike, sameOrigin, isCancelled, isAborted, isErrorLike, fullyReadBody, readableStreamClose, isomorphicEncode, urlIsLocal, urlIsHttpHttpsScheme, urlHasHttpsScheme, clampAndCoarsenConnectionTimingInfo, simpleRangeHeaderValue, buildContentRange, createInflate, extractMimeType } = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/web/fetch/util.js\");\nconst { kState, kDispatcher } = __webpack_require__(/*! ./symbols */ \"(ssr)/./node_modules/undici/lib/web/fetch/symbols.js\");\nconst assert = __webpack_require__(/*! node:assert */ \"node:assert\");\nconst { safelyExtractBody, extractBody } = __webpack_require__(/*! ./body */ \"(ssr)/./node_modules/undici/lib/web/fetch/body.js\");\nconst { redirectStatusSet, nullBodyStatus, safeMethodsSet, requestBodyHeader, subresourceSet } = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/undici/lib/web/fetch/constants.js\");\nconst EE = __webpack_require__(/*! node:events */ \"node:events\");\nconst { Readable, pipeline, finished } = __webpack_require__(/*! node:stream */ \"node:stream\");\nconst { addAbortListener, isErrored, isReadable, bufferToLowerCasedHeaderName } = __webpack_require__(/*! ../../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst { dataURLProcessor, serializeAMimeType, minimizeSupportedMimeType } = __webpack_require__(/*! ./data-url */ \"(ssr)/./node_modules/undici/lib/web/fetch/data-url.js\");\nconst { getGlobalDispatcher } = __webpack_require__(/*! ../../global */ \"(ssr)/./node_modules/undici/lib/global.js\");\nconst { webidl } = __webpack_require__(/*! ./webidl */ \"(ssr)/./node_modules/undici/lib/web/fetch/webidl.js\");\nconst { STATUS_CODES } = __webpack_require__(/*! node:http */ \"node:http\");\nconst GET_OR_HEAD = [\n    'GET',\n    'HEAD'\n];\nconst defaultUserAgent = typeof __UNDICI_IS_NODE__ !== 'undefined' || typeof esbuildDetection !== 'undefined' ? 'node' : 'undici';\n/** @type {import('buffer').resolveObjectURL} */ let resolveObjectURL;\nclass Fetch extends EE {\n    constructor(dispatcher){\n        super();\n        this.dispatcher = dispatcher;\n        this.connection = null;\n        this.dump = false;\n        this.state = 'ongoing';\n    }\n    terminate(reason) {\n        if (this.state !== 'ongoing') {\n            return;\n        }\n        this.state = 'terminated';\n        this.connection?.destroy(reason);\n        this.emit('terminated', reason);\n    }\n    // https://fetch.spec.whatwg.org/#fetch-controller-abort\n    abort(error) {\n        if (this.state !== 'ongoing') {\n            return;\n        }\n        // 1. Set controller’s state to \"aborted\".\n        this.state = 'aborted';\n        // 2. Let fallbackError be an \"AbortError\" DOMException.\n        // 3. Set error to fallbackError if it is not given.\n        if (!error) {\n            error = new DOMException('The operation was aborted.', 'AbortError');\n        }\n        // 4. Let serializedError be StructuredSerialize(error).\n        //    If that threw an exception, catch it, and let\n        //    serializedError be StructuredSerialize(fallbackError).\n        // 5. Set controller’s serialized abort reason to serializedError.\n        this.serializedAbortReason = error;\n        this.connection?.destroy(error);\n        this.emit('terminated', error);\n    }\n}\nfunction handleFetchDone(response) {\n    finalizeAndReportTiming(response, 'fetch');\n}\n// https://fetch.spec.whatwg.org/#fetch-method\nfunction fetch(input, init = undefined) {\n    webidl.argumentLengthCheck(arguments, 1, 'globalThis.fetch');\n    // 1. Let p be a new promise.\n    let p = createDeferredPromise();\n    // 2. Let requestObject be the result of invoking the initial value of\n    // Request as constructor with input and init as arguments. If this throws\n    // an exception, reject p with it and return p.\n    let requestObject;\n    try {\n        requestObject = new Request(input, init);\n    } catch (e) {\n        p.reject(e);\n        return p.promise;\n    }\n    // 3. Let request be requestObject’s request.\n    const request = requestObject[kState];\n    // 4. If requestObject’s signal’s aborted flag is set, then:\n    if (requestObject.signal.aborted) {\n        // 1. Abort the fetch() call with p, request, null, and\n        //    requestObject’s signal’s abort reason.\n        abortFetch(p, request, null, requestObject.signal.reason);\n        // 2. Return p.\n        return p.promise;\n    }\n    // 5. Let globalObject be request’s client’s global object.\n    const globalObject = request.client.globalObject;\n    // 6. If globalObject is a ServiceWorkerGlobalScope object, then set\n    // request’s service-workers mode to \"none\".\n    if (globalObject?.constructor?.name === 'ServiceWorkerGlobalScope') {\n        request.serviceWorkers = 'none';\n    }\n    // 7. Let responseObject be null.\n    let responseObject = null;\n    // 8. Let relevantRealm be this’s relevant Realm.\n    // 9. Let locallyAborted be false.\n    let locallyAborted = false;\n    // 10. Let controller be null.\n    let controller = null;\n    // 11. Add the following abort steps to requestObject’s signal:\n    addAbortListener(requestObject.signal, ()=>{\n        // 1. Set locallyAborted to true.\n        locallyAborted = true;\n        // 2. Assert: controller is non-null.\n        assert(controller != null);\n        // 3. Abort controller with requestObject’s signal’s abort reason.\n        controller.abort(requestObject.signal.reason);\n        const realResponse = responseObject?.deref();\n        // 4. Abort the fetch() call with p, request, responseObject,\n        //    and requestObject’s signal’s abort reason.\n        abortFetch(p, request, realResponse, requestObject.signal.reason);\n    });\n    // 12. Let handleFetchDone given response response be to finalize and\n    // report timing with response, globalObject, and \"fetch\".\n    // see function handleFetchDone\n    // 13. Set controller to the result of calling fetch given request,\n    // with processResponseEndOfBody set to handleFetchDone, and processResponse\n    // given response being these substeps:\n    const processResponse = (response)=>{\n        // 1. If locallyAborted is true, terminate these substeps.\n        if (locallyAborted) {\n            return;\n        }\n        // 2. If response’s aborted flag is set, then:\n        if (response.aborted) {\n            // 1. Let deserializedError be the result of deserialize a serialized\n            //    abort reason given controller’s serialized abort reason and\n            //    relevantRealm.\n            // 2. Abort the fetch() call with p, request, responseObject, and\n            //    deserializedError.\n            abortFetch(p, request, responseObject, controller.serializedAbortReason);\n            return;\n        }\n        // 3. If response is a network error, then reject p with a TypeError\n        // and terminate these substeps.\n        if (response.type === 'error') {\n            p.reject(new TypeError('fetch failed', {\n                cause: response.error\n            }));\n            return;\n        }\n        // 4. Set responseObject to the result of creating a Response object,\n        // given response, \"immutable\", and relevantRealm.\n        responseObject = new WeakRef(fromInnerResponse(response, 'immutable'));\n        // 5. Resolve p with responseObject.\n        p.resolve(responseObject.deref());\n        p = null;\n    };\n    controller = fetching({\n        request,\n        processResponseEndOfBody: handleFetchDone,\n        processResponse,\n        dispatcher: requestObject[kDispatcher] // undici\n    });\n    // 14. Return p.\n    return p.promise;\n}\n// https://fetch.spec.whatwg.org/#finalize-and-report-timing\nfunction finalizeAndReportTiming(response, initiatorType = 'other') {\n    // 1. If response is an aborted network error, then return.\n    if (response.type === 'error' && response.aborted) {\n        return;\n    }\n    // 2. If response’s URL list is null or empty, then return.\n    if (!response.urlList?.length) {\n        return;\n    }\n    // 3. Let originalURL be response’s URL list[0].\n    const originalURL = response.urlList[0];\n    // 4. Let timingInfo be response’s timing info.\n    let timingInfo = response.timingInfo;\n    // 5. Let cacheState be response’s cache state.\n    let cacheState = response.cacheState;\n    // 6. If originalURL’s scheme is not an HTTP(S) scheme, then return.\n    if (!urlIsHttpHttpsScheme(originalURL)) {\n        return;\n    }\n    // 7. If timingInfo is null, then return.\n    if (timingInfo === null) {\n        return;\n    }\n    // 8. If response’s timing allow passed flag is not set, then:\n    if (!response.timingAllowPassed) {\n        //  1. Set timingInfo to a the result of creating an opaque timing info for timingInfo.\n        timingInfo = createOpaqueTimingInfo({\n            startTime: timingInfo.startTime\n        });\n        //  2. Set cacheState to the empty string.\n        cacheState = '';\n    }\n    // 9. Set timingInfo’s end time to the coarsened shared current time\n    // given global’s relevant settings object’s cross-origin isolated\n    // capability.\n    // TODO: given global’s relevant settings object’s cross-origin isolated\n    // capability?\n    timingInfo.endTime = coarsenedSharedCurrentTime();\n    // 10. Set response’s timing info to timingInfo.\n    response.timingInfo = timingInfo;\n    // 11. Mark resource timing for timingInfo, originalURL, initiatorType,\n    // global, and cacheState.\n    markResourceTiming(timingInfo, originalURL.href, initiatorType, globalThis, cacheState);\n}\n// https://w3c.github.io/resource-timing/#dfn-mark-resource-timing\nconst markResourceTiming = performance.markResourceTiming;\n// https://fetch.spec.whatwg.org/#abort-fetch\nfunction abortFetch(p, request, responseObject, error) {\n    // 1. Reject promise with error.\n    if (p) {\n        // We might have already resolved the promise at this stage\n        p.reject(error);\n    }\n    // 2. If request’s body is not null and is readable, then cancel request’s\n    // body with error.\n    if (request.body != null && isReadable(request.body?.stream)) {\n        request.body.stream.cancel(error).catch((err)=>{\n            if (err.code === 'ERR_INVALID_STATE') {\n                // Node bug?\n                return;\n            }\n            throw err;\n        });\n    }\n    // 3. If responseObject is null, then return.\n    if (responseObject == null) {\n        return;\n    }\n    // 4. Let response be responseObject’s response.\n    const response = responseObject[kState];\n    // 5. If response’s body is not null and is readable, then error response’s\n    // body with error.\n    if (response.body != null && isReadable(response.body?.stream)) {\n        response.body.stream.cancel(error).catch((err)=>{\n            if (err.code === 'ERR_INVALID_STATE') {\n                // Node bug?\n                return;\n            }\n            throw err;\n        });\n    }\n}\n// https://fetch.spec.whatwg.org/#fetching\nfunction fetching({ request, processRequestBodyChunkLength, processRequestEndOfBody, processResponse, processResponseEndOfBody, processResponseConsumeBody, useParallelQueue = false, dispatcher = getGlobalDispatcher() // undici\n }) {\n    // Ensure that the dispatcher is set accordingly\n    assert(dispatcher);\n    // 1. Let taskDestination be null.\n    let taskDestination = null;\n    // 2. Let crossOriginIsolatedCapability be false.\n    let crossOriginIsolatedCapability = false;\n    // 3. If request’s client is non-null, then:\n    if (request.client != null) {\n        // 1. Set taskDestination to request’s client’s global object.\n        taskDestination = request.client.globalObject;\n        // 2. Set crossOriginIsolatedCapability to request’s client’s cross-origin\n        // isolated capability.\n        crossOriginIsolatedCapability = request.client.crossOriginIsolatedCapability;\n    }\n    // 4. If useParallelQueue is true, then set taskDestination to the result of\n    // starting a new parallel queue.\n    // TODO\n    // 5. Let timingInfo be a new fetch timing info whose start time and\n    // post-redirect start time are the coarsened shared current time given\n    // crossOriginIsolatedCapability.\n    const currentTime = coarsenedSharedCurrentTime(crossOriginIsolatedCapability);\n    const timingInfo = createOpaqueTimingInfo({\n        startTime: currentTime\n    });\n    // 6. Let fetchParams be a new fetch params whose\n    // request is request,\n    // timing info is timingInfo,\n    // process request body chunk length is processRequestBodyChunkLength,\n    // process request end-of-body is processRequestEndOfBody,\n    // process response is processResponse,\n    // process response consume body is processResponseConsumeBody,\n    // process response end-of-body is processResponseEndOfBody,\n    // task destination is taskDestination,\n    // and cross-origin isolated capability is crossOriginIsolatedCapability.\n    const fetchParams = {\n        controller: new Fetch(dispatcher),\n        request,\n        timingInfo,\n        processRequestBodyChunkLength,\n        processRequestEndOfBody,\n        processResponse,\n        processResponseConsumeBody,\n        processResponseEndOfBody,\n        taskDestination,\n        crossOriginIsolatedCapability\n    };\n    // 7. If request’s body is a byte sequence, then set request’s body to\n    //    request’s body as a body.\n    // NOTE: Since fetching is only called from fetch, body should already be\n    // extracted.\n    assert(!request.body || request.body.stream);\n    // 8. If request’s window is \"client\", then set request’s window to request’s\n    // client, if request’s client’s global object is a Window object; otherwise\n    // \"no-window\".\n    if (request.window === 'client') {\n        // TODO: What if request.client is null?\n        request.window = request.client?.globalObject?.constructor?.name === 'Window' ? request.client : 'no-window';\n    }\n    // 9. If request’s origin is \"client\", then set request’s origin to request’s\n    // client’s origin.\n    if (request.origin === 'client') {\n        request.origin = request.client.origin;\n    }\n    // 10. If all of the following conditions are true:\n    // TODO\n    // 11. If request’s policy container is \"client\", then:\n    if (request.policyContainer === 'client') {\n        // 1. If request’s client is non-null, then set request’s policy\n        // container to a clone of request’s client’s policy container. [HTML]\n        if (request.client != null) {\n            request.policyContainer = clonePolicyContainer(request.client.policyContainer);\n        } else {\n            // 2. Otherwise, set request’s policy container to a new policy\n            // container.\n            request.policyContainer = makePolicyContainer();\n        }\n    }\n    // 12. If request’s header list does not contain `Accept`, then:\n    if (!request.headersList.contains('accept', true)) {\n        // 1. Let value be `*/*`.\n        const value = '*/*';\n        // 2. A user agent should set value to the first matching statement, if\n        // any, switching on request’s destination:\n        // \"document\"\n        // \"frame\"\n        // \"iframe\"\n        // `text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8`\n        // \"image\"\n        // `image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5`\n        // \"style\"\n        // `text/css,*/*;q=0.1`\n        // TODO\n        // 3. Append `Accept`/value to request’s header list.\n        request.headersList.append('accept', value, true);\n    }\n    // 13. If request’s header list does not contain `Accept-Language`, then\n    // user agents should append `Accept-Language`/an appropriate value to\n    // request’s header list.\n    if (!request.headersList.contains('accept-language', true)) {\n        request.headersList.append('accept-language', '*', true);\n    }\n    // 14. If request’s priority is null, then use request’s initiator and\n    // destination appropriately in setting request’s priority to a\n    // user-agent-defined object.\n    if (request.priority === null) {\n    // TODO\n    }\n    // 15. If request is a subresource request, then:\n    if (subresourceSet.has(request.destination)) {\n    // TODO\n    }\n    // 16. Run main fetch given fetchParams.\n    mainFetch(fetchParams).catch((err)=>{\n        fetchParams.controller.terminate(err);\n    });\n    // 17. Return fetchParam's controller\n    return fetchParams.controller;\n}\n// https://fetch.spec.whatwg.org/#concept-main-fetch\nasync function mainFetch(fetchParams, recursive = false) {\n    // 1. Let request be fetchParams’s request.\n    const request = fetchParams.request;\n    // 2. Let response be null.\n    let response = null;\n    // 3. If request’s local-URLs-only flag is set and request’s current URL is\n    // not local, then set response to a network error.\n    if (request.localURLsOnly && !urlIsLocal(requestCurrentURL(request))) {\n        response = makeNetworkError('local URLs only');\n    }\n    // 4. Run report Content Security Policy violations for request.\n    // TODO\n    // 5. Upgrade request to a potentially trustworthy URL, if appropriate.\n    tryUpgradeRequestToAPotentiallyTrustworthyURL(request);\n    // 6. If should request be blocked due to a bad port, should fetching request\n    // be blocked as mixed content, or should request be blocked by Content\n    // Security Policy returns blocked, then set response to a network error.\n    if (requestBadPort(request) === 'blocked') {\n        response = makeNetworkError('bad port');\n    }\n    // TODO: should fetching request be blocked as mixed content?\n    // TODO: should request be blocked by Content Security Policy?\n    // 7. If request’s referrer policy is the empty string, then set request’s\n    // referrer policy to request’s policy container’s referrer policy.\n    if (request.referrerPolicy === '') {\n        request.referrerPolicy = request.policyContainer.referrerPolicy;\n    }\n    // 8. If request’s referrer is not \"no-referrer\", then set request’s\n    // referrer to the result of invoking determine request’s referrer.\n    if (request.referrer !== 'no-referrer') {\n        request.referrer = determineRequestsReferrer(request);\n    }\n    // 9. Set request’s current URL’s scheme to \"https\" if all of the following\n    // conditions are true:\n    // - request’s current URL’s scheme is \"http\"\n    // - request’s current URL’s host is a domain\n    // - Matching request’s current URL’s host per Known HSTS Host Domain Name\n    //   Matching results in either a superdomain match with an asserted\n    //   includeSubDomains directive or a congruent match (with or without an\n    //   asserted includeSubDomains directive). [HSTS]\n    // TODO\n    // 10. If recursive is false, then run the remaining steps in parallel.\n    // TODO\n    // 11. If response is null, then set response to the result of running\n    // the steps corresponding to the first matching statement:\n    if (response === null) {\n        response = await (async ()=>{\n            const currentURL = requestCurrentURL(request);\n            if (// - request’s current URL’s origin is same origin with request’s origin,\n            //   and request’s response tainting is \"basic\"\n            sameOrigin(currentURL, request.url) && request.responseTainting === 'basic' || // request’s current URL’s scheme is \"data\"\n            currentURL.protocol === 'data:' || // - request’s mode is \"navigate\" or \"websocket\"\n            request.mode === 'navigate' || request.mode === 'websocket') {\n                // 1. Set request’s response tainting to \"basic\".\n                request.responseTainting = 'basic';\n                // 2. Return the result of running scheme fetch given fetchParams.\n                return await schemeFetch(fetchParams);\n            }\n            // request’s mode is \"same-origin\"\n            if (request.mode === 'same-origin') {\n                // 1. Return a network error.\n                return makeNetworkError('request mode cannot be \"same-origin\"');\n            }\n            // request’s mode is \"no-cors\"\n            if (request.mode === 'no-cors') {\n                // 1. If request’s redirect mode is not \"follow\", then return a network\n                // error.\n                if (request.redirect !== 'follow') {\n                    return makeNetworkError('redirect mode cannot be \"follow\" for \"no-cors\" request');\n                }\n                // 2. Set request’s response tainting to \"opaque\".\n                request.responseTainting = 'opaque';\n                // 3. Return the result of running scheme fetch given fetchParams.\n                return await schemeFetch(fetchParams);\n            }\n            // request’s current URL’s scheme is not an HTTP(S) scheme\n            if (!urlIsHttpHttpsScheme(requestCurrentURL(request))) {\n                // Return a network error.\n                return makeNetworkError('URL scheme must be a HTTP(S) scheme');\n            }\n            // - request’s use-CORS-preflight flag is set\n            // - request’s unsafe-request flag is set and either request’s method is\n            //   not a CORS-safelisted method or CORS-unsafe request-header names with\n            //   request’s header list is not empty\n            //    1. Set request’s response tainting to \"cors\".\n            //    2. Let corsWithPreflightResponse be the result of running HTTP fetch\n            //    given fetchParams and true.\n            //    3. If corsWithPreflightResponse is a network error, then clear cache\n            //    entries using request.\n            //    4. Return corsWithPreflightResponse.\n            // TODO\n            // Otherwise\n            //    1. Set request’s response tainting to \"cors\".\n            request.responseTainting = 'cors';\n            //    2. Return the result of running HTTP fetch given fetchParams.\n            return await httpFetch(fetchParams);\n        })();\n    }\n    // 12. If recursive is true, then return response.\n    if (recursive) {\n        return response;\n    }\n    // 13. If response is not a network error and response is not a filtered\n    // response, then:\n    if (response.status !== 0 && !response.internalResponse) {\n        // If request’s response tainting is \"cors\", then:\n        if (request.responseTainting === 'cors') {\n        // 1. Let headerNames be the result of extracting header list values\n        // given `Access-Control-Expose-Headers` and response’s header list.\n        // TODO\n        // 2. If request’s credentials mode is not \"include\" and headerNames\n        // contains `*`, then set response’s CORS-exposed header-name list to\n        // all unique header names in response’s header list.\n        // TODO\n        // 3. Otherwise, if headerNames is not null or failure, then set\n        // response’s CORS-exposed header-name list to headerNames.\n        // TODO\n        }\n        // Set response to the following filtered response with response as its\n        // internal response, depending on request’s response tainting:\n        if (request.responseTainting === 'basic') {\n            response = filterResponse(response, 'basic');\n        } else if (request.responseTainting === 'cors') {\n            response = filterResponse(response, 'cors');\n        } else if (request.responseTainting === 'opaque') {\n            response = filterResponse(response, 'opaque');\n        } else {\n            assert(false);\n        }\n    }\n    // 14. Let internalResponse be response, if response is a network error,\n    // and response’s internal response otherwise.\n    let internalResponse = response.status === 0 ? response : response.internalResponse;\n    // 15. If internalResponse’s URL list is empty, then set it to a clone of\n    // request’s URL list.\n    if (internalResponse.urlList.length === 0) {\n        internalResponse.urlList.push(...request.urlList);\n    }\n    // 16. If request’s timing allow failed flag is unset, then set\n    // internalResponse’s timing allow passed flag.\n    if (!request.timingAllowFailed) {\n        response.timingAllowPassed = true;\n    }\n    // 17. If response is not a network error and any of the following returns\n    // blocked\n    // - should internalResponse to request be blocked as mixed content\n    // - should internalResponse to request be blocked by Content Security Policy\n    // - should internalResponse to request be blocked due to its MIME type\n    // - should internalResponse to request be blocked due to nosniff\n    // TODO\n    // 18. If response’s type is \"opaque\", internalResponse’s status is 206,\n    // internalResponse’s range-requested flag is set, and request’s header\n    // list does not contain `Range`, then set response and internalResponse\n    // to a network error.\n    if (response.type === 'opaque' && internalResponse.status === 206 && internalResponse.rangeRequested && !request.headers.contains('range', true)) {\n        response = internalResponse = makeNetworkError();\n    }\n    // 19. If response is not a network error and either request’s method is\n    // `HEAD` or `CONNECT`, or internalResponse’s status is a null body status,\n    // set internalResponse’s body to null and disregard any enqueuing toward\n    // it (if any).\n    if (response.status !== 0 && (request.method === 'HEAD' || request.method === 'CONNECT' || nullBodyStatus.includes(internalResponse.status))) {\n        internalResponse.body = null;\n        fetchParams.controller.dump = true;\n    }\n    // 20. If request’s integrity metadata is not the empty string, then:\n    if (request.integrity) {\n        // 1. Let processBodyError be this step: run fetch finale given fetchParams\n        // and a network error.\n        const processBodyError = (reason)=>fetchFinale(fetchParams, makeNetworkError(reason));\n        // 2. If request’s response tainting is \"opaque\", or response’s body is null,\n        // then run processBodyError and abort these steps.\n        if (request.responseTainting === 'opaque' || response.body == null) {\n            processBodyError(response.error);\n            return;\n        }\n        // 3. Let processBody given bytes be these steps:\n        const processBody = (bytes)=>{\n            // 1. If bytes do not match request’s integrity metadata,\n            // then run processBodyError and abort these steps. [SRI]\n            if (!bytesMatch(bytes, request.integrity)) {\n                processBodyError('integrity mismatch');\n                return;\n            }\n            // 2. Set response’s body to bytes as a body.\n            response.body = safelyExtractBody(bytes)[0];\n            // 3. Run fetch finale given fetchParams and response.\n            fetchFinale(fetchParams, response);\n        };\n        // 4. Fully read response’s body given processBody and processBodyError.\n        await fullyReadBody(response.body, processBody, processBodyError);\n    } else {\n        // 21. Otherwise, run fetch finale given fetchParams and response.\n        fetchFinale(fetchParams, response);\n    }\n}\n// https://fetch.spec.whatwg.org/#concept-scheme-fetch\n// given a fetch params fetchParams\nfunction schemeFetch(fetchParams) {\n    // Note: since the connection is destroyed on redirect, which sets fetchParams to a\n    // cancelled state, we do not want this condition to trigger *unless* there have been\n    // no redirects. See https://github.com/nodejs/undici/issues/1776\n    // 1. If fetchParams is canceled, then return the appropriate network error for fetchParams.\n    if (isCancelled(fetchParams) && fetchParams.request.redirectCount === 0) {\n        return Promise.resolve(makeAppropriateNetworkError(fetchParams));\n    }\n    // 2. Let request be fetchParams’s request.\n    const { request } = fetchParams;\n    const { protocol: scheme } = requestCurrentURL(request);\n    // 3. Switch on request’s current URL’s scheme and run the associated steps:\n    switch(scheme){\n        case 'about:':\n            {\n                // If request’s current URL’s path is the string \"blank\", then return a new response\n                // whose status message is `OK`, header list is « (`Content-Type`, `text/html;charset=utf-8`) »,\n                // and body is the empty byte sequence as a body.\n                // Otherwise, return a network error.\n                return Promise.resolve(makeNetworkError('about scheme is not supported'));\n            }\n        case 'blob:':\n            {\n                if (!resolveObjectURL) {\n                    resolveObjectURL = (__webpack_require__(/*! node:buffer */ \"node:buffer\").resolveObjectURL);\n                }\n                // 1. Let blobURLEntry be request’s current URL’s blob URL entry.\n                const blobURLEntry = requestCurrentURL(request);\n                // https://github.com/web-platform-tests/wpt/blob/7b0ebaccc62b566a1965396e5be7bb2bc06f841f/FileAPI/url/resources/fetch-tests.js#L52-L56\n                // Buffer.resolveObjectURL does not ignore URL queries.\n                if (blobURLEntry.search.length !== 0) {\n                    return Promise.resolve(makeNetworkError('NetworkError when attempting to fetch resource.'));\n                }\n                const blob = resolveObjectURL(blobURLEntry.toString());\n                // 2. If request’s method is not `GET`, blobURLEntry is null, or blobURLEntry’s\n                //    object is not a Blob object, then return a network error.\n                if (request.method !== 'GET' || !isBlobLike(blob)) {\n                    return Promise.resolve(makeNetworkError('invalid method'));\n                }\n                // 3. Let blob be blobURLEntry’s object.\n                // Note: done above\n                // 4. Let response be a new response.\n                const response = makeResponse();\n                // 5. Let fullLength be blob’s size.\n                const fullLength = blob.size;\n                // 6. Let serializedFullLength be fullLength, serialized and isomorphic encoded.\n                const serializedFullLength = isomorphicEncode(`${fullLength}`);\n                // 7. Let type be blob’s type.\n                const type = blob.type;\n                // 8. If request’s header list does not contain `Range`:\n                // 9. Otherwise:\n                if (!request.headersList.contains('range', true)) {\n                    // 1. Let bodyWithType be the result of safely extracting blob.\n                    // Note: in the FileAPI a blob \"object\" is a Blob *or* a MediaSource.\n                    // In node, this can only ever be a Blob. Therefore we can safely\n                    // use extractBody directly.\n                    const bodyWithType = extractBody(blob);\n                    // 2. Set response’s status message to `OK`.\n                    response.statusText = 'OK';\n                    // 3. Set response’s body to bodyWithType’s body.\n                    response.body = bodyWithType[0];\n                    // 4. Set response’s header list to « (`Content-Length`, serializedFullLength), (`Content-Type`, type) ».\n                    response.headersList.set('content-length', serializedFullLength, true);\n                    response.headersList.set('content-type', type, true);\n                } else {\n                    // 1. Set response’s range-requested flag.\n                    response.rangeRequested = true;\n                    // 2. Let rangeHeader be the result of getting `Range` from request’s header list.\n                    const rangeHeader = request.headersList.get('range', true);\n                    // 3. Let rangeValue be the result of parsing a single range header value given rangeHeader and true.\n                    const rangeValue = simpleRangeHeaderValue(rangeHeader, true);\n                    // 4. If rangeValue is failure, then return a network error.\n                    if (rangeValue === 'failure') {\n                        return Promise.resolve(makeNetworkError('failed to fetch the data URL'));\n                    }\n                    // 5. Let (rangeStart, rangeEnd) be rangeValue.\n                    let { rangeStartValue: rangeStart, rangeEndValue: rangeEnd } = rangeValue;\n                    // 6. If rangeStart is null:\n                    // 7. Otherwise:\n                    if (rangeStart === null) {\n                        // 1. Set rangeStart to fullLength − rangeEnd.\n                        rangeStart = fullLength - rangeEnd;\n                        // 2. Set rangeEnd to rangeStart + rangeEnd − 1.\n                        rangeEnd = rangeStart + rangeEnd - 1;\n                    } else {\n                        // 1. If rangeStart is greater than or equal to fullLength, then return a network error.\n                        if (rangeStart >= fullLength) {\n                            return Promise.resolve(makeNetworkError('Range start is greater than the blob\\'s size.'));\n                        }\n                        // 2. If rangeEnd is null or rangeEnd is greater than or equal to fullLength, then set\n                        //    rangeEnd to fullLength − 1.\n                        if (rangeEnd === null || rangeEnd >= fullLength) {\n                            rangeEnd = fullLength - 1;\n                        }\n                    }\n                    // 8. Let slicedBlob be the result of invoking slice blob given blob, rangeStart,\n                    //    rangeEnd + 1, and type.\n                    const slicedBlob = blob.slice(rangeStart, rangeEnd, type);\n                    // 9. Let slicedBodyWithType be the result of safely extracting slicedBlob.\n                    // Note: same reason as mentioned above as to why we use extractBody\n                    const slicedBodyWithType = extractBody(slicedBlob);\n                    // 10. Set response’s body to slicedBodyWithType’s body.\n                    response.body = slicedBodyWithType[0];\n                    // 11. Let serializedSlicedLength be slicedBlob’s size, serialized and isomorphic encoded.\n                    const serializedSlicedLength = isomorphicEncode(`${slicedBlob.size}`);\n                    // 12. Let contentRange be the result of invoking build a content range given rangeStart,\n                    //     rangeEnd, and fullLength.\n                    const contentRange = buildContentRange(rangeStart, rangeEnd, fullLength);\n                    // 13. Set response’s status to 206.\n                    response.status = 206;\n                    // 14. Set response’s status message to `Partial Content`.\n                    response.statusText = 'Partial Content';\n                    // 15. Set response’s header list to « (`Content-Length`, serializedSlicedLength),\n                    //     (`Content-Type`, type), (`Content-Range`, contentRange) ».\n                    response.headersList.set('content-length', serializedSlicedLength, true);\n                    response.headersList.set('content-type', type, true);\n                    response.headersList.set('content-range', contentRange, true);\n                }\n                // 10. Return response.\n                return Promise.resolve(response);\n            }\n        case 'data:':\n            {\n                // 1. Let dataURLStruct be the result of running the\n                //    data: URL processor on request’s current URL.\n                const currentURL = requestCurrentURL(request);\n                const dataURLStruct = dataURLProcessor(currentURL);\n                // 2. If dataURLStruct is failure, then return a\n                //    network error.\n                if (dataURLStruct === 'failure') {\n                    return Promise.resolve(makeNetworkError('failed to fetch the data URL'));\n                }\n                // 3. Let mimeType be dataURLStruct’s MIME type, serialized.\n                const mimeType = serializeAMimeType(dataURLStruct.mimeType);\n                // 4. Return a response whose status message is `OK`,\n                //    header list is « (`Content-Type`, mimeType) »,\n                //    and body is dataURLStruct’s body as a body.\n                return Promise.resolve(makeResponse({\n                    statusText: 'OK',\n                    headersList: [\n                        [\n                            'content-type',\n                            {\n                                name: 'Content-Type',\n                                value: mimeType\n                            }\n                        ]\n                    ],\n                    body: safelyExtractBody(dataURLStruct.body)[0]\n                }));\n            }\n        case 'file:':\n            {\n                // For now, unfortunate as it is, file URLs are left as an exercise for the reader.\n                // When in doubt, return a network error.\n                return Promise.resolve(makeNetworkError('not implemented... yet...'));\n            }\n        case 'http:':\n        case 'https:':\n            {\n                // Return the result of running HTTP fetch given fetchParams.\n                return httpFetch(fetchParams).catch((err)=>makeNetworkError(err));\n            }\n        default:\n            {\n                return Promise.resolve(makeNetworkError('unknown scheme'));\n            }\n    }\n}\n// https://fetch.spec.whatwg.org/#finalize-response\nfunction finalizeResponse(fetchParams, response) {\n    // 1. Set fetchParams’s request’s done flag.\n    fetchParams.request.done = true;\n    // 2, If fetchParams’s process response done is not null, then queue a fetch\n    // task to run fetchParams’s process response done given response, with\n    // fetchParams’s task destination.\n    if (fetchParams.processResponseDone != null) {\n        queueMicrotask(()=>fetchParams.processResponseDone(response));\n    }\n}\n// https://fetch.spec.whatwg.org/#fetch-finale\nfunction fetchFinale(fetchParams, response) {\n    // 1. Let timingInfo be fetchParams’s timing info.\n    let timingInfo = fetchParams.timingInfo;\n    // 2. If response is not a network error and fetchParams’s request’s client is a secure context,\n    //    then set timingInfo’s server-timing headers to the result of getting, decoding, and splitting\n    //    `Server-Timing` from response’s internal response’s header list.\n    // TODO\n    // 3. Let processResponseEndOfBody be the following steps:\n    const processResponseEndOfBody = ()=>{\n        // 1. Let unsafeEndTime be the unsafe shared current time.\n        const unsafeEndTime = Date.now() // ?\n        ;\n        // 2. If fetchParams’s request’s destination is \"document\", then set fetchParams’s controller’s\n        //    full timing info to fetchParams’s timing info.\n        if (fetchParams.request.destination === 'document') {\n            fetchParams.controller.fullTimingInfo = timingInfo;\n        }\n        // 3. Set fetchParams’s controller’s report timing steps to the following steps given a global object global:\n        fetchParams.controller.reportTimingSteps = ()=>{\n            // 1. If fetchParams’s request’s URL’s scheme is not an HTTP(S) scheme, then return.\n            if (fetchParams.request.url.protocol !== 'https:') {\n                return;\n            }\n            // 2. Set timingInfo’s end time to the relative high resolution time given unsafeEndTime and global.\n            timingInfo.endTime = unsafeEndTime;\n            // 3. Let cacheState be response’s cache state.\n            let cacheState = response.cacheState;\n            // 4. Let bodyInfo be response’s body info.\n            const bodyInfo = response.bodyInfo;\n            // 5. If response’s timing allow passed flag is not set, then set timingInfo to the result of creating an\n            //    opaque timing info for timingInfo and set cacheState to the empty string.\n            if (!response.timingAllowPassed) {\n                timingInfo = createOpaqueTimingInfo(timingInfo);\n                cacheState = '';\n            }\n            // 6. Let responseStatus be 0.\n            let responseStatus = 0;\n            // 7. If fetchParams’s request’s mode is not \"navigate\" or response’s has-cross-origin-redirects is false:\n            if (fetchParams.request.mode !== 'navigator' || !response.hasCrossOriginRedirects) {\n                // 1. Set responseStatus to response’s status.\n                responseStatus = response.status;\n                // 2. Let mimeType be the result of extracting a MIME type from response’s header list.\n                const mimeType = extractMimeType(response.headersList);\n                // 3. If mimeType is not failure, then set bodyInfo’s content type to the result of minimizing a supported MIME type given mimeType.\n                if (mimeType !== 'failure') {\n                    bodyInfo.contentType = minimizeSupportedMimeType(mimeType);\n                }\n            }\n            // 8. If fetchParams’s request’s initiator type is non-null, then mark resource timing given timingInfo,\n            //    fetchParams’s request’s URL, fetchParams’s request’s initiator type, global, cacheState, bodyInfo,\n            //    and responseStatus.\n            if (fetchParams.request.initiatorType != null) {\n                // TODO: update markresourcetiming\n                markResourceTiming(timingInfo, fetchParams.request.url.href, fetchParams.request.initiatorType, globalThis, cacheState, bodyInfo, responseStatus);\n            }\n        };\n        // 4. Let processResponseEndOfBodyTask be the following steps:\n        const processResponseEndOfBodyTask = ()=>{\n            // 1. Set fetchParams’s request’s done flag.\n            fetchParams.request.done = true;\n            // 2. If fetchParams’s process response end-of-body is non-null, then run fetchParams’s process\n            //    response end-of-body given response.\n            if (fetchParams.processResponseEndOfBody != null) {\n                queueMicrotask(()=>fetchParams.processResponseEndOfBody(response));\n            }\n            // 3. If fetchParams’s request’s initiator type is non-null and fetchParams’s request’s client’s\n            //    global object is fetchParams’s task destination, then run fetchParams’s controller’s report\n            //    timing steps given fetchParams’s request’s client’s global object.\n            if (fetchParams.request.initiatorType != null) {\n                fetchParams.controller.reportTimingSteps();\n            }\n        };\n        // 5. Queue a fetch task to run processResponseEndOfBodyTask with fetchParams’s task destination\n        queueMicrotask(()=>processResponseEndOfBodyTask());\n    };\n    // 4. If fetchParams’s process response is non-null, then queue a fetch task to run fetchParams’s\n    //    process response given response, with fetchParams’s task destination.\n    if (fetchParams.processResponse != null) {\n        queueMicrotask(()=>{\n            fetchParams.processResponse(response);\n            fetchParams.processResponse = null;\n        });\n    }\n    // 5. Let internalResponse be response, if response is a network error; otherwise response’s internal response.\n    const internalResponse = response.type === 'error' ? response : response.internalResponse ?? response;\n    // 6. If internalResponse’s body is null, then run processResponseEndOfBody.\n    // 7. Otherwise:\n    if (internalResponse.body == null) {\n        processResponseEndOfBody();\n    } else {\n        // mcollina: all the following steps of the specs are skipped.\n        // The internal transform stream is not needed.\n        // See https://github.com/nodejs/undici/pull/3093#issuecomment-2050198541\n        // 1. Let transformStream be a new TransformStream.\n        // 2. Let identityTransformAlgorithm be an algorithm which, given chunk, enqueues chunk in transformStream.\n        // 3. Set up transformStream with transformAlgorithm set to identityTransformAlgorithm and flushAlgorithm\n        //    set to processResponseEndOfBody.\n        // 4. Set internalResponse’s body’s stream to the result of internalResponse’s body’s stream piped through transformStream.\n        finished(internalResponse.body.stream, ()=>{\n            processResponseEndOfBody();\n        });\n    }\n}\n// https://fetch.spec.whatwg.org/#http-fetch\nasync function httpFetch(fetchParams) {\n    // 1. Let request be fetchParams’s request.\n    const request = fetchParams.request;\n    // 2. Let response be null.\n    let response = null;\n    // 3. Let actualResponse be null.\n    let actualResponse = null;\n    // 4. Let timingInfo be fetchParams’s timing info.\n    const timingInfo = fetchParams.timingInfo;\n    // 5. If request’s service-workers mode is \"all\", then:\n    if (request.serviceWorkers === 'all') {\n    // TODO\n    }\n    // 6. If response is null, then:\n    if (response === null) {\n        // 1. If makeCORSPreflight is true and one of these conditions is true:\n        // TODO\n        // 2. If request’s redirect mode is \"follow\", then set request’s\n        // service-workers mode to \"none\".\n        if (request.redirect === 'follow') {\n            request.serviceWorkers = 'none';\n        }\n        // 3. Set response and actualResponse to the result of running\n        // HTTP-network-or-cache fetch given fetchParams.\n        actualResponse = response = await httpNetworkOrCacheFetch(fetchParams);\n        // 4. If request’s response tainting is \"cors\" and a CORS check\n        // for request and response returns failure, then return a network error.\n        if (request.responseTainting === 'cors' && corsCheck(request, response) === 'failure') {\n            return makeNetworkError('cors failure');\n        }\n        // 5. If the TAO check for request and response returns failure, then set\n        // request’s timing allow failed flag.\n        if (TAOCheck(request, response) === 'failure') {\n            request.timingAllowFailed = true;\n        }\n    }\n    // 7. If either request’s response tainting or response’s type\n    // is \"opaque\", and the cross-origin resource policy check with\n    // request’s origin, request’s client, request’s destination,\n    // and actualResponse returns blocked, then return a network error.\n    if ((request.responseTainting === 'opaque' || response.type === 'opaque') && crossOriginResourcePolicyCheck(request.origin, request.client, request.destination, actualResponse) === 'blocked') {\n        return makeNetworkError('blocked');\n    }\n    // 8. If actualResponse’s status is a redirect status, then:\n    if (redirectStatusSet.has(actualResponse.status)) {\n        // 1. If actualResponse’s status is not 303, request’s body is not null,\n        // and the connection uses HTTP/2, then user agents may, and are even\n        // encouraged to, transmit an RST_STREAM frame.\n        // See, https://github.com/whatwg/fetch/issues/1288\n        if (request.redirect !== 'manual') {\n            fetchParams.controller.connection.destroy(undefined, false);\n        }\n        // 2. Switch on request’s redirect mode:\n        if (request.redirect === 'error') {\n            // Set response to a network error.\n            response = makeNetworkError('unexpected redirect');\n        } else if (request.redirect === 'manual') {\n            // Set response to an opaque-redirect filtered response whose internal\n            // response is actualResponse.\n            // NOTE(spec): On the web this would return an `opaqueredirect` response,\n            // but that doesn't make sense server side.\n            // See https://github.com/nodejs/undici/issues/1193.\n            response = actualResponse;\n        } else if (request.redirect === 'follow') {\n            // Set response to the result of running HTTP-redirect fetch given\n            // fetchParams and response.\n            response = await httpRedirectFetch(fetchParams, response);\n        } else {\n            assert(false);\n        }\n    }\n    // 9. Set response’s timing info to timingInfo.\n    response.timingInfo = timingInfo;\n    // 10. Return response.\n    return response;\n}\n// https://fetch.spec.whatwg.org/#http-redirect-fetch\nfunction httpRedirectFetch(fetchParams, response) {\n    // 1. Let request be fetchParams’s request.\n    const request = fetchParams.request;\n    // 2. Let actualResponse be response, if response is not a filtered response,\n    // and response’s internal response otherwise.\n    const actualResponse = response.internalResponse ? response.internalResponse : response;\n    // 3. Let locationURL be actualResponse’s location URL given request’s current\n    // URL’s fragment.\n    let locationURL;\n    try {\n        locationURL = responseLocationURL(actualResponse, requestCurrentURL(request).hash);\n        // 4. If locationURL is null, then return response.\n        if (locationURL == null) {\n            return response;\n        }\n    } catch (err) {\n        // 5. If locationURL is failure, then return a network error.\n        return Promise.resolve(makeNetworkError(err));\n    }\n    // 6. If locationURL’s scheme is not an HTTP(S) scheme, then return a network\n    // error.\n    if (!urlIsHttpHttpsScheme(locationURL)) {\n        return Promise.resolve(makeNetworkError('URL scheme must be a HTTP(S) scheme'));\n    }\n    // 7. If request’s redirect count is 20, then return a network error.\n    if (request.redirectCount === 20) {\n        return Promise.resolve(makeNetworkError('redirect count exceeded'));\n    }\n    // 8. Increase request’s redirect count by 1.\n    request.redirectCount += 1;\n    // 9. If request’s mode is \"cors\", locationURL includes credentials, and\n    // request’s origin is not same origin with locationURL’s origin, then return\n    //  a network error.\n    if (request.mode === 'cors' && (locationURL.username || locationURL.password) && !sameOrigin(request, locationURL)) {\n        return Promise.resolve(makeNetworkError('cross origin not allowed for request mode \"cors\"'));\n    }\n    // 10. If request’s response tainting is \"cors\" and locationURL includes\n    // credentials, then return a network error.\n    if (request.responseTainting === 'cors' && (locationURL.username || locationURL.password)) {\n        return Promise.resolve(makeNetworkError('URL cannot contain credentials for request mode \"cors\"'));\n    }\n    // 11. If actualResponse’s status is not 303, request’s body is non-null,\n    // and request’s body’s source is null, then return a network error.\n    if (actualResponse.status !== 303 && request.body != null && request.body.source == null) {\n        return Promise.resolve(makeNetworkError());\n    }\n    // 12. If one of the following is true\n    // - actualResponse’s status is 301 or 302 and request’s method is `POST`\n    // - actualResponse’s status is 303 and request’s method is not `GET` or `HEAD`\n    if ([\n        301,\n        302\n    ].includes(actualResponse.status) && request.method === 'POST' || actualResponse.status === 303 && !GET_OR_HEAD.includes(request.method)) {\n        // then:\n        // 1. Set request’s method to `GET` and request’s body to null.\n        request.method = 'GET';\n        request.body = null;\n        // 2. For each headerName of request-body-header name, delete headerName from\n        // request’s header list.\n        for (const headerName of requestBodyHeader){\n            request.headersList.delete(headerName);\n        }\n    }\n    // 13. If request’s current URL’s origin is not same origin with locationURL’s\n    //     origin, then for each headerName of CORS non-wildcard request-header name,\n    //     delete headerName from request’s header list.\n    if (!sameOrigin(requestCurrentURL(request), locationURL)) {\n        // https://fetch.spec.whatwg.org/#cors-non-wildcard-request-header-name\n        request.headersList.delete('authorization', true);\n        // https://fetch.spec.whatwg.org/#authentication-entries\n        request.headersList.delete('proxy-authorization', true);\n        // \"Cookie\" and \"Host\" are forbidden request-headers, which undici doesn't implement.\n        request.headersList.delete('cookie', true);\n        request.headersList.delete('host', true);\n    }\n    // 14. If request’s body is non-null, then set request’s body to the first return\n    // value of safely extracting request’s body’s source.\n    if (request.body != null) {\n        assert(request.body.source != null);\n        request.body = safelyExtractBody(request.body.source)[0];\n    }\n    // 15. Let timingInfo be fetchParams’s timing info.\n    const timingInfo = fetchParams.timingInfo;\n    // 16. Set timingInfo’s redirect end time and post-redirect start time to the\n    // coarsened shared current time given fetchParams’s cross-origin isolated\n    // capability.\n    timingInfo.redirectEndTime = timingInfo.postRedirectStartTime = coarsenedSharedCurrentTime(fetchParams.crossOriginIsolatedCapability);\n    // 17. If timingInfo’s redirect start time is 0, then set timingInfo’s\n    //  redirect start time to timingInfo’s start time.\n    if (timingInfo.redirectStartTime === 0) {\n        timingInfo.redirectStartTime = timingInfo.startTime;\n    }\n    // 18. Append locationURL to request’s URL list.\n    request.urlList.push(locationURL);\n    // 19. Invoke set request’s referrer policy on redirect on request and\n    // actualResponse.\n    setRequestReferrerPolicyOnRedirect(request, actualResponse);\n    // 20. Return the result of running main fetch given fetchParams and true.\n    return mainFetch(fetchParams, true);\n}\n// https://fetch.spec.whatwg.org/#http-network-or-cache-fetch\nasync function httpNetworkOrCacheFetch(fetchParams, isAuthenticationFetch = false, isNewConnectionFetch = false) {\n    // 1. Let request be fetchParams’s request.\n    const request = fetchParams.request;\n    // 2. Let httpFetchParams be null.\n    let httpFetchParams = null;\n    // 3. Let httpRequest be null.\n    let httpRequest = null;\n    // 4. Let response be null.\n    let response = null;\n    // 5. Let storedResponse be null.\n    // TODO: cache\n    // 6. Let httpCache be null.\n    const httpCache = null;\n    // 7. Let the revalidatingFlag be unset.\n    const revalidatingFlag = false;\n    // 8. Run these steps, but abort when the ongoing fetch is terminated:\n    //    1. If request’s window is \"no-window\" and request’s redirect mode is\n    //    \"error\", then set httpFetchParams to fetchParams and httpRequest to\n    //    request.\n    if (request.window === 'no-window' && request.redirect === 'error') {\n        httpFetchParams = fetchParams;\n        httpRequest = request;\n    } else {\n        // Otherwise:\n        // 1. Set httpRequest to a clone of request.\n        httpRequest = cloneRequest(request);\n        // 2. Set httpFetchParams to a copy of fetchParams.\n        httpFetchParams = {\n            ...fetchParams\n        };\n        // 3. Set httpFetchParams’s request to httpRequest.\n        httpFetchParams.request = httpRequest;\n    }\n    //    3. Let includeCredentials be true if one of\n    const includeCredentials = request.credentials === 'include' || request.credentials === 'same-origin' && request.responseTainting === 'basic';\n    //    4. Let contentLength be httpRequest’s body’s length, if httpRequest’s\n    //    body is non-null; otherwise null.\n    const contentLength = httpRequest.body ? httpRequest.body.length : null;\n    //    5. Let contentLengthHeaderValue be null.\n    let contentLengthHeaderValue = null;\n    //    6. If httpRequest’s body is null and httpRequest’s method is `POST` or\n    //    `PUT`, then set contentLengthHeaderValue to `0`.\n    if (httpRequest.body == null && [\n        'POST',\n        'PUT'\n    ].includes(httpRequest.method)) {\n        contentLengthHeaderValue = '0';\n    }\n    //    7. If contentLength is non-null, then set contentLengthHeaderValue to\n    //    contentLength, serialized and isomorphic encoded.\n    if (contentLength != null) {\n        contentLengthHeaderValue = isomorphicEncode(`${contentLength}`);\n    }\n    //    8. If contentLengthHeaderValue is non-null, then append\n    //    `Content-Length`/contentLengthHeaderValue to httpRequest’s header\n    //    list.\n    if (contentLengthHeaderValue != null) {\n        httpRequest.headersList.append('content-length', contentLengthHeaderValue, true);\n    }\n    //    9. If contentLengthHeaderValue is non-null, then append (`Content-Length`,\n    //    contentLengthHeaderValue) to httpRequest’s header list.\n    //    10. If contentLength is non-null and httpRequest’s keepalive is true,\n    //    then:\n    if (contentLength != null && httpRequest.keepalive) {\n    // NOTE: keepalive is a noop outside of browser context.\n    }\n    //    11. If httpRequest’s referrer is a URL, then append\n    //    `Referer`/httpRequest’s referrer, serialized and isomorphic encoded,\n    //     to httpRequest’s header list.\n    if (httpRequest.referrer instanceof URL) {\n        httpRequest.headersList.append('referer', isomorphicEncode(httpRequest.referrer.href), true);\n    }\n    //    12. Append a request `Origin` header for httpRequest.\n    appendRequestOriginHeader(httpRequest);\n    //    13. Append the Fetch metadata headers for httpRequest. [FETCH-METADATA]\n    appendFetchMetadata(httpRequest);\n    //    14. If httpRequest’s header list does not contain `User-Agent`, then\n    //    user agents should append `User-Agent`/default `User-Agent` value to\n    //    httpRequest’s header list.\n    if (!httpRequest.headersList.contains('user-agent', true)) {\n        httpRequest.headersList.append('user-agent', defaultUserAgent);\n    }\n    //    15. If httpRequest’s cache mode is \"default\" and httpRequest’s header\n    //    list contains `If-Modified-Since`, `If-None-Match`,\n    //    `If-Unmodified-Since`, `If-Match`, or `If-Range`, then set\n    //    httpRequest’s cache mode to \"no-store\".\n    if (httpRequest.cache === 'default' && (httpRequest.headersList.contains('if-modified-since', true) || httpRequest.headersList.contains('if-none-match', true) || httpRequest.headersList.contains('if-unmodified-since', true) || httpRequest.headersList.contains('if-match', true) || httpRequest.headersList.contains('if-range', true))) {\n        httpRequest.cache = 'no-store';\n    }\n    //    16. If httpRequest’s cache mode is \"no-cache\", httpRequest’s prevent\n    //    no-cache cache-control header modification flag is unset, and\n    //    httpRequest’s header list does not contain `Cache-Control`, then append\n    //    `Cache-Control`/`max-age=0` to httpRequest’s header list.\n    if (httpRequest.cache === 'no-cache' && !httpRequest.preventNoCacheCacheControlHeaderModification && !httpRequest.headersList.contains('cache-control', true)) {\n        httpRequest.headersList.append('cache-control', 'max-age=0', true);\n    }\n    //    17. If httpRequest’s cache mode is \"no-store\" or \"reload\", then:\n    if (httpRequest.cache === 'no-store' || httpRequest.cache === 'reload') {\n        // 1. If httpRequest’s header list does not contain `Pragma`, then append\n        // `Pragma`/`no-cache` to httpRequest’s header list.\n        if (!httpRequest.headersList.contains('pragma', true)) {\n            httpRequest.headersList.append('pragma', 'no-cache', true);\n        }\n        // 2. If httpRequest’s header list does not contain `Cache-Control`,\n        // then append `Cache-Control`/`no-cache` to httpRequest’s header list.\n        if (!httpRequest.headersList.contains('cache-control', true)) {\n            httpRequest.headersList.append('cache-control', 'no-cache', true);\n        }\n    }\n    //    18. If httpRequest’s header list contains `Range`, then append\n    //    `Accept-Encoding`/`identity` to httpRequest’s header list.\n    if (httpRequest.headersList.contains('range', true)) {\n        httpRequest.headersList.append('accept-encoding', 'identity', true);\n    }\n    //    19. Modify httpRequest’s header list per HTTP. Do not append a given\n    //    header if httpRequest’s header list contains that header’s name.\n    //    TODO: https://github.com/whatwg/fetch/issues/1285#issuecomment-896560129\n    if (!httpRequest.headersList.contains('accept-encoding', true)) {\n        if (urlHasHttpsScheme(requestCurrentURL(httpRequest))) {\n            httpRequest.headersList.append('accept-encoding', 'br, gzip, deflate', true);\n        } else {\n            httpRequest.headersList.append('accept-encoding', 'gzip, deflate', true);\n        }\n    }\n    httpRequest.headersList.delete('host', true);\n    //    20. If includeCredentials is true, then:\n    if (includeCredentials) {\n    // 1. If the user agent is not configured to block cookies for httpRequest\n    // (see section 7 of [COOKIES]), then:\n    // TODO: credentials\n    // 2. If httpRequest’s header list does not contain `Authorization`, then:\n    // TODO: credentials\n    }\n    //    21. If there’s a proxy-authentication entry, use it as appropriate.\n    //    TODO: proxy-authentication\n    //    22. Set httpCache to the result of determining the HTTP cache\n    //    partition, given httpRequest.\n    //    TODO: cache\n    //    23. If httpCache is null, then set httpRequest’s cache mode to\n    //    \"no-store\".\n    if (httpCache == null) {\n        httpRequest.cache = 'no-store';\n    }\n    //    24. If httpRequest’s cache mode is neither \"no-store\" nor \"reload\",\n    //    then:\n    if (httpRequest.cache !== 'no-store' && httpRequest.cache !== 'reload') {\n    // TODO: cache\n    }\n    // 9. If aborted, then return the appropriate network error for fetchParams.\n    // TODO\n    // 10. If response is null, then:\n    if (response == null) {\n        // 1. If httpRequest’s cache mode is \"only-if-cached\", then return a\n        // network error.\n        if (httpRequest.cache === 'only-if-cached') {\n            return makeNetworkError('only if cached');\n        }\n        // 2. Let forwardResponse be the result of running HTTP-network fetch\n        // given httpFetchParams, includeCredentials, and isNewConnectionFetch.\n        const forwardResponse = await httpNetworkFetch(httpFetchParams, includeCredentials, isNewConnectionFetch);\n        // 3. If httpRequest’s method is unsafe and forwardResponse’s status is\n        // in the range 200 to 399, inclusive, invalidate appropriate stored\n        // responses in httpCache, as per the \"Invalidation\" chapter of HTTP\n        // Caching, and set storedResponse to null. [HTTP-CACHING]\n        if (!safeMethodsSet.has(httpRequest.method) && forwardResponse.status >= 200 && forwardResponse.status <= 399) {\n        // TODO: cache\n        }\n        // 4. If the revalidatingFlag is set and forwardResponse’s status is 304,\n        // then:\n        if (revalidatingFlag && forwardResponse.status === 304) {\n        // TODO: cache\n        }\n        // 5. If response is null, then:\n        if (response == null) {\n            // 1. Set response to forwardResponse.\n            response = forwardResponse;\n        // 2. Store httpRequest and forwardResponse in httpCache, as per the\n        // \"Storing Responses in Caches\" chapter of HTTP Caching. [HTTP-CACHING]\n        // TODO: cache\n        }\n    }\n    // 11. Set response’s URL list to a clone of httpRequest’s URL list.\n    response.urlList = [\n        ...httpRequest.urlList\n    ];\n    // 12. If httpRequest’s header list contains `Range`, then set response’s\n    // range-requested flag.\n    if (httpRequest.headersList.contains('range', true)) {\n        response.rangeRequested = true;\n    }\n    // 13. Set response’s request-includes-credentials to includeCredentials.\n    response.requestIncludesCredentials = includeCredentials;\n    // 14. If response’s status is 401, httpRequest’s response tainting is not\n    // \"cors\", includeCredentials is true, and request’s window is an environment\n    // settings object, then:\n    // TODO\n    // 15. If response’s status is 407, then:\n    if (response.status === 407) {\n        // 1. If request’s window is \"no-window\", then return a network error.\n        if (request.window === 'no-window') {\n            return makeNetworkError();\n        }\n        // 2. ???\n        // 3. If fetchParams is canceled, then return the appropriate network error for fetchParams.\n        if (isCancelled(fetchParams)) {\n            return makeAppropriateNetworkError(fetchParams);\n        }\n        // 4. Prompt the end user as appropriate in request’s window and store\n        // the result as a proxy-authentication entry. [HTTP-AUTH]\n        // TODO: Invoke some kind of callback?\n        // 5. Set response to the result of running HTTP-network-or-cache fetch given\n        // fetchParams.\n        // TODO\n        return makeNetworkError('proxy authentication required');\n    }\n    // 16. If all of the following are true\n    if (// response’s status is 421\n    response.status === 421 && // isNewConnectionFetch is false\n    !isNewConnectionFetch && // request’s body is null, or request’s body is non-null and request’s body’s source is non-null\n    (request.body == null || request.body.source != null)) {\n        // then:\n        // 1. If fetchParams is canceled, then return the appropriate network error for fetchParams.\n        if (isCancelled(fetchParams)) {\n            return makeAppropriateNetworkError(fetchParams);\n        }\n        // 2. Set response to the result of running HTTP-network-or-cache\n        // fetch given fetchParams, isAuthenticationFetch, and true.\n        // TODO (spec): The spec doesn't specify this but we need to cancel\n        // the active response before we can start a new one.\n        // https://github.com/whatwg/fetch/issues/1293\n        fetchParams.controller.connection.destroy();\n        response = await httpNetworkOrCacheFetch(fetchParams, isAuthenticationFetch, true);\n    }\n    // 17. If isAuthenticationFetch is true, then create an authentication entry\n    if (isAuthenticationFetch) {\n    // TODO\n    }\n    // 18. Return response.\n    return response;\n}\n// https://fetch.spec.whatwg.org/#http-network-fetch\nasync function httpNetworkFetch(fetchParams, includeCredentials = false, forceNewConnection = false) {\n    assert(!fetchParams.controller.connection || fetchParams.controller.connection.destroyed);\n    fetchParams.controller.connection = {\n        abort: null,\n        destroyed: false,\n        destroy (err, abort = true) {\n            if (!this.destroyed) {\n                this.destroyed = true;\n                if (abort) {\n                    this.abort?.(err ?? new DOMException('The operation was aborted.', 'AbortError'));\n                }\n            }\n        }\n    };\n    // 1. Let request be fetchParams’s request.\n    const request = fetchParams.request;\n    // 2. Let response be null.\n    let response = null;\n    // 3. Let timingInfo be fetchParams’s timing info.\n    const timingInfo = fetchParams.timingInfo;\n    // 4. Let httpCache be the result of determining the HTTP cache partition,\n    // given request.\n    // TODO: cache\n    const httpCache = null;\n    // 5. If httpCache is null, then set request’s cache mode to \"no-store\".\n    if (httpCache == null) {\n        request.cache = 'no-store';\n    }\n    // 6. Let networkPartitionKey be the result of determining the network\n    // partition key given request.\n    // TODO\n    // 7. Let newConnection be \"yes\" if forceNewConnection is true; otherwise\n    // \"no\".\n    const newConnection = forceNewConnection ? 'yes' : 'no' // eslint-disable-line no-unused-vars\n    ;\n    // 8. Switch on request’s mode:\n    if (request.mode === 'websocket') {\n    // Let connection be the result of obtaining a WebSocket connection,\n    // given request’s current URL.\n    // TODO\n    } else {\n    // Let connection be the result of obtaining a connection, given\n    // networkPartitionKey, request’s current URL’s origin,\n    // includeCredentials, and forceNewConnection.\n    // TODO\n    }\n    // 9. Run these steps, but abort when the ongoing fetch is terminated:\n    //    1. If connection is failure, then return a network error.\n    //    2. Set timingInfo’s final connection timing info to the result of\n    //    calling clamp and coarsen connection timing info with connection’s\n    //    timing info, timingInfo’s post-redirect start time, and fetchParams’s\n    //    cross-origin isolated capability.\n    //    3. If connection is not an HTTP/2 connection, request’s body is non-null,\n    //    and request’s body’s source is null, then append (`Transfer-Encoding`,\n    //    `chunked`) to request’s header list.\n    //    4. Set timingInfo’s final network-request start time to the coarsened\n    //    shared current time given fetchParams’s cross-origin isolated\n    //    capability.\n    //    5. Set response to the result of making an HTTP request over connection\n    //    using request with the following caveats:\n    //        - Follow the relevant requirements from HTTP. [HTTP] [HTTP-SEMANTICS]\n    //        [HTTP-COND] [HTTP-CACHING] [HTTP-AUTH]\n    //        - If request’s body is non-null, and request’s body’s source is null,\n    //        then the user agent may have a buffer of up to 64 kibibytes and store\n    //        a part of request’s body in that buffer. If the user agent reads from\n    //        request’s body beyond that buffer’s size and the user agent needs to\n    //        resend request, then instead return a network error.\n    //        - Set timingInfo’s final network-response start time to the coarsened\n    //        shared current time given fetchParams’s cross-origin isolated capability,\n    //        immediately after the user agent’s HTTP parser receives the first byte\n    //        of the response (e.g., frame header bytes for HTTP/2 or response status\n    //        line for HTTP/1.x).\n    //        - Wait until all the headers are transmitted.\n    //        - Any responses whose status is in the range 100 to 199, inclusive,\n    //        and is not 101, are to be ignored, except for the purposes of setting\n    //        timingInfo’s final network-response start time above.\n    //    - If request’s header list contains `Transfer-Encoding`/`chunked` and\n    //    response is transferred via HTTP/1.0 or older, then return a network\n    //    error.\n    //    - If the HTTP request results in a TLS client certificate dialog, then:\n    //        1. If request’s window is an environment settings object, make the\n    //        dialog available in request’s window.\n    //        2. Otherwise, return a network error.\n    // To transmit request’s body body, run these steps:\n    let requestBody = null;\n    // 1. If body is null and fetchParams’s process request end-of-body is\n    // non-null, then queue a fetch task given fetchParams’s process request\n    // end-of-body and fetchParams’s task destination.\n    if (request.body == null && fetchParams.processRequestEndOfBody) {\n        queueMicrotask(()=>fetchParams.processRequestEndOfBody());\n    } else if (request.body != null) {\n        // 2. Otherwise, if body is non-null:\n        //    1. Let processBodyChunk given bytes be these steps:\n        const processBodyChunk = async function*(bytes) {\n            // 1. If the ongoing fetch is terminated, then abort these steps.\n            if (isCancelled(fetchParams)) {\n                return;\n            }\n            // 2. Run this step in parallel: transmit bytes.\n            yield bytes;\n            // 3. If fetchParams’s process request body is non-null, then run\n            // fetchParams’s process request body given bytes’s length.\n            fetchParams.processRequestBodyChunkLength?.(bytes.byteLength);\n        };\n        // 2. Let processEndOfBody be these steps:\n        const processEndOfBody = ()=>{\n            // 1. If fetchParams is canceled, then abort these steps.\n            if (isCancelled(fetchParams)) {\n                return;\n            }\n            // 2. If fetchParams’s process request end-of-body is non-null,\n            // then run fetchParams’s process request end-of-body.\n            if (fetchParams.processRequestEndOfBody) {\n                fetchParams.processRequestEndOfBody();\n            }\n        };\n        // 3. Let processBodyError given e be these steps:\n        const processBodyError = (e)=>{\n            // 1. If fetchParams is canceled, then abort these steps.\n            if (isCancelled(fetchParams)) {\n                return;\n            }\n            // 2. If e is an \"AbortError\" DOMException, then abort fetchParams’s controller.\n            if (e.name === 'AbortError') {\n                fetchParams.controller.abort();\n            } else {\n                fetchParams.controller.terminate(e);\n            }\n        };\n        // 4. Incrementally read request’s body given processBodyChunk, processEndOfBody,\n        // processBodyError, and fetchParams’s task destination.\n        requestBody = async function*() {\n            try {\n                for await (const bytes of request.body.stream){\n                    yield* processBodyChunk(bytes);\n                }\n                processEndOfBody();\n            } catch (err) {\n                processBodyError(err);\n            }\n        }();\n    }\n    try {\n        // socket is only provided for websockets\n        const { body, status, statusText, headersList, socket } = await dispatch({\n            body: requestBody\n        });\n        if (socket) {\n            response = makeResponse({\n                status,\n                statusText,\n                headersList,\n                socket\n            });\n        } else {\n            const iterator = body[Symbol.asyncIterator]();\n            fetchParams.controller.next = ()=>iterator.next();\n            response = makeResponse({\n                status,\n                statusText,\n                headersList\n            });\n        }\n    } catch (err) {\n        // 10. If aborted, then:\n        if (err.name === 'AbortError') {\n            // 1. If connection uses HTTP/2, then transmit an RST_STREAM frame.\n            fetchParams.controller.connection.destroy();\n            // 2. Return the appropriate network error for fetchParams.\n            return makeAppropriateNetworkError(fetchParams, err);\n        }\n        return makeNetworkError(err);\n    }\n    // 11. Let pullAlgorithm be an action that resumes the ongoing fetch\n    // if it is suspended.\n    const pullAlgorithm = async ()=>{\n        await fetchParams.controller.resume();\n    };\n    // 12. Let cancelAlgorithm be an algorithm that aborts fetchParams’s\n    // controller with reason, given reason.\n    const cancelAlgorithm = (reason)=>{\n        // If the aborted fetch was already terminated, then we do not\n        // need to do anything.\n        if (!isCancelled(fetchParams)) {\n            fetchParams.controller.abort(reason);\n        }\n    };\n    // 13. Let highWaterMark be a non-negative, non-NaN number, chosen by\n    // the user agent.\n    // TODO\n    // 14. Let sizeAlgorithm be an algorithm that accepts a chunk object\n    // and returns a non-negative, non-NaN, non-infinite number, chosen by the user agent.\n    // TODO\n    // 15. Let stream be a new ReadableStream.\n    // 16. Set up stream with byte reading support with pullAlgorithm set to pullAlgorithm,\n    //     cancelAlgorithm set to cancelAlgorithm.\n    const stream = new ReadableStream({\n        async start (controller) {\n            fetchParams.controller.controller = controller;\n        },\n        async pull (controller) {\n            await pullAlgorithm(controller);\n        },\n        async cancel (reason) {\n            await cancelAlgorithm(reason);\n        },\n        type: 'bytes'\n    });\n    // 17. Run these steps, but abort when the ongoing fetch is terminated:\n    //    1. Set response’s body to a new body whose stream is stream.\n    response.body = {\n        stream,\n        source: null,\n        length: null\n    };\n    //    2. If response is not a network error and request’s cache mode is\n    //    not \"no-store\", then update response in httpCache for request.\n    //    TODO\n    //    3. If includeCredentials is true and the user agent is not configured\n    //    to block cookies for request (see section 7 of [COOKIES]), then run the\n    //    \"set-cookie-string\" parsing algorithm (see section 5.2 of [COOKIES]) on\n    //    the value of each header whose name is a byte-case-insensitive match for\n    //    `Set-Cookie` in response’s header list, if any, and request’s current URL.\n    //    TODO\n    // 18. If aborted, then:\n    // TODO\n    // 19. Run these steps in parallel:\n    //    1. Run these steps, but abort when fetchParams is canceled:\n    fetchParams.controller.onAborted = onAborted;\n    fetchParams.controller.on('terminated', onAborted);\n    fetchParams.controller.resume = async ()=>{\n        // 1. While true\n        while(true){\n            // 1-3. See onData...\n            // 4. Set bytes to the result of handling content codings given\n            // codings and bytes.\n            let bytes;\n            let isFailure;\n            try {\n                const { done, value } = await fetchParams.controller.next();\n                if (isAborted(fetchParams)) {\n                    break;\n                }\n                bytes = done ? undefined : value;\n            } catch (err) {\n                if (fetchParams.controller.ended && !timingInfo.encodedBodySize) {\n                    // zlib doesn't like empty streams.\n                    bytes = undefined;\n                } else {\n                    bytes = err;\n                    // err may be propagated from the result of calling readablestream.cancel,\n                    // which might not be an error. https://github.com/nodejs/undici/issues/2009\n                    isFailure = true;\n                }\n            }\n            if (bytes === undefined) {\n                // 2. Otherwise, if the bytes transmission for response’s message\n                // body is done normally and stream is readable, then close\n                // stream, finalize response for fetchParams and response, and\n                // abort these in-parallel steps.\n                readableStreamClose(fetchParams.controller.controller);\n                finalizeResponse(fetchParams, response);\n                return;\n            }\n            // 5. Increase timingInfo’s decoded body size by bytes’s length.\n            timingInfo.decodedBodySize += bytes?.byteLength ?? 0;\n            // 6. If bytes is failure, then terminate fetchParams’s controller.\n            if (isFailure) {\n                fetchParams.controller.terminate(bytes);\n                return;\n            }\n            // 7. Enqueue a Uint8Array wrapping an ArrayBuffer containing bytes\n            // into stream.\n            const buffer = new Uint8Array(bytes);\n            if (buffer.byteLength) {\n                fetchParams.controller.controller.enqueue(buffer);\n            }\n            // 8. If stream is errored, then terminate the ongoing fetch.\n            if (isErrored(stream)) {\n                fetchParams.controller.terminate();\n                return;\n            }\n            // 9. If stream doesn’t need more data ask the user agent to suspend\n            // the ongoing fetch.\n            if (fetchParams.controller.controller.desiredSize <= 0) {\n                return;\n            }\n        }\n    };\n    //    2. If aborted, then:\n    function onAborted(reason) {\n        // 2. If fetchParams is aborted, then:\n        if (isAborted(fetchParams)) {\n            // 1. Set response’s aborted flag.\n            response.aborted = true;\n            // 2. If stream is readable, then error stream with the result of\n            //    deserialize a serialized abort reason given fetchParams’s\n            //    controller’s serialized abort reason and an\n            //    implementation-defined realm.\n            if (isReadable(stream)) {\n                fetchParams.controller.controller.error(fetchParams.controller.serializedAbortReason);\n            }\n        } else {\n            // 3. Otherwise, if stream is readable, error stream with a TypeError.\n            if (isReadable(stream)) {\n                fetchParams.controller.controller.error(new TypeError('terminated', {\n                    cause: isErrorLike(reason) ? reason : undefined\n                }));\n            }\n        }\n        // 4. If connection uses HTTP/2, then transmit an RST_STREAM frame.\n        // 5. Otherwise, the user agent should close connection unless it would be bad for performance to do so.\n        fetchParams.controller.connection.destroy();\n    }\n    // 20. Return response.\n    return response;\n    function dispatch({ body }) {\n        const url = requestCurrentURL(request);\n        /** @type {import('../..').Agent} */ const agent = fetchParams.controller.dispatcher;\n        return new Promise((resolve, reject)=>agent.dispatch({\n                path: url.pathname + url.search,\n                origin: url.origin,\n                method: request.method,\n                body: agent.isMockActive ? request.body && (request.body.source || request.body.stream) : body,\n                headers: request.headersList.entries,\n                maxRedirections: 0,\n                upgrade: request.mode === 'websocket' ? 'websocket' : undefined\n            }, {\n                body: null,\n                abort: null,\n                onConnect (abort) {\n                    // TODO (fix): Do we need connection here?\n                    const { connection } = fetchParams.controller;\n                    // Set timingInfo’s final connection timing info to the result of calling clamp and coarsen\n                    // connection timing info with connection’s timing info, timingInfo’s post-redirect start\n                    // time, and fetchParams’s cross-origin isolated capability.\n                    // TODO: implement connection timing\n                    timingInfo.finalConnectionTimingInfo = clampAndCoarsenConnectionTimingInfo(undefined, timingInfo.postRedirectStartTime, fetchParams.crossOriginIsolatedCapability);\n                    if (connection.destroyed) {\n                        abort(new DOMException('The operation was aborted.', 'AbortError'));\n                    } else {\n                        fetchParams.controller.on('terminated', abort);\n                        this.abort = connection.abort = abort;\n                    }\n                    // Set timingInfo’s final network-request start time to the coarsened shared current time given\n                    // fetchParams’s cross-origin isolated capability.\n                    timingInfo.finalNetworkRequestStartTime = coarsenedSharedCurrentTime(fetchParams.crossOriginIsolatedCapability);\n                },\n                onResponseStarted () {\n                    // Set timingInfo’s final network-response start time to the coarsened shared current\n                    // time given fetchParams’s cross-origin isolated capability, immediately after the\n                    // user agent’s HTTP parser receives the first byte of the response (e.g., frame header\n                    // bytes for HTTP/2 or response status line for HTTP/1.x).\n                    timingInfo.finalNetworkResponseStartTime = coarsenedSharedCurrentTime(fetchParams.crossOriginIsolatedCapability);\n                },\n                onHeaders (status, rawHeaders, resume, statusText) {\n                    if (status < 200) {\n                        return;\n                    }\n                    /** @type {string[]} */ let codings = [];\n                    let location = '';\n                    const headersList = new HeadersList();\n                    for(let i = 0; i < rawHeaders.length; i += 2){\n                        headersList.append(bufferToLowerCasedHeaderName(rawHeaders[i]), rawHeaders[i + 1].toString('latin1'), true);\n                    }\n                    const contentEncoding = headersList.get('content-encoding', true);\n                    if (contentEncoding) {\n                        // https://www.rfc-editor.org/rfc/rfc7231#section-3.1.2.1\n                        // \"All content-coding values are case-insensitive...\"\n                        codings = contentEncoding.toLowerCase().split(',').map((x)=>x.trim());\n                    }\n                    location = headersList.get('location', true);\n                    this.body = new Readable({\n                        read: resume\n                    });\n                    const decoders = [];\n                    const willFollow = location && request.redirect === 'follow' && redirectStatusSet.has(status);\n                    // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Encoding\n                    if (codings.length !== 0 && request.method !== 'HEAD' && request.method !== 'CONNECT' && !nullBodyStatus.includes(status) && !willFollow) {\n                        for(let i = 0; i < codings.length; ++i){\n                            const coding = codings[i];\n                            // https://www.rfc-editor.org/rfc/rfc9112.html#section-7.2\n                            if (coding === 'x-gzip' || coding === 'gzip') {\n                                decoders.push(zlib.createGunzip({\n                                    // Be less strict when decoding compressed responses, since sometimes\n                                    // servers send slightly invalid responses that are still accepted\n                                    // by common browsers.\n                                    // Always using Z_SYNC_FLUSH is what cURL does.\n                                    flush: zlib.constants.Z_SYNC_FLUSH,\n                                    finishFlush: zlib.constants.Z_SYNC_FLUSH\n                                }));\n                            } else if (coding === 'deflate') {\n                                decoders.push(createInflate());\n                            } else if (coding === 'br') {\n                                decoders.push(zlib.createBrotliDecompress());\n                            } else {\n                                decoders.length = 0;\n                                break;\n                            }\n                        }\n                    }\n                    resolve({\n                        status,\n                        statusText,\n                        headersList,\n                        body: decoders.length ? pipeline(this.body, ...decoders, ()=>{}) : this.body.on('error', ()=>{})\n                    });\n                    return true;\n                },\n                onData (chunk) {\n                    if (fetchParams.controller.dump) {\n                        return;\n                    }\n                    // 1. If one or more bytes have been transmitted from response’s\n                    // message body, then:\n                    //  1. Let bytes be the transmitted bytes.\n                    const bytes = chunk;\n                    //  2. Let codings be the result of extracting header list values\n                    //  given `Content-Encoding` and response’s header list.\n                    //  See pullAlgorithm.\n                    //  3. Increase timingInfo’s encoded body size by bytes’s length.\n                    timingInfo.encodedBodySize += bytes.byteLength;\n                    //  4. See pullAlgorithm...\n                    return this.body.push(bytes);\n                },\n                onComplete () {\n                    if (this.abort) {\n                        fetchParams.controller.off('terminated', this.abort);\n                    }\n                    if (fetchParams.controller.onAborted) {\n                        fetchParams.controller.off('terminated', fetchParams.controller.onAborted);\n                    }\n                    fetchParams.controller.ended = true;\n                    this.body.push(null);\n                },\n                onError (error) {\n                    if (this.abort) {\n                        fetchParams.controller.off('terminated', this.abort);\n                    }\n                    this.body?.destroy(error);\n                    fetchParams.controller.terminate(error);\n                    reject(error);\n                },\n                onUpgrade (status, rawHeaders, socket) {\n                    if (status !== 101) {\n                        return;\n                    }\n                    const headersList = new HeadersList();\n                    for(let i = 0; i < rawHeaders.length; i += 2){\n                        headersList.append(bufferToLowerCasedHeaderName(rawHeaders[i]), rawHeaders[i + 1].toString('latin1'), true);\n                    }\n                    resolve({\n                        status,\n                        statusText: STATUS_CODES[status],\n                        headersList,\n                        socket\n                    });\n                    return true;\n                }\n            }));\n    }\n}\nmodule.exports = {\n    fetch,\n    Fetch,\n    fetching,\n    finalizeAndReportTiming\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/fetch/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/fetch/request.js":
/*!******************************************************!*\
  !*** ./node_modules/undici/lib/web/fetch/request.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* globals AbortController */ \nconst { extractBody, mixinBody, cloneBody } = __webpack_require__(/*! ./body */ \"(ssr)/./node_modules/undici/lib/web/fetch/body.js\");\nconst { Headers, fill: fillHeaders, HeadersList, setHeadersGuard, getHeadersGuard, setHeadersList, getHeadersList } = __webpack_require__(/*! ./headers */ \"(ssr)/./node_modules/undici/lib/web/fetch/headers.js\");\nconst { FinalizationRegistry } = __webpack_require__(/*! ./dispatcher-weakref */ \"(ssr)/./node_modules/undici/lib/web/fetch/dispatcher-weakref.js\")();\nconst util = __webpack_require__(/*! ../../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst nodeUtil = __webpack_require__(/*! node:util */ \"node:util\");\nconst { isValidHTTPToken, sameOrigin, environmentSettingsObject } = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/web/fetch/util.js\");\nconst { forbiddenMethodsSet, corsSafeListedMethodsSet, referrerPolicy, requestRedirect, requestMode, requestCredentials, requestCache, requestDuplex } = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/undici/lib/web/fetch/constants.js\");\nconst { kEnumerableProperty, normalizedMethodRecordsBase, normalizedMethodRecords } = util;\nconst { kHeaders, kSignal, kState, kDispatcher } = __webpack_require__(/*! ./symbols */ \"(ssr)/./node_modules/undici/lib/web/fetch/symbols.js\");\nconst { webidl } = __webpack_require__(/*! ./webidl */ \"(ssr)/./node_modules/undici/lib/web/fetch/webidl.js\");\nconst { URLSerializer } = __webpack_require__(/*! ./data-url */ \"(ssr)/./node_modules/undici/lib/web/fetch/data-url.js\");\nconst { kConstruct } = __webpack_require__(/*! ../../core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst assert = __webpack_require__(/*! node:assert */ \"node:assert\");\nconst { getMaxListeners, setMaxListeners, getEventListeners, defaultMaxListeners } = __webpack_require__(/*! node:events */ \"node:events\");\nconst kAbortController = Symbol('abortController');\nconst requestFinalizer = new FinalizationRegistry(({ signal, abort })=>{\n    signal.removeEventListener('abort', abort);\n});\nconst dependentControllerMap = new WeakMap();\nfunction buildAbort(acRef) {\n    return abort;\n    function abort() {\n        const ac = acRef.deref();\n        if (ac !== undefined) {\n            // Currently, there is a problem with FinalizationRegistry.\n            // https://github.com/nodejs/node/issues/49344\n            // https://github.com/nodejs/node/issues/47748\n            // In the case of abort, the first step is to unregister from it.\n            // If the controller can refer to it, it is still registered.\n            // It will be removed in the future.\n            requestFinalizer.unregister(abort);\n            // Unsubscribe a listener.\n            // FinalizationRegistry will no longer be called, so this must be done.\n            this.removeEventListener('abort', abort);\n            ac.abort(this.reason);\n            const controllerList = dependentControllerMap.get(ac.signal);\n            if (controllerList !== undefined) {\n                if (controllerList.size !== 0) {\n                    for (const ref of controllerList){\n                        const ctrl = ref.deref();\n                        if (ctrl !== undefined) {\n                            ctrl.abort(this.reason);\n                        }\n                    }\n                    controllerList.clear();\n                }\n                dependentControllerMap.delete(ac.signal);\n            }\n        }\n    }\n}\nlet patchMethodWarning = false;\n// https://fetch.spec.whatwg.org/#request-class\nclass Request {\n    // https://fetch.spec.whatwg.org/#dom-request\n    constructor(input, init = {}){\n        if (input === kConstruct) {\n            return;\n        }\n        const prefix = 'Request constructor';\n        webidl.argumentLengthCheck(arguments, 1, prefix);\n        input = webidl.converters.RequestInfo(input, prefix, 'input');\n        init = webidl.converters.RequestInit(init, prefix, 'init');\n        // 1. Let request be null.\n        let request = null;\n        // 2. Let fallbackMode be null.\n        let fallbackMode = null;\n        // 3. Let baseURL be this’s relevant settings object’s API base URL.\n        const baseUrl = environmentSettingsObject.settingsObject.baseUrl;\n        // 4. Let signal be null.\n        let signal = null;\n        // 5. If input is a string, then:\n        if (typeof input === 'string') {\n            this[kDispatcher] = init.dispatcher;\n            // 1. Let parsedURL be the result of parsing input with baseURL.\n            // 2. If parsedURL is failure, then throw a TypeError.\n            let parsedURL;\n            try {\n                parsedURL = new URL(input, baseUrl);\n            } catch (err) {\n                throw new TypeError('Failed to parse URL from ' + input, {\n                    cause: err\n                });\n            }\n            // 3. If parsedURL includes credentials, then throw a TypeError.\n            if (parsedURL.username || parsedURL.password) {\n                throw new TypeError('Request cannot be constructed from a URL that includes credentials: ' + input);\n            }\n            // 4. Set request to a new request whose URL is parsedURL.\n            request = makeRequest({\n                urlList: [\n                    parsedURL\n                ]\n            });\n            // 5. Set fallbackMode to \"cors\".\n            fallbackMode = 'cors';\n        } else {\n            this[kDispatcher] = init.dispatcher || input[kDispatcher];\n            // 6. Otherwise:\n            // 7. Assert: input is a Request object.\n            assert(input instanceof Request);\n            // 8. Set request to input’s request.\n            request = input[kState];\n            // 9. Set signal to input’s signal.\n            signal = input[kSignal];\n        }\n        // 7. Let origin be this’s relevant settings object’s origin.\n        const origin = environmentSettingsObject.settingsObject.origin;\n        // 8. Let window be \"client\".\n        let window = 'client';\n        // 9. If request’s window is an environment settings object and its origin\n        // is same origin with origin, then set window to request’s window.\n        if (request.window?.constructor?.name === 'EnvironmentSettingsObject' && sameOrigin(request.window, origin)) {\n            window = request.window;\n        }\n        // 10. If init[\"window\"] exists and is non-null, then throw a TypeError.\n        if (init.window != null) {\n            throw new TypeError(`'window' option '${window}' must be null`);\n        }\n        // 11. If init[\"window\"] exists, then set window to \"no-window\".\n        if ('window' in init) {\n            window = 'no-window';\n        }\n        // 12. Set request to a new request with the following properties:\n        request = makeRequest({\n            // URL request’s URL.\n            // undici implementation note: this is set as the first item in request's urlList in makeRequest\n            // method request’s method.\n            method: request.method,\n            // header list A copy of request’s header list.\n            // undici implementation note: headersList is cloned in makeRequest\n            headersList: request.headersList,\n            // unsafe-request flag Set.\n            unsafeRequest: request.unsafeRequest,\n            // client This’s relevant settings object.\n            client: environmentSettingsObject.settingsObject,\n            // window window.\n            window,\n            // priority request’s priority.\n            priority: request.priority,\n            // origin request’s origin. The propagation of the origin is only significant for navigation requests\n            // being handled by a service worker. In this scenario a request can have an origin that is different\n            // from the current client.\n            origin: request.origin,\n            // referrer request’s referrer.\n            referrer: request.referrer,\n            // referrer policy request’s referrer policy.\n            referrerPolicy: request.referrerPolicy,\n            // mode request’s mode.\n            mode: request.mode,\n            // credentials mode request’s credentials mode.\n            credentials: request.credentials,\n            // cache mode request’s cache mode.\n            cache: request.cache,\n            // redirect mode request’s redirect mode.\n            redirect: request.redirect,\n            // integrity metadata request’s integrity metadata.\n            integrity: request.integrity,\n            // keepalive request’s keepalive.\n            keepalive: request.keepalive,\n            // reload-navigation flag request’s reload-navigation flag.\n            reloadNavigation: request.reloadNavigation,\n            // history-navigation flag request’s history-navigation flag.\n            historyNavigation: request.historyNavigation,\n            // URL list A clone of request’s URL list.\n            urlList: [\n                ...request.urlList\n            ]\n        });\n        const initHasKey = Object.keys(init).length !== 0;\n        // 13. If init is not empty, then:\n        if (initHasKey) {\n            // 1. If request’s mode is \"navigate\", then set it to \"same-origin\".\n            if (request.mode === 'navigate') {\n                request.mode = 'same-origin';\n            }\n            // 2. Unset request’s reload-navigation flag.\n            request.reloadNavigation = false;\n            // 3. Unset request’s history-navigation flag.\n            request.historyNavigation = false;\n            // 4. Set request’s origin to \"client\".\n            request.origin = 'client';\n            // 5. Set request’s referrer to \"client\"\n            request.referrer = 'client';\n            // 6. Set request’s referrer policy to the empty string.\n            request.referrerPolicy = '';\n            // 7. Set request’s URL to request’s current URL.\n            request.url = request.urlList[request.urlList.length - 1];\n            // 8. Set request’s URL list to « request’s URL ».\n            request.urlList = [\n                request.url\n            ];\n        }\n        // 14. If init[\"referrer\"] exists, then:\n        if (init.referrer !== undefined) {\n            // 1. Let referrer be init[\"referrer\"].\n            const referrer = init.referrer;\n            // 2. If referrer is the empty string, then set request’s referrer to \"no-referrer\".\n            if (referrer === '') {\n                request.referrer = 'no-referrer';\n            } else {\n                // 1. Let parsedReferrer be the result of parsing referrer with\n                // baseURL.\n                // 2. If parsedReferrer is failure, then throw a TypeError.\n                let parsedReferrer;\n                try {\n                    parsedReferrer = new URL(referrer, baseUrl);\n                } catch (err) {\n                    throw new TypeError(`Referrer \"${referrer}\" is not a valid URL.`, {\n                        cause: err\n                    });\n                }\n                // 3. If one of the following is true\n                // - parsedReferrer’s scheme is \"about\" and path is the string \"client\"\n                // - parsedReferrer’s origin is not same origin with origin\n                // then set request’s referrer to \"client\".\n                if (parsedReferrer.protocol === 'about:' && parsedReferrer.hostname === 'client' || origin && !sameOrigin(parsedReferrer, environmentSettingsObject.settingsObject.baseUrl)) {\n                    request.referrer = 'client';\n                } else {\n                    // 4. Otherwise, set request’s referrer to parsedReferrer.\n                    request.referrer = parsedReferrer;\n                }\n            }\n        }\n        // 15. If init[\"referrerPolicy\"] exists, then set request’s referrer policy\n        // to it.\n        if (init.referrerPolicy !== undefined) {\n            request.referrerPolicy = init.referrerPolicy;\n        }\n        // 16. Let mode be init[\"mode\"] if it exists, and fallbackMode otherwise.\n        let mode;\n        if (init.mode !== undefined) {\n            mode = init.mode;\n        } else {\n            mode = fallbackMode;\n        }\n        // 17. If mode is \"navigate\", then throw a TypeError.\n        if (mode === 'navigate') {\n            throw webidl.errors.exception({\n                header: 'Request constructor',\n                message: 'invalid request mode navigate.'\n            });\n        }\n        // 18. If mode is non-null, set request’s mode to mode.\n        if (mode != null) {\n            request.mode = mode;\n        }\n        // 19. If init[\"credentials\"] exists, then set request’s credentials mode\n        // to it.\n        if (init.credentials !== undefined) {\n            request.credentials = init.credentials;\n        }\n        // 18. If init[\"cache\"] exists, then set request’s cache mode to it.\n        if (init.cache !== undefined) {\n            request.cache = init.cache;\n        }\n        // 21. If request’s cache mode is \"only-if-cached\" and request’s mode is\n        // not \"same-origin\", then throw a TypeError.\n        if (request.cache === 'only-if-cached' && request.mode !== 'same-origin') {\n            throw new TypeError(\"'only-if-cached' can be set only with 'same-origin' mode\");\n        }\n        // 22. If init[\"redirect\"] exists, then set request’s redirect mode to it.\n        if (init.redirect !== undefined) {\n            request.redirect = init.redirect;\n        }\n        // 23. If init[\"integrity\"] exists, then set request’s integrity metadata to it.\n        if (init.integrity != null) {\n            request.integrity = String(init.integrity);\n        }\n        // 24. If init[\"keepalive\"] exists, then set request’s keepalive to it.\n        if (init.keepalive !== undefined) {\n            request.keepalive = Boolean(init.keepalive);\n        }\n        // 25. If init[\"method\"] exists, then:\n        if (init.method !== undefined) {\n            // 1. Let method be init[\"method\"].\n            let method = init.method;\n            const mayBeNormalized = normalizedMethodRecords[method];\n            if (mayBeNormalized !== undefined) {\n                // Note: Bypass validation DELETE, GET, HEAD, OPTIONS, POST, PUT, PATCH and these lowercase ones\n                request.method = mayBeNormalized;\n            } else {\n                // 2. If method is not a method or method is a forbidden method, then\n                // throw a TypeError.\n                if (!isValidHTTPToken(method)) {\n                    throw new TypeError(`'${method}' is not a valid HTTP method.`);\n                }\n                const upperCase = method.toUpperCase();\n                if (forbiddenMethodsSet.has(upperCase)) {\n                    throw new TypeError(`'${method}' HTTP method is unsupported.`);\n                }\n                // 3. Normalize method.\n                // https://fetch.spec.whatwg.org/#concept-method-normalize\n                // Note: must be in uppercase\n                method = normalizedMethodRecordsBase[upperCase] ?? method;\n                // 4. Set request’s method to method.\n                request.method = method;\n            }\n            if (!patchMethodWarning && request.method === 'patch') {\n                process.emitWarning('Using `patch` is highly likely to result in a `405 Method Not Allowed`. `PATCH` is much more likely to succeed.', {\n                    code: 'UNDICI-FETCH-patch'\n                });\n                patchMethodWarning = true;\n            }\n        }\n        // 26. If init[\"signal\"] exists, then set signal to it.\n        if (init.signal !== undefined) {\n            signal = init.signal;\n        }\n        // 27. Set this’s request to request.\n        this[kState] = request;\n        // 28. Set this’s signal to a new AbortSignal object with this’s relevant\n        // Realm.\n        // TODO: could this be simplified with AbortSignal.any\n        // (https://dom.spec.whatwg.org/#dom-abortsignal-any)\n        const ac = new AbortController();\n        this[kSignal] = ac.signal;\n        // 29. If signal is not null, then make this’s signal follow signal.\n        if (signal != null) {\n            if (!signal || typeof signal.aborted !== 'boolean' || typeof signal.addEventListener !== 'function') {\n                throw new TypeError(\"Failed to construct 'Request': member signal is not of type AbortSignal.\");\n            }\n            if (signal.aborted) {\n                ac.abort(signal.reason);\n            } else {\n                // Keep a strong ref to ac while request object\n                // is alive. This is needed to prevent AbortController\n                // from being prematurely garbage collected.\n                // See, https://github.com/nodejs/undici/issues/1926.\n                this[kAbortController] = ac;\n                const acRef = new WeakRef(ac);\n                const abort = buildAbort(acRef);\n                // Third-party AbortControllers may not work with these.\n                // See, https://github.com/nodejs/undici/pull/1910#issuecomment-1464495619.\n                try {\n                    // If the max amount of listeners is equal to the default, increase it\n                    // This is only available in node >= v19.9.0\n                    if (typeof getMaxListeners === 'function' && getMaxListeners(signal) === defaultMaxListeners) {\n                        setMaxListeners(1500, signal);\n                    } else if (getEventListeners(signal, 'abort').length >= defaultMaxListeners) {\n                        setMaxListeners(1500, signal);\n                    }\n                } catch  {}\n                util.addAbortListener(signal, abort);\n                // The third argument must be a registry key to be unregistered.\n                // Without it, you cannot unregister.\n                // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\n                // abort is used as the unregister key. (because it is unique)\n                requestFinalizer.register(ac, {\n                    signal,\n                    abort\n                }, abort);\n            }\n        }\n        // 30. Set this’s headers to a new Headers object with this’s relevant\n        // Realm, whose header list is request’s header list and guard is\n        // \"request\".\n        this[kHeaders] = new Headers(kConstruct);\n        setHeadersList(this[kHeaders], request.headersList);\n        setHeadersGuard(this[kHeaders], 'request');\n        // 31. If this’s request’s mode is \"no-cors\", then:\n        if (mode === 'no-cors') {\n            // 1. If this’s request’s method is not a CORS-safelisted method,\n            // then throw a TypeError.\n            if (!corsSafeListedMethodsSet.has(request.method)) {\n                throw new TypeError(`'${request.method} is unsupported in no-cors mode.`);\n            }\n            // 2. Set this’s headers’s guard to \"request-no-cors\".\n            setHeadersGuard(this[kHeaders], 'request-no-cors');\n        }\n        // 32. If init is not empty, then:\n        if (initHasKey) {\n            /** @type {HeadersList} */ const headersList = getHeadersList(this[kHeaders]);\n            // 1. Let headers be a copy of this’s headers and its associated header\n            // list.\n            // 2. If init[\"headers\"] exists, then set headers to init[\"headers\"].\n            const headers = init.headers !== undefined ? init.headers : new HeadersList(headersList);\n            // 3. Empty this’s headers’s header list.\n            headersList.clear();\n            // 4. If headers is a Headers object, then for each header in its header\n            // list, append header’s name/header’s value to this’s headers.\n            if (headers instanceof HeadersList) {\n                for (const { name, value } of headers.rawValues()){\n                    headersList.append(name, value, false);\n                }\n                // Note: Copy the `set-cookie` meta-data.\n                headersList.cookies = headers.cookies;\n            } else {\n                // 5. Otherwise, fill this’s headers with headers.\n                fillHeaders(this[kHeaders], headers);\n            }\n        }\n        // 33. Let inputBody be input’s request’s body if input is a Request\n        // object; otherwise null.\n        const inputBody = input instanceof Request ? input[kState].body : null;\n        // 34. If either init[\"body\"] exists and is non-null or inputBody is\n        // non-null, and request’s method is `GET` or `HEAD`, then throw a\n        // TypeError.\n        if ((init.body != null || inputBody != null) && (request.method === 'GET' || request.method === 'HEAD')) {\n            throw new TypeError('Request with GET/HEAD method cannot have body.');\n        }\n        // 35. Let initBody be null.\n        let initBody = null;\n        // 36. If init[\"body\"] exists and is non-null, then:\n        if (init.body != null) {\n            // 1. Let Content-Type be null.\n            // 2. Set initBody and Content-Type to the result of extracting\n            // init[\"body\"], with keepalive set to request’s keepalive.\n            const [extractedBody, contentType] = extractBody(init.body, request.keepalive);\n            initBody = extractedBody;\n            // 3, If Content-Type is non-null and this’s headers’s header list does\n            // not contain `Content-Type`, then append `Content-Type`/Content-Type to\n            // this’s headers.\n            if (contentType && !getHeadersList(this[kHeaders]).contains('content-type', true)) {\n                this[kHeaders].append('content-type', contentType);\n            }\n        }\n        // 37. Let inputOrInitBody be initBody if it is non-null; otherwise\n        // inputBody.\n        const inputOrInitBody = initBody ?? inputBody;\n        // 38. If inputOrInitBody is non-null and inputOrInitBody’s source is\n        // null, then:\n        if (inputOrInitBody != null && inputOrInitBody.source == null) {\n            // 1. If initBody is non-null and init[\"duplex\"] does not exist,\n            //    then throw a TypeError.\n            if (initBody != null && init.duplex == null) {\n                throw new TypeError('RequestInit: duplex option is required when sending a body.');\n            }\n            // 2. If this’s request’s mode is neither \"same-origin\" nor \"cors\",\n            // then throw a TypeError.\n            if (request.mode !== 'same-origin' && request.mode !== 'cors') {\n                throw new TypeError('If request is made from ReadableStream, mode should be \"same-origin\" or \"cors\"');\n            }\n            // 3. Set this’s request’s use-CORS-preflight flag.\n            request.useCORSPreflightFlag = true;\n        }\n        // 39. Let finalBody be inputOrInitBody.\n        let finalBody = inputOrInitBody;\n        // 40. If initBody is null and inputBody is non-null, then:\n        if (initBody == null && inputBody != null) {\n            // 1. If input is unusable, then throw a TypeError.\n            if (util.isDisturbed(inputBody.stream) || inputBody.stream.locked) {\n                throw new TypeError('Cannot construct a Request with a Request object that has already been used.');\n            }\n            // 2. Set finalBody to the result of creating a proxy for inputBody.\n            // https://streams.spec.whatwg.org/#readablestream-create-a-proxy\n            const identityTransform = new TransformStream();\n            inputBody.stream.pipeThrough(identityTransform);\n            finalBody = {\n                source: inputBody.source,\n                length: inputBody.length,\n                stream: identityTransform.readable\n            };\n        }\n        // 41. Set this’s request’s body to finalBody.\n        this[kState].body = finalBody;\n    }\n    // Returns request’s HTTP method, which is \"GET\" by default.\n    get method() {\n        webidl.brandCheck(this, Request);\n        // The method getter steps are to return this’s request’s method.\n        return this[kState].method;\n    }\n    // Returns the URL of request as a string.\n    get url() {\n        webidl.brandCheck(this, Request);\n        // The url getter steps are to return this’s request’s URL, serialized.\n        return URLSerializer(this[kState].url);\n    }\n    // Returns a Headers object consisting of the headers associated with request.\n    // Note that headers added in the network layer by the user agent will not\n    // be accounted for in this object, e.g., the \"Host\" header.\n    get headers() {\n        webidl.brandCheck(this, Request);\n        // The headers getter steps are to return this’s headers.\n        return this[kHeaders];\n    }\n    // Returns the kind of resource requested by request, e.g., \"document\"\n    // or \"script\".\n    get destination() {\n        webidl.brandCheck(this, Request);\n        // The destination getter are to return this’s request’s destination.\n        return this[kState].destination;\n    }\n    // Returns the referrer of request. Its value can be a same-origin URL if\n    // explicitly set in init, the empty string to indicate no referrer, and\n    // \"about:client\" when defaulting to the global’s default. This is used\n    // during fetching to determine the value of the `Referer` header of the\n    // request being made.\n    get referrer() {\n        webidl.brandCheck(this, Request);\n        // 1. If this’s request’s referrer is \"no-referrer\", then return the\n        // empty string.\n        if (this[kState].referrer === 'no-referrer') {\n            return '';\n        }\n        // 2. If this’s request’s referrer is \"client\", then return\n        // \"about:client\".\n        if (this[kState].referrer === 'client') {\n            return 'about:client';\n        }\n        // Return this’s request’s referrer, serialized.\n        return this[kState].referrer.toString();\n    }\n    // Returns the referrer policy associated with request.\n    // This is used during fetching to compute the value of the request’s\n    // referrer.\n    get referrerPolicy() {\n        webidl.brandCheck(this, Request);\n        // The referrerPolicy getter steps are to return this’s request’s referrer policy.\n        return this[kState].referrerPolicy;\n    }\n    // Returns the mode associated with request, which is a string indicating\n    // whether the request will use CORS, or will be restricted to same-origin\n    // URLs.\n    get mode() {\n        webidl.brandCheck(this, Request);\n        // The mode getter steps are to return this’s request’s mode.\n        return this[kState].mode;\n    }\n    // Returns the credentials mode associated with request,\n    // which is a string indicating whether credentials will be sent with the\n    // request always, never, or only when sent to a same-origin URL.\n    get credentials() {\n        // The credentials getter steps are to return this’s request’s credentials mode.\n        return this[kState].credentials;\n    }\n    // Returns the cache mode associated with request,\n    // which is a string indicating how the request will\n    // interact with the browser’s cache when fetching.\n    get cache() {\n        webidl.brandCheck(this, Request);\n        // The cache getter steps are to return this’s request’s cache mode.\n        return this[kState].cache;\n    }\n    // Returns the redirect mode associated with request,\n    // which is a string indicating how redirects for the\n    // request will be handled during fetching. A request\n    // will follow redirects by default.\n    get redirect() {\n        webidl.brandCheck(this, Request);\n        // The redirect getter steps are to return this’s request’s redirect mode.\n        return this[kState].redirect;\n    }\n    // Returns request’s subresource integrity metadata, which is a\n    // cryptographic hash of the resource being fetched. Its value\n    // consists of multiple hashes separated by whitespace. [SRI]\n    get integrity() {\n        webidl.brandCheck(this, Request);\n        // The integrity getter steps are to return this’s request’s integrity\n        // metadata.\n        return this[kState].integrity;\n    }\n    // Returns a boolean indicating whether or not request can outlive the\n    // global in which it was created.\n    get keepalive() {\n        webidl.brandCheck(this, Request);\n        // The keepalive getter steps are to return this’s request’s keepalive.\n        return this[kState].keepalive;\n    }\n    // Returns a boolean indicating whether or not request is for a reload\n    // navigation.\n    get isReloadNavigation() {\n        webidl.brandCheck(this, Request);\n        // The isReloadNavigation getter steps are to return true if this’s\n        // request’s reload-navigation flag is set; otherwise false.\n        return this[kState].reloadNavigation;\n    }\n    // Returns a boolean indicating whether or not request is for a history\n    // navigation (a.k.a. back-forward navigation).\n    get isHistoryNavigation() {\n        webidl.brandCheck(this, Request);\n        // The isHistoryNavigation getter steps are to return true if this’s request’s\n        // history-navigation flag is set; otherwise false.\n        return this[kState].historyNavigation;\n    }\n    // Returns the signal associated with request, which is an AbortSignal\n    // object indicating whether or not request has been aborted, and its\n    // abort event handler.\n    get signal() {\n        webidl.brandCheck(this, Request);\n        // The signal getter steps are to return this’s signal.\n        return this[kSignal];\n    }\n    get body() {\n        webidl.brandCheck(this, Request);\n        return this[kState].body ? this[kState].body.stream : null;\n    }\n    get bodyUsed() {\n        webidl.brandCheck(this, Request);\n        return !!this[kState].body && util.isDisturbed(this[kState].body.stream);\n    }\n    get duplex() {\n        webidl.brandCheck(this, Request);\n        return 'half';\n    }\n    // Returns a clone of request.\n    clone() {\n        webidl.brandCheck(this, Request);\n        // 1. If this is unusable, then throw a TypeError.\n        if (this.bodyUsed || this.body?.locked) {\n            throw new TypeError('unusable');\n        }\n        // 2. Let clonedRequest be the result of cloning this’s request.\n        const clonedRequest = cloneRequest(this[kState]);\n        // 3. Let clonedRequestObject be the result of creating a Request object,\n        // given clonedRequest, this’s headers’s guard, and this’s relevant Realm.\n        // 4. Make clonedRequestObject’s signal follow this’s signal.\n        const ac = new AbortController();\n        if (this.signal.aborted) {\n            ac.abort(this.signal.reason);\n        } else {\n            let list = dependentControllerMap.get(this.signal);\n            if (list === undefined) {\n                list = new Set();\n                dependentControllerMap.set(this.signal, list);\n            }\n            const acRef = new WeakRef(ac);\n            list.add(acRef);\n            util.addAbortListener(ac.signal, buildAbort(acRef));\n        }\n        // 4. Return clonedRequestObject.\n        return fromInnerRequest(clonedRequest, ac.signal, getHeadersGuard(this[kHeaders]));\n    }\n    [nodeUtil.inspect.custom](depth, options) {\n        if (options.depth === null) {\n            options.depth = 2;\n        }\n        options.colors ??= true;\n        const properties = {\n            method: this.method,\n            url: this.url,\n            headers: this.headers,\n            destination: this.destination,\n            referrer: this.referrer,\n            referrerPolicy: this.referrerPolicy,\n            mode: this.mode,\n            credentials: this.credentials,\n            cache: this.cache,\n            redirect: this.redirect,\n            integrity: this.integrity,\n            keepalive: this.keepalive,\n            isReloadNavigation: this.isReloadNavigation,\n            isHistoryNavigation: this.isHistoryNavigation,\n            signal: this.signal\n        };\n        return `Request ${nodeUtil.formatWithOptions(options, properties)}`;\n    }\n}\nmixinBody(Request);\n// https://fetch.spec.whatwg.org/#requests\nfunction makeRequest(init) {\n    return {\n        method: init.method ?? 'GET',\n        localURLsOnly: init.localURLsOnly ?? false,\n        unsafeRequest: init.unsafeRequest ?? false,\n        body: init.body ?? null,\n        client: init.client ?? null,\n        reservedClient: init.reservedClient ?? null,\n        replacesClientId: init.replacesClientId ?? '',\n        window: init.window ?? 'client',\n        keepalive: init.keepalive ?? false,\n        serviceWorkers: init.serviceWorkers ?? 'all',\n        initiator: init.initiator ?? '',\n        destination: init.destination ?? '',\n        priority: init.priority ?? null,\n        origin: init.origin ?? 'client',\n        policyContainer: init.policyContainer ?? 'client',\n        referrer: init.referrer ?? 'client',\n        referrerPolicy: init.referrerPolicy ?? '',\n        mode: init.mode ?? 'no-cors',\n        useCORSPreflightFlag: init.useCORSPreflightFlag ?? false,\n        credentials: init.credentials ?? 'same-origin',\n        useCredentials: init.useCredentials ?? false,\n        cache: init.cache ?? 'default',\n        redirect: init.redirect ?? 'follow',\n        integrity: init.integrity ?? '',\n        cryptoGraphicsNonceMetadata: init.cryptoGraphicsNonceMetadata ?? '',\n        parserMetadata: init.parserMetadata ?? '',\n        reloadNavigation: init.reloadNavigation ?? false,\n        historyNavigation: init.historyNavigation ?? false,\n        userActivation: init.userActivation ?? false,\n        taintedOrigin: init.taintedOrigin ?? false,\n        redirectCount: init.redirectCount ?? 0,\n        responseTainting: init.responseTainting ?? 'basic',\n        preventNoCacheCacheControlHeaderModification: init.preventNoCacheCacheControlHeaderModification ?? false,\n        done: init.done ?? false,\n        timingAllowFailed: init.timingAllowFailed ?? false,\n        urlList: init.urlList,\n        url: init.urlList[0],\n        headersList: init.headersList ? new HeadersList(init.headersList) : new HeadersList()\n    };\n}\n// https://fetch.spec.whatwg.org/#concept-request-clone\nfunction cloneRequest(request) {\n    // To clone a request request, run these steps:\n    // 1. Let newRequest be a copy of request, except for its body.\n    const newRequest = makeRequest({\n        ...request,\n        body: null\n    });\n    // 2. If request’s body is non-null, set newRequest’s body to the\n    // result of cloning request’s body.\n    if (request.body != null) {\n        newRequest.body = cloneBody(request.body);\n    }\n    // 3. Return newRequest.\n    return newRequest;\n}\n/**\n * @see https://fetch.spec.whatwg.org/#request-create\n * @param {any} innerRequest\n * @param {AbortSignal} signal\n * @param {'request' | 'immutable' | 'request-no-cors' | 'response' | 'none'} guard\n * @returns {Request}\n */ function fromInnerRequest(innerRequest, signal, guard) {\n    const request = new Request(kConstruct);\n    request[kState] = innerRequest;\n    request[kSignal] = signal;\n    request[kHeaders] = new Headers(kConstruct);\n    setHeadersList(request[kHeaders], innerRequest.headersList);\n    setHeadersGuard(request[kHeaders], guard);\n    return request;\n}\nObject.defineProperties(Request.prototype, {\n    method: kEnumerableProperty,\n    url: kEnumerableProperty,\n    headers: kEnumerableProperty,\n    redirect: kEnumerableProperty,\n    clone: kEnumerableProperty,\n    signal: kEnumerableProperty,\n    duplex: kEnumerableProperty,\n    destination: kEnumerableProperty,\n    body: kEnumerableProperty,\n    bodyUsed: kEnumerableProperty,\n    isHistoryNavigation: kEnumerableProperty,\n    isReloadNavigation: kEnumerableProperty,\n    keepalive: kEnumerableProperty,\n    integrity: kEnumerableProperty,\n    cache: kEnumerableProperty,\n    credentials: kEnumerableProperty,\n    attribute: kEnumerableProperty,\n    referrerPolicy: kEnumerableProperty,\n    referrer: kEnumerableProperty,\n    mode: kEnumerableProperty,\n    [Symbol.toStringTag]: {\n        value: 'Request',\n        configurable: true\n    }\n});\nwebidl.converters.Request = webidl.interfaceConverter(Request);\n// https://fetch.spec.whatwg.org/#requestinfo\nwebidl.converters.RequestInfo = function(V, prefix, argument) {\n    if (typeof V === 'string') {\n        return webidl.converters.USVString(V, prefix, argument);\n    }\n    if (V instanceof Request) {\n        return webidl.converters.Request(V, prefix, argument);\n    }\n    return webidl.converters.USVString(V, prefix, argument);\n};\nwebidl.converters.AbortSignal = webidl.interfaceConverter(AbortSignal);\n// https://fetch.spec.whatwg.org/#requestinit\nwebidl.converters.RequestInit = webidl.dictionaryConverter([\n    {\n        key: 'method',\n        converter: webidl.converters.ByteString\n    },\n    {\n        key: 'headers',\n        converter: webidl.converters.HeadersInit\n    },\n    {\n        key: 'body',\n        converter: webidl.nullableConverter(webidl.converters.BodyInit)\n    },\n    {\n        key: 'referrer',\n        converter: webidl.converters.USVString\n    },\n    {\n        key: 'referrerPolicy',\n        converter: webidl.converters.DOMString,\n        // https://w3c.github.io/webappsec-referrer-policy/#referrer-policy\n        allowedValues: referrerPolicy\n    },\n    {\n        key: 'mode',\n        converter: webidl.converters.DOMString,\n        // https://fetch.spec.whatwg.org/#concept-request-mode\n        allowedValues: requestMode\n    },\n    {\n        key: 'credentials',\n        converter: webidl.converters.DOMString,\n        // https://fetch.spec.whatwg.org/#requestcredentials\n        allowedValues: requestCredentials\n    },\n    {\n        key: 'cache',\n        converter: webidl.converters.DOMString,\n        // https://fetch.spec.whatwg.org/#requestcache\n        allowedValues: requestCache\n    },\n    {\n        key: 'redirect',\n        converter: webidl.converters.DOMString,\n        // https://fetch.spec.whatwg.org/#requestredirect\n        allowedValues: requestRedirect\n    },\n    {\n        key: 'integrity',\n        converter: webidl.converters.DOMString\n    },\n    {\n        key: 'keepalive',\n        converter: webidl.converters.boolean\n    },\n    {\n        key: 'signal',\n        converter: webidl.nullableConverter((signal)=>webidl.converters.AbortSignal(signal, 'RequestInit', 'signal', {\n                strict: false\n            }))\n    },\n    {\n        key: 'window',\n        converter: webidl.converters.any\n    },\n    {\n        key: 'duplex',\n        converter: webidl.converters.DOMString,\n        allowedValues: requestDuplex\n    },\n    {\n        key: 'dispatcher',\n        converter: webidl.converters.any\n    }\n]);\nmodule.exports = {\n    Request,\n    makeRequest,\n    fromInnerRequest,\n    cloneRequest\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/fetch/request.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/fetch/response.js":
/*!*******************************************************!*\
  !*** ./node_modules/undici/lib/web/fetch/response.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { Headers, HeadersList, fill, getHeadersGuard, setHeadersGuard, setHeadersList } = __webpack_require__(/*! ./headers */ \"(ssr)/./node_modules/undici/lib/web/fetch/headers.js\");\nconst { extractBody, cloneBody, mixinBody } = __webpack_require__(/*! ./body */ \"(ssr)/./node_modules/undici/lib/web/fetch/body.js\");\nconst util = __webpack_require__(/*! ../../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst nodeUtil = __webpack_require__(/*! node:util */ \"node:util\");\nconst { kEnumerableProperty } = util;\nconst { isValidReasonPhrase, isCancelled, isAborted, isBlobLike, serializeJavascriptValueToJSONString, isErrorLike, isomorphicEncode, environmentSettingsObject: relevantRealm } = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/web/fetch/util.js\");\nconst { redirectStatusSet, nullBodyStatus } = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/undici/lib/web/fetch/constants.js\");\nconst { kState, kHeaders } = __webpack_require__(/*! ./symbols */ \"(ssr)/./node_modules/undici/lib/web/fetch/symbols.js\");\nconst { webidl } = __webpack_require__(/*! ./webidl */ \"(ssr)/./node_modules/undici/lib/web/fetch/webidl.js\");\nconst { FormData } = __webpack_require__(/*! ./formdata */ \"(ssr)/./node_modules/undici/lib/web/fetch/formdata.js\");\nconst { URLSerializer } = __webpack_require__(/*! ./data-url */ \"(ssr)/./node_modules/undici/lib/web/fetch/data-url.js\");\nconst { kConstruct } = __webpack_require__(/*! ../../core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst assert = __webpack_require__(/*! node:assert */ \"node:assert\");\nconst { types } = __webpack_require__(/*! node:util */ \"node:util\");\nconst { isDisturbed, isErrored } = __webpack_require__(/*! node:stream */ \"node:stream\");\nconst textEncoder = new TextEncoder('utf-8');\nconst hasFinalizationRegistry = globalThis.FinalizationRegistry && process.version.indexOf('v18') !== 0;\nlet registry;\nif (hasFinalizationRegistry) {\n    registry = new FinalizationRegistry((weakRef)=>{\n        const stream = weakRef.deref();\n        if (stream && !stream.locked && !isDisturbed(stream) && !isErrored(stream)) {\n            stream.cancel('Response object has been garbage collected').catch(noop);\n        }\n    });\n}\nfunction noop() {}\n// https://fetch.spec.whatwg.org/#response-class\nclass Response {\n    // Creates network error Response.\n    static error() {\n        // The static error() method steps are to return the result of creating a\n        // Response object, given a new network error, \"immutable\", and this’s\n        // relevant Realm.\n        const responseObject = fromInnerResponse(makeNetworkError(), 'immutable');\n        return responseObject;\n    }\n    // https://fetch.spec.whatwg.org/#dom-response-json\n    static json(data, init = {}) {\n        webidl.argumentLengthCheck(arguments, 1, 'Response.json');\n        if (init !== null) {\n            init = webidl.converters.ResponseInit(init);\n        }\n        // 1. Let bytes the result of running serialize a JavaScript value to JSON bytes on data.\n        const bytes = textEncoder.encode(serializeJavascriptValueToJSONString(data));\n        // 2. Let body be the result of extracting bytes.\n        const body = extractBody(bytes);\n        // 3. Let responseObject be the result of creating a Response object, given a new response,\n        //    \"response\", and this’s relevant Realm.\n        const responseObject = fromInnerResponse(makeResponse({}), 'response');\n        // 4. Perform initialize a response given responseObject, init, and (body, \"application/json\").\n        initializeResponse(responseObject, init, {\n            body: body[0],\n            type: 'application/json'\n        });\n        // 5. Return responseObject.\n        return responseObject;\n    }\n    // Creates a redirect Response that redirects to url with status status.\n    static redirect(url, status = 302) {\n        webidl.argumentLengthCheck(arguments, 1, 'Response.redirect');\n        url = webidl.converters.USVString(url);\n        status = webidl.converters['unsigned short'](status);\n        // 1. Let parsedURL be the result of parsing url with current settings\n        // object’s API base URL.\n        // 2. If parsedURL is failure, then throw a TypeError.\n        // TODO: base-URL?\n        let parsedURL;\n        try {\n            parsedURL = new URL(url, relevantRealm.settingsObject.baseUrl);\n        } catch (err) {\n            throw new TypeError(`Failed to parse URL from ${url}`, {\n                cause: err\n            });\n        }\n        // 3. If status is not a redirect status, then throw a RangeError.\n        if (!redirectStatusSet.has(status)) {\n            throw new RangeError(`Invalid status code ${status}`);\n        }\n        // 4. Let responseObject be the result of creating a Response object,\n        // given a new response, \"immutable\", and this’s relevant Realm.\n        const responseObject = fromInnerResponse(makeResponse({}), 'immutable');\n        // 5. Set responseObject’s response’s status to status.\n        responseObject[kState].status = status;\n        // 6. Let value be parsedURL, serialized and isomorphic encoded.\n        const value = isomorphicEncode(URLSerializer(parsedURL));\n        // 7. Append `Location`/value to responseObject’s response’s header list.\n        responseObject[kState].headersList.append('location', value, true);\n        // 8. Return responseObject.\n        return responseObject;\n    }\n    // https://fetch.spec.whatwg.org/#dom-response\n    constructor(body = null, init = {}){\n        if (body === kConstruct) {\n            return;\n        }\n        if (body !== null) {\n            body = webidl.converters.BodyInit(body);\n        }\n        init = webidl.converters.ResponseInit(init);\n        // 1. Set this’s response to a new response.\n        this[kState] = makeResponse({});\n        // 2. Set this’s headers to a new Headers object with this’s relevant\n        // Realm, whose header list is this’s response’s header list and guard\n        // is \"response\".\n        this[kHeaders] = new Headers(kConstruct);\n        setHeadersGuard(this[kHeaders], 'response');\n        setHeadersList(this[kHeaders], this[kState].headersList);\n        // 3. Let bodyWithType be null.\n        let bodyWithType = null;\n        // 4. If body is non-null, then set bodyWithType to the result of extracting body.\n        if (body != null) {\n            const [extractedBody, type] = extractBody(body);\n            bodyWithType = {\n                body: extractedBody,\n                type\n            };\n        }\n        // 5. Perform initialize a response given this, init, and bodyWithType.\n        initializeResponse(this, init, bodyWithType);\n    }\n    // Returns response’s type, e.g., \"cors\".\n    get type() {\n        webidl.brandCheck(this, Response);\n        // The type getter steps are to return this’s response’s type.\n        return this[kState].type;\n    }\n    // Returns response’s URL, if it has one; otherwise the empty string.\n    get url() {\n        webidl.brandCheck(this, Response);\n        const urlList = this[kState].urlList;\n        // The url getter steps are to return the empty string if this’s\n        // response’s URL is null; otherwise this’s response’s URL,\n        // serialized with exclude fragment set to true.\n        const url = urlList[urlList.length - 1] ?? null;\n        if (url === null) {\n            return '';\n        }\n        return URLSerializer(url, true);\n    }\n    // Returns whether response was obtained through a redirect.\n    get redirected() {\n        webidl.brandCheck(this, Response);\n        // The redirected getter steps are to return true if this’s response’s URL\n        // list has more than one item; otherwise false.\n        return this[kState].urlList.length > 1;\n    }\n    // Returns response’s status.\n    get status() {\n        webidl.brandCheck(this, Response);\n        // The status getter steps are to return this’s response’s status.\n        return this[kState].status;\n    }\n    // Returns whether response’s status is an ok status.\n    get ok() {\n        webidl.brandCheck(this, Response);\n        // The ok getter steps are to return true if this’s response’s status is an\n        // ok status; otherwise false.\n        return this[kState].status >= 200 && this[kState].status <= 299;\n    }\n    // Returns response’s status message.\n    get statusText() {\n        webidl.brandCheck(this, Response);\n        // The statusText getter steps are to return this’s response’s status\n        // message.\n        return this[kState].statusText;\n    }\n    // Returns response’s headers as Headers.\n    get headers() {\n        webidl.brandCheck(this, Response);\n        // The headers getter steps are to return this’s headers.\n        return this[kHeaders];\n    }\n    get body() {\n        webidl.brandCheck(this, Response);\n        return this[kState].body ? this[kState].body.stream : null;\n    }\n    get bodyUsed() {\n        webidl.brandCheck(this, Response);\n        return !!this[kState].body && util.isDisturbed(this[kState].body.stream);\n    }\n    // Returns a clone of response.\n    clone() {\n        webidl.brandCheck(this, Response);\n        // 1. If this is unusable, then throw a TypeError.\n        if (this.bodyUsed || this.body?.locked) {\n            throw webidl.errors.exception({\n                header: 'Response.clone',\n                message: 'Body has already been consumed.'\n            });\n        }\n        // 2. Let clonedResponse be the result of cloning this’s response.\n        const clonedResponse = cloneResponse(this[kState]);\n        // 3. Return the result of creating a Response object, given\n        // clonedResponse, this’s headers’s guard, and this’s relevant Realm.\n        return fromInnerResponse(clonedResponse, getHeadersGuard(this[kHeaders]));\n    }\n    [nodeUtil.inspect.custom](depth, options) {\n        if (options.depth === null) {\n            options.depth = 2;\n        }\n        options.colors ??= true;\n        const properties = {\n            status: this.status,\n            statusText: this.statusText,\n            headers: this.headers,\n            body: this.body,\n            bodyUsed: this.bodyUsed,\n            ok: this.ok,\n            redirected: this.redirected,\n            type: this.type,\n            url: this.url\n        };\n        return `Response ${nodeUtil.formatWithOptions(options, properties)}`;\n    }\n}\nmixinBody(Response);\nObject.defineProperties(Response.prototype, {\n    type: kEnumerableProperty,\n    url: kEnumerableProperty,\n    status: kEnumerableProperty,\n    ok: kEnumerableProperty,\n    redirected: kEnumerableProperty,\n    statusText: kEnumerableProperty,\n    headers: kEnumerableProperty,\n    clone: kEnumerableProperty,\n    body: kEnumerableProperty,\n    bodyUsed: kEnumerableProperty,\n    [Symbol.toStringTag]: {\n        value: 'Response',\n        configurable: true\n    }\n});\nObject.defineProperties(Response, {\n    json: kEnumerableProperty,\n    redirect: kEnumerableProperty,\n    error: kEnumerableProperty\n});\n// https://fetch.spec.whatwg.org/#concept-response-clone\nfunction cloneResponse(response) {\n    // To clone a response response, run these steps:\n    // 1. If response is a filtered response, then return a new identical\n    // filtered response whose internal response is a clone of response’s\n    // internal response.\n    if (response.internalResponse) {\n        return filterResponse(cloneResponse(response.internalResponse), response.type);\n    }\n    // 2. Let newResponse be a copy of response, except for its body.\n    const newResponse = makeResponse({\n        ...response,\n        body: null\n    });\n    // 3. If response’s body is non-null, then set newResponse’s body to the\n    // result of cloning response’s body.\n    if (response.body != null) {\n        newResponse.body = cloneBody(response.body);\n    }\n    // 4. Return newResponse.\n    return newResponse;\n}\nfunction makeResponse(init) {\n    return {\n        aborted: false,\n        rangeRequested: false,\n        timingAllowPassed: false,\n        requestIncludesCredentials: false,\n        type: 'default',\n        status: 200,\n        timingInfo: null,\n        cacheState: '',\n        statusText: '',\n        ...init,\n        headersList: init?.headersList ? new HeadersList(init?.headersList) : new HeadersList(),\n        urlList: init?.urlList ? [\n            ...init.urlList\n        ] : []\n    };\n}\nfunction makeNetworkError(reason) {\n    const isError = isErrorLike(reason);\n    return makeResponse({\n        type: 'error',\n        status: 0,\n        error: isError ? reason : new Error(reason ? String(reason) : reason),\n        aborted: reason && reason.name === 'AbortError'\n    });\n}\n// @see https://fetch.spec.whatwg.org/#concept-network-error\nfunction isNetworkError(response) {\n    return(// A network error is a response whose type is \"error\",\n    response.type === 'error' && // status is 0\n    response.status === 0);\n}\nfunction makeFilteredResponse(response, state) {\n    state = {\n        internalResponse: response,\n        ...state\n    };\n    return new Proxy(response, {\n        get (target, p) {\n            return p in state ? state[p] : target[p];\n        },\n        set (target, p, value) {\n            assert(!(p in state));\n            target[p] = value;\n            return true;\n        }\n    });\n}\n// https://fetch.spec.whatwg.org/#concept-filtered-response\nfunction filterResponse(response, type) {\n    // Set response to the following filtered response with response as its\n    // internal response, depending on request’s response tainting:\n    if (type === 'basic') {\n        // A basic filtered response is a filtered response whose type is \"basic\"\n        // and header list excludes any headers in internal response’s header list\n        // whose name is a forbidden response-header name.\n        // Note: undici does not implement forbidden response-header names\n        return makeFilteredResponse(response, {\n            type: 'basic',\n            headersList: response.headersList\n        });\n    } else if (type === 'cors') {\n        // A CORS filtered response is a filtered response whose type is \"cors\"\n        // and header list excludes any headers in internal response’s header\n        // list whose name is not a CORS-safelisted response-header name, given\n        // internal response’s CORS-exposed header-name list.\n        // Note: undici does not implement CORS-safelisted response-header names\n        return makeFilteredResponse(response, {\n            type: 'cors',\n            headersList: response.headersList\n        });\n    } else if (type === 'opaque') {\n        // An opaque filtered response is a filtered response whose type is\n        // \"opaque\", URL list is the empty list, status is 0, status message\n        // is the empty byte sequence, header list is empty, and body is null.\n        return makeFilteredResponse(response, {\n            type: 'opaque',\n            urlList: Object.freeze([]),\n            status: 0,\n            statusText: '',\n            body: null\n        });\n    } else if (type === 'opaqueredirect') {\n        // An opaque-redirect filtered response is a filtered response whose type\n        // is \"opaqueredirect\", status is 0, status message is the empty byte\n        // sequence, header list is empty, and body is null.\n        return makeFilteredResponse(response, {\n            type: 'opaqueredirect',\n            status: 0,\n            statusText: '',\n            headersList: [],\n            body: null\n        });\n    } else {\n        assert(false);\n    }\n}\n// https://fetch.spec.whatwg.org/#appropriate-network-error\nfunction makeAppropriateNetworkError(fetchParams, err = null) {\n    // 1. Assert: fetchParams is canceled.\n    assert(isCancelled(fetchParams));\n    // 2. Return an aborted network error if fetchParams is aborted;\n    // otherwise return a network error.\n    return isAborted(fetchParams) ? makeNetworkError(Object.assign(new DOMException('The operation was aborted.', 'AbortError'), {\n        cause: err\n    })) : makeNetworkError(Object.assign(new DOMException('Request was cancelled.'), {\n        cause: err\n    }));\n}\n// https://whatpr.org/fetch/1392.html#initialize-a-response\nfunction initializeResponse(response, init, body) {\n    // 1. If init[\"status\"] is not in the range 200 to 599, inclusive, then\n    //    throw a RangeError.\n    if (init.status !== null && (init.status < 200 || init.status > 599)) {\n        throw new RangeError('init[\"status\"] must be in the range of 200 to 599, inclusive.');\n    }\n    // 2. If init[\"statusText\"] does not match the reason-phrase token production,\n    //    then throw a TypeError.\n    if ('statusText' in init && init.statusText != null) {\n        // See, https://datatracker.ietf.org/doc/html/rfc7230#section-3.1.2:\n        //   reason-phrase  = *( HTAB / SP / VCHAR / obs-text )\n        if (!isValidReasonPhrase(String(init.statusText))) {\n            throw new TypeError('Invalid statusText');\n        }\n    }\n    // 3. Set response’s response’s status to init[\"status\"].\n    if ('status' in init && init.status != null) {\n        response[kState].status = init.status;\n    }\n    // 4. Set response’s response’s status message to init[\"statusText\"].\n    if ('statusText' in init && init.statusText != null) {\n        response[kState].statusText = init.statusText;\n    }\n    // 5. If init[\"headers\"] exists, then fill response’s headers with init[\"headers\"].\n    if ('headers' in init && init.headers != null) {\n        fill(response[kHeaders], init.headers);\n    }\n    // 6. If body was given, then:\n    if (body) {\n        // 1. If response's status is a null body status, then throw a TypeError.\n        if (nullBodyStatus.includes(response.status)) {\n            throw webidl.errors.exception({\n                header: 'Response constructor',\n                message: `Invalid response status code ${response.status}`\n            });\n        }\n        // 2. Set response's body to body's body.\n        response[kState].body = body.body;\n        // 3. If body's type is non-null and response's header list does not contain\n        //    `Content-Type`, then append (`Content-Type`, body's type) to response's header list.\n        if (body.type != null && !response[kState].headersList.contains('content-type', true)) {\n            response[kState].headersList.append('content-type', body.type, true);\n        }\n    }\n}\n/**\n * @see https://fetch.spec.whatwg.org/#response-create\n * @param {any} innerResponse\n * @param {'request' | 'immutable' | 'request-no-cors' | 'response' | 'none'} guard\n * @returns {Response}\n */ function fromInnerResponse(innerResponse, guard) {\n    const response = new Response(kConstruct);\n    response[kState] = innerResponse;\n    response[kHeaders] = new Headers(kConstruct);\n    setHeadersList(response[kHeaders], innerResponse.headersList);\n    setHeadersGuard(response[kHeaders], guard);\n    if (hasFinalizationRegistry && innerResponse.body?.stream) {\n        // If the target (response) is reclaimed, the cleanup callback may be called at some point with\n        // the held value provided for it (innerResponse.body.stream). The held value can be any value:\n        // a primitive or an object, even undefined. If the held value is an object, the registry keeps\n        // a strong reference to it (so it can pass it to the cleanup callback later). Reworded from\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\n        registry.register(response, new WeakRef(innerResponse.body.stream));\n    }\n    return response;\n}\nwebidl.converters.ReadableStream = webidl.interfaceConverter(ReadableStream);\nwebidl.converters.FormData = webidl.interfaceConverter(FormData);\nwebidl.converters.URLSearchParams = webidl.interfaceConverter(URLSearchParams);\n// https://fetch.spec.whatwg.org/#typedefdef-xmlhttprequestbodyinit\nwebidl.converters.XMLHttpRequestBodyInit = function(V, prefix, name) {\n    if (typeof V === 'string') {\n        return webidl.converters.USVString(V, prefix, name);\n    }\n    if (isBlobLike(V)) {\n        return webidl.converters.Blob(V, prefix, name, {\n            strict: false\n        });\n    }\n    if (ArrayBuffer.isView(V) || types.isArrayBuffer(V)) {\n        return webidl.converters.BufferSource(V, prefix, name);\n    }\n    if (util.isFormDataLike(V)) {\n        return webidl.converters.FormData(V, prefix, name, {\n            strict: false\n        });\n    }\n    if (V instanceof URLSearchParams) {\n        return webidl.converters.URLSearchParams(V, prefix, name);\n    }\n    return webidl.converters.DOMString(V, prefix, name);\n};\n// https://fetch.spec.whatwg.org/#bodyinit\nwebidl.converters.BodyInit = function(V, prefix, argument) {\n    if (V instanceof ReadableStream) {\n        return webidl.converters.ReadableStream(V, prefix, argument);\n    }\n    // Note: the spec doesn't include async iterables,\n    // this is an undici extension.\n    if (V?.[Symbol.asyncIterator]) {\n        return V;\n    }\n    return webidl.converters.XMLHttpRequestBodyInit(V, prefix, argument);\n};\nwebidl.converters.ResponseInit = webidl.dictionaryConverter([\n    {\n        key: 'status',\n        converter: webidl.converters['unsigned short'],\n        defaultValue: ()=>200\n    },\n    {\n        key: 'statusText',\n        converter: webidl.converters.ByteString,\n        defaultValue: ()=>''\n    },\n    {\n        key: 'headers',\n        converter: webidl.converters.HeadersInit\n    }\n]);\nmodule.exports = {\n    isNetworkError,\n    makeNetworkError,\n    makeResponse,\n    makeAppropriateNetworkError,\n    filterResponse,\n    Response,\n    cloneResponse,\n    fromInnerResponse\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/fetch/response.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/fetch/symbols.js":
/*!******************************************************!*\
  !*** ./node_modules/undici/lib/web/fetch/symbols.js ***!
  \******************************************************/
/***/ ((module) => {

eval("\nmodule.exports = {\n    kUrl: Symbol('url'),\n    kHeaders: Symbol('headers'),\n    kSignal: Symbol('signal'),\n    kState: Symbol('state'),\n    kDispatcher: Symbol('dispatcher')\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi93ZWIvZmV0Y2gvc3ltYm9scy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBQSxPQUFPQyxPQUFPLEdBQUc7SUFDZkMsTUFBTUMsT0FBTztJQUNiQyxVQUFVRCxPQUFPO0lBQ2pCRSxTQUFTRixPQUFPO0lBQ2hCRyxRQUFRSCxPQUFPO0lBQ2ZJLGFBQWFKLE9BQU87QUFDdEIiLCJzb3VyY2VzIjpbIkQ6XFxIZWxpeFxcbm9kZV9tb2R1bGVzXFx1bmRpY2lcXGxpYlxcd2ViXFxmZXRjaFxcc3ltYm9scy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGtVcmw6IFN5bWJvbCgndXJsJyksXG4gIGtIZWFkZXJzOiBTeW1ib2woJ2hlYWRlcnMnKSxcbiAga1NpZ25hbDogU3ltYm9sKCdzaWduYWwnKSxcbiAga1N0YXRlOiBTeW1ib2woJ3N0YXRlJyksXG4gIGtEaXNwYXRjaGVyOiBTeW1ib2woJ2Rpc3BhdGNoZXInKVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJrVXJsIiwiU3ltYm9sIiwia0hlYWRlcnMiLCJrU2lnbmFsIiwia1N0YXRlIiwia0Rpc3BhdGNoZXIiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/fetch/symbols.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/fetch/util.js":
/*!***************************************************!*\
  !*** ./node_modules/undici/lib/web/fetch/util.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { Transform } = __webpack_require__(/*! node:stream */ \"node:stream\");\nconst zlib = __webpack_require__(/*! node:zlib */ \"node:zlib\");\nconst { redirectStatusSet, referrerPolicySet: referrerPolicyTokens, badPortsSet } = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/undici/lib/web/fetch/constants.js\");\nconst { getGlobalOrigin } = __webpack_require__(/*! ./global */ \"(ssr)/./node_modules/undici/lib/web/fetch/global.js\");\nconst { collectASequenceOfCodePoints, collectAnHTTPQuotedString, removeChars, parseMIMEType } = __webpack_require__(/*! ./data-url */ \"(ssr)/./node_modules/undici/lib/web/fetch/data-url.js\");\nconst { performance } = __webpack_require__(/*! node:perf_hooks */ \"node:perf_hooks\");\nconst { isBlobLike, ReadableStreamFrom, isValidHTTPToken, normalizedMethodRecordsBase } = __webpack_require__(/*! ../../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst assert = __webpack_require__(/*! node:assert */ \"node:assert\");\nconst { isUint8Array } = __webpack_require__(/*! node:util/types */ \"node:util/types\");\nconst { webidl } = __webpack_require__(/*! ./webidl */ \"(ssr)/./node_modules/undici/lib/web/fetch/webidl.js\");\nlet supportedHashes = [];\n// https://nodejs.org/api/crypto.html#determining-if-crypto-support-is-unavailable\n/** @type {import('crypto')} */ let crypto;\ntry {\n    crypto = __webpack_require__(/*! node:crypto */ \"node:crypto\");\n    const possibleRelevantHashes = [\n        'sha256',\n        'sha384',\n        'sha512'\n    ];\n    supportedHashes = crypto.getHashes().filter((hash)=>possibleRelevantHashes.includes(hash));\n/* c8 ignore next 3 */ } catch  {}\nfunction responseURL(response) {\n    // https://fetch.spec.whatwg.org/#responses\n    // A response has an associated URL. It is a pointer to the last URL\n    // in response’s URL list and null if response’s URL list is empty.\n    const urlList = response.urlList;\n    const length = urlList.length;\n    return length === 0 ? null : urlList[length - 1].toString();\n}\n// https://fetch.spec.whatwg.org/#concept-response-location-url\nfunction responseLocationURL(response, requestFragment) {\n    // 1. If response’s status is not a redirect status, then return null.\n    if (!redirectStatusSet.has(response.status)) {\n        return null;\n    }\n    // 2. Let location be the result of extracting header list values given\n    // `Location` and response’s header list.\n    let location = response.headersList.get('location', true);\n    // 3. If location is a header value, then set location to the result of\n    //    parsing location with response’s URL.\n    if (location !== null && isValidHeaderValue(location)) {\n        if (!isValidEncodedURL(location)) {\n            // Some websites respond location header in UTF-8 form without encoding them as ASCII\n            // and major browsers redirect them to correctly UTF-8 encoded addresses.\n            // Here, we handle that behavior in the same way.\n            location = normalizeBinaryStringToUtf8(location);\n        }\n        location = new URL(location, responseURL(response));\n    }\n    // 4. If location is a URL whose fragment is null, then set location’s\n    // fragment to requestFragment.\n    if (location && !location.hash) {\n        location.hash = requestFragment;\n    }\n    // 5. Return location.\n    return location;\n}\n/**\n * @see https://www.rfc-editor.org/rfc/rfc1738#section-2.2\n * @param {string} url\n * @returns {boolean}\n */ function isValidEncodedURL(url) {\n    for(let i = 0; i < url.length; ++i){\n        const code = url.charCodeAt(i);\n        if (code > 0x7E || // Non-US-ASCII + DEL\n        code < 0x20 // Control characters NUL - US\n        ) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * If string contains non-ASCII characters, assumes it's UTF-8 encoded and decodes it.\n * Since UTF-8 is a superset of ASCII, this will work for ASCII strings as well.\n * @param {string} value\n * @returns {string}\n */ function normalizeBinaryStringToUtf8(value) {\n    return Buffer.from(value, 'binary').toString('utf8');\n}\n/** @returns {URL} */ function requestCurrentURL(request) {\n    return request.urlList[request.urlList.length - 1];\n}\nfunction requestBadPort(request) {\n    // 1. Let url be request’s current URL.\n    const url = requestCurrentURL(request);\n    // 2. If url’s scheme is an HTTP(S) scheme and url’s port is a bad port,\n    // then return blocked.\n    if (urlIsHttpHttpsScheme(url) && badPortsSet.has(url.port)) {\n        return 'blocked';\n    }\n    // 3. Return allowed.\n    return 'allowed';\n}\nfunction isErrorLike(object) {\n    return object instanceof Error || object?.constructor?.name === 'Error' || object?.constructor?.name === 'DOMException';\n}\n// Check whether |statusText| is a ByteString and\n// matches the Reason-Phrase token production.\n// RFC 2616: https://tools.ietf.org/html/rfc2616\n// RFC 7230: https://tools.ietf.org/html/rfc7230\n// \"reason-phrase = *( HTAB / SP / VCHAR / obs-text )\"\n// https://github.com/chromium/chromium/blob/94.0.4604.1/third_party/blink/renderer/core/fetch/response.cc#L116\nfunction isValidReasonPhrase(statusText) {\n    for(let i = 0; i < statusText.length; ++i){\n        const c = statusText.charCodeAt(i);\n        if (!(c === 0x09 || // HTAB\n        c >= 0x20 && c <= 0x7e || // SP / VCHAR\n        c >= 0x80 && c <= 0xff // obs-text\n        )) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * @see https://fetch.spec.whatwg.org/#header-name\n * @param {string} potentialValue\n */ const isValidHeaderName = isValidHTTPToken;\n/**\n * @see https://fetch.spec.whatwg.org/#header-value\n * @param {string} potentialValue\n */ function isValidHeaderValue(potentialValue) {\n    // - Has no leading or trailing HTTP tab or space bytes.\n    // - Contains no 0x00 (NUL) or HTTP newline bytes.\n    return (potentialValue[0] === '\\t' || potentialValue[0] === ' ' || potentialValue[potentialValue.length - 1] === '\\t' || potentialValue[potentialValue.length - 1] === ' ' || potentialValue.includes('\\n') || potentialValue.includes('\\r') || potentialValue.includes('\\0')) === false;\n}\n// https://w3c.github.io/webappsec-referrer-policy/#set-requests-referrer-policy-on-redirect\nfunction setRequestReferrerPolicyOnRedirect(request, actualResponse) {\n    //  Given a request request and a response actualResponse, this algorithm\n    //  updates request’s referrer policy according to the Referrer-Policy\n    //  header (if any) in actualResponse.\n    // 1. Let policy be the result of executing § 8.1 Parse a referrer policy\n    // from a Referrer-Policy header on actualResponse.\n    // 8.1 Parse a referrer policy from a Referrer-Policy header\n    // 1. Let policy-tokens be the result of extracting header list values given `Referrer-Policy` and response’s header list.\n    const { headersList } = actualResponse;\n    // 2. Let policy be the empty string.\n    // 3. For each token in policy-tokens, if token is a referrer policy and token is not the empty string, then set policy to token.\n    // 4. Return policy.\n    const policyHeader = (headersList.get('referrer-policy', true) ?? '').split(',');\n    // Note: As the referrer-policy can contain multiple policies\n    // separated by comma, we need to loop through all of them\n    // and pick the first valid one.\n    // Ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy#specify_a_fallback_policy\n    let policy = '';\n    if (policyHeader.length > 0) {\n        // The right-most policy takes precedence.\n        // The left-most policy is the fallback.\n        for(let i = policyHeader.length; i !== 0; i--){\n            const token = policyHeader[i - 1].trim();\n            if (referrerPolicyTokens.has(token)) {\n                policy = token;\n                break;\n            }\n        }\n    }\n    // 2. If policy is not the empty string, then set request’s referrer policy to policy.\n    if (policy !== '') {\n        request.referrerPolicy = policy;\n    }\n}\n// https://fetch.spec.whatwg.org/#cross-origin-resource-policy-check\nfunction crossOriginResourcePolicyCheck() {\n    // TODO\n    return 'allowed';\n}\n// https://fetch.spec.whatwg.org/#concept-cors-check\nfunction corsCheck() {\n    // TODO\n    return 'success';\n}\n// https://fetch.spec.whatwg.org/#concept-tao-check\nfunction TAOCheck() {\n    // TODO\n    return 'success';\n}\nfunction appendFetchMetadata(httpRequest) {\n    //  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-dest-header\n    //  TODO\n    //  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-mode-header\n    //  1. Assert: r’s url is a potentially trustworthy URL.\n    //  TODO\n    //  2. Let header be a Structured Header whose value is a token.\n    let header = null;\n    //  3. Set header’s value to r’s mode.\n    header = httpRequest.mode;\n    //  4. Set a structured field value `Sec-Fetch-Mode`/header in r’s header list.\n    httpRequest.headersList.set('sec-fetch-mode', header, true);\n//  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-site-header\n//  TODO\n//  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-user-header\n//  TODO\n}\n// https://fetch.spec.whatwg.org/#append-a-request-origin-header\nfunction appendRequestOriginHeader(request) {\n    // 1. Let serializedOrigin be the result of byte-serializing a request origin\n    //    with request.\n    // TODO: implement \"byte-serializing a request origin\"\n    let serializedOrigin = request.origin;\n    // - \"'client' is changed to an origin during fetching.\"\n    //   This doesn't happen in undici (in most cases) because undici, by default,\n    //   has no concept of origin.\n    // - request.origin can also be set to request.client.origin (client being\n    //   an environment settings object), which is undefined without using\n    //   setGlobalOrigin.\n    if (serializedOrigin === 'client' || serializedOrigin === undefined) {\n        return;\n    }\n    // 2. If request’s response tainting is \"cors\" or request’s mode is \"websocket\",\n    //    then append (`Origin`, serializedOrigin) to request’s header list.\n    // 3. Otherwise, if request’s method is neither `GET` nor `HEAD`, then:\n    if (request.responseTainting === 'cors' || request.mode === 'websocket') {\n        request.headersList.append('origin', serializedOrigin, true);\n    } else if (request.method !== 'GET' && request.method !== 'HEAD') {\n        // 1. Switch on request’s referrer policy:\n        switch(request.referrerPolicy){\n            case 'no-referrer':\n                // Set serializedOrigin to `null`.\n                serializedOrigin = null;\n                break;\n            case 'no-referrer-when-downgrade':\n            case 'strict-origin':\n            case 'strict-origin-when-cross-origin':\n                // If request’s origin is a tuple origin, its scheme is \"https\", and\n                // request’s current URL’s scheme is not \"https\", then set\n                // serializedOrigin to `null`.\n                if (request.origin && urlHasHttpsScheme(request.origin) && !urlHasHttpsScheme(requestCurrentURL(request))) {\n                    serializedOrigin = null;\n                }\n                break;\n            case 'same-origin':\n                // If request’s origin is not same origin with request’s current URL’s\n                // origin, then set serializedOrigin to `null`.\n                if (!sameOrigin(request, requestCurrentURL(request))) {\n                    serializedOrigin = null;\n                }\n                break;\n            default:\n        }\n        // 2. Append (`Origin`, serializedOrigin) to request’s header list.\n        request.headersList.append('origin', serializedOrigin, true);\n    }\n}\n// https://w3c.github.io/hr-time/#dfn-coarsen-time\nfunction coarsenTime(timestamp, crossOriginIsolatedCapability) {\n    // TODO\n    return timestamp;\n}\n// https://fetch.spec.whatwg.org/#clamp-and-coarsen-connection-timing-info\nfunction clampAndCoarsenConnectionTimingInfo(connectionTimingInfo, defaultStartTime, crossOriginIsolatedCapability) {\n    if (!connectionTimingInfo?.startTime || connectionTimingInfo.startTime < defaultStartTime) {\n        return {\n            domainLookupStartTime: defaultStartTime,\n            domainLookupEndTime: defaultStartTime,\n            connectionStartTime: defaultStartTime,\n            connectionEndTime: defaultStartTime,\n            secureConnectionStartTime: defaultStartTime,\n            ALPNNegotiatedProtocol: connectionTimingInfo?.ALPNNegotiatedProtocol\n        };\n    }\n    return {\n        domainLookupStartTime: coarsenTime(connectionTimingInfo.domainLookupStartTime, crossOriginIsolatedCapability),\n        domainLookupEndTime: coarsenTime(connectionTimingInfo.domainLookupEndTime, crossOriginIsolatedCapability),\n        connectionStartTime: coarsenTime(connectionTimingInfo.connectionStartTime, crossOriginIsolatedCapability),\n        connectionEndTime: coarsenTime(connectionTimingInfo.connectionEndTime, crossOriginIsolatedCapability),\n        secureConnectionStartTime: coarsenTime(connectionTimingInfo.secureConnectionStartTime, crossOriginIsolatedCapability),\n        ALPNNegotiatedProtocol: connectionTimingInfo.ALPNNegotiatedProtocol\n    };\n}\n// https://w3c.github.io/hr-time/#dfn-coarsened-shared-current-time\nfunction coarsenedSharedCurrentTime(crossOriginIsolatedCapability) {\n    return coarsenTime(performance.now(), crossOriginIsolatedCapability);\n}\n// https://fetch.spec.whatwg.org/#create-an-opaque-timing-info\nfunction createOpaqueTimingInfo(timingInfo) {\n    return {\n        startTime: timingInfo.startTime ?? 0,\n        redirectStartTime: 0,\n        redirectEndTime: 0,\n        postRedirectStartTime: timingInfo.startTime ?? 0,\n        finalServiceWorkerStartTime: 0,\n        finalNetworkResponseStartTime: 0,\n        finalNetworkRequestStartTime: 0,\n        endTime: 0,\n        encodedBodySize: 0,\n        decodedBodySize: 0,\n        finalConnectionTimingInfo: null\n    };\n}\n// https://html.spec.whatwg.org/multipage/origin.html#policy-container\nfunction makePolicyContainer() {\n    // Note: the fetch spec doesn't make use of embedder policy or CSP list\n    return {\n        referrerPolicy: 'strict-origin-when-cross-origin'\n    };\n}\n// https://html.spec.whatwg.org/multipage/origin.html#clone-a-policy-container\nfunction clonePolicyContainer(policyContainer) {\n    return {\n        referrerPolicy: policyContainer.referrerPolicy\n    };\n}\n// https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer\nfunction determineRequestsReferrer(request) {\n    // 1. Let policy be request's referrer policy.\n    const policy = request.referrerPolicy;\n    // Note: policy cannot (shouldn't) be null or an empty string.\n    assert(policy);\n    // 2. Let environment be request’s client.\n    let referrerSource = null;\n    // 3. Switch on request’s referrer:\n    if (request.referrer === 'client') {\n        // Note: node isn't a browser and doesn't implement document/iframes,\n        // so we bypass this step and replace it with our own.\n        const globalOrigin = getGlobalOrigin();\n        if (!globalOrigin || globalOrigin.origin === 'null') {\n            return 'no-referrer';\n        }\n        // note: we need to clone it as it's mutated\n        referrerSource = new URL(globalOrigin);\n    } else if (request.referrer instanceof URL) {\n        // Let referrerSource be request’s referrer.\n        referrerSource = request.referrer;\n    }\n    // 4. Let request’s referrerURL be the result of stripping referrerSource for\n    //    use as a referrer.\n    let referrerURL = stripURLForReferrer(referrerSource);\n    // 5. Let referrerOrigin be the result of stripping referrerSource for use as\n    //    a referrer, with the origin-only flag set to true.\n    const referrerOrigin = stripURLForReferrer(referrerSource, true);\n    // 6. If the result of serializing referrerURL is a string whose length is\n    //    greater than 4096, set referrerURL to referrerOrigin.\n    if (referrerURL.toString().length > 4096) {\n        referrerURL = referrerOrigin;\n    }\n    const areSameOrigin = sameOrigin(request, referrerURL);\n    const isNonPotentiallyTrustWorthy = isURLPotentiallyTrustworthy(referrerURL) && !isURLPotentiallyTrustworthy(request.url);\n    // 8. Execute the switch statements corresponding to the value of policy:\n    switch(policy){\n        case 'origin':\n            return referrerOrigin != null ? referrerOrigin : stripURLForReferrer(referrerSource, true);\n        case 'unsafe-url':\n            return referrerURL;\n        case 'same-origin':\n            return areSameOrigin ? referrerOrigin : 'no-referrer';\n        case 'origin-when-cross-origin':\n            return areSameOrigin ? referrerURL : referrerOrigin;\n        case 'strict-origin-when-cross-origin':\n            {\n                const currentURL = requestCurrentURL(request);\n                // 1. If the origin of referrerURL and the origin of request’s current\n                //    URL are the same, then return referrerURL.\n                if (sameOrigin(referrerURL, currentURL)) {\n                    return referrerURL;\n                }\n                // 2. If referrerURL is a potentially trustworthy URL and request’s\n                //    current URL is not a potentially trustworthy URL, then return no\n                //    referrer.\n                if (isURLPotentiallyTrustworthy(referrerURL) && !isURLPotentiallyTrustworthy(currentURL)) {\n                    return 'no-referrer';\n                }\n                // 3. Return referrerOrigin.\n                return referrerOrigin;\n            }\n        case 'strict-origin':\n        /**\n         * 1. If referrerURL is a potentially trustworthy URL and\n         * request’s current URL is not a potentially trustworthy URL,\n         * then return no referrer.\n         * 2. Return referrerOrigin\n        */ case 'no-referrer-when-downgrade':\n        /**\n       * 1. If referrerURL is a potentially trustworthy URL and\n       * request’s current URL is not a potentially trustworthy URL,\n       * then return no referrer.\n       * 2. Return referrerOrigin\n      */ default:\n            return isNonPotentiallyTrustWorthy ? 'no-referrer' : referrerOrigin;\n    }\n}\n/**\n * @see https://w3c.github.io/webappsec-referrer-policy/#strip-url\n * @param {URL} url\n * @param {boolean|undefined} originOnly\n */ function stripURLForReferrer(url, originOnly) {\n    // 1. Assert: url is a URL.\n    assert(url instanceof URL);\n    url = new URL(url);\n    // 2. If url’s scheme is a local scheme, then return no referrer.\n    if (url.protocol === 'file:' || url.protocol === 'about:' || url.protocol === 'blank:') {\n        return 'no-referrer';\n    }\n    // 3. Set url’s username to the empty string.\n    url.username = '';\n    // 4. Set url’s password to the empty string.\n    url.password = '';\n    // 5. Set url’s fragment to null.\n    url.hash = '';\n    // 6. If the origin-only flag is true, then:\n    if (originOnly) {\n        // 1. Set url’s path to « the empty string ».\n        url.pathname = '';\n        // 2. Set url’s query to null.\n        url.search = '';\n    }\n    // 7. Return url.\n    return url;\n}\nfunction isURLPotentiallyTrustworthy(url) {\n    if (!(url instanceof URL)) {\n        return false;\n    }\n    // If child of about, return true\n    if (url.href === 'about:blank' || url.href === 'about:srcdoc') {\n        return true;\n    }\n    // If scheme is data, return true\n    if (url.protocol === 'data:') return true;\n    // If file, return true\n    if (url.protocol === 'file:') return true;\n    return isOriginPotentiallyTrustworthy(url.origin);\n    function isOriginPotentiallyTrustworthy(origin) {\n        // If origin is explicitly null, return false\n        if (origin == null || origin === 'null') return false;\n        const originAsURL = new URL(origin);\n        // If secure, return true\n        if (originAsURL.protocol === 'https:' || originAsURL.protocol === 'wss:') {\n            return true;\n        }\n        // If localhost or variants, return true\n        if (/^127(?:\\.[0-9]+){0,2}\\.[0-9]+$|^\\[(?:0*:)*?:?0*1\\]$/.test(originAsURL.hostname) || originAsURL.hostname === 'localhost' || originAsURL.hostname.includes('localhost.') || originAsURL.hostname.endsWith('.localhost')) {\n            return true;\n        }\n        // If any other, return false\n        return false;\n    }\n}\n/**\n * @see https://w3c.github.io/webappsec-subresource-integrity/#does-response-match-metadatalist\n * @param {Uint8Array} bytes\n * @param {string} metadataList\n */ function bytesMatch(bytes, metadataList) {\n    // If node is not built with OpenSSL support, we cannot check\n    // a request's integrity, so allow it by default (the spec will\n    // allow requests if an invalid hash is given, as precedence).\n    /* istanbul ignore if: only if node is built with --without-ssl */ if (crypto === undefined) {\n        return true;\n    }\n    // 1. Let parsedMetadata be the result of parsing metadataList.\n    const parsedMetadata = parseMetadata(metadataList);\n    // 2. If parsedMetadata is no metadata, return true.\n    if (parsedMetadata === 'no metadata') {\n        return true;\n    }\n    // 3. If response is not eligible for integrity validation, return false.\n    // TODO\n    // 4. If parsedMetadata is the empty set, return true.\n    if (parsedMetadata.length === 0) {\n        return true;\n    }\n    // 5. Let metadata be the result of getting the strongest\n    //    metadata from parsedMetadata.\n    const strongest = getStrongestMetadata(parsedMetadata);\n    const metadata = filterMetadataListByAlgorithm(parsedMetadata, strongest);\n    // 6. For each item in metadata:\n    for (const item of metadata){\n        // 1. Let algorithm be the alg component of item.\n        const algorithm = item.algo;\n        // 2. Let expectedValue be the val component of item.\n        const expectedValue = item.hash;\n        // See https://github.com/web-platform-tests/wpt/commit/e4c5cc7a5e48093220528dfdd1c4012dc3837a0e\n        // \"be liberal with padding\". This is annoying, and it's not even in the spec.\n        // 3. Let actualValue be the result of applying algorithm to bytes.\n        let actualValue = crypto.createHash(algorithm).update(bytes).digest('base64');\n        if (actualValue[actualValue.length - 1] === '=') {\n            if (actualValue[actualValue.length - 2] === '=') {\n                actualValue = actualValue.slice(0, -2);\n            } else {\n                actualValue = actualValue.slice(0, -1);\n            }\n        }\n        // 4. If actualValue is a case-sensitive match for expectedValue,\n        //    return true.\n        if (compareBase64Mixed(actualValue, expectedValue)) {\n            return true;\n        }\n    }\n    // 7. Return false.\n    return false;\n}\n// https://w3c.github.io/webappsec-subresource-integrity/#grammardef-hash-with-options\n// https://www.w3.org/TR/CSP2/#source-list-syntax\n// https://www.rfc-editor.org/rfc/rfc5234#appendix-B.1\nconst parseHashWithOptions = /(?<algo>sha256|sha384|sha512)-((?<hash>[A-Za-z0-9+/]+|[A-Za-z0-9_-]+)={0,2}(?:\\s|$)( +[!-~]*)?)?/i;\n/**\n * @see https://w3c.github.io/webappsec-subresource-integrity/#parse-metadata\n * @param {string} metadata\n */ function parseMetadata(metadata) {\n    // 1. Let result be the empty set.\n    /** @type {{ algo: string, hash: string }[]} */ const result = [];\n    // 2. Let empty be equal to true.\n    let empty = true;\n    // 3. For each token returned by splitting metadata on spaces:\n    for (const token of metadata.split(' ')){\n        // 1. Set empty to false.\n        empty = false;\n        // 2. Parse token as a hash-with-options.\n        const parsedToken = parseHashWithOptions.exec(token);\n        // 3. If token does not parse, continue to the next token.\n        if (parsedToken === null || parsedToken.groups === undefined || parsedToken.groups.algo === undefined) {\n            continue;\n        }\n        // 4. Let algorithm be the hash-algo component of token.\n        const algorithm = parsedToken.groups.algo.toLowerCase();\n        // 5. If algorithm is a hash function recognized by the user\n        //    agent, add the parsed token to result.\n        if (supportedHashes.includes(algorithm)) {\n            result.push(parsedToken.groups);\n        }\n    }\n    // 4. Return no metadata if empty is true, otherwise return result.\n    if (empty === true) {\n        return 'no metadata';\n    }\n    return result;\n}\n/**\n * @param {{ algo: 'sha256' | 'sha384' | 'sha512' }[]} metadataList\n */ function getStrongestMetadata(metadataList) {\n    // Let algorithm be the algo component of the first item in metadataList.\n    // Can be sha256\n    let algorithm = metadataList[0].algo;\n    // If the algorithm is sha512, then it is the strongest\n    // and we can return immediately\n    if (algorithm[3] === '5') {\n        return algorithm;\n    }\n    for(let i = 1; i < metadataList.length; ++i){\n        const metadata = metadataList[i];\n        // If the algorithm is sha512, then it is the strongest\n        // and we can break the loop immediately\n        if (metadata.algo[3] === '5') {\n            algorithm = 'sha512';\n            break;\n        // If the algorithm is sha384, then a potential sha256 or sha384 is ignored\n        } else if (algorithm[3] === '3') {\n            continue;\n        // algorithm is sha256, check if algorithm is sha384 and if so, set it as\n        // the strongest\n        } else if (metadata.algo[3] === '3') {\n            algorithm = 'sha384';\n        }\n    }\n    return algorithm;\n}\nfunction filterMetadataListByAlgorithm(metadataList, algorithm) {\n    if (metadataList.length === 1) {\n        return metadataList;\n    }\n    let pos = 0;\n    for(let i = 0; i < metadataList.length; ++i){\n        if (metadataList[i].algo === algorithm) {\n            metadataList[pos++] = metadataList[i];\n        }\n    }\n    metadataList.length = pos;\n    return metadataList;\n}\n/**\n * Compares two base64 strings, allowing for base64url\n * in the second string.\n *\n* @param {string} actualValue always base64\n * @param {string} expectedValue base64 or base64url\n * @returns {boolean}\n */ function compareBase64Mixed(actualValue, expectedValue) {\n    if (actualValue.length !== expectedValue.length) {\n        return false;\n    }\n    for(let i = 0; i < actualValue.length; ++i){\n        if (actualValue[i] !== expectedValue[i]) {\n            if (actualValue[i] === '+' && expectedValue[i] === '-' || actualValue[i] === '/' && expectedValue[i] === '_') {\n                continue;\n            }\n            return false;\n        }\n    }\n    return true;\n}\n// https://w3c.github.io/webappsec-upgrade-insecure-requests/#upgrade-request\nfunction tryUpgradeRequestToAPotentiallyTrustworthyURL(request) {\n// TODO\n}\n/**\n * @link {https://html.spec.whatwg.org/multipage/origin.html#same-origin}\n * @param {URL} A\n * @param {URL} B\n */ function sameOrigin(A, B) {\n    // 1. If A and B are the same opaque origin, then return true.\n    if (A.origin === B.origin && A.origin === 'null') {\n        return true;\n    }\n    // 2. If A and B are both tuple origins and their schemes,\n    //    hosts, and port are identical, then return true.\n    if (A.protocol === B.protocol && A.hostname === B.hostname && A.port === B.port) {\n        return true;\n    }\n    // 3. Return false.\n    return false;\n}\nfunction createDeferredPromise() {\n    let res;\n    let rej;\n    const promise = new Promise((resolve, reject)=>{\n        res = resolve;\n        rej = reject;\n    });\n    return {\n        promise,\n        resolve: res,\n        reject: rej\n    };\n}\nfunction isAborted(fetchParams) {\n    return fetchParams.controller.state === 'aborted';\n}\nfunction isCancelled(fetchParams) {\n    return fetchParams.controller.state === 'aborted' || fetchParams.controller.state === 'terminated';\n}\n/**\n * @see https://fetch.spec.whatwg.org/#concept-method-normalize\n * @param {string} method\n */ function normalizeMethod(method) {\n    return normalizedMethodRecordsBase[method.toLowerCase()] ?? method;\n}\n// https://infra.spec.whatwg.org/#serialize-a-javascript-value-to-a-json-string\nfunction serializeJavascriptValueToJSONString(value) {\n    // 1. Let result be ? Call(%JSON.stringify%, undefined, « value »).\n    const result = JSON.stringify(value);\n    // 2. If result is undefined, then throw a TypeError.\n    if (result === undefined) {\n        throw new TypeError('Value is not JSON serializable');\n    }\n    // 3. Assert: result is a string.\n    assert(typeof result === 'string');\n    // 4. Return result.\n    return result;\n}\n// https://tc39.es/ecma262/#sec-%25iteratorprototype%25-object\nconst esIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()));\n/**\n * @see https://webidl.spec.whatwg.org/#dfn-iterator-prototype-object\n * @param {string} name name of the instance\n * @param {symbol} kInternalIterator\n * @param {string | number} [keyIndex]\n * @param {string | number} [valueIndex]\n */ function createIterator(name, kInternalIterator, keyIndex = 0, valueIndex = 1) {\n    class FastIterableIterator {\n        /** @type {any} */ #target;\n        /** @type {'key' | 'value' | 'key+value'} */ #kind;\n        /** @type {number} */ #index;\n        /**\n     * @see https://webidl.spec.whatwg.org/#dfn-default-iterator-object\n     * @param {unknown} target\n     * @param {'key' | 'value' | 'key+value'} kind\n     */ constructor(target, kind){\n            this.#target = target;\n            this.#kind = kind;\n            this.#index = 0;\n        }\n        next() {\n            // 1. Let interface be the interface for which the iterator prototype object exists.\n            // 2. Let thisValue be the this value.\n            // 3. Let object be ? ToObject(thisValue).\n            // 4. If object is a platform object, then perform a security\n            //    check, passing:\n            // 5. If object is not a default iterator object for interface,\n            //    then throw a TypeError.\n            if (typeof this !== 'object' || this === null || !(#target in this)) {\n                throw new TypeError(`'next' called on an object that does not implement interface ${name} Iterator.`);\n            }\n            // 6. Let index be object’s index.\n            // 7. Let kind be object’s kind.\n            // 8. Let values be object’s target's value pairs to iterate over.\n            const index = this.#index;\n            const values = this.#target[kInternalIterator];\n            // 9. Let len be the length of values.\n            const len = values.length;\n            // 10. If index is greater than or equal to len, then return\n            //     CreateIterResultObject(undefined, true).\n            if (index >= len) {\n                return {\n                    value: undefined,\n                    done: true\n                };\n            }\n            // 11. Let pair be the entry in values at index index.\n            const { [keyIndex]: key, [valueIndex]: value } = values[index];\n            // 12. Set object’s index to index + 1.\n            this.#index = index + 1;\n            // 13. Return the iterator result for pair and kind.\n            // https://webidl.spec.whatwg.org/#iterator-result\n            // 1. Let result be a value determined by the value of kind:\n            let result;\n            switch(this.#kind){\n                case 'key':\n                    // 1. Let idlKey be pair’s key.\n                    // 2. Let key be the result of converting idlKey to an\n                    //    ECMAScript value.\n                    // 3. result is key.\n                    result = key;\n                    break;\n                case 'value':\n                    // 1. Let idlValue be pair’s value.\n                    // 2. Let value be the result of converting idlValue to\n                    //    an ECMAScript value.\n                    // 3. result is value.\n                    result = value;\n                    break;\n                case 'key+value':\n                    // 1. Let idlKey be pair’s key.\n                    // 2. Let idlValue be pair’s value.\n                    // 3. Let key be the result of converting idlKey to an\n                    //    ECMAScript value.\n                    // 4. Let value be the result of converting idlValue to\n                    //    an ECMAScript value.\n                    // 5. Let array be ! ArrayCreate(2).\n                    // 6. Call ! CreateDataProperty(array, \"0\", key).\n                    // 7. Call ! CreateDataProperty(array, \"1\", value).\n                    // 8. result is array.\n                    result = [\n                        key,\n                        value\n                    ];\n                    break;\n            }\n            // 2. Return CreateIterResultObject(result, false).\n            return {\n                value: result,\n                done: false\n            };\n        }\n    }\n    // https://webidl.spec.whatwg.org/#dfn-iterator-prototype-object\n    // @ts-ignore\n    delete FastIterableIterator.prototype.constructor;\n    Object.setPrototypeOf(FastIterableIterator.prototype, esIteratorPrototype);\n    Object.defineProperties(FastIterableIterator.prototype, {\n        [Symbol.toStringTag]: {\n            writable: false,\n            enumerable: false,\n            configurable: true,\n            value: `${name} Iterator`\n        },\n        next: {\n            writable: true,\n            enumerable: true,\n            configurable: true\n        }\n    });\n    /**\n   * @param {unknown} target\n   * @param {'key' | 'value' | 'key+value'} kind\n   * @returns {IterableIterator<any>}\n   */ return function(target, kind) {\n        return new FastIterableIterator(target, kind);\n    };\n}\n/**\n * @see https://webidl.spec.whatwg.org/#dfn-iterator-prototype-object\n * @param {string} name name of the instance\n * @param {any} object class\n * @param {symbol} kInternalIterator\n * @param {string | number} [keyIndex]\n * @param {string | number} [valueIndex]\n */ function iteratorMixin(name, object, kInternalIterator, keyIndex = 0, valueIndex = 1) {\n    const makeIterator = createIterator(name, kInternalIterator, keyIndex, valueIndex);\n    const properties = {\n        keys: {\n            writable: true,\n            enumerable: true,\n            configurable: true,\n            value: function keys() {\n                webidl.brandCheck(this, object);\n                return makeIterator(this, 'key');\n            }\n        },\n        values: {\n            writable: true,\n            enumerable: true,\n            configurable: true,\n            value: function values() {\n                webidl.brandCheck(this, object);\n                return makeIterator(this, 'value');\n            }\n        },\n        entries: {\n            writable: true,\n            enumerable: true,\n            configurable: true,\n            value: function entries() {\n                webidl.brandCheck(this, object);\n                return makeIterator(this, 'key+value');\n            }\n        },\n        forEach: {\n            writable: true,\n            enumerable: true,\n            configurable: true,\n            value: function forEach(callbackfn, thisArg = globalThis) {\n                webidl.brandCheck(this, object);\n                webidl.argumentLengthCheck(arguments, 1, `${name}.forEach`);\n                if (typeof callbackfn !== 'function') {\n                    throw new TypeError(`Failed to execute 'forEach' on '${name}': parameter 1 is not of type 'Function'.`);\n                }\n                for (const { 0: key, 1: value } of makeIterator(this, 'key+value')){\n                    callbackfn.call(thisArg, value, key, this);\n                }\n            }\n        }\n    };\n    return Object.defineProperties(object.prototype, {\n        ...properties,\n        [Symbol.iterator]: {\n            writable: true,\n            enumerable: false,\n            configurable: true,\n            value: properties.entries.value\n        }\n    });\n}\n/**\n * @see https://fetch.spec.whatwg.org/#body-fully-read\n */ async function fullyReadBody(body, processBody, processBodyError) {\n    // 1. If taskDestination is null, then set taskDestination to\n    //    the result of starting a new parallel queue.\n    // 2. Let successSteps given a byte sequence bytes be to queue a\n    //    fetch task to run processBody given bytes, with taskDestination.\n    const successSteps = processBody;\n    // 3. Let errorSteps be to queue a fetch task to run processBodyError,\n    //    with taskDestination.\n    const errorSteps = processBodyError;\n    // 4. Let reader be the result of getting a reader for body’s stream.\n    //    If that threw an exception, then run errorSteps with that\n    //    exception and return.\n    let reader;\n    try {\n        reader = body.stream.getReader();\n    } catch (e) {\n        errorSteps(e);\n        return;\n    }\n    // 5. Read all bytes from reader, given successSteps and errorSteps.\n    try {\n        successSteps(await readAllBytes(reader));\n    } catch (e) {\n        errorSteps(e);\n    }\n}\nfunction isReadableStreamLike(stream) {\n    return stream instanceof ReadableStream || stream[Symbol.toStringTag] === 'ReadableStream' && typeof stream.tee === 'function';\n}\n/**\n * @param {ReadableStreamController<Uint8Array>} controller\n */ function readableStreamClose(controller) {\n    try {\n        controller.close();\n        controller.byobRequest?.respond(0);\n    } catch (err) {\n        // TODO: add comment explaining why this error occurs.\n        if (!err.message.includes('Controller is already closed') && !err.message.includes('ReadableStream is already closed')) {\n            throw err;\n        }\n    }\n}\nconst invalidIsomorphicEncodeValueRegex = /[^\\x00-\\xFF]/ // eslint-disable-line\n;\n/**\n * @see https://infra.spec.whatwg.org/#isomorphic-encode\n * @param {string} input\n */ function isomorphicEncode(input) {\n    // 1. Assert: input contains no code points greater than U+00FF.\n    assert(!invalidIsomorphicEncodeValueRegex.test(input));\n    // 2. Return a byte sequence whose length is equal to input’s code\n    //    point length and whose bytes have the same values as the\n    //    values of input’s code points, in the same order\n    return input;\n}\n/**\n * @see https://streams.spec.whatwg.org/#readablestreamdefaultreader-read-all-bytes\n * @see https://streams.spec.whatwg.org/#read-loop\n * @param {ReadableStreamDefaultReader} reader\n */ async function readAllBytes(reader) {\n    const bytes = [];\n    let byteLength = 0;\n    while(true){\n        const { done, value: chunk } = await reader.read();\n        if (done) {\n            // 1. Call successSteps with bytes.\n            return Buffer.concat(bytes, byteLength);\n        }\n        // 1. If chunk is not a Uint8Array object, call failureSteps\n        //    with a TypeError and abort these steps.\n        if (!isUint8Array(chunk)) {\n            throw new TypeError('Received non-Uint8Array chunk');\n        }\n        // 2. Append the bytes represented by chunk to bytes.\n        bytes.push(chunk);\n        byteLength += chunk.length;\n    // 3. Read-loop given reader, bytes, successSteps, and failureSteps.\n    }\n}\n/**\n * @see https://fetch.spec.whatwg.org/#is-local\n * @param {URL} url\n */ function urlIsLocal(url) {\n    assert('protocol' in url); // ensure it's a url object\n    const protocol = url.protocol;\n    return protocol === 'about:' || protocol === 'blob:' || protocol === 'data:';\n}\n/**\n * @param {string|URL} url\n * @returns {boolean}\n */ function urlHasHttpsScheme(url) {\n    return typeof url === 'string' && url[5] === ':' && url[0] === 'h' && url[1] === 't' && url[2] === 't' && url[3] === 'p' && url[4] === 's' || url.protocol === 'https:';\n}\n/**\n * @see https://fetch.spec.whatwg.org/#http-scheme\n * @param {URL} url\n */ function urlIsHttpHttpsScheme(url) {\n    assert('protocol' in url); // ensure it's a url object\n    const protocol = url.protocol;\n    return protocol === 'http:' || protocol === 'https:';\n}\n/**\n * @see https://fetch.spec.whatwg.org/#simple-range-header-value\n * @param {string} value\n * @param {boolean} allowWhitespace\n */ function simpleRangeHeaderValue(value, allowWhitespace) {\n    // 1. Let data be the isomorphic decoding of value.\n    // Note: isomorphic decoding takes a sequence of bytes (ie. a Uint8Array) and turns it into a string,\n    // nothing more. We obviously don't need to do that if value is a string already.\n    const data = value;\n    // 2. If data does not start with \"bytes\", then return failure.\n    if (!data.startsWith('bytes')) {\n        return 'failure';\n    }\n    // 3. Let position be a position variable for data, initially pointing at the 5th code point of data.\n    const position = {\n        position: 5\n    };\n    // 4. If allowWhitespace is true, collect a sequence of code points that are HTTP tab or space,\n    //    from data given position.\n    if (allowWhitespace) {\n        collectASequenceOfCodePoints((char)=>char === '\\t' || char === ' ', data, position);\n    }\n    // 5. If the code point at position within data is not U+003D (=), then return failure.\n    if (data.charCodeAt(position.position) !== 0x3D) {\n        return 'failure';\n    }\n    // 6. Advance position by 1.\n    position.position++;\n    // 7. If allowWhitespace is true, collect a sequence of code points that are HTTP tab or space, from\n    //    data given position.\n    if (allowWhitespace) {\n        collectASequenceOfCodePoints((char)=>char === '\\t' || char === ' ', data, position);\n    }\n    // 8. Let rangeStart be the result of collecting a sequence of code points that are ASCII digits,\n    //    from data given position.\n    const rangeStart = collectASequenceOfCodePoints((char)=>{\n        const code = char.charCodeAt(0);\n        return code >= 0x30 && code <= 0x39;\n    }, data, position);\n    // 9. Let rangeStartValue be rangeStart, interpreted as decimal number, if rangeStart is not the\n    //    empty string; otherwise null.\n    const rangeStartValue = rangeStart.length ? Number(rangeStart) : null;\n    // 10. If allowWhitespace is true, collect a sequence of code points that are HTTP tab or space,\n    //     from data given position.\n    if (allowWhitespace) {\n        collectASequenceOfCodePoints((char)=>char === '\\t' || char === ' ', data, position);\n    }\n    // 11. If the code point at position within data is not U+002D (-), then return failure.\n    if (data.charCodeAt(position.position) !== 0x2D) {\n        return 'failure';\n    }\n    // 12. Advance position by 1.\n    position.position++;\n    // 13. If allowWhitespace is true, collect a sequence of code points that are HTTP tab\n    //     or space, from data given position.\n    // Note from Khafra: its the same step as in #8 again lol\n    if (allowWhitespace) {\n        collectASequenceOfCodePoints((char)=>char === '\\t' || char === ' ', data, position);\n    }\n    // 14. Let rangeEnd be the result of collecting a sequence of code points that are\n    //     ASCII digits, from data given position.\n    // Note from Khafra: you wouldn't guess it, but this is also the same step as #8\n    const rangeEnd = collectASequenceOfCodePoints((char)=>{\n        const code = char.charCodeAt(0);\n        return code >= 0x30 && code <= 0x39;\n    }, data, position);\n    // 15. Let rangeEndValue be rangeEnd, interpreted as decimal number, if rangeEnd\n    //     is not the empty string; otherwise null.\n    // Note from Khafra: THE SAME STEP, AGAIN!!!\n    // Note: why interpret as a decimal if we only collect ascii digits?\n    const rangeEndValue = rangeEnd.length ? Number(rangeEnd) : null;\n    // 16. If position is not past the end of data, then return failure.\n    if (position.position < data.length) {\n        return 'failure';\n    }\n    // 17. If rangeEndValue and rangeStartValue are null, then return failure.\n    if (rangeEndValue === null && rangeStartValue === null) {\n        return 'failure';\n    }\n    // 18. If rangeStartValue and rangeEndValue are numbers, and rangeStartValue is\n    //     greater than rangeEndValue, then return failure.\n    // Note: ... when can they not be numbers?\n    if (rangeStartValue > rangeEndValue) {\n        return 'failure';\n    }\n    // 19. Return (rangeStartValue, rangeEndValue).\n    return {\n        rangeStartValue,\n        rangeEndValue\n    };\n}\n/**\n * @see https://fetch.spec.whatwg.org/#build-a-content-range\n * @param {number} rangeStart\n * @param {number} rangeEnd\n * @param {number} fullLength\n */ function buildContentRange(rangeStart, rangeEnd, fullLength) {\n    // 1. Let contentRange be `bytes `.\n    let contentRange = 'bytes ';\n    // 2. Append rangeStart, serialized and isomorphic encoded, to contentRange.\n    contentRange += isomorphicEncode(`${rangeStart}`);\n    // 3. Append 0x2D (-) to contentRange.\n    contentRange += '-';\n    // 4. Append rangeEnd, serialized and isomorphic encoded to contentRange.\n    contentRange += isomorphicEncode(`${rangeEnd}`);\n    // 5. Append 0x2F (/) to contentRange.\n    contentRange += '/';\n    // 6. Append fullLength, serialized and isomorphic encoded to contentRange.\n    contentRange += isomorphicEncode(`${fullLength}`);\n    // 7. Return contentRange.\n    return contentRange;\n}\n// A Stream, which pipes the response to zlib.createInflate() or\n// zlib.createInflateRaw() depending on the first byte of the Buffer.\n// If the lower byte of the first byte is 0x08, then the stream is\n// interpreted as a zlib stream, otherwise it's interpreted as a\n// raw deflate stream.\nclass InflateStream extends Transform {\n    _transform(chunk, encoding, callback) {\n        if (!this._inflateStream) {\n            if (chunk.length === 0) {\n                callback();\n                return;\n            }\n            this._inflateStream = (chunk[0] & 0x0F) === 0x08 ? zlib.createInflate() : zlib.createInflateRaw();\n            this._inflateStream.on('data', this.push.bind(this));\n            this._inflateStream.on('end', ()=>this.push(null));\n            this._inflateStream.on('error', (err)=>this.destroy(err));\n        }\n        this._inflateStream.write(chunk, encoding, callback);\n    }\n    _final(callback) {\n        if (this._inflateStream) {\n            this._inflateStream.end();\n            this._inflateStream = null;\n        }\n        callback();\n    }\n}\nfunction createInflate() {\n    return new InflateStream();\n}\n/**\n * @see https://fetch.spec.whatwg.org/#concept-header-extract-mime-type\n * @param {import('./headers').HeadersList} headers\n */ function extractMimeType(headers) {\n    // 1. Let charset be null.\n    let charset = null;\n    // 2. Let essence be null.\n    let essence = null;\n    // 3. Let mimeType be null.\n    let mimeType = null;\n    // 4. Let values be the result of getting, decoding, and splitting `Content-Type` from headers.\n    const values = getDecodeSplit('content-type', headers);\n    // 5. If values is null, then return failure.\n    if (values === null) {\n        return 'failure';\n    }\n    // 6. For each value of values:\n    for (const value of values){\n        // 6.1. Let temporaryMimeType be the result of parsing value.\n        const temporaryMimeType = parseMIMEType(value);\n        // 6.2. If temporaryMimeType is failure or its essence is \"*/*\", then continue.\n        if (temporaryMimeType === 'failure' || temporaryMimeType.essence === '*/*') {\n            continue;\n        }\n        // 6.3. Set mimeType to temporaryMimeType.\n        mimeType = temporaryMimeType;\n        // 6.4. If mimeType’s essence is not essence, then:\n        if (mimeType.essence !== essence) {\n            // 6.4.1. Set charset to null.\n            charset = null;\n            // 6.4.2. If mimeType’s parameters[\"charset\"] exists, then set charset to\n            //        mimeType’s parameters[\"charset\"].\n            if (mimeType.parameters.has('charset')) {\n                charset = mimeType.parameters.get('charset');\n            }\n            // 6.4.3. Set essence to mimeType’s essence.\n            essence = mimeType.essence;\n        } else if (!mimeType.parameters.has('charset') && charset !== null) {\n            // 6.5. Otherwise, if mimeType’s parameters[\"charset\"] does not exist, and\n            //      charset is non-null, set mimeType’s parameters[\"charset\"] to charset.\n            mimeType.parameters.set('charset', charset);\n        }\n    }\n    // 7. If mimeType is null, then return failure.\n    if (mimeType == null) {\n        return 'failure';\n    }\n    // 8. Return mimeType.\n    return mimeType;\n}\n/**\n * @see https://fetch.spec.whatwg.org/#header-value-get-decode-and-split\n * @param {string|null} value\n */ function gettingDecodingSplitting(value) {\n    // 1. Let input be the result of isomorphic decoding value.\n    const input = value;\n    // 2. Let position be a position variable for input, initially pointing at the start of input.\n    const position = {\n        position: 0\n    };\n    // 3. Let values be a list of strings, initially empty.\n    const values = [];\n    // 4. Let temporaryValue be the empty string.\n    let temporaryValue = '';\n    // 5. While position is not past the end of input:\n    while(position.position < input.length){\n        // 5.1. Append the result of collecting a sequence of code points that are not U+0022 (\")\n        //      or U+002C (,) from input, given position, to temporaryValue.\n        temporaryValue += collectASequenceOfCodePoints((char)=>char !== '\"' && char !== ',', input, position);\n        // 5.2. If position is not past the end of input, then:\n        if (position.position < input.length) {\n            // 5.2.1. If the code point at position within input is U+0022 (\"), then:\n            if (input.charCodeAt(position.position) === 0x22) {\n                // 5.2.1.1. Append the result of collecting an HTTP quoted string from input, given position, to temporaryValue.\n                temporaryValue += collectAnHTTPQuotedString(input, position);\n                // 5.2.1.2. If position is not past the end of input, then continue.\n                if (position.position < input.length) {\n                    continue;\n                }\n            } else {\n                // 5.2.2. Otherwise:\n                // 5.2.2.1. Assert: the code point at position within input is U+002C (,).\n                assert(input.charCodeAt(position.position) === 0x2C);\n                // 5.2.2.2. Advance position by 1.\n                position.position++;\n            }\n        }\n        // 5.3. Remove all HTTP tab or space from the start and end of temporaryValue.\n        temporaryValue = removeChars(temporaryValue, true, true, (char)=>char === 0x9 || char === 0x20);\n        // 5.4. Append temporaryValue to values.\n        values.push(temporaryValue);\n        // 5.6. Set temporaryValue to the empty string.\n        temporaryValue = '';\n    }\n    // 6. Return values.\n    return values;\n}\n/**\n * @see https://fetch.spec.whatwg.org/#concept-header-list-get-decode-split\n * @param {string} name lowercase header name\n * @param {import('./headers').HeadersList} list\n */ function getDecodeSplit(name, list) {\n    // 1. Let value be the result of getting name from list.\n    const value = list.get(name, true);\n    // 2. If value is null, then return null.\n    if (value === null) {\n        return null;\n    }\n    // 3. Return the result of getting, decoding, and splitting value.\n    return gettingDecodingSplitting(value);\n}\nconst textDecoder = new TextDecoder();\n/**\n * @see https://encoding.spec.whatwg.org/#utf-8-decode\n * @param {Buffer} buffer\n */ function utf8DecodeBytes(buffer) {\n    if (buffer.length === 0) {\n        return '';\n    }\n    // 1. Let buffer be the result of peeking three bytes from\n    //    ioQueue, converted to a byte sequence.\n    // 2. If buffer is 0xEF 0xBB 0xBF, then read three\n    //    bytes from ioQueue. (Do nothing with those bytes.)\n    if (buffer[0] === 0xEF && buffer[1] === 0xBB && buffer[2] === 0xBF) {\n        buffer = buffer.subarray(3);\n    }\n    // 3. Process a queue with an instance of UTF-8’s\n    //    decoder, ioQueue, output, and \"replacement\".\n    const output = textDecoder.decode(buffer);\n    // 4. Return output.\n    return output;\n}\nclass EnvironmentSettingsObjectBase {\n    get baseUrl() {\n        return getGlobalOrigin();\n    }\n    get origin() {\n        return this.baseUrl?.origin;\n    }\n    constructor(){\n        this.policyContainer = makePolicyContainer();\n    }\n}\nclass EnvironmentSettingsObject {\n    constructor(){\n        this.settingsObject = new EnvironmentSettingsObjectBase();\n    }\n}\nconst environmentSettingsObject = new EnvironmentSettingsObject();\nmodule.exports = {\n    isAborted,\n    isCancelled,\n    isValidEncodedURL,\n    createDeferredPromise,\n    ReadableStreamFrom,\n    tryUpgradeRequestToAPotentiallyTrustworthyURL,\n    clampAndCoarsenConnectionTimingInfo,\n    coarsenedSharedCurrentTime,\n    determineRequestsReferrer,\n    makePolicyContainer,\n    clonePolicyContainer,\n    appendFetchMetadata,\n    appendRequestOriginHeader,\n    TAOCheck,\n    corsCheck,\n    crossOriginResourcePolicyCheck,\n    createOpaqueTimingInfo,\n    setRequestReferrerPolicyOnRedirect,\n    isValidHTTPToken,\n    requestBadPort,\n    requestCurrentURL,\n    responseURL,\n    responseLocationURL,\n    isBlobLike,\n    isURLPotentiallyTrustworthy,\n    isValidReasonPhrase,\n    sameOrigin,\n    normalizeMethod,\n    serializeJavascriptValueToJSONString,\n    iteratorMixin,\n    createIterator,\n    isValidHeaderName,\n    isValidHeaderValue,\n    isErrorLike,\n    fullyReadBody,\n    bytesMatch,\n    isReadableStreamLike,\n    readableStreamClose,\n    isomorphicEncode,\n    urlIsLocal,\n    urlHasHttpsScheme,\n    urlIsHttpHttpsScheme,\n    readAllBytes,\n    simpleRangeHeaderValue,\n    buildContentRange,\n    parseMetadata,\n    createInflate,\n    extractMimeType,\n    getDecodeSplit,\n    utf8DecodeBytes,\n    environmentSettingsObject\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/fetch/util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/fetch/webidl.js":
/*!*****************************************************!*\
  !*** ./node_modules/undici/lib/web/fetch/webidl.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { types, inspect } = __webpack_require__(/*! node:util */ \"node:util\");\nconst { toUSVString } = __webpack_require__(/*! ../../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\n/** @type {import('../../../types/webidl').Webidl} */ const webidl = {};\nwebidl.converters = {};\nwebidl.util = {};\nwebidl.errors = {};\nwebidl.errors.exception = function(message) {\n    return new TypeError(`${message.header}: ${message.message}`);\n};\nwebidl.errors.conversionFailed = function(context) {\n    const plural = context.types.length === 1 ? '' : ' one of';\n    const message = `${context.argument} could not be converted to` + `${plural}: ${context.types.join(', ')}.`;\n    return webidl.errors.exception({\n        header: context.prefix,\n        message\n    });\n};\nwebidl.errors.invalidArgument = function(context) {\n    return webidl.errors.exception({\n        header: context.prefix,\n        message: `\"${context.value}\" is an invalid ${context.type}.`\n    });\n};\n// https://webidl.spec.whatwg.org/#implements\nwebidl.brandCheck = function(V, I, opts) {\n    if (opts?.strict !== false) {\n        if (!(V instanceof I)) {\n            const err = new TypeError('Illegal invocation');\n            err.code = 'ERR_INVALID_THIS'; // node compat.\n            throw err;\n        }\n    } else {\n        if (V?.[Symbol.toStringTag] !== I.prototype[Symbol.toStringTag]) {\n            const err = new TypeError('Illegal invocation');\n            err.code = 'ERR_INVALID_THIS'; // node compat.\n            throw err;\n        }\n    }\n};\nwebidl.argumentLengthCheck = function({ length }, min, ctx) {\n    if (length < min) {\n        throw webidl.errors.exception({\n            message: `${min} argument${min !== 1 ? 's' : ''} required, ` + `but${length ? ' only' : ''} ${length} found.`,\n            header: ctx\n        });\n    }\n};\nwebidl.illegalConstructor = function() {\n    throw webidl.errors.exception({\n        header: 'TypeError',\n        message: 'Illegal constructor'\n    });\n};\n// https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values\nwebidl.util.Type = function(V) {\n    switch(typeof V){\n        case 'undefined':\n            return 'Undefined';\n        case 'boolean':\n            return 'Boolean';\n        case 'string':\n            return 'String';\n        case 'symbol':\n            return 'Symbol';\n        case 'number':\n            return 'Number';\n        case 'bigint':\n            return 'BigInt';\n        case 'function':\n        case 'object':\n            {\n                if (V === null) {\n                    return 'Null';\n                }\n                return 'Object';\n            }\n    }\n};\n// https://webidl.spec.whatwg.org/#abstract-opdef-converttoint\nwebidl.util.ConvertToInt = function(V, bitLength, signedness, opts) {\n    let upperBound;\n    let lowerBound;\n    // 1. If bitLength is 64, then:\n    if (bitLength === 64) {\n        // 1. Let upperBound be 2^53 − 1.\n        upperBound = Math.pow(2, 53) - 1;\n        // 2. If signedness is \"unsigned\", then let lowerBound be 0.\n        if (signedness === 'unsigned') {\n            lowerBound = 0;\n        } else {\n            // 3. Otherwise let lowerBound be −2^53 + 1.\n            lowerBound = Math.pow(-2, 53) + 1;\n        }\n    } else if (signedness === 'unsigned') {\n        // 2. Otherwise, if signedness is \"unsigned\", then:\n        // 1. Let lowerBound be 0.\n        lowerBound = 0;\n        // 2. Let upperBound be 2^bitLength − 1.\n        upperBound = Math.pow(2, bitLength) - 1;\n    } else {\n        // 3. Otherwise:\n        // 1. Let lowerBound be -2^bitLength − 1.\n        lowerBound = Math.pow(-2, bitLength) - 1;\n        // 2. Let upperBound be 2^bitLength − 1 − 1.\n        upperBound = Math.pow(2, bitLength - 1) - 1;\n    }\n    // 4. Let x be ? ToNumber(V).\n    let x = Number(V);\n    // 5. If x is −0, then set x to +0.\n    if (x === 0) {\n        x = 0;\n    }\n    // 6. If the conversion is to an IDL type associated\n    //    with the [EnforceRange] extended attribute, then:\n    if (opts?.enforceRange === true) {\n        // 1. If x is NaN, +∞, or −∞, then throw a TypeError.\n        if (Number.isNaN(x) || x === Number.POSITIVE_INFINITY || x === Number.NEGATIVE_INFINITY) {\n            throw webidl.errors.exception({\n                header: 'Integer conversion',\n                message: `Could not convert ${webidl.util.Stringify(V)} to an integer.`\n            });\n        }\n        // 2. Set x to IntegerPart(x).\n        x = webidl.util.IntegerPart(x);\n        // 3. If x < lowerBound or x > upperBound, then\n        //    throw a TypeError.\n        if (x < lowerBound || x > upperBound) {\n            throw webidl.errors.exception({\n                header: 'Integer conversion',\n                message: `Value must be between ${lowerBound}-${upperBound}, got ${x}.`\n            });\n        }\n        // 4. Return x.\n        return x;\n    }\n    // 7. If x is not NaN and the conversion is to an IDL\n    //    type associated with the [Clamp] extended\n    //    attribute, then:\n    if (!Number.isNaN(x) && opts?.clamp === true) {\n        // 1. Set x to min(max(x, lowerBound), upperBound).\n        x = Math.min(Math.max(x, lowerBound), upperBound);\n        // 2. Round x to the nearest integer, choosing the\n        //    even integer if it lies halfway between two,\n        //    and choosing +0 rather than −0.\n        if (Math.floor(x) % 2 === 0) {\n            x = Math.floor(x);\n        } else {\n            x = Math.ceil(x);\n        }\n        // 3. Return x.\n        return x;\n    }\n    // 8. If x is NaN, +0, +∞, or −∞, then return +0.\n    if (Number.isNaN(x) || x === 0 && Object.is(0, x) || x === Number.POSITIVE_INFINITY || x === Number.NEGATIVE_INFINITY) {\n        return 0;\n    }\n    // 9. Set x to IntegerPart(x).\n    x = webidl.util.IntegerPart(x);\n    // 10. Set x to x modulo 2^bitLength.\n    x = x % Math.pow(2, bitLength);\n    // 11. If signedness is \"signed\" and x ≥ 2^bitLength − 1,\n    //    then return x − 2^bitLength.\n    if (signedness === 'signed' && x >= Math.pow(2, bitLength) - 1) {\n        return x - Math.pow(2, bitLength);\n    }\n    // 12. Otherwise, return x.\n    return x;\n};\n// https://webidl.spec.whatwg.org/#abstract-opdef-integerpart\nwebidl.util.IntegerPart = function(n) {\n    // 1. Let r be floor(abs(n)).\n    const r = Math.floor(Math.abs(n));\n    // 2. If n < 0, then return -1 × r.\n    if (n < 0) {\n        return -1 * r;\n    }\n    // 3. Otherwise, return r.\n    return r;\n};\nwebidl.util.Stringify = function(V) {\n    const type = webidl.util.Type(V);\n    switch(type){\n        case 'Symbol':\n            return `Symbol(${V.description})`;\n        case 'Object':\n            return inspect(V);\n        case 'String':\n            return `\"${V}\"`;\n        default:\n            return `${V}`;\n    }\n};\n// https://webidl.spec.whatwg.org/#es-sequence\nwebidl.sequenceConverter = function(converter) {\n    return (V, prefix, argument, Iterable)=>{\n        // 1. If Type(V) is not Object, throw a TypeError.\n        if (webidl.util.Type(V) !== 'Object') {\n            throw webidl.errors.exception({\n                header: prefix,\n                message: `${argument} (${webidl.util.Stringify(V)}) is not iterable.`\n            });\n        }\n        // 2. Let method be ? GetMethod(V, @@iterator).\n        /** @type {Generator} */ const method = typeof Iterable === 'function' ? Iterable() : V?.[Symbol.iterator]?.();\n        const seq = [];\n        let index = 0;\n        // 3. If method is undefined, throw a TypeError.\n        if (method === undefined || typeof method.next !== 'function') {\n            throw webidl.errors.exception({\n                header: prefix,\n                message: `${argument} is not iterable.`\n            });\n        }\n        // https://webidl.spec.whatwg.org/#create-sequence-from-iterable\n        while(true){\n            const { done, value } = method.next();\n            if (done) {\n                break;\n            }\n            seq.push(converter(value, prefix, `${argument}[${index++}]`));\n        }\n        return seq;\n    };\n};\n// https://webidl.spec.whatwg.org/#es-to-record\nwebidl.recordConverter = function(keyConverter, valueConverter) {\n    return (O, prefix, argument)=>{\n        // 1. If Type(O) is not Object, throw a TypeError.\n        if (webidl.util.Type(O) !== 'Object') {\n            throw webidl.errors.exception({\n                header: prefix,\n                message: `${argument} (\"${webidl.util.Type(O)}\") is not an Object.`\n            });\n        }\n        // 2. Let result be a new empty instance of record<K, V>.\n        const result = {};\n        if (!types.isProxy(O)) {\n            // 1. Let desc be ? O.[[GetOwnProperty]](key).\n            const keys = [\n                ...Object.getOwnPropertyNames(O),\n                ...Object.getOwnPropertySymbols(O)\n            ];\n            for (const key of keys){\n                // 1. Let typedKey be key converted to an IDL value of type K.\n                const typedKey = keyConverter(key, prefix, argument);\n                // 2. Let value be ? Get(O, key).\n                // 3. Let typedValue be value converted to an IDL value of type V.\n                const typedValue = valueConverter(O[key], prefix, argument);\n                // 4. Set result[typedKey] to typedValue.\n                result[typedKey] = typedValue;\n            }\n            // 5. Return result.\n            return result;\n        }\n        // 3. Let keys be ? O.[[OwnPropertyKeys]]().\n        const keys = Reflect.ownKeys(O);\n        // 4. For each key of keys.\n        for (const key of keys){\n            // 1. Let desc be ? O.[[GetOwnProperty]](key).\n            const desc = Reflect.getOwnPropertyDescriptor(O, key);\n            // 2. If desc is not undefined and desc.[[Enumerable]] is true:\n            if (desc?.enumerable) {\n                // 1. Let typedKey be key converted to an IDL value of type K.\n                const typedKey = keyConverter(key, prefix, argument);\n                // 2. Let value be ? Get(O, key).\n                // 3. Let typedValue be value converted to an IDL value of type V.\n                const typedValue = valueConverter(O[key], prefix, argument);\n                // 4. Set result[typedKey] to typedValue.\n                result[typedKey] = typedValue;\n            }\n        }\n        // 5. Return result.\n        return result;\n    };\n};\nwebidl.interfaceConverter = function(i) {\n    return (V, prefix, argument, opts)=>{\n        if (opts?.strict !== false && !(V instanceof i)) {\n            throw webidl.errors.exception({\n                header: prefix,\n                message: `Expected ${argument} (\"${webidl.util.Stringify(V)}\") to be an instance of ${i.name}.`\n            });\n        }\n        return V;\n    };\n};\nwebidl.dictionaryConverter = function(converters) {\n    return (dictionary, prefix, argument)=>{\n        const type = webidl.util.Type(dictionary);\n        const dict = {};\n        if (type === 'Null' || type === 'Undefined') {\n            return dict;\n        } else if (type !== 'Object') {\n            throw webidl.errors.exception({\n                header: prefix,\n                message: `Expected ${dictionary} to be one of: Null, Undefined, Object.`\n            });\n        }\n        for (const options of converters){\n            const { key, defaultValue, required, converter } = options;\n            if (required === true) {\n                if (!Object.hasOwn(dictionary, key)) {\n                    throw webidl.errors.exception({\n                        header: prefix,\n                        message: `Missing required key \"${key}\".`\n                    });\n                }\n            }\n            let value = dictionary[key];\n            const hasDefault = Object.hasOwn(options, 'defaultValue');\n            // Only use defaultValue if value is undefined and\n            // a defaultValue options was provided.\n            if (hasDefault && value !== null) {\n                value ??= defaultValue();\n            }\n            // A key can be optional and have no default value.\n            // When this happens, do not perform a conversion,\n            // and do not assign the key a value.\n            if (required || hasDefault || value !== undefined) {\n                value = converter(value, prefix, `${argument}.${key}`);\n                if (options.allowedValues && !options.allowedValues.includes(value)) {\n                    throw webidl.errors.exception({\n                        header: prefix,\n                        message: `${value} is not an accepted type. Expected one of ${options.allowedValues.join(', ')}.`\n                    });\n                }\n                dict[key] = value;\n            }\n        }\n        return dict;\n    };\n};\nwebidl.nullableConverter = function(converter) {\n    return (V, prefix, argument)=>{\n        if (V === null) {\n            return V;\n        }\n        return converter(V, prefix, argument);\n    };\n};\n// https://webidl.spec.whatwg.org/#es-DOMString\nwebidl.converters.DOMString = function(V, prefix, argument, opts) {\n    // 1. If V is null and the conversion is to an IDL type\n    //    associated with the [LegacyNullToEmptyString]\n    //    extended attribute, then return the DOMString value\n    //    that represents the empty string.\n    if (V === null && opts?.legacyNullToEmptyString) {\n        return '';\n    }\n    // 2. Let x be ? ToString(V).\n    if (typeof V === 'symbol') {\n        throw webidl.errors.exception({\n            header: prefix,\n            message: `${argument} is a symbol, which cannot be converted to a DOMString.`\n        });\n    }\n    // 3. Return the IDL DOMString value that represents the\n    //    same sequence of code units as the one the\n    //    ECMAScript String value x represents.\n    return String(V);\n};\n// https://webidl.spec.whatwg.org/#es-ByteString\nwebidl.converters.ByteString = function(V, prefix, argument) {\n    // 1. Let x be ? ToString(V).\n    // Note: DOMString converter perform ? ToString(V)\n    const x = webidl.converters.DOMString(V, prefix, argument);\n    // 2. If the value of any element of x is greater than\n    //    255, then throw a TypeError.\n    for(let index = 0; index < x.length; index++){\n        if (x.charCodeAt(index) > 255) {\n            throw new TypeError('Cannot convert argument to a ByteString because the character at ' + `index ${index} has a value of ${x.charCodeAt(index)} which is greater than 255.`);\n        }\n    }\n    // 3. Return an IDL ByteString value whose length is the\n    //    length of x, and where the value of each element is\n    //    the value of the corresponding element of x.\n    return x;\n};\n// https://webidl.spec.whatwg.org/#es-USVString\n// TODO: rewrite this so we can control the errors thrown\nwebidl.converters.USVString = toUSVString;\n// https://webidl.spec.whatwg.org/#es-boolean\nwebidl.converters.boolean = function(V) {\n    // 1. Let x be the result of computing ToBoolean(V).\n    const x = Boolean(V);\n    // 2. Return the IDL boolean value that is the one that represents\n    //    the same truth value as the ECMAScript Boolean value x.\n    return x;\n};\n// https://webidl.spec.whatwg.org/#es-any\nwebidl.converters.any = function(V) {\n    return V;\n};\n// https://webidl.spec.whatwg.org/#es-long-long\nwebidl.converters['long long'] = function(V, prefix, argument) {\n    // 1. Let x be ? ConvertToInt(V, 64, \"signed\").\n    const x = webidl.util.ConvertToInt(V, 64, 'signed', undefined, prefix, argument);\n    // 2. Return the IDL long long value that represents\n    //    the same numeric value as x.\n    return x;\n};\n// https://webidl.spec.whatwg.org/#es-unsigned-long-long\nwebidl.converters['unsigned long long'] = function(V, prefix, argument) {\n    // 1. Let x be ? ConvertToInt(V, 64, \"unsigned\").\n    const x = webidl.util.ConvertToInt(V, 64, 'unsigned', undefined, prefix, argument);\n    // 2. Return the IDL unsigned long long value that\n    //    represents the same numeric value as x.\n    return x;\n};\n// https://webidl.spec.whatwg.org/#es-unsigned-long\nwebidl.converters['unsigned long'] = function(V, prefix, argument) {\n    // 1. Let x be ? ConvertToInt(V, 32, \"unsigned\").\n    const x = webidl.util.ConvertToInt(V, 32, 'unsigned', undefined, prefix, argument);\n    // 2. Return the IDL unsigned long value that\n    //    represents the same numeric value as x.\n    return x;\n};\n// https://webidl.spec.whatwg.org/#es-unsigned-short\nwebidl.converters['unsigned short'] = function(V, prefix, argument, opts) {\n    // 1. Let x be ? ConvertToInt(V, 16, \"unsigned\").\n    const x = webidl.util.ConvertToInt(V, 16, 'unsigned', opts, prefix, argument);\n    // 2. Return the IDL unsigned short value that represents\n    //    the same numeric value as x.\n    return x;\n};\n// https://webidl.spec.whatwg.org/#idl-ArrayBuffer\nwebidl.converters.ArrayBuffer = function(V, prefix, argument, opts) {\n    // 1. If Type(V) is not Object, or V does not have an\n    //    [[ArrayBufferData]] internal slot, then throw a\n    //    TypeError.\n    // see: https://tc39.es/ecma262/#sec-properties-of-the-arraybuffer-instances\n    // see: https://tc39.es/ecma262/#sec-properties-of-the-sharedarraybuffer-instances\n    if (webidl.util.Type(V) !== 'Object' || !types.isAnyArrayBuffer(V)) {\n        throw webidl.errors.conversionFailed({\n            prefix,\n            argument: `${argument} (\"${webidl.util.Stringify(V)}\")`,\n            types: [\n                'ArrayBuffer'\n            ]\n        });\n    }\n    // 2. If the conversion is not to an IDL type associated\n    //    with the [AllowShared] extended attribute, and\n    //    IsSharedArrayBuffer(V) is true, then throw a\n    //    TypeError.\n    if (opts?.allowShared === false && types.isSharedArrayBuffer(V)) {\n        throw webidl.errors.exception({\n            header: 'ArrayBuffer',\n            message: 'SharedArrayBuffer is not allowed.'\n        });\n    }\n    // 3. If the conversion is not to an IDL type associated\n    //    with the [AllowResizable] extended attribute, and\n    //    IsResizableArrayBuffer(V) is true, then throw a\n    //    TypeError.\n    if (V.resizable || V.growable) {\n        throw webidl.errors.exception({\n            header: 'ArrayBuffer',\n            message: 'Received a resizable ArrayBuffer.'\n        });\n    }\n    // 4. Return the IDL ArrayBuffer value that is a\n    //    reference to the same object as V.\n    return V;\n};\nwebidl.converters.TypedArray = function(V, T, prefix, name, opts) {\n    // 1. Let T be the IDL type V is being converted to.\n    // 2. If Type(V) is not Object, or V does not have a\n    //    [[TypedArrayName]] internal slot with a value\n    //    equal to T’s name, then throw a TypeError.\n    if (webidl.util.Type(V) !== 'Object' || !types.isTypedArray(V) || V.constructor.name !== T.name) {\n        throw webidl.errors.conversionFailed({\n            prefix,\n            argument: `${name} (\"${webidl.util.Stringify(V)}\")`,\n            types: [\n                T.name\n            ]\n        });\n    }\n    // 3. If the conversion is not to an IDL type associated\n    //    with the [AllowShared] extended attribute, and\n    //    IsSharedArrayBuffer(V.[[ViewedArrayBuffer]]) is\n    //    true, then throw a TypeError.\n    if (opts?.allowShared === false && types.isSharedArrayBuffer(V.buffer)) {\n        throw webidl.errors.exception({\n            header: 'ArrayBuffer',\n            message: 'SharedArrayBuffer is not allowed.'\n        });\n    }\n    // 4. If the conversion is not to an IDL type associated\n    //    with the [AllowResizable] extended attribute, and\n    //    IsResizableArrayBuffer(V.[[ViewedArrayBuffer]]) is\n    //    true, then throw a TypeError.\n    if (V.buffer.resizable || V.buffer.growable) {\n        throw webidl.errors.exception({\n            header: 'ArrayBuffer',\n            message: 'Received a resizable ArrayBuffer.'\n        });\n    }\n    // 5. Return the IDL value of type T that is a reference\n    //    to the same object as V.\n    return V;\n};\nwebidl.converters.DataView = function(V, prefix, name, opts) {\n    // 1. If Type(V) is not Object, or V does not have a\n    //    [[DataView]] internal slot, then throw a TypeError.\n    if (webidl.util.Type(V) !== 'Object' || !types.isDataView(V)) {\n        throw webidl.errors.exception({\n            header: prefix,\n            message: `${name} is not a DataView.`\n        });\n    }\n    // 2. If the conversion is not to an IDL type associated\n    //    with the [AllowShared] extended attribute, and\n    //    IsSharedArrayBuffer(V.[[ViewedArrayBuffer]]) is true,\n    //    then throw a TypeError.\n    if (opts?.allowShared === false && types.isSharedArrayBuffer(V.buffer)) {\n        throw webidl.errors.exception({\n            header: 'ArrayBuffer',\n            message: 'SharedArrayBuffer is not allowed.'\n        });\n    }\n    // 3. If the conversion is not to an IDL type associated\n    //    with the [AllowResizable] extended attribute, and\n    //    IsResizableArrayBuffer(V.[[ViewedArrayBuffer]]) is\n    //    true, then throw a TypeError.\n    if (V.buffer.resizable || V.buffer.growable) {\n        throw webidl.errors.exception({\n            header: 'ArrayBuffer',\n            message: 'Received a resizable ArrayBuffer.'\n        });\n    }\n    // 4. Return the IDL DataView value that is a reference\n    //    to the same object as V.\n    return V;\n};\n// https://webidl.spec.whatwg.org/#BufferSource\nwebidl.converters.BufferSource = function(V, prefix, name, opts) {\n    if (types.isAnyArrayBuffer(V)) {\n        return webidl.converters.ArrayBuffer(V, prefix, name, {\n            ...opts,\n            allowShared: false\n        });\n    }\n    if (types.isTypedArray(V)) {\n        return webidl.converters.TypedArray(V, V.constructor, prefix, name, {\n            ...opts,\n            allowShared: false\n        });\n    }\n    if (types.isDataView(V)) {\n        return webidl.converters.DataView(V, prefix, name, {\n            ...opts,\n            allowShared: false\n        });\n    }\n    throw webidl.errors.conversionFailed({\n        prefix,\n        argument: `${name} (\"${webidl.util.Stringify(V)}\")`,\n        types: [\n            'BufferSource'\n        ]\n    });\n};\nwebidl.converters['sequence<ByteString>'] = webidl.sequenceConverter(webidl.converters.ByteString);\nwebidl.converters['sequence<sequence<ByteString>>'] = webidl.sequenceConverter(webidl.converters['sequence<ByteString>']);\nwebidl.converters['record<ByteString, ByteString>'] = webidl.recordConverter(webidl.converters.ByteString, webidl.converters.ByteString);\nmodule.exports = {\n    webidl\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/fetch/webidl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/fileapi/encoding.js":
/*!*********************************************************!*\
  !*** ./node_modules/undici/lib/web/fileapi/encoding.js ***!
  \*********************************************************/
/***/ ((module) => {

eval("\n/**\n * @see https://encoding.spec.whatwg.org/#concept-encoding-get\n * @param {string|undefined} label\n */ function getEncoding(label) {\n    if (!label) {\n        return 'failure';\n    }\n    // 1. Remove any leading and trailing ASCII whitespace from label.\n    // 2. If label is an ASCII case-insensitive match for any of the\n    //    labels listed in the table below, then return the\n    //    corresponding encoding; otherwise return failure.\n    switch(label.trim().toLowerCase()){\n        case 'unicode-1-1-utf-8':\n        case 'unicode11utf8':\n        case 'unicode20utf8':\n        case 'utf-8':\n        case 'utf8':\n        case 'x-unicode20utf8':\n            return 'UTF-8';\n        case '866':\n        case 'cp866':\n        case 'csibm866':\n        case 'ibm866':\n            return 'IBM866';\n        case 'csisolatin2':\n        case 'iso-8859-2':\n        case 'iso-ir-101':\n        case 'iso8859-2':\n        case 'iso88592':\n        case 'iso_8859-2':\n        case 'iso_8859-2:1987':\n        case 'l2':\n        case 'latin2':\n            return 'ISO-8859-2';\n        case 'csisolatin3':\n        case 'iso-8859-3':\n        case 'iso-ir-109':\n        case 'iso8859-3':\n        case 'iso88593':\n        case 'iso_8859-3':\n        case 'iso_8859-3:1988':\n        case 'l3':\n        case 'latin3':\n            return 'ISO-8859-3';\n        case 'csisolatin4':\n        case 'iso-8859-4':\n        case 'iso-ir-110':\n        case 'iso8859-4':\n        case 'iso88594':\n        case 'iso_8859-4':\n        case 'iso_8859-4:1988':\n        case 'l4':\n        case 'latin4':\n            return 'ISO-8859-4';\n        case 'csisolatincyrillic':\n        case 'cyrillic':\n        case 'iso-8859-5':\n        case 'iso-ir-144':\n        case 'iso8859-5':\n        case 'iso88595':\n        case 'iso_8859-5':\n        case 'iso_8859-5:1988':\n            return 'ISO-8859-5';\n        case 'arabic':\n        case 'asmo-708':\n        case 'csiso88596e':\n        case 'csiso88596i':\n        case 'csisolatinarabic':\n        case 'ecma-114':\n        case 'iso-8859-6':\n        case 'iso-8859-6-e':\n        case 'iso-8859-6-i':\n        case 'iso-ir-127':\n        case 'iso8859-6':\n        case 'iso88596':\n        case 'iso_8859-6':\n        case 'iso_8859-6:1987':\n            return 'ISO-8859-6';\n        case 'csisolatingreek':\n        case 'ecma-118':\n        case 'elot_928':\n        case 'greek':\n        case 'greek8':\n        case 'iso-8859-7':\n        case 'iso-ir-126':\n        case 'iso8859-7':\n        case 'iso88597':\n        case 'iso_8859-7':\n        case 'iso_8859-7:1987':\n        case 'sun_eu_greek':\n            return 'ISO-8859-7';\n        case 'csiso88598e':\n        case 'csisolatinhebrew':\n        case 'hebrew':\n        case 'iso-8859-8':\n        case 'iso-8859-8-e':\n        case 'iso-ir-138':\n        case 'iso8859-8':\n        case 'iso88598':\n        case 'iso_8859-8':\n        case 'iso_8859-8:1988':\n        case 'visual':\n            return 'ISO-8859-8';\n        case 'csiso88598i':\n        case 'iso-8859-8-i':\n        case 'logical':\n            return 'ISO-8859-8-I';\n        case 'csisolatin6':\n        case 'iso-8859-10':\n        case 'iso-ir-157':\n        case 'iso8859-10':\n        case 'iso885910':\n        case 'l6':\n        case 'latin6':\n            return 'ISO-8859-10';\n        case 'iso-8859-13':\n        case 'iso8859-13':\n        case 'iso885913':\n            return 'ISO-8859-13';\n        case 'iso-8859-14':\n        case 'iso8859-14':\n        case 'iso885914':\n            return 'ISO-8859-14';\n        case 'csisolatin9':\n        case 'iso-8859-15':\n        case 'iso8859-15':\n        case 'iso885915':\n        case 'iso_8859-15':\n        case 'l9':\n            return 'ISO-8859-15';\n        case 'iso-8859-16':\n            return 'ISO-8859-16';\n        case 'cskoi8r':\n        case 'koi':\n        case 'koi8':\n        case 'koi8-r':\n        case 'koi8_r':\n            return 'KOI8-R';\n        case 'koi8-ru':\n        case 'koi8-u':\n            return 'KOI8-U';\n        case 'csmacintosh':\n        case 'mac':\n        case 'macintosh':\n        case 'x-mac-roman':\n            return 'macintosh';\n        case 'iso-8859-11':\n        case 'iso8859-11':\n        case 'iso885911':\n        case 'tis-620':\n        case 'windows-874':\n            return 'windows-874';\n        case 'cp1250':\n        case 'windows-1250':\n        case 'x-cp1250':\n            return 'windows-1250';\n        case 'cp1251':\n        case 'windows-1251':\n        case 'x-cp1251':\n            return 'windows-1251';\n        case 'ansi_x3.4-1968':\n        case 'ascii':\n        case 'cp1252':\n        case 'cp819':\n        case 'csisolatin1':\n        case 'ibm819':\n        case 'iso-8859-1':\n        case 'iso-ir-100':\n        case 'iso8859-1':\n        case 'iso88591':\n        case 'iso_8859-1':\n        case 'iso_8859-1:1987':\n        case 'l1':\n        case 'latin1':\n        case 'us-ascii':\n        case 'windows-1252':\n        case 'x-cp1252':\n            return 'windows-1252';\n        case 'cp1253':\n        case 'windows-1253':\n        case 'x-cp1253':\n            return 'windows-1253';\n        case 'cp1254':\n        case 'csisolatin5':\n        case 'iso-8859-9':\n        case 'iso-ir-148':\n        case 'iso8859-9':\n        case 'iso88599':\n        case 'iso_8859-9':\n        case 'iso_8859-9:1989':\n        case 'l5':\n        case 'latin5':\n        case 'windows-1254':\n        case 'x-cp1254':\n            return 'windows-1254';\n        case 'cp1255':\n        case 'windows-1255':\n        case 'x-cp1255':\n            return 'windows-1255';\n        case 'cp1256':\n        case 'windows-1256':\n        case 'x-cp1256':\n            return 'windows-1256';\n        case 'cp1257':\n        case 'windows-1257':\n        case 'x-cp1257':\n            return 'windows-1257';\n        case 'cp1258':\n        case 'windows-1258':\n        case 'x-cp1258':\n            return 'windows-1258';\n        case 'x-mac-cyrillic':\n        case 'x-mac-ukrainian':\n            return 'x-mac-cyrillic';\n        case 'chinese':\n        case 'csgb2312':\n        case 'csiso58gb231280':\n        case 'gb2312':\n        case 'gb_2312':\n        case 'gb_2312-80':\n        case 'gbk':\n        case 'iso-ir-58':\n        case 'x-gbk':\n            return 'GBK';\n        case 'gb18030':\n            return 'gb18030';\n        case 'big5':\n        case 'big5-hkscs':\n        case 'cn-big5':\n        case 'csbig5':\n        case 'x-x-big5':\n            return 'Big5';\n        case 'cseucpkdfmtjapanese':\n        case 'euc-jp':\n        case 'x-euc-jp':\n            return 'EUC-JP';\n        case 'csiso2022jp':\n        case 'iso-2022-jp':\n            return 'ISO-2022-JP';\n        case 'csshiftjis':\n        case 'ms932':\n        case 'ms_kanji':\n        case 'shift-jis':\n        case 'shift_jis':\n        case 'sjis':\n        case 'windows-31j':\n        case 'x-sjis':\n            return 'Shift_JIS';\n        case 'cseuckr':\n        case 'csksc56011987':\n        case 'euc-kr':\n        case 'iso-ir-149':\n        case 'korean':\n        case 'ks_c_5601-1987':\n        case 'ks_c_5601-1989':\n        case 'ksc5601':\n        case 'ksc_5601':\n        case 'windows-949':\n            return 'EUC-KR';\n        case 'csiso2022kr':\n        case 'hz-gb-2312':\n        case 'iso-2022-cn':\n        case 'iso-2022-cn-ext':\n        case 'iso-2022-kr':\n        case 'replacement':\n            return 'replacement';\n        case 'unicodefffe':\n        case 'utf-16be':\n            return 'UTF-16BE';\n        case 'csunicode':\n        case 'iso-10646-ucs-2':\n        case 'ucs-2':\n        case 'unicode':\n        case 'unicodefeff':\n        case 'utf-16':\n        case 'utf-16le':\n            return 'UTF-16LE';\n        case 'x-user-defined':\n            return 'x-user-defined';\n        default:\n            return 'failure';\n    }\n}\nmodule.exports = {\n    getEncoding\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/fileapi/encoding.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/fileapi/filereader.js":
/*!***********************************************************!*\
  !*** ./node_modules/undici/lib/web/fileapi/filereader.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { staticPropertyDescriptors, readOperation, fireAProgressEvent } = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/web/fileapi/util.js\");\nconst { kState, kError, kResult, kEvents, kAborted } = __webpack_require__(/*! ./symbols */ \"(ssr)/./node_modules/undici/lib/web/fileapi/symbols.js\");\nconst { webidl } = __webpack_require__(/*! ../fetch/webidl */ \"(ssr)/./node_modules/undici/lib/web/fetch/webidl.js\");\nconst { kEnumerableProperty } = __webpack_require__(/*! ../../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nclass FileReader extends EventTarget {\n    constructor(){\n        super();\n        this[kState] = 'empty';\n        this[kResult] = null;\n        this[kError] = null;\n        this[kEvents] = {\n            loadend: null,\n            error: null,\n            abort: null,\n            load: null,\n            progress: null,\n            loadstart: null\n        };\n    }\n    /**\n   * @see https://w3c.github.io/FileAPI/#dfn-readAsArrayBuffer\n   * @param {import('buffer').Blob} blob\n   */ readAsArrayBuffer(blob) {\n        webidl.brandCheck(this, FileReader);\n        webidl.argumentLengthCheck(arguments, 1, 'FileReader.readAsArrayBuffer');\n        blob = webidl.converters.Blob(blob, {\n            strict: false\n        });\n        // The readAsArrayBuffer(blob) method, when invoked,\n        // must initiate a read operation for blob with ArrayBuffer.\n        readOperation(this, blob, 'ArrayBuffer');\n    }\n    /**\n   * @see https://w3c.github.io/FileAPI/#readAsBinaryString\n   * @param {import('buffer').Blob} blob\n   */ readAsBinaryString(blob) {\n        webidl.brandCheck(this, FileReader);\n        webidl.argumentLengthCheck(arguments, 1, 'FileReader.readAsBinaryString');\n        blob = webidl.converters.Blob(blob, {\n            strict: false\n        });\n        // The readAsBinaryString(blob) method, when invoked,\n        // must initiate a read operation for blob with BinaryString.\n        readOperation(this, blob, 'BinaryString');\n    }\n    /**\n   * @see https://w3c.github.io/FileAPI/#readAsDataText\n   * @param {import('buffer').Blob} blob\n   * @param {string?} encoding\n   */ readAsText(blob, encoding = undefined) {\n        webidl.brandCheck(this, FileReader);\n        webidl.argumentLengthCheck(arguments, 1, 'FileReader.readAsText');\n        blob = webidl.converters.Blob(blob, {\n            strict: false\n        });\n        if (encoding !== undefined) {\n            encoding = webidl.converters.DOMString(encoding, 'FileReader.readAsText', 'encoding');\n        }\n        // The readAsText(blob, encoding) method, when invoked,\n        // must initiate a read operation for blob with Text and encoding.\n        readOperation(this, blob, 'Text', encoding);\n    }\n    /**\n   * @see https://w3c.github.io/FileAPI/#dfn-readAsDataURL\n   * @param {import('buffer').Blob} blob\n   */ readAsDataURL(blob) {\n        webidl.brandCheck(this, FileReader);\n        webidl.argumentLengthCheck(arguments, 1, 'FileReader.readAsDataURL');\n        blob = webidl.converters.Blob(blob, {\n            strict: false\n        });\n        // The readAsDataURL(blob) method, when invoked, must\n        // initiate a read operation for blob with DataURL.\n        readOperation(this, blob, 'DataURL');\n    }\n    /**\n   * @see https://w3c.github.io/FileAPI/#dfn-abort\n   */ abort() {\n        // 1. If this's state is \"empty\" or if this's state is\n        //    \"done\" set this's result to null and terminate\n        //    this algorithm.\n        if (this[kState] === 'empty' || this[kState] === 'done') {\n            this[kResult] = null;\n            return;\n        }\n        // 2. If this's state is \"loading\" set this's state to\n        //    \"done\" and set this's result to null.\n        if (this[kState] === 'loading') {\n            this[kState] = 'done';\n            this[kResult] = null;\n        }\n        // 3. If there are any tasks from this on the file reading\n        //    task source in an affiliated task queue, then remove\n        //    those tasks from that task queue.\n        this[kAborted] = true;\n        // 4. Terminate the algorithm for the read method being processed.\n        // TODO\n        // 5. Fire a progress event called abort at this.\n        fireAProgressEvent('abort', this);\n        // 6. If this's state is not \"loading\", fire a progress\n        //    event called loadend at this.\n        if (this[kState] !== 'loading') {\n            fireAProgressEvent('loadend', this);\n        }\n    }\n    /**\n   * @see https://w3c.github.io/FileAPI/#dom-filereader-readystate\n   */ get readyState() {\n        webidl.brandCheck(this, FileReader);\n        switch(this[kState]){\n            case 'empty':\n                return this.EMPTY;\n            case 'loading':\n                return this.LOADING;\n            case 'done':\n                return this.DONE;\n        }\n    }\n    /**\n   * @see https://w3c.github.io/FileAPI/#dom-filereader-result\n   */ get result() {\n        webidl.brandCheck(this, FileReader);\n        // The result attribute’s getter, when invoked, must return\n        // this's result.\n        return this[kResult];\n    }\n    /**\n   * @see https://w3c.github.io/FileAPI/#dom-filereader-error\n   */ get error() {\n        webidl.brandCheck(this, FileReader);\n        // The error attribute’s getter, when invoked, must return\n        // this's error.\n        return this[kError];\n    }\n    get onloadend() {\n        webidl.brandCheck(this, FileReader);\n        return this[kEvents].loadend;\n    }\n    set onloadend(fn) {\n        webidl.brandCheck(this, FileReader);\n        if (this[kEvents].loadend) {\n            this.removeEventListener('loadend', this[kEvents].loadend);\n        }\n        if (typeof fn === 'function') {\n            this[kEvents].loadend = fn;\n            this.addEventListener('loadend', fn);\n        } else {\n            this[kEvents].loadend = null;\n        }\n    }\n    get onerror() {\n        webidl.brandCheck(this, FileReader);\n        return this[kEvents].error;\n    }\n    set onerror(fn) {\n        webidl.brandCheck(this, FileReader);\n        if (this[kEvents].error) {\n            this.removeEventListener('error', this[kEvents].error);\n        }\n        if (typeof fn === 'function') {\n            this[kEvents].error = fn;\n            this.addEventListener('error', fn);\n        } else {\n            this[kEvents].error = null;\n        }\n    }\n    get onloadstart() {\n        webidl.brandCheck(this, FileReader);\n        return this[kEvents].loadstart;\n    }\n    set onloadstart(fn) {\n        webidl.brandCheck(this, FileReader);\n        if (this[kEvents].loadstart) {\n            this.removeEventListener('loadstart', this[kEvents].loadstart);\n        }\n        if (typeof fn === 'function') {\n            this[kEvents].loadstart = fn;\n            this.addEventListener('loadstart', fn);\n        } else {\n            this[kEvents].loadstart = null;\n        }\n    }\n    get onprogress() {\n        webidl.brandCheck(this, FileReader);\n        return this[kEvents].progress;\n    }\n    set onprogress(fn) {\n        webidl.brandCheck(this, FileReader);\n        if (this[kEvents].progress) {\n            this.removeEventListener('progress', this[kEvents].progress);\n        }\n        if (typeof fn === 'function') {\n            this[kEvents].progress = fn;\n            this.addEventListener('progress', fn);\n        } else {\n            this[kEvents].progress = null;\n        }\n    }\n    get onload() {\n        webidl.brandCheck(this, FileReader);\n        return this[kEvents].load;\n    }\n    set onload(fn) {\n        webidl.brandCheck(this, FileReader);\n        if (this[kEvents].load) {\n            this.removeEventListener('load', this[kEvents].load);\n        }\n        if (typeof fn === 'function') {\n            this[kEvents].load = fn;\n            this.addEventListener('load', fn);\n        } else {\n            this[kEvents].load = null;\n        }\n    }\n    get onabort() {\n        webidl.brandCheck(this, FileReader);\n        return this[kEvents].abort;\n    }\n    set onabort(fn) {\n        webidl.brandCheck(this, FileReader);\n        if (this[kEvents].abort) {\n            this.removeEventListener('abort', this[kEvents].abort);\n        }\n        if (typeof fn === 'function') {\n            this[kEvents].abort = fn;\n            this.addEventListener('abort', fn);\n        } else {\n            this[kEvents].abort = null;\n        }\n    }\n}\n// https://w3c.github.io/FileAPI/#dom-filereader-empty\nFileReader.EMPTY = FileReader.prototype.EMPTY = 0;\n// https://w3c.github.io/FileAPI/#dom-filereader-loading\nFileReader.LOADING = FileReader.prototype.LOADING = 1;\n// https://w3c.github.io/FileAPI/#dom-filereader-done\nFileReader.DONE = FileReader.prototype.DONE = 2;\nObject.defineProperties(FileReader.prototype, {\n    EMPTY: staticPropertyDescriptors,\n    LOADING: staticPropertyDescriptors,\n    DONE: staticPropertyDescriptors,\n    readAsArrayBuffer: kEnumerableProperty,\n    readAsBinaryString: kEnumerableProperty,\n    readAsText: kEnumerableProperty,\n    readAsDataURL: kEnumerableProperty,\n    abort: kEnumerableProperty,\n    readyState: kEnumerableProperty,\n    result: kEnumerableProperty,\n    error: kEnumerableProperty,\n    onloadstart: kEnumerableProperty,\n    onprogress: kEnumerableProperty,\n    onload: kEnumerableProperty,\n    onabort: kEnumerableProperty,\n    onerror: kEnumerableProperty,\n    onloadend: kEnumerableProperty,\n    [Symbol.toStringTag]: {\n        value: 'FileReader',\n        writable: false,\n        enumerable: false,\n        configurable: true\n    }\n});\nObject.defineProperties(FileReader, {\n    EMPTY: staticPropertyDescriptors,\n    LOADING: staticPropertyDescriptors,\n    DONE: staticPropertyDescriptors\n});\nmodule.exports = {\n    FileReader\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/fileapi/filereader.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/fileapi/progressevent.js":
/*!**************************************************************!*\
  !*** ./node_modules/undici/lib/web/fileapi/progressevent.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { webidl } = __webpack_require__(/*! ../fetch/webidl */ \"(ssr)/./node_modules/undici/lib/web/fetch/webidl.js\");\nconst kState = Symbol('ProgressEvent state');\n/**\n * @see https://xhr.spec.whatwg.org/#progressevent\n */ class ProgressEvent extends Event {\n    constructor(type, eventInitDict = {}){\n        type = webidl.converters.DOMString(type, 'ProgressEvent constructor', 'type');\n        eventInitDict = webidl.converters.ProgressEventInit(eventInitDict ?? {});\n        super(type, eventInitDict);\n        this[kState] = {\n            lengthComputable: eventInitDict.lengthComputable,\n            loaded: eventInitDict.loaded,\n            total: eventInitDict.total\n        };\n    }\n    get lengthComputable() {\n        webidl.brandCheck(this, ProgressEvent);\n        return this[kState].lengthComputable;\n    }\n    get loaded() {\n        webidl.brandCheck(this, ProgressEvent);\n        return this[kState].loaded;\n    }\n    get total() {\n        webidl.brandCheck(this, ProgressEvent);\n        return this[kState].total;\n    }\n}\nwebidl.converters.ProgressEventInit = webidl.dictionaryConverter([\n    {\n        key: 'lengthComputable',\n        converter: webidl.converters.boolean,\n        defaultValue: ()=>false\n    },\n    {\n        key: 'loaded',\n        converter: webidl.converters['unsigned long long'],\n        defaultValue: ()=>0\n    },\n    {\n        key: 'total',\n        converter: webidl.converters['unsigned long long'],\n        defaultValue: ()=>0\n    },\n    {\n        key: 'bubbles',\n        converter: webidl.converters.boolean,\n        defaultValue: ()=>false\n    },\n    {\n        key: 'cancelable',\n        converter: webidl.converters.boolean,\n        defaultValue: ()=>false\n    },\n    {\n        key: 'composed',\n        converter: webidl.converters.boolean,\n        defaultValue: ()=>false\n    }\n]);\nmodule.exports = {\n    ProgressEvent\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi93ZWIvZmlsZWFwaS9wcm9ncmVzc2V2ZW50LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTSxFQUFFQSxNQUFNLEVBQUUsR0FBR0MsbUJBQU9BLENBQUMsNEVBQWlCO0FBRTVDLE1BQU1DLFNBQVNDLE9BQU87QUFFdEI7O0NBRUMsR0FDRCxNQUFNQyxzQkFBc0JDO0lBQzFCLFlBQWFDLElBQUksRUFBRUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFFO1FBQ3JDRCxPQUFPTixPQUFPUSxVQUFVLENBQUNDLFNBQVMsQ0FBQ0gsTUFBTSw2QkFBNkI7UUFDdEVDLGdCQUFnQlAsT0FBT1EsVUFBVSxDQUFDRSxpQkFBaUIsQ0FBQ0gsaUJBQWlCLENBQUM7UUFFdEUsS0FBSyxDQUFDRCxNQUFNQztRQUVaLElBQUksQ0FBQ0wsT0FBTyxHQUFHO1lBQ2JTLGtCQUFrQkosY0FBY0ksZ0JBQWdCO1lBQ2hEQyxRQUFRTCxjQUFjSyxNQUFNO1lBQzVCQyxPQUFPTixjQUFjTSxLQUFLO1FBQzVCO0lBQ0Y7SUFFQSxJQUFJRixtQkFBb0I7UUFDdEJYLE9BQU9jLFVBQVUsQ0FBQyxJQUFJLEVBQUVWO1FBRXhCLE9BQU8sSUFBSSxDQUFDRixPQUFPLENBQUNTLGdCQUFnQjtJQUN0QztJQUVBLElBQUlDLFNBQVU7UUFDWlosT0FBT2MsVUFBVSxDQUFDLElBQUksRUFBRVY7UUFFeEIsT0FBTyxJQUFJLENBQUNGLE9BQU8sQ0FBQ1UsTUFBTTtJQUM1QjtJQUVBLElBQUlDLFFBQVM7UUFDWGIsT0FBT2MsVUFBVSxDQUFDLElBQUksRUFBRVY7UUFFeEIsT0FBTyxJQUFJLENBQUNGLE9BQU8sQ0FBQ1csS0FBSztJQUMzQjtBQUNGO0FBRUFiLE9BQU9RLFVBQVUsQ0FBQ0UsaUJBQWlCLEdBQUdWLE9BQU9lLG1CQUFtQixDQUFDO0lBQy9EO1FBQ0VDLEtBQUs7UUFDTEMsV0FBV2pCLE9BQU9RLFVBQVUsQ0FBQ1UsT0FBTztRQUNwQ0MsY0FBYyxJQUFNO0lBQ3RCO0lBQ0E7UUFDRUgsS0FBSztRQUNMQyxXQUFXakIsT0FBT1EsVUFBVSxDQUFDLHFCQUFxQjtRQUNsRFcsY0FBYyxJQUFNO0lBQ3RCO0lBQ0E7UUFDRUgsS0FBSztRQUNMQyxXQUFXakIsT0FBT1EsVUFBVSxDQUFDLHFCQUFxQjtRQUNsRFcsY0FBYyxJQUFNO0lBQ3RCO0lBQ0E7UUFDRUgsS0FBSztRQUNMQyxXQUFXakIsT0FBT1EsVUFBVSxDQUFDVSxPQUFPO1FBQ3BDQyxjQUFjLElBQU07SUFDdEI7SUFDQTtRQUNFSCxLQUFLO1FBQ0xDLFdBQVdqQixPQUFPUSxVQUFVLENBQUNVLE9BQU87UUFDcENDLGNBQWMsSUFBTTtJQUN0QjtJQUNBO1FBQ0VILEtBQUs7UUFDTEMsV0FBV2pCLE9BQU9RLFVBQVUsQ0FBQ1UsT0FBTztRQUNwQ0MsY0FBYyxJQUFNO0lBQ3RCO0NBQ0Q7QUFFREMsT0FBT0MsT0FBTyxHQUFHO0lBQ2ZqQjtBQUNGIiwic291cmNlcyI6WyJEOlxcSGVsaXhcXG5vZGVfbW9kdWxlc1xcdW5kaWNpXFxsaWJcXHdlYlxcZmlsZWFwaVxccHJvZ3Jlc3NldmVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgeyB3ZWJpZGwgfSA9IHJlcXVpcmUoJy4uL2ZldGNoL3dlYmlkbCcpXG5cbmNvbnN0IGtTdGF0ZSA9IFN5bWJvbCgnUHJvZ3Jlc3NFdmVudCBzdGF0ZScpXG5cbi8qKlxuICogQHNlZSBodHRwczovL3hoci5zcGVjLndoYXR3Zy5vcmcvI3Byb2dyZXNzZXZlbnRcbiAqL1xuY2xhc3MgUHJvZ3Jlc3NFdmVudCBleHRlbmRzIEV2ZW50IHtcbiAgY29uc3RydWN0b3IgKHR5cGUsIGV2ZW50SW5pdERpY3QgPSB7fSkge1xuICAgIHR5cGUgPSB3ZWJpZGwuY29udmVydGVycy5ET01TdHJpbmcodHlwZSwgJ1Byb2dyZXNzRXZlbnQgY29uc3RydWN0b3InLCAndHlwZScpXG4gICAgZXZlbnRJbml0RGljdCA9IHdlYmlkbC5jb252ZXJ0ZXJzLlByb2dyZXNzRXZlbnRJbml0KGV2ZW50SW5pdERpY3QgPz8ge30pXG5cbiAgICBzdXBlcih0eXBlLCBldmVudEluaXREaWN0KVxuXG4gICAgdGhpc1trU3RhdGVdID0ge1xuICAgICAgbGVuZ3RoQ29tcHV0YWJsZTogZXZlbnRJbml0RGljdC5sZW5ndGhDb21wdXRhYmxlLFxuICAgICAgbG9hZGVkOiBldmVudEluaXREaWN0LmxvYWRlZCxcbiAgICAgIHRvdGFsOiBldmVudEluaXREaWN0LnRvdGFsXG4gICAgfVxuICB9XG5cbiAgZ2V0IGxlbmd0aENvbXB1dGFibGUgKCkge1xuICAgIHdlYmlkbC5icmFuZENoZWNrKHRoaXMsIFByb2dyZXNzRXZlbnQpXG5cbiAgICByZXR1cm4gdGhpc1trU3RhdGVdLmxlbmd0aENvbXB1dGFibGVcbiAgfVxuXG4gIGdldCBsb2FkZWQgKCkge1xuICAgIHdlYmlkbC5icmFuZENoZWNrKHRoaXMsIFByb2dyZXNzRXZlbnQpXG5cbiAgICByZXR1cm4gdGhpc1trU3RhdGVdLmxvYWRlZFxuICB9XG5cbiAgZ2V0IHRvdGFsICgpIHtcbiAgICB3ZWJpZGwuYnJhbmRDaGVjayh0aGlzLCBQcm9ncmVzc0V2ZW50KVxuXG4gICAgcmV0dXJuIHRoaXNba1N0YXRlXS50b3RhbFxuICB9XG59XG5cbndlYmlkbC5jb252ZXJ0ZXJzLlByb2dyZXNzRXZlbnRJbml0ID0gd2ViaWRsLmRpY3Rpb25hcnlDb252ZXJ0ZXIoW1xuICB7XG4gICAga2V5OiAnbGVuZ3RoQ29tcHV0YWJsZScsXG4gICAgY29udmVydGVyOiB3ZWJpZGwuY29udmVydGVycy5ib29sZWFuLFxuICAgIGRlZmF1bHRWYWx1ZTogKCkgPT4gZmFsc2VcbiAgfSxcbiAge1xuICAgIGtleTogJ2xvYWRlZCcsXG4gICAgY29udmVydGVyOiB3ZWJpZGwuY29udmVydGVyc1sndW5zaWduZWQgbG9uZyBsb25nJ10sXG4gICAgZGVmYXVsdFZhbHVlOiAoKSA9PiAwXG4gIH0sXG4gIHtcbiAgICBrZXk6ICd0b3RhbCcsXG4gICAgY29udmVydGVyOiB3ZWJpZGwuY29udmVydGVyc1sndW5zaWduZWQgbG9uZyBsb25nJ10sXG4gICAgZGVmYXVsdFZhbHVlOiAoKSA9PiAwXG4gIH0sXG4gIHtcbiAgICBrZXk6ICdidWJibGVzJyxcbiAgICBjb252ZXJ0ZXI6IHdlYmlkbC5jb252ZXJ0ZXJzLmJvb2xlYW4sXG4gICAgZGVmYXVsdFZhbHVlOiAoKSA9PiBmYWxzZVxuICB9LFxuICB7XG4gICAga2V5OiAnY2FuY2VsYWJsZScsXG4gICAgY29udmVydGVyOiB3ZWJpZGwuY29udmVydGVycy5ib29sZWFuLFxuICAgIGRlZmF1bHRWYWx1ZTogKCkgPT4gZmFsc2VcbiAgfSxcbiAge1xuICAgIGtleTogJ2NvbXBvc2VkJyxcbiAgICBjb252ZXJ0ZXI6IHdlYmlkbC5jb252ZXJ0ZXJzLmJvb2xlYW4sXG4gICAgZGVmYXVsdFZhbHVlOiAoKSA9PiBmYWxzZVxuICB9XG5dKVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgUHJvZ3Jlc3NFdmVudFxufVxuIl0sIm5hbWVzIjpbIndlYmlkbCIsInJlcXVpcmUiLCJrU3RhdGUiLCJTeW1ib2wiLCJQcm9ncmVzc0V2ZW50IiwiRXZlbnQiLCJ0eXBlIiwiZXZlbnRJbml0RGljdCIsImNvbnZlcnRlcnMiLCJET01TdHJpbmciLCJQcm9ncmVzc0V2ZW50SW5pdCIsImxlbmd0aENvbXB1dGFibGUiLCJsb2FkZWQiLCJ0b3RhbCIsImJyYW5kQ2hlY2siLCJkaWN0aW9uYXJ5Q29udmVydGVyIiwia2V5IiwiY29udmVydGVyIiwiYm9vbGVhbiIsImRlZmF1bHRWYWx1ZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/fileapi/progressevent.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/fileapi/symbols.js":
/*!********************************************************!*\
  !*** ./node_modules/undici/lib/web/fileapi/symbols.js ***!
  \********************************************************/
/***/ ((module) => {

eval("\nmodule.exports = {\n    kState: Symbol('FileReader state'),\n    kResult: Symbol('FileReader result'),\n    kError: Symbol('FileReader error'),\n    kLastProgressEventFired: Symbol('FileReader last progress event fired timestamp'),\n    kEvents: Symbol('FileReader events'),\n    kAborted: Symbol('FileReader aborted')\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi93ZWIvZmlsZWFwaS9zeW1ib2xzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLE9BQU9DLE9BQU8sR0FBRztJQUNmQyxRQUFRQyxPQUFPO0lBQ2ZDLFNBQVNELE9BQU87SUFDaEJFLFFBQVFGLE9BQU87SUFDZkcseUJBQXlCSCxPQUFPO0lBQ2hDSSxTQUFTSixPQUFPO0lBQ2hCSyxVQUFVTCxPQUFPO0FBQ25CIiwic291cmNlcyI6WyJEOlxcSGVsaXhcXG5vZGVfbW9kdWxlc1xcdW5kaWNpXFxsaWJcXHdlYlxcZmlsZWFwaVxcc3ltYm9scy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGtTdGF0ZTogU3ltYm9sKCdGaWxlUmVhZGVyIHN0YXRlJyksXG4gIGtSZXN1bHQ6IFN5bWJvbCgnRmlsZVJlYWRlciByZXN1bHQnKSxcbiAga0Vycm9yOiBTeW1ib2woJ0ZpbGVSZWFkZXIgZXJyb3InKSxcbiAga0xhc3RQcm9ncmVzc0V2ZW50RmlyZWQ6IFN5bWJvbCgnRmlsZVJlYWRlciBsYXN0IHByb2dyZXNzIGV2ZW50IGZpcmVkIHRpbWVzdGFtcCcpLFxuICBrRXZlbnRzOiBTeW1ib2woJ0ZpbGVSZWFkZXIgZXZlbnRzJyksXG4gIGtBYm9ydGVkOiBTeW1ib2woJ0ZpbGVSZWFkZXIgYWJvcnRlZCcpXG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImtTdGF0ZSIsIlN5bWJvbCIsImtSZXN1bHQiLCJrRXJyb3IiLCJrTGFzdFByb2dyZXNzRXZlbnRGaXJlZCIsImtFdmVudHMiLCJrQWJvcnRlZCJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/fileapi/symbols.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/fileapi/util.js":
/*!*****************************************************!*\
  !*** ./node_modules/undici/lib/web/fileapi/util.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { kState, kError, kResult, kAborted, kLastProgressEventFired } = __webpack_require__(/*! ./symbols */ \"(ssr)/./node_modules/undici/lib/web/fileapi/symbols.js\");\nconst { ProgressEvent } = __webpack_require__(/*! ./progressevent */ \"(ssr)/./node_modules/undici/lib/web/fileapi/progressevent.js\");\nconst { getEncoding } = __webpack_require__(/*! ./encoding */ \"(ssr)/./node_modules/undici/lib/web/fileapi/encoding.js\");\nconst { serializeAMimeType, parseMIMEType } = __webpack_require__(/*! ../fetch/data-url */ \"(ssr)/./node_modules/undici/lib/web/fetch/data-url.js\");\nconst { types } = __webpack_require__(/*! node:util */ \"node:util\");\nconst { StringDecoder } = __webpack_require__(/*! string_decoder */ \"string_decoder\");\nconst { btoa } = __webpack_require__(/*! node:buffer */ \"node:buffer\");\n/** @type {PropertyDescriptor} */ const staticPropertyDescriptors = {\n    enumerable: true,\n    writable: false,\n    configurable: false\n};\n/**\n * @see https://w3c.github.io/FileAPI/#readOperation\n * @param {import('./filereader').FileReader} fr\n * @param {import('buffer').Blob} blob\n * @param {string} type\n * @param {string?} encodingName\n */ function readOperation(fr, blob, type, encodingName) {\n    // 1. If fr’s state is \"loading\", throw an InvalidStateError\n    //    DOMException.\n    if (fr[kState] === 'loading') {\n        throw new DOMException('Invalid state', 'InvalidStateError');\n    }\n    // 2. Set fr’s state to \"loading\".\n    fr[kState] = 'loading';\n    // 3. Set fr’s result to null.\n    fr[kResult] = null;\n    // 4. Set fr’s error to null.\n    fr[kError] = null;\n    // 5. Let stream be the result of calling get stream on blob.\n    /** @type {import('stream/web').ReadableStream} */ const stream = blob.stream();\n    // 6. Let reader be the result of getting a reader from stream.\n    const reader = stream.getReader();\n    // 7. Let bytes be an empty byte sequence.\n    /** @type {Uint8Array[]} */ const bytes = [];\n    // 8. Let chunkPromise be the result of reading a chunk from\n    //    stream with reader.\n    let chunkPromise = reader.read();\n    // 9. Let isFirstChunk be true.\n    let isFirstChunk = true;\n    (async ()=>{\n        while(!fr[kAborted]){\n            // 1. Wait for chunkPromise to be fulfilled or rejected.\n            try {\n                const { done, value } = await chunkPromise;\n                // 2. If chunkPromise is fulfilled, and isFirstChunk is\n                //    true, queue a task to fire a progress event called\n                //    loadstart at fr.\n                if (isFirstChunk && !fr[kAborted]) {\n                    queueMicrotask(()=>{\n                        fireAProgressEvent('loadstart', fr);\n                    });\n                }\n                // 3. Set isFirstChunk to false.\n                isFirstChunk = false;\n                // 4. If chunkPromise is fulfilled with an object whose\n                //    done property is false and whose value property is\n                //    a Uint8Array object, run these steps:\n                if (!done && types.isUint8Array(value)) {\n                    // 1. Let bs be the byte sequence represented by the\n                    //    Uint8Array object.\n                    // 2. Append bs to bytes.\n                    bytes.push(value);\n                    // 3. If roughly 50ms have passed since these steps\n                    //    were last invoked, queue a task to fire a\n                    //    progress event called progress at fr.\n                    if ((fr[kLastProgressEventFired] === undefined || Date.now() - fr[kLastProgressEventFired] >= 50) && !fr[kAborted]) {\n                        fr[kLastProgressEventFired] = Date.now();\n                        queueMicrotask(()=>{\n                            fireAProgressEvent('progress', fr);\n                        });\n                    }\n                    // 4. Set chunkPromise to the result of reading a\n                    //    chunk from stream with reader.\n                    chunkPromise = reader.read();\n                } else if (done) {\n                    // 5. Otherwise, if chunkPromise is fulfilled with an\n                    //    object whose done property is true, queue a task\n                    //    to run the following steps and abort this algorithm:\n                    queueMicrotask(()=>{\n                        // 1. Set fr’s state to \"done\".\n                        fr[kState] = 'done';\n                        // 2. Let result be the result of package data given\n                        //    bytes, type, blob’s type, and encodingName.\n                        try {\n                            const result = packageData(bytes, type, blob.type, encodingName);\n                            // 4. Else:\n                            if (fr[kAborted]) {\n                                return;\n                            }\n                            // 1. Set fr’s result to result.\n                            fr[kResult] = result;\n                            // 2. Fire a progress event called load at the fr.\n                            fireAProgressEvent('load', fr);\n                        } catch (error) {\n                            // 3. If package data threw an exception error:\n                            // 1. Set fr’s error to error.\n                            fr[kError] = error;\n                            // 2. Fire a progress event called error at fr.\n                            fireAProgressEvent('error', fr);\n                        }\n                        // 5. If fr’s state is not \"loading\", fire a progress\n                        //    event called loadend at the fr.\n                        if (fr[kState] !== 'loading') {\n                            fireAProgressEvent('loadend', fr);\n                        }\n                    });\n                    break;\n                }\n            } catch (error) {\n                if (fr[kAborted]) {\n                    return;\n                }\n                // 6. Otherwise, if chunkPromise is rejected with an\n                //    error error, queue a task to run the following\n                //    steps and abort this algorithm:\n                queueMicrotask(()=>{\n                    // 1. Set fr’s state to \"done\".\n                    fr[kState] = 'done';\n                    // 2. Set fr’s error to error.\n                    fr[kError] = error;\n                    // 3. Fire a progress event called error at fr.\n                    fireAProgressEvent('error', fr);\n                    // 4. If fr’s state is not \"loading\", fire a progress\n                    //    event called loadend at fr.\n                    if (fr[kState] !== 'loading') {\n                        fireAProgressEvent('loadend', fr);\n                    }\n                });\n                break;\n            }\n        }\n    })();\n}\n/**\n * @see https://w3c.github.io/FileAPI/#fire-a-progress-event\n * @see https://dom.spec.whatwg.org/#concept-event-fire\n * @param {string} e The name of the event\n * @param {import('./filereader').FileReader} reader\n */ function fireAProgressEvent(e, reader) {\n    // The progress event e does not bubble. e.bubbles must be false\n    // The progress event e is NOT cancelable. e.cancelable must be false\n    const event = new ProgressEvent(e, {\n        bubbles: false,\n        cancelable: false\n    });\n    reader.dispatchEvent(event);\n}\n/**\n * @see https://w3c.github.io/FileAPI/#blob-package-data\n * @param {Uint8Array[]} bytes\n * @param {string} type\n * @param {string?} mimeType\n * @param {string?} encodingName\n */ function packageData(bytes, type, mimeType, encodingName) {\n    // 1. A Blob has an associated package data algorithm, given\n    //    bytes, a type, a optional mimeType, and a optional\n    //    encodingName, which switches on type and runs the\n    //    associated steps:\n    switch(type){\n        case 'DataURL':\n            {\n                // 1. Return bytes as a DataURL [RFC2397] subject to\n                //    the considerations below:\n                //  * Use mimeType as part of the Data URL if it is\n                //    available in keeping with the Data URL\n                //    specification [RFC2397].\n                //  * If mimeType is not available return a Data URL\n                //    without a media-type. [RFC2397].\n                // https://datatracker.ietf.org/doc/html/rfc2397#section-3\n                // dataurl    := \"data:\" [ mediatype ] [ \";base64\" ] \",\" data\n                // mediatype  := [ type \"/\" subtype ] *( \";\" parameter )\n                // data       := *urlchar\n                // parameter  := attribute \"=\" value\n                let dataURL = 'data:';\n                const parsed = parseMIMEType(mimeType || 'application/octet-stream');\n                if (parsed !== 'failure') {\n                    dataURL += serializeAMimeType(parsed);\n                }\n                dataURL += ';base64,';\n                const decoder = new StringDecoder('latin1');\n                for (const chunk of bytes){\n                    dataURL += btoa(decoder.write(chunk));\n                }\n                dataURL += btoa(decoder.end());\n                return dataURL;\n            }\n        case 'Text':\n            {\n                // 1. Let encoding be failure\n                let encoding = 'failure';\n                // 2. If the encodingName is present, set encoding to the\n                //    result of getting an encoding from encodingName.\n                if (encodingName) {\n                    encoding = getEncoding(encodingName);\n                }\n                // 3. If encoding is failure, and mimeType is present:\n                if (encoding === 'failure' && mimeType) {\n                    // 1. Let type be the result of parse a MIME type\n                    //    given mimeType.\n                    const type = parseMIMEType(mimeType);\n                    // 2. If type is not failure, set encoding to the result\n                    //    of getting an encoding from type’s parameters[\"charset\"].\n                    if (type !== 'failure') {\n                        encoding = getEncoding(type.parameters.get('charset'));\n                    }\n                }\n                // 4. If encoding is failure, then set encoding to UTF-8.\n                if (encoding === 'failure') {\n                    encoding = 'UTF-8';\n                }\n                // 5. Decode bytes using fallback encoding encoding, and\n                //    return the result.\n                return decode(bytes, encoding);\n            }\n        case 'ArrayBuffer':\n            {\n                // Return a new ArrayBuffer whose contents are bytes.\n                const sequence = combineByteSequences(bytes);\n                return sequence.buffer;\n            }\n        case 'BinaryString':\n            {\n                // Return bytes as a binary string, in which every byte\n                //  is represented by a code unit of equal value [0..255].\n                let binaryString = '';\n                const decoder = new StringDecoder('latin1');\n                for (const chunk of bytes){\n                    binaryString += decoder.write(chunk);\n                }\n                binaryString += decoder.end();\n                return binaryString;\n            }\n    }\n}\n/**\n * @see https://encoding.spec.whatwg.org/#decode\n * @param {Uint8Array[]} ioQueue\n * @param {string} encoding\n */ function decode(ioQueue, encoding) {\n    const bytes = combineByteSequences(ioQueue);\n    // 1. Let BOMEncoding be the result of BOM sniffing ioQueue.\n    const BOMEncoding = BOMSniffing(bytes);\n    let slice = 0;\n    // 2. If BOMEncoding is non-null:\n    if (BOMEncoding !== null) {\n        // 1. Set encoding to BOMEncoding.\n        encoding = BOMEncoding;\n        // 2. Read three bytes from ioQueue, if BOMEncoding is\n        //    UTF-8; otherwise read two bytes.\n        //    (Do nothing with those bytes.)\n        slice = BOMEncoding === 'UTF-8' ? 3 : 2;\n    }\n    // 3. Process a queue with an instance of encoding’s\n    //    decoder, ioQueue, output, and \"replacement\".\n    // 4. Return output.\n    const sliced = bytes.slice(slice);\n    return new TextDecoder(encoding).decode(sliced);\n}\n/**\n * @see https://encoding.spec.whatwg.org/#bom-sniff\n * @param {Uint8Array} ioQueue\n */ function BOMSniffing(ioQueue) {\n    // 1. Let BOM be the result of peeking 3 bytes from ioQueue,\n    //    converted to a byte sequence.\n    const [a, b, c] = ioQueue;\n    // 2. For each of the rows in the table below, starting with\n    //    the first one and going down, if BOM starts with the\n    //    bytes given in the first column, then return the\n    //    encoding given in the cell in the second column of that\n    //    row. Otherwise, return null.\n    if (a === 0xEF && b === 0xBB && c === 0xBF) {\n        return 'UTF-8';\n    } else if (a === 0xFE && b === 0xFF) {\n        return 'UTF-16BE';\n    } else if (a === 0xFF && b === 0xFE) {\n        return 'UTF-16LE';\n    }\n    return null;\n}\n/**\n * @param {Uint8Array[]} sequences\n */ function combineByteSequences(sequences) {\n    const size = sequences.reduce((a, b)=>{\n        return a + b.byteLength;\n    }, 0);\n    let offset = 0;\n    return sequences.reduce((a, b)=>{\n        a.set(b, offset);\n        offset += b.byteLength;\n        return a;\n    }, new Uint8Array(size));\n}\nmodule.exports = {\n    staticPropertyDescriptors,\n    readOperation,\n    fireAProgressEvent\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/fileapi/util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/websocket/connection.js":
/*!*************************************************************!*\
  !*** ./node_modules/undici/lib/web/websocket/connection.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { uid, states, sentCloseFrameState, emptyBuffer, opcodes } = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/undici/lib/web/websocket/constants.js\");\nconst { kReadyState, kSentClose, kByteParser, kReceivedClose, kResponse } = __webpack_require__(/*! ./symbols */ \"(ssr)/./node_modules/undici/lib/web/websocket/symbols.js\");\nconst { fireEvent, failWebsocketConnection, isClosing, isClosed, isEstablished, parseExtensions } = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/web/websocket/util.js\");\nconst { channels } = __webpack_require__(/*! ../../core/diagnostics */ \"(ssr)/./node_modules/undici/lib/core/diagnostics.js\");\nconst { CloseEvent } = __webpack_require__(/*! ./events */ \"(ssr)/./node_modules/undici/lib/web/websocket/events.js\");\nconst { makeRequest } = __webpack_require__(/*! ../fetch/request */ \"(ssr)/./node_modules/undici/lib/web/fetch/request.js\");\nconst { fetching } = __webpack_require__(/*! ../fetch/index */ \"(ssr)/./node_modules/undici/lib/web/fetch/index.js\");\nconst { Headers, getHeadersList } = __webpack_require__(/*! ../fetch/headers */ \"(ssr)/./node_modules/undici/lib/web/fetch/headers.js\");\nconst { getDecodeSplit } = __webpack_require__(/*! ../fetch/util */ \"(ssr)/./node_modules/undici/lib/web/fetch/util.js\");\nconst { WebsocketFrameSend } = __webpack_require__(/*! ./frame */ \"(ssr)/./node_modules/undici/lib/web/websocket/frame.js\");\n/** @type {import('crypto')} */ let crypto;\ntry {\n    crypto = __webpack_require__(/*! node:crypto */ \"node:crypto\");\n/* c8 ignore next 3 */ } catch  {}\n/**\n * @see https://websockets.spec.whatwg.org/#concept-websocket-establish\n * @param {URL} url\n * @param {string|string[]} protocols\n * @param {import('./websocket').WebSocket} ws\n * @param {(response: any, extensions: string[] | undefined) => void} onEstablish\n * @param {Partial<import('../../types/websocket').WebSocketInit>} options\n */ function establishWebSocketConnection(url, protocols, client, ws, onEstablish, options) {\n    // 1. Let requestURL be a copy of url, with its scheme set to \"http\", if url’s\n    //    scheme is \"ws\", and to \"https\" otherwise.\n    const requestURL = url;\n    requestURL.protocol = url.protocol === 'ws:' ? 'http:' : 'https:';\n    // 2. Let request be a new request, whose URL is requestURL, client is client,\n    //    service-workers mode is \"none\", referrer is \"no-referrer\", mode is\n    //    \"websocket\", credentials mode is \"include\", cache mode is \"no-store\" ,\n    //    and redirect mode is \"error\".\n    const request = makeRequest({\n        urlList: [\n            requestURL\n        ],\n        client,\n        serviceWorkers: 'none',\n        referrer: 'no-referrer',\n        mode: 'websocket',\n        credentials: 'include',\n        cache: 'no-store',\n        redirect: 'error'\n    });\n    // Note: undici extension, allow setting custom headers.\n    if (options.headers) {\n        const headersList = getHeadersList(new Headers(options.headers));\n        request.headersList = headersList;\n    }\n    // 3. Append (`Upgrade`, `websocket`) to request’s header list.\n    // 4. Append (`Connection`, `Upgrade`) to request’s header list.\n    // Note: both of these are handled by undici currently.\n    // https://github.com/nodejs/undici/blob/68c269c4144c446f3f1220951338daef4a6b5ec4/lib/client.js#L1397\n    // 5. Let keyValue be a nonce consisting of a randomly selected\n    //    16-byte value that has been forgiving-base64-encoded and\n    //    isomorphic encoded.\n    const keyValue = crypto.randomBytes(16).toString('base64');\n    // 6. Append (`Sec-WebSocket-Key`, keyValue) to request’s\n    //    header list.\n    request.headersList.append('sec-websocket-key', keyValue);\n    // 7. Append (`Sec-WebSocket-Version`, `13`) to request’s\n    //    header list.\n    request.headersList.append('sec-websocket-version', '13');\n    // 8. For each protocol in protocols, combine\n    //    (`Sec-WebSocket-Protocol`, protocol) in request’s header\n    //    list.\n    for (const protocol of protocols){\n        request.headersList.append('sec-websocket-protocol', protocol);\n    }\n    // 9. Let permessageDeflate be a user-agent defined\n    //    \"permessage-deflate\" extension header value.\n    // https://github.com/mozilla/gecko-dev/blob/ce78234f5e653a5d3916813ff990f053510227bc/netwerk/protocol/websocket/WebSocketChannel.cpp#L2673\n    const permessageDeflate = 'permessage-deflate; client_max_window_bits';\n    // 10. Append (`Sec-WebSocket-Extensions`, permessageDeflate) to\n    //     request’s header list.\n    request.headersList.append('sec-websocket-extensions', permessageDeflate);\n    // 11. Fetch request with useParallelQueue set to true, and\n    //     processResponse given response being these steps:\n    const controller = fetching({\n        request,\n        useParallelQueue: true,\n        dispatcher: options.dispatcher,\n        processResponse (response) {\n            // 1. If response is a network error or its status is not 101,\n            //    fail the WebSocket connection.\n            if (response.type === 'error' || response.status !== 101) {\n                failWebsocketConnection(ws, 'Received network error or non-101 status code.');\n                return;\n            }\n            // 2. If protocols is not the empty list and extracting header\n            //    list values given `Sec-WebSocket-Protocol` and response’s\n            //    header list results in null, failure, or the empty byte\n            //    sequence, then fail the WebSocket connection.\n            if (protocols.length !== 0 && !response.headersList.get('Sec-WebSocket-Protocol')) {\n                failWebsocketConnection(ws, 'Server did not respond with sent protocols.');\n                return;\n            }\n            // 3. Follow the requirements stated step 2 to step 6, inclusive,\n            //    of the last set of steps in section 4.1 of The WebSocket\n            //    Protocol to validate response. This either results in fail\n            //    the WebSocket connection or the WebSocket connection is\n            //    established.\n            // 2. If the response lacks an |Upgrade| header field or the |Upgrade|\n            //    header field contains a value that is not an ASCII case-\n            //    insensitive match for the value \"websocket\", the client MUST\n            //    _Fail the WebSocket Connection_.\n            if (response.headersList.get('Upgrade')?.toLowerCase() !== 'websocket') {\n                failWebsocketConnection(ws, 'Server did not set Upgrade header to \"websocket\".');\n                return;\n            }\n            // 3. If the response lacks a |Connection| header field or the\n            //    |Connection| header field doesn't contain a token that is an\n            //    ASCII case-insensitive match for the value \"Upgrade\", the client\n            //    MUST _Fail the WebSocket Connection_.\n            if (response.headersList.get('Connection')?.toLowerCase() !== 'upgrade') {\n                failWebsocketConnection(ws, 'Server did not set Connection header to \"upgrade\".');\n                return;\n            }\n            // 4. If the response lacks a |Sec-WebSocket-Accept| header field or\n            //    the |Sec-WebSocket-Accept| contains a value other than the\n            //    base64-encoded SHA-1 of the concatenation of the |Sec-WebSocket-\n            //    Key| (as a string, not base64-decoded) with the string \"258EAFA5-\n            //    E914-47DA-95CA-C5AB0DC85B11\" but ignoring any leading and\n            //    trailing whitespace, the client MUST _Fail the WebSocket\n            //    Connection_.\n            const secWSAccept = response.headersList.get('Sec-WebSocket-Accept');\n            const digest = crypto.createHash('sha1').update(keyValue + uid).digest('base64');\n            if (secWSAccept !== digest) {\n                failWebsocketConnection(ws, 'Incorrect hash received in Sec-WebSocket-Accept header.');\n                return;\n            }\n            // 5. If the response includes a |Sec-WebSocket-Extensions| header\n            //    field and this header field indicates the use of an extension\n            //    that was not present in the client's handshake (the server has\n            //    indicated an extension not requested by the client), the client\n            //    MUST _Fail the WebSocket Connection_.  (The parsing of this\n            //    header field to determine which extensions are requested is\n            //    discussed in Section 9.1.)\n            const secExtension = response.headersList.get('Sec-WebSocket-Extensions');\n            let extensions;\n            if (secExtension !== null) {\n                extensions = parseExtensions(secExtension);\n                if (!extensions.has('permessage-deflate')) {\n                    failWebsocketConnection(ws, 'Sec-WebSocket-Extensions header does not match.');\n                    return;\n                }\n            }\n            // 6. If the response includes a |Sec-WebSocket-Protocol| header field\n            //    and this header field indicates the use of a subprotocol that was\n            //    not present in the client's handshake (the server has indicated a\n            //    subprotocol not requested by the client), the client MUST _Fail\n            //    the WebSocket Connection_.\n            const secProtocol = response.headersList.get('Sec-WebSocket-Protocol');\n            if (secProtocol !== null) {\n                const requestProtocols = getDecodeSplit('sec-websocket-protocol', request.headersList);\n                // The client can request that the server use a specific subprotocol by\n                // including the |Sec-WebSocket-Protocol| field in its handshake.  If it\n                // is specified, the server needs to include the same field and one of\n                // the selected subprotocol values in its response for the connection to\n                // be established.\n                if (!requestProtocols.includes(secProtocol)) {\n                    failWebsocketConnection(ws, 'Protocol was not set in the opening handshake.');\n                    return;\n                }\n            }\n            response.socket.on('data', onSocketData);\n            response.socket.on('close', onSocketClose);\n            response.socket.on('error', onSocketError);\n            if (channels.open.hasSubscribers) {\n                channels.open.publish({\n                    address: response.socket.address(),\n                    protocol: secProtocol,\n                    extensions: secExtension\n                });\n            }\n            onEstablish(response, extensions);\n        }\n    });\n    return controller;\n}\nfunction closeWebSocketConnection(ws, code, reason, reasonByteLength) {\n    if (isClosing(ws) || isClosed(ws)) {\n    // If this's ready state is CLOSING (2) or CLOSED (3)\n    // Do nothing.\n    } else if (!isEstablished(ws)) {\n        // If the WebSocket connection is not yet established\n        // Fail the WebSocket connection and set this's ready state\n        // to CLOSING (2).\n        failWebsocketConnection(ws, 'Connection was closed before it was established.');\n        ws[kReadyState] = states.CLOSING;\n    } else if (ws[kSentClose] === sentCloseFrameState.NOT_SENT) {\n        // If the WebSocket closing handshake has not yet been started\n        // Start the WebSocket closing handshake and set this's ready\n        // state to CLOSING (2).\n        // - If neither code nor reason is present, the WebSocket Close\n        //   message must not have a body.\n        // - If code is present, then the status code to use in the\n        //   WebSocket Close message must be the integer given by code.\n        // - If reason is also present, then reasonBytes must be\n        //   provided in the Close message after the status code.\n        ws[kSentClose] = sentCloseFrameState.PROCESSING;\n        const frame = new WebsocketFrameSend();\n        // If neither code nor reason is present, the WebSocket Close\n        // message must not have a body.\n        // If code is present, then the status code to use in the\n        // WebSocket Close message must be the integer given by code.\n        if (code !== undefined && reason === undefined) {\n            frame.frameData = Buffer.allocUnsafe(2);\n            frame.frameData.writeUInt16BE(code, 0);\n        } else if (code !== undefined && reason !== undefined) {\n            // If reason is also present, then reasonBytes must be\n            // provided in the Close message after the status code.\n            frame.frameData = Buffer.allocUnsafe(2 + reasonByteLength);\n            frame.frameData.writeUInt16BE(code, 0);\n            // the body MAY contain UTF-8-encoded data with value /reason/\n            frame.frameData.write(reason, 2, 'utf-8');\n        } else {\n            frame.frameData = emptyBuffer;\n        }\n        /** @type {import('stream').Duplex} */ const socket = ws[kResponse].socket;\n        socket.write(frame.createFrame(opcodes.CLOSE));\n        ws[kSentClose] = sentCloseFrameState.SENT;\n        // Upon either sending or receiving a Close control frame, it is said\n        // that _The WebSocket Closing Handshake is Started_ and that the\n        // WebSocket connection is in the CLOSING state.\n        ws[kReadyState] = states.CLOSING;\n    } else {\n        // Otherwise\n        // Set this's ready state to CLOSING (2).\n        ws[kReadyState] = states.CLOSING;\n    }\n}\n/**\n * @param {Buffer} chunk\n */ function onSocketData(chunk) {\n    if (!this.ws[kByteParser].write(chunk)) {\n        this.pause();\n    }\n}\n/**\n * @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol\n * @see https://datatracker.ietf.org/doc/html/rfc6455#section-7.1.4\n */ function onSocketClose() {\n    const { ws } = this;\n    const { [kResponse]: response } = ws;\n    response.socket.off('data', onSocketData);\n    response.socket.off('close', onSocketClose);\n    response.socket.off('error', onSocketError);\n    // If the TCP connection was closed after the\n    // WebSocket closing handshake was completed, the WebSocket connection\n    // is said to have been closed _cleanly_.\n    const wasClean = ws[kSentClose] === sentCloseFrameState.SENT && ws[kReceivedClose];\n    let code = 1005;\n    let reason = '';\n    const result = ws[kByteParser].closingInfo;\n    if (result && !result.error) {\n        code = result.code ?? 1005;\n        reason = result.reason;\n    } else if (!ws[kReceivedClose]) {\n        // If _The WebSocket\n        // Connection is Closed_ and no Close control frame was received by the\n        // endpoint (such as could occur if the underlying transport connection\n        // is lost), _The WebSocket Connection Close Code_ is considered to be\n        // 1006.\n        code = 1006;\n    }\n    // 1. Change the ready state to CLOSED (3).\n    ws[kReadyState] = states.CLOSED;\n    // 2. If the user agent was required to fail the WebSocket\n    //    connection, or if the WebSocket connection was closed\n    //    after being flagged as full, fire an event named error\n    //    at the WebSocket object.\n    // TODO\n    // 3. Fire an event named close at the WebSocket object,\n    //    using CloseEvent, with the wasClean attribute\n    //    initialized to true if the connection closed cleanly\n    //    and false otherwise, the code attribute initialized to\n    //    the WebSocket connection close code, and the reason\n    //    attribute initialized to the result of applying UTF-8\n    //    decode without BOM to the WebSocket connection close\n    //    reason.\n    // TODO: process.nextTick\n    fireEvent('close', ws, (type, init)=>new CloseEvent(type, init), {\n        wasClean,\n        code,\n        reason\n    });\n    if (channels.close.hasSubscribers) {\n        channels.close.publish({\n            websocket: ws,\n            code,\n            reason\n        });\n    }\n}\nfunction onSocketError(error) {\n    const { ws } = this;\n    ws[kReadyState] = states.CLOSING;\n    if (channels.socketError.hasSubscribers) {\n        channels.socketError.publish(error);\n    }\n    this.destroy();\n}\nmodule.exports = {\n    establishWebSocketConnection,\n    closeWebSocketConnection\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi93ZWIvd2Vic29ja2V0L2Nvbm5lY3Rpb24uanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNLEVBQUVBLEdBQUcsRUFBRUMsTUFBTSxFQUFFQyxtQkFBbUIsRUFBRUMsV0FBVyxFQUFFQyxPQUFPLEVBQUUsR0FBR0MsbUJBQU9BLENBQUMsK0VBQWE7QUFDeEYsTUFBTSxFQUNKQyxXQUFXLEVBQ1hDLFVBQVUsRUFDVkMsV0FBVyxFQUNYQyxjQUFjLEVBQ2RDLFNBQVMsRUFDVixHQUFHTCxtQkFBT0EsQ0FBQywyRUFBVztBQUN2QixNQUFNLEVBQUVNLFNBQVMsRUFBRUMsdUJBQXVCLEVBQUVDLFNBQVMsRUFBRUMsUUFBUSxFQUFFQyxhQUFhLEVBQUVDLGVBQWUsRUFBRSxHQUFHWCxtQkFBT0EsQ0FBQyxxRUFBUTtBQUNwSCxNQUFNLEVBQUVZLFFBQVEsRUFBRSxHQUFHWixtQkFBT0EsQ0FBQyxtRkFBd0I7QUFDckQsTUFBTSxFQUFFYSxVQUFVLEVBQUUsR0FBR2IsbUJBQU9BLENBQUMseUVBQVU7QUFDekMsTUFBTSxFQUFFYyxXQUFXLEVBQUUsR0FBR2QsbUJBQU9BLENBQUMsOEVBQWtCO0FBQ2xELE1BQU0sRUFBRWUsUUFBUSxFQUFFLEdBQUdmLG1CQUFPQSxDQUFDLDBFQUFnQjtBQUM3QyxNQUFNLEVBQUVnQixPQUFPLEVBQUVDLGNBQWMsRUFBRSxHQUFHakIsbUJBQU9BLENBQUMsOEVBQWtCO0FBQzlELE1BQU0sRUFBRWtCLGNBQWMsRUFBRSxHQUFHbEIsbUJBQU9BLENBQUMsd0VBQWU7QUFDbEQsTUFBTSxFQUFFbUIsa0JBQWtCLEVBQUUsR0FBR25CLG1CQUFPQSxDQUFDLHVFQUFTO0FBRWhELDZCQUE2QixHQUM3QixJQUFJb0I7QUFDSixJQUFJO0lBQ0ZBLFNBQVNwQixtQkFBT0EsQ0FBQyxnQ0FBYTtBQUNoQyxvQkFBb0IsR0FDcEIsRUFBRSxPQUFNLENBRVI7QUFFQTs7Ozs7OztDQU9DLEdBQ0QsU0FBU3FCLDZCQUE4QkMsR0FBRyxFQUFFQyxTQUFTLEVBQUVDLE1BQU0sRUFBRUMsRUFBRSxFQUFFQyxXQUFXLEVBQUVDLE9BQU87SUFDckYsOEVBQThFO0lBQzlFLCtDQUErQztJQUMvQyxNQUFNQyxhQUFhTjtJQUVuQk0sV0FBV0MsUUFBUSxHQUFHUCxJQUFJTyxRQUFRLEtBQUssUUFBUSxVQUFVO0lBRXpELDhFQUE4RTtJQUM5RSx3RUFBd0U7SUFDeEUsNEVBQTRFO0lBQzVFLG1DQUFtQztJQUNuQyxNQUFNQyxVQUFVaEIsWUFBWTtRQUMxQmlCLFNBQVM7WUFBQ0g7U0FBVztRQUNyQko7UUFDQVEsZ0JBQWdCO1FBQ2hCQyxVQUFVO1FBQ1ZDLE1BQU07UUFDTkMsYUFBYTtRQUNiQyxPQUFPO1FBQ1BDLFVBQVU7SUFDWjtJQUVBLHdEQUF3RDtJQUN4RCxJQUFJVixRQUFRVyxPQUFPLEVBQUU7UUFDbkIsTUFBTUMsY0FBY3RCLGVBQWUsSUFBSUQsUUFBUVcsUUFBUVcsT0FBTztRQUU5RFIsUUFBUVMsV0FBVyxHQUFHQTtJQUN4QjtJQUVBLCtEQUErRDtJQUMvRCxnRUFBZ0U7SUFDaEUsdURBQXVEO0lBQ3ZELHFHQUFxRztJQUVyRywrREFBK0Q7SUFDL0QsOERBQThEO0lBQzlELHlCQUF5QjtJQUN6QixNQUFNQyxXQUFXcEIsT0FBT3FCLFdBQVcsQ0FBQyxJQUFJQyxRQUFRLENBQUM7SUFFakQseURBQXlEO0lBQ3pELGtCQUFrQjtJQUNsQlosUUFBUVMsV0FBVyxDQUFDSSxNQUFNLENBQUMscUJBQXFCSDtJQUVoRCx5REFBeUQ7SUFDekQsa0JBQWtCO0lBQ2xCVixRQUFRUyxXQUFXLENBQUNJLE1BQU0sQ0FBQyx5QkFBeUI7SUFFcEQsNkNBQTZDO0lBQzdDLDhEQUE4RDtJQUM5RCxXQUFXO0lBQ1gsS0FBSyxNQUFNZCxZQUFZTixVQUFXO1FBQ2hDTyxRQUFRUyxXQUFXLENBQUNJLE1BQU0sQ0FBQywwQkFBMEJkO0lBQ3ZEO0lBRUEsbURBQW1EO0lBQ25ELGtEQUFrRDtJQUNsRCwySUFBMkk7SUFDM0ksTUFBTWUsb0JBQW9CO0lBRTFCLGdFQUFnRTtJQUNoRSw2QkFBNkI7SUFDN0JkLFFBQVFTLFdBQVcsQ0FBQ0ksTUFBTSxDQUFDLDRCQUE0QkM7SUFFdkQsMkRBQTJEO0lBQzNELHdEQUF3RDtJQUN4RCxNQUFNQyxhQUFhOUIsU0FBUztRQUMxQmU7UUFDQWdCLGtCQUFrQjtRQUNsQkMsWUFBWXBCLFFBQVFvQixVQUFVO1FBQzlCQyxpQkFBaUJDLFFBQVE7WUFDdkIsOERBQThEO1lBQzlELG9DQUFvQztZQUNwQyxJQUFJQSxTQUFTQyxJQUFJLEtBQUssV0FBV0QsU0FBU0UsTUFBTSxLQUFLLEtBQUs7Z0JBQ3hENUMsd0JBQXdCa0IsSUFBSTtnQkFDNUI7WUFDRjtZQUVBLDhEQUE4RDtZQUM5RCwrREFBK0Q7WUFDL0QsNkRBQTZEO1lBQzdELG1EQUFtRDtZQUNuRCxJQUFJRixVQUFVNkIsTUFBTSxLQUFLLEtBQUssQ0FBQ0gsU0FBU1YsV0FBVyxDQUFDYyxHQUFHLENBQUMsMkJBQTJCO2dCQUNqRjlDLHdCQUF3QmtCLElBQUk7Z0JBQzVCO1lBQ0Y7WUFFQSxpRUFBaUU7WUFDakUsOERBQThEO1lBQzlELGdFQUFnRTtZQUNoRSw2REFBNkQ7WUFDN0Qsa0JBQWtCO1lBRWxCLHNFQUFzRTtZQUN0RSw4REFBOEQ7WUFDOUQsa0VBQWtFO1lBQ2xFLHNDQUFzQztZQUN0QyxJQUFJd0IsU0FBU1YsV0FBVyxDQUFDYyxHQUFHLENBQUMsWUFBWUMsa0JBQWtCLGFBQWE7Z0JBQ3RFL0Msd0JBQXdCa0IsSUFBSTtnQkFDNUI7WUFDRjtZQUVBLDhEQUE4RDtZQUM5RCxrRUFBa0U7WUFDbEUsc0VBQXNFO1lBQ3RFLDJDQUEyQztZQUMzQyxJQUFJd0IsU0FBU1YsV0FBVyxDQUFDYyxHQUFHLENBQUMsZUFBZUMsa0JBQWtCLFdBQVc7Z0JBQ3ZFL0Msd0JBQXdCa0IsSUFBSTtnQkFDNUI7WUFDRjtZQUVBLG9FQUFvRTtZQUNwRSxnRUFBZ0U7WUFDaEUsc0VBQXNFO1lBQ3RFLHVFQUF1RTtZQUN2RSwrREFBK0Q7WUFDL0QsOERBQThEO1lBQzlELGtCQUFrQjtZQUNsQixNQUFNOEIsY0FBY04sU0FBU1YsV0FBVyxDQUFDYyxHQUFHLENBQUM7WUFDN0MsTUFBTUcsU0FBU3BDLE9BQU9xQyxVQUFVLENBQUMsUUFBUUMsTUFBTSxDQUFDbEIsV0FBVzdDLEtBQUs2RCxNQUFNLENBQUM7WUFDdkUsSUFBSUQsZ0JBQWdCQyxRQUFRO2dCQUMxQmpELHdCQUF3QmtCLElBQUk7Z0JBQzVCO1lBQ0Y7WUFFQSxrRUFBa0U7WUFDbEUsbUVBQW1FO1lBQ25FLG9FQUFvRTtZQUNwRSxxRUFBcUU7WUFDckUsaUVBQWlFO1lBQ2pFLGlFQUFpRTtZQUNqRSxnQ0FBZ0M7WUFDaEMsTUFBTWtDLGVBQWVWLFNBQVNWLFdBQVcsQ0FBQ2MsR0FBRyxDQUFDO1lBQzlDLElBQUlPO1lBRUosSUFBSUQsaUJBQWlCLE1BQU07Z0JBQ3pCQyxhQUFhakQsZ0JBQWdCZ0Q7Z0JBRTdCLElBQUksQ0FBQ0MsV0FBV0MsR0FBRyxDQUFDLHVCQUF1QjtvQkFDekN0RCx3QkFBd0JrQixJQUFJO29CQUM1QjtnQkFDRjtZQUNGO1lBRUEsc0VBQXNFO1lBQ3RFLHVFQUF1RTtZQUN2RSx1RUFBdUU7WUFDdkUscUVBQXFFO1lBQ3JFLGdDQUFnQztZQUNoQyxNQUFNcUMsY0FBY2IsU0FBU1YsV0FBVyxDQUFDYyxHQUFHLENBQUM7WUFFN0MsSUFBSVMsZ0JBQWdCLE1BQU07Z0JBQ3hCLE1BQU1DLG1CQUFtQjdDLGVBQWUsMEJBQTBCWSxRQUFRUyxXQUFXO2dCQUVyRix1RUFBdUU7Z0JBQ3ZFLHdFQUF3RTtnQkFDeEUsc0VBQXNFO2dCQUN0RSx3RUFBd0U7Z0JBQ3hFLGtCQUFrQjtnQkFDbEIsSUFBSSxDQUFDd0IsaUJBQWlCQyxRQUFRLENBQUNGLGNBQWM7b0JBQzNDdkQsd0JBQXdCa0IsSUFBSTtvQkFDNUI7Z0JBQ0Y7WUFDRjtZQUVBd0IsU0FBU2dCLE1BQU0sQ0FBQ0MsRUFBRSxDQUFDLFFBQVFDO1lBQzNCbEIsU0FBU2dCLE1BQU0sQ0FBQ0MsRUFBRSxDQUFDLFNBQVNFO1lBQzVCbkIsU0FBU2dCLE1BQU0sQ0FBQ0MsRUFBRSxDQUFDLFNBQVNHO1lBRTVCLElBQUl6RCxTQUFTMEQsSUFBSSxDQUFDQyxjQUFjLEVBQUU7Z0JBQ2hDM0QsU0FBUzBELElBQUksQ0FBQ0UsT0FBTyxDQUFDO29CQUNwQkMsU0FBU3hCLFNBQVNnQixNQUFNLENBQUNRLE9BQU87b0JBQ2hDNUMsVUFBVWlDO29CQUNWRixZQUFZRDtnQkFDZDtZQUNGO1lBRUFqQyxZQUFZdUIsVUFBVVc7UUFDeEI7SUFDRjtJQUVBLE9BQU9mO0FBQ1Q7QUFFQSxTQUFTNkIseUJBQTBCakQsRUFBRSxFQUFFa0QsSUFBSSxFQUFFQyxNQUFNLEVBQUVDLGdCQUFnQjtJQUNuRSxJQUFJckUsVUFBVWlCLE9BQU9oQixTQUFTZ0IsS0FBSztJQUNqQyxxREFBcUQ7SUFDckQsY0FBYztJQUNoQixPQUFPLElBQUksQ0FBQ2YsY0FBY2UsS0FBSztRQUM3QixxREFBcUQ7UUFDckQsMkRBQTJEO1FBQzNELGtCQUFrQjtRQUNsQmxCLHdCQUF3QmtCLElBQUk7UUFDNUJBLEVBQUUsQ0FBQ3hCLFlBQVksR0FBR0wsT0FBT2tGLE9BQU87SUFDbEMsT0FBTyxJQUFJckQsRUFBRSxDQUFDdkIsV0FBVyxLQUFLTCxvQkFBb0JrRixRQUFRLEVBQUU7UUFDMUQsOERBQThEO1FBQzlELDZEQUE2RDtRQUM3RCx3QkFBd0I7UUFDeEIsK0RBQStEO1FBQy9ELGtDQUFrQztRQUNsQywyREFBMkQ7UUFDM0QsK0RBQStEO1FBQy9ELHdEQUF3RDtRQUN4RCx5REFBeUQ7UUFFekR0RCxFQUFFLENBQUN2QixXQUFXLEdBQUdMLG9CQUFvQm1GLFVBQVU7UUFFL0MsTUFBTUMsUUFBUSxJQUFJOUQ7UUFFbEIsNkRBQTZEO1FBQzdELGdDQUFnQztRQUVoQyx5REFBeUQ7UUFDekQsNkRBQTZEO1FBQzdELElBQUl3RCxTQUFTTyxhQUFhTixXQUFXTSxXQUFXO1lBQzlDRCxNQUFNRSxTQUFTLEdBQUdDLE9BQU9DLFdBQVcsQ0FBQztZQUNyQ0osTUFBTUUsU0FBUyxDQUFDRyxhQUFhLENBQUNYLE1BQU07UUFDdEMsT0FBTyxJQUFJQSxTQUFTTyxhQUFhTixXQUFXTSxXQUFXO1lBQ3JELHNEQUFzRDtZQUN0RCx1REFBdUQ7WUFDdkRELE1BQU1FLFNBQVMsR0FBR0MsT0FBT0MsV0FBVyxDQUFDLElBQUlSO1lBQ3pDSSxNQUFNRSxTQUFTLENBQUNHLGFBQWEsQ0FBQ1gsTUFBTTtZQUNwQyw4REFBOEQ7WUFDOURNLE1BQU1FLFNBQVMsQ0FBQ0ksS0FBSyxDQUFDWCxRQUFRLEdBQUc7UUFDbkMsT0FBTztZQUNMSyxNQUFNRSxTQUFTLEdBQUdyRjtRQUNwQjtRQUVBLG9DQUFvQyxHQUNwQyxNQUFNbUUsU0FBU3hDLEVBQUUsQ0FBQ3BCLFVBQVUsQ0FBQzRELE1BQU07UUFFbkNBLE9BQU9zQixLQUFLLENBQUNOLE1BQU1PLFdBQVcsQ0FBQ3pGLFFBQVEwRixLQUFLO1FBRTVDaEUsRUFBRSxDQUFDdkIsV0FBVyxHQUFHTCxvQkFBb0I2RixJQUFJO1FBRXpDLHFFQUFxRTtRQUNyRSxpRUFBaUU7UUFDakUsZ0RBQWdEO1FBQ2hEakUsRUFBRSxDQUFDeEIsWUFBWSxHQUFHTCxPQUFPa0YsT0FBTztJQUNsQyxPQUFPO1FBQ0wsWUFBWTtRQUNaLHlDQUF5QztRQUN6Q3JELEVBQUUsQ0FBQ3hCLFlBQVksR0FBR0wsT0FBT2tGLE9BQU87SUFDbEM7QUFDRjtBQUVBOztDQUVDLEdBQ0QsU0FBU1gsYUFBY3dCLEtBQUs7SUFDMUIsSUFBSSxDQUFDLElBQUksQ0FBQ2xFLEVBQUUsQ0FBQ3RCLFlBQVksQ0FBQ29GLEtBQUssQ0FBQ0ksUUFBUTtRQUN0QyxJQUFJLENBQUNDLEtBQUs7SUFDWjtBQUNGO0FBRUE7OztDQUdDLEdBQ0QsU0FBU3hCO0lBQ1AsTUFBTSxFQUFFM0MsRUFBRSxFQUFFLEdBQUcsSUFBSTtJQUNuQixNQUFNLEVBQUUsQ0FBQ3BCLFVBQVUsRUFBRTRDLFFBQVEsRUFBRSxHQUFHeEI7SUFFbEN3QixTQUFTZ0IsTUFBTSxDQUFDNEIsR0FBRyxDQUFDLFFBQVExQjtJQUM1QmxCLFNBQVNnQixNQUFNLENBQUM0QixHQUFHLENBQUMsU0FBU3pCO0lBQzdCbkIsU0FBU2dCLE1BQU0sQ0FBQzRCLEdBQUcsQ0FBQyxTQUFTeEI7SUFFN0IsNkNBQTZDO0lBQzdDLHNFQUFzRTtJQUN0RSx5Q0FBeUM7SUFDekMsTUFBTXlCLFdBQVdyRSxFQUFFLENBQUN2QixXQUFXLEtBQUtMLG9CQUFvQjZGLElBQUksSUFBSWpFLEVBQUUsQ0FBQ3JCLGVBQWU7SUFFbEYsSUFBSXVFLE9BQU87SUFDWCxJQUFJQyxTQUFTO0lBRWIsTUFBTW1CLFNBQVN0RSxFQUFFLENBQUN0QixZQUFZLENBQUM2RixXQUFXO0lBRTFDLElBQUlELFVBQVUsQ0FBQ0EsT0FBT0UsS0FBSyxFQUFFO1FBQzNCdEIsT0FBT29CLE9BQU9wQixJQUFJLElBQUk7UUFDdEJDLFNBQVNtQixPQUFPbkIsTUFBTTtJQUN4QixPQUFPLElBQUksQ0FBQ25ELEVBQUUsQ0FBQ3JCLGVBQWUsRUFBRTtRQUM5QixvQkFBb0I7UUFDcEIsdUVBQXVFO1FBQ3ZFLHVFQUF1RTtRQUN2RSxzRUFBc0U7UUFDdEUsUUFBUTtRQUNSdUUsT0FBTztJQUNUO0lBRUEsMkNBQTJDO0lBQzNDbEQsRUFBRSxDQUFDeEIsWUFBWSxHQUFHTCxPQUFPc0csTUFBTTtJQUUvQiwwREFBMEQ7SUFDMUQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw4QkFBOEI7SUFDOUIsT0FBTztJQUVQLHdEQUF3RDtJQUN4RCxtREFBbUQ7SUFDbkQsMERBQTBEO0lBQzFELDREQUE0RDtJQUM1RCx5REFBeUQ7SUFDekQsMkRBQTJEO0lBQzNELDBEQUEwRDtJQUMxRCxhQUFhO0lBQ2IseUJBQXlCO0lBQ3pCNUYsVUFBVSxTQUFTbUIsSUFBSSxDQUFDeUIsTUFBTWlELE9BQVMsSUFBSXRGLFdBQVdxQyxNQUFNaUQsT0FBTztRQUNqRUw7UUFBVW5CO1FBQU1DO0lBQ2xCO0lBRUEsSUFBSWhFLFNBQVN3RixLQUFLLENBQUM3QixjQUFjLEVBQUU7UUFDakMzRCxTQUFTd0YsS0FBSyxDQUFDNUIsT0FBTyxDQUFDO1lBQ3JCNkIsV0FBVzVFO1lBQ1hrRDtZQUNBQztRQUNGO0lBQ0Y7QUFDRjtBQUVBLFNBQVNQLGNBQWU0QixLQUFLO0lBQzNCLE1BQU0sRUFBRXhFLEVBQUUsRUFBRSxHQUFHLElBQUk7SUFFbkJBLEVBQUUsQ0FBQ3hCLFlBQVksR0FBR0wsT0FBT2tGLE9BQU87SUFFaEMsSUFBSWxFLFNBQVMwRixXQUFXLENBQUMvQixjQUFjLEVBQUU7UUFDdkMzRCxTQUFTMEYsV0FBVyxDQUFDOUIsT0FBTyxDQUFDeUI7SUFDL0I7SUFFQSxJQUFJLENBQUNNLE9BQU87QUFDZDtBQUVBQyxPQUFPQyxPQUFPLEdBQUc7SUFDZnBGO0lBQ0FxRDtBQUNGIiwic291cmNlcyI6WyJEOlxcSGVsaXhcXG5vZGVfbW9kdWxlc1xcdW5kaWNpXFxsaWJcXHdlYlxcd2Vic29ja2V0XFxjb25uZWN0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jb25zdCB7IHVpZCwgc3RhdGVzLCBzZW50Q2xvc2VGcmFtZVN0YXRlLCBlbXB0eUJ1ZmZlciwgb3Bjb2RlcyB9ID0gcmVxdWlyZSgnLi9jb25zdGFudHMnKVxuY29uc3Qge1xuICBrUmVhZHlTdGF0ZSxcbiAga1NlbnRDbG9zZSxcbiAga0J5dGVQYXJzZXIsXG4gIGtSZWNlaXZlZENsb3NlLFxuICBrUmVzcG9uc2Vcbn0gPSByZXF1aXJlKCcuL3N5bWJvbHMnKVxuY29uc3QgeyBmaXJlRXZlbnQsIGZhaWxXZWJzb2NrZXRDb25uZWN0aW9uLCBpc0Nsb3NpbmcsIGlzQ2xvc2VkLCBpc0VzdGFibGlzaGVkLCBwYXJzZUV4dGVuc2lvbnMgfSA9IHJlcXVpcmUoJy4vdXRpbCcpXG5jb25zdCB7IGNoYW5uZWxzIH0gPSByZXF1aXJlKCcuLi8uLi9jb3JlL2RpYWdub3N0aWNzJylcbmNvbnN0IHsgQ2xvc2VFdmVudCB9ID0gcmVxdWlyZSgnLi9ldmVudHMnKVxuY29uc3QgeyBtYWtlUmVxdWVzdCB9ID0gcmVxdWlyZSgnLi4vZmV0Y2gvcmVxdWVzdCcpXG5jb25zdCB7IGZldGNoaW5nIH0gPSByZXF1aXJlKCcuLi9mZXRjaC9pbmRleCcpXG5jb25zdCB7IEhlYWRlcnMsIGdldEhlYWRlcnNMaXN0IH0gPSByZXF1aXJlKCcuLi9mZXRjaC9oZWFkZXJzJylcbmNvbnN0IHsgZ2V0RGVjb2RlU3BsaXQgfSA9IHJlcXVpcmUoJy4uL2ZldGNoL3V0aWwnKVxuY29uc3QgeyBXZWJzb2NrZXRGcmFtZVNlbmQgfSA9IHJlcXVpcmUoJy4vZnJhbWUnKVxuXG4vKiogQHR5cGUge2ltcG9ydCgnY3J5cHRvJyl9ICovXG5sZXQgY3J5cHRvXG50cnkge1xuICBjcnlwdG8gPSByZXF1aXJlKCdub2RlOmNyeXB0bycpXG4vKiBjOCBpZ25vcmUgbmV4dCAzICovXG59IGNhdGNoIHtcblxufVxuXG4vKipcbiAqIEBzZWUgaHR0cHM6Ly93ZWJzb2NrZXRzLnNwZWMud2hhdHdnLm9yZy8jY29uY2VwdC13ZWJzb2NrZXQtZXN0YWJsaXNoXG4gKiBAcGFyYW0ge1VSTH0gdXJsXG4gKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gcHJvdG9jb2xzXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi93ZWJzb2NrZXQnKS5XZWJTb2NrZXR9IHdzXG4gKiBAcGFyYW0geyhyZXNwb25zZTogYW55LCBleHRlbnNpb25zOiBzdHJpbmdbXSB8IHVuZGVmaW5lZCkgPT4gdm9pZH0gb25Fc3RhYmxpc2hcbiAqIEBwYXJhbSB7UGFydGlhbDxpbXBvcnQoJy4uLy4uL3R5cGVzL3dlYnNvY2tldCcpLldlYlNvY2tldEluaXQ+fSBvcHRpb25zXG4gKi9cbmZ1bmN0aW9uIGVzdGFibGlzaFdlYlNvY2tldENvbm5lY3Rpb24gKHVybCwgcHJvdG9jb2xzLCBjbGllbnQsIHdzLCBvbkVzdGFibGlzaCwgb3B0aW9ucykge1xuICAvLyAxLiBMZXQgcmVxdWVzdFVSTCBiZSBhIGNvcHkgb2YgdXJsLCB3aXRoIGl0cyBzY2hlbWUgc2V0IHRvIFwiaHR0cFwiLCBpZiB1cmzigJlzXG4gIC8vICAgIHNjaGVtZSBpcyBcIndzXCIsIGFuZCB0byBcImh0dHBzXCIgb3RoZXJ3aXNlLlxuICBjb25zdCByZXF1ZXN0VVJMID0gdXJsXG5cbiAgcmVxdWVzdFVSTC5wcm90b2NvbCA9IHVybC5wcm90b2NvbCA9PT0gJ3dzOicgPyAnaHR0cDonIDogJ2h0dHBzOidcblxuICAvLyAyLiBMZXQgcmVxdWVzdCBiZSBhIG5ldyByZXF1ZXN0LCB3aG9zZSBVUkwgaXMgcmVxdWVzdFVSTCwgY2xpZW50IGlzIGNsaWVudCxcbiAgLy8gICAgc2VydmljZS13b3JrZXJzIG1vZGUgaXMgXCJub25lXCIsIHJlZmVycmVyIGlzIFwibm8tcmVmZXJyZXJcIiwgbW9kZSBpc1xuICAvLyAgICBcIndlYnNvY2tldFwiLCBjcmVkZW50aWFscyBtb2RlIGlzIFwiaW5jbHVkZVwiLCBjYWNoZSBtb2RlIGlzIFwibm8tc3RvcmVcIiAsXG4gIC8vICAgIGFuZCByZWRpcmVjdCBtb2RlIGlzIFwiZXJyb3JcIi5cbiAgY29uc3QgcmVxdWVzdCA9IG1ha2VSZXF1ZXN0KHtcbiAgICB1cmxMaXN0OiBbcmVxdWVzdFVSTF0sXG4gICAgY2xpZW50LFxuICAgIHNlcnZpY2VXb3JrZXJzOiAnbm9uZScsXG4gICAgcmVmZXJyZXI6ICduby1yZWZlcnJlcicsXG4gICAgbW9kZTogJ3dlYnNvY2tldCcsXG4gICAgY3JlZGVudGlhbHM6ICdpbmNsdWRlJyxcbiAgICBjYWNoZTogJ25vLXN0b3JlJyxcbiAgICByZWRpcmVjdDogJ2Vycm9yJ1xuICB9KVxuXG4gIC8vIE5vdGU6IHVuZGljaSBleHRlbnNpb24sIGFsbG93IHNldHRpbmcgY3VzdG9tIGhlYWRlcnMuXG4gIGlmIChvcHRpb25zLmhlYWRlcnMpIHtcbiAgICBjb25zdCBoZWFkZXJzTGlzdCA9IGdldEhlYWRlcnNMaXN0KG5ldyBIZWFkZXJzKG9wdGlvbnMuaGVhZGVycykpXG5cbiAgICByZXF1ZXN0LmhlYWRlcnNMaXN0ID0gaGVhZGVyc0xpc3RcbiAgfVxuXG4gIC8vIDMuIEFwcGVuZCAoYFVwZ3JhZGVgLCBgd2Vic29ja2V0YCkgdG8gcmVxdWVzdOKAmXMgaGVhZGVyIGxpc3QuXG4gIC8vIDQuIEFwcGVuZCAoYENvbm5lY3Rpb25gLCBgVXBncmFkZWApIHRvIHJlcXVlc3TigJlzIGhlYWRlciBsaXN0LlxuICAvLyBOb3RlOiBib3RoIG9mIHRoZXNlIGFyZSBoYW5kbGVkIGJ5IHVuZGljaSBjdXJyZW50bHkuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvdW5kaWNpL2Jsb2IvNjhjMjY5YzQxNDRjNDQ2ZjNmMTIyMDk1MTMzOGRhZWY0YTZiNWVjNC9saWIvY2xpZW50LmpzI0wxMzk3XG5cbiAgLy8gNS4gTGV0IGtleVZhbHVlIGJlIGEgbm9uY2UgY29uc2lzdGluZyBvZiBhIHJhbmRvbWx5IHNlbGVjdGVkXG4gIC8vICAgIDE2LWJ5dGUgdmFsdWUgdGhhdCBoYXMgYmVlbiBmb3JnaXZpbmctYmFzZTY0LWVuY29kZWQgYW5kXG4gIC8vICAgIGlzb21vcnBoaWMgZW5jb2RlZC5cbiAgY29uc3Qga2V5VmFsdWUgPSBjcnlwdG8ucmFuZG9tQnl0ZXMoMTYpLnRvU3RyaW5nKCdiYXNlNjQnKVxuXG4gIC8vIDYuIEFwcGVuZCAoYFNlYy1XZWJTb2NrZXQtS2V5YCwga2V5VmFsdWUpIHRvIHJlcXVlc3TigJlzXG4gIC8vICAgIGhlYWRlciBsaXN0LlxuICByZXF1ZXN0LmhlYWRlcnNMaXN0LmFwcGVuZCgnc2VjLXdlYnNvY2tldC1rZXknLCBrZXlWYWx1ZSlcblxuICAvLyA3LiBBcHBlbmQgKGBTZWMtV2ViU29ja2V0LVZlcnNpb25gLCBgMTNgKSB0byByZXF1ZXN04oCZc1xuICAvLyAgICBoZWFkZXIgbGlzdC5cbiAgcmVxdWVzdC5oZWFkZXJzTGlzdC5hcHBlbmQoJ3NlYy13ZWJzb2NrZXQtdmVyc2lvbicsICcxMycpXG5cbiAgLy8gOC4gRm9yIGVhY2ggcHJvdG9jb2wgaW4gcHJvdG9jb2xzLCBjb21iaW5lXG4gIC8vICAgIChgU2VjLVdlYlNvY2tldC1Qcm90b2NvbGAsIHByb3RvY29sKSBpbiByZXF1ZXN04oCZcyBoZWFkZXJcbiAgLy8gICAgbGlzdC5cbiAgZm9yIChjb25zdCBwcm90b2NvbCBvZiBwcm90b2NvbHMpIHtcbiAgICByZXF1ZXN0LmhlYWRlcnNMaXN0LmFwcGVuZCgnc2VjLXdlYnNvY2tldC1wcm90b2NvbCcsIHByb3RvY29sKVxuICB9XG5cbiAgLy8gOS4gTGV0IHBlcm1lc3NhZ2VEZWZsYXRlIGJlIGEgdXNlci1hZ2VudCBkZWZpbmVkXG4gIC8vICAgIFwicGVybWVzc2FnZS1kZWZsYXRlXCIgZXh0ZW5zaW9uIGhlYWRlciB2YWx1ZS5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvZ2Vja28tZGV2L2Jsb2IvY2U3ODIzNGY1ZTY1M2E1ZDM5MTY4MTNmZjk5MGYwNTM1MTAyMjdiYy9uZXR3ZXJrL3Byb3RvY29sL3dlYnNvY2tldC9XZWJTb2NrZXRDaGFubmVsLmNwcCNMMjY3M1xuICBjb25zdCBwZXJtZXNzYWdlRGVmbGF0ZSA9ICdwZXJtZXNzYWdlLWRlZmxhdGU7IGNsaWVudF9tYXhfd2luZG93X2JpdHMnXG5cbiAgLy8gMTAuIEFwcGVuZCAoYFNlYy1XZWJTb2NrZXQtRXh0ZW5zaW9uc2AsIHBlcm1lc3NhZ2VEZWZsYXRlKSB0b1xuICAvLyAgICAgcmVxdWVzdOKAmXMgaGVhZGVyIGxpc3QuXG4gIHJlcXVlc3QuaGVhZGVyc0xpc3QuYXBwZW5kKCdzZWMtd2Vic29ja2V0LWV4dGVuc2lvbnMnLCBwZXJtZXNzYWdlRGVmbGF0ZSlcblxuICAvLyAxMS4gRmV0Y2ggcmVxdWVzdCB3aXRoIHVzZVBhcmFsbGVsUXVldWUgc2V0IHRvIHRydWUsIGFuZFxuICAvLyAgICAgcHJvY2Vzc1Jlc3BvbnNlIGdpdmVuIHJlc3BvbnNlIGJlaW5nIHRoZXNlIHN0ZXBzOlxuICBjb25zdCBjb250cm9sbGVyID0gZmV0Y2hpbmcoe1xuICAgIHJlcXVlc3QsXG4gICAgdXNlUGFyYWxsZWxRdWV1ZTogdHJ1ZSxcbiAgICBkaXNwYXRjaGVyOiBvcHRpb25zLmRpc3BhdGNoZXIsXG4gICAgcHJvY2Vzc1Jlc3BvbnNlIChyZXNwb25zZSkge1xuICAgICAgLy8gMS4gSWYgcmVzcG9uc2UgaXMgYSBuZXR3b3JrIGVycm9yIG9yIGl0cyBzdGF0dXMgaXMgbm90IDEwMSxcbiAgICAgIC8vICAgIGZhaWwgdGhlIFdlYlNvY2tldCBjb25uZWN0aW9uLlxuICAgICAgaWYgKHJlc3BvbnNlLnR5cGUgPT09ICdlcnJvcicgfHwgcmVzcG9uc2Uuc3RhdHVzICE9PSAxMDEpIHtcbiAgICAgICAgZmFpbFdlYnNvY2tldENvbm5lY3Rpb24od3MsICdSZWNlaXZlZCBuZXR3b3JrIGVycm9yIG9yIG5vbi0xMDEgc3RhdHVzIGNvZGUuJylcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIC8vIDIuIElmIHByb3RvY29scyBpcyBub3QgdGhlIGVtcHR5IGxpc3QgYW5kIGV4dHJhY3RpbmcgaGVhZGVyXG4gICAgICAvLyAgICBsaXN0IHZhbHVlcyBnaXZlbiBgU2VjLVdlYlNvY2tldC1Qcm90b2NvbGAgYW5kIHJlc3BvbnNl4oCZc1xuICAgICAgLy8gICAgaGVhZGVyIGxpc3QgcmVzdWx0cyBpbiBudWxsLCBmYWlsdXJlLCBvciB0aGUgZW1wdHkgYnl0ZVxuICAgICAgLy8gICAgc2VxdWVuY2UsIHRoZW4gZmFpbCB0aGUgV2ViU29ja2V0IGNvbm5lY3Rpb24uXG4gICAgICBpZiAocHJvdG9jb2xzLmxlbmd0aCAhPT0gMCAmJiAhcmVzcG9uc2UuaGVhZGVyc0xpc3QuZ2V0KCdTZWMtV2ViU29ja2V0LVByb3RvY29sJykpIHtcbiAgICAgICAgZmFpbFdlYnNvY2tldENvbm5lY3Rpb24od3MsICdTZXJ2ZXIgZGlkIG5vdCByZXNwb25kIHdpdGggc2VudCBwcm90b2NvbHMuJylcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIC8vIDMuIEZvbGxvdyB0aGUgcmVxdWlyZW1lbnRzIHN0YXRlZCBzdGVwIDIgdG8gc3RlcCA2LCBpbmNsdXNpdmUsXG4gICAgICAvLyAgICBvZiB0aGUgbGFzdCBzZXQgb2Ygc3RlcHMgaW4gc2VjdGlvbiA0LjEgb2YgVGhlIFdlYlNvY2tldFxuICAgICAgLy8gICAgUHJvdG9jb2wgdG8gdmFsaWRhdGUgcmVzcG9uc2UuIFRoaXMgZWl0aGVyIHJlc3VsdHMgaW4gZmFpbFxuICAgICAgLy8gICAgdGhlIFdlYlNvY2tldCBjb25uZWN0aW9uIG9yIHRoZSBXZWJTb2NrZXQgY29ubmVjdGlvbiBpc1xuICAgICAgLy8gICAgZXN0YWJsaXNoZWQuXG5cbiAgICAgIC8vIDIuIElmIHRoZSByZXNwb25zZSBsYWNrcyBhbiB8VXBncmFkZXwgaGVhZGVyIGZpZWxkIG9yIHRoZSB8VXBncmFkZXxcbiAgICAgIC8vICAgIGhlYWRlciBmaWVsZCBjb250YWlucyBhIHZhbHVlIHRoYXQgaXMgbm90IGFuIEFTQ0lJIGNhc2UtXG4gICAgICAvLyAgICBpbnNlbnNpdGl2ZSBtYXRjaCBmb3IgdGhlIHZhbHVlIFwid2Vic29ja2V0XCIsIHRoZSBjbGllbnQgTVVTVFxuICAgICAgLy8gICAgX0ZhaWwgdGhlIFdlYlNvY2tldCBDb25uZWN0aW9uXy5cbiAgICAgIGlmIChyZXNwb25zZS5oZWFkZXJzTGlzdC5nZXQoJ1VwZ3JhZGUnKT8udG9Mb3dlckNhc2UoKSAhPT0gJ3dlYnNvY2tldCcpIHtcbiAgICAgICAgZmFpbFdlYnNvY2tldENvbm5lY3Rpb24od3MsICdTZXJ2ZXIgZGlkIG5vdCBzZXQgVXBncmFkZSBoZWFkZXIgdG8gXCJ3ZWJzb2NrZXRcIi4nKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgLy8gMy4gSWYgdGhlIHJlc3BvbnNlIGxhY2tzIGEgfENvbm5lY3Rpb258IGhlYWRlciBmaWVsZCBvciB0aGVcbiAgICAgIC8vICAgIHxDb25uZWN0aW9ufCBoZWFkZXIgZmllbGQgZG9lc24ndCBjb250YWluIGEgdG9rZW4gdGhhdCBpcyBhblxuICAgICAgLy8gICAgQVNDSUkgY2FzZS1pbnNlbnNpdGl2ZSBtYXRjaCBmb3IgdGhlIHZhbHVlIFwiVXBncmFkZVwiLCB0aGUgY2xpZW50XG4gICAgICAvLyAgICBNVVNUIF9GYWlsIHRoZSBXZWJTb2NrZXQgQ29ubmVjdGlvbl8uXG4gICAgICBpZiAocmVzcG9uc2UuaGVhZGVyc0xpc3QuZ2V0KCdDb25uZWN0aW9uJyk/LnRvTG93ZXJDYXNlKCkgIT09ICd1cGdyYWRlJykge1xuICAgICAgICBmYWlsV2Vic29ja2V0Q29ubmVjdGlvbih3cywgJ1NlcnZlciBkaWQgbm90IHNldCBDb25uZWN0aW9uIGhlYWRlciB0byBcInVwZ3JhZGVcIi4nKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgLy8gNC4gSWYgdGhlIHJlc3BvbnNlIGxhY2tzIGEgfFNlYy1XZWJTb2NrZXQtQWNjZXB0fCBoZWFkZXIgZmllbGQgb3JcbiAgICAgIC8vICAgIHRoZSB8U2VjLVdlYlNvY2tldC1BY2NlcHR8IGNvbnRhaW5zIGEgdmFsdWUgb3RoZXIgdGhhbiB0aGVcbiAgICAgIC8vICAgIGJhc2U2NC1lbmNvZGVkIFNIQS0xIG9mIHRoZSBjb25jYXRlbmF0aW9uIG9mIHRoZSB8U2VjLVdlYlNvY2tldC1cbiAgICAgIC8vICAgIEtleXwgKGFzIGEgc3RyaW5nLCBub3QgYmFzZTY0LWRlY29kZWQpIHdpdGggdGhlIHN0cmluZyBcIjI1OEVBRkE1LVxuICAgICAgLy8gICAgRTkxNC00N0RBLTk1Q0EtQzVBQjBEQzg1QjExXCIgYnV0IGlnbm9yaW5nIGFueSBsZWFkaW5nIGFuZFxuICAgICAgLy8gICAgdHJhaWxpbmcgd2hpdGVzcGFjZSwgdGhlIGNsaWVudCBNVVNUIF9GYWlsIHRoZSBXZWJTb2NrZXRcbiAgICAgIC8vICAgIENvbm5lY3Rpb25fLlxuICAgICAgY29uc3Qgc2VjV1NBY2NlcHQgPSByZXNwb25zZS5oZWFkZXJzTGlzdC5nZXQoJ1NlYy1XZWJTb2NrZXQtQWNjZXB0JylcbiAgICAgIGNvbnN0IGRpZ2VzdCA9IGNyeXB0by5jcmVhdGVIYXNoKCdzaGExJykudXBkYXRlKGtleVZhbHVlICsgdWlkKS5kaWdlc3QoJ2Jhc2U2NCcpXG4gICAgICBpZiAoc2VjV1NBY2NlcHQgIT09IGRpZ2VzdCkge1xuICAgICAgICBmYWlsV2Vic29ja2V0Q29ubmVjdGlvbih3cywgJ0luY29ycmVjdCBoYXNoIHJlY2VpdmVkIGluIFNlYy1XZWJTb2NrZXQtQWNjZXB0IGhlYWRlci4nKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgLy8gNS4gSWYgdGhlIHJlc3BvbnNlIGluY2x1ZGVzIGEgfFNlYy1XZWJTb2NrZXQtRXh0ZW5zaW9uc3wgaGVhZGVyXG4gICAgICAvLyAgICBmaWVsZCBhbmQgdGhpcyBoZWFkZXIgZmllbGQgaW5kaWNhdGVzIHRoZSB1c2Ugb2YgYW4gZXh0ZW5zaW9uXG4gICAgICAvLyAgICB0aGF0IHdhcyBub3QgcHJlc2VudCBpbiB0aGUgY2xpZW50J3MgaGFuZHNoYWtlICh0aGUgc2VydmVyIGhhc1xuICAgICAgLy8gICAgaW5kaWNhdGVkIGFuIGV4dGVuc2lvbiBub3QgcmVxdWVzdGVkIGJ5IHRoZSBjbGllbnQpLCB0aGUgY2xpZW50XG4gICAgICAvLyAgICBNVVNUIF9GYWlsIHRoZSBXZWJTb2NrZXQgQ29ubmVjdGlvbl8uICAoVGhlIHBhcnNpbmcgb2YgdGhpc1xuICAgICAgLy8gICAgaGVhZGVyIGZpZWxkIHRvIGRldGVybWluZSB3aGljaCBleHRlbnNpb25zIGFyZSByZXF1ZXN0ZWQgaXNcbiAgICAgIC8vICAgIGRpc2N1c3NlZCBpbiBTZWN0aW9uIDkuMS4pXG4gICAgICBjb25zdCBzZWNFeHRlbnNpb24gPSByZXNwb25zZS5oZWFkZXJzTGlzdC5nZXQoJ1NlYy1XZWJTb2NrZXQtRXh0ZW5zaW9ucycpXG4gICAgICBsZXQgZXh0ZW5zaW9uc1xuXG4gICAgICBpZiAoc2VjRXh0ZW5zaW9uICE9PSBudWxsKSB7XG4gICAgICAgIGV4dGVuc2lvbnMgPSBwYXJzZUV4dGVuc2lvbnMoc2VjRXh0ZW5zaW9uKVxuXG4gICAgICAgIGlmICghZXh0ZW5zaW9ucy5oYXMoJ3Blcm1lc3NhZ2UtZGVmbGF0ZScpKSB7XG4gICAgICAgICAgZmFpbFdlYnNvY2tldENvbm5lY3Rpb24od3MsICdTZWMtV2ViU29ja2V0LUV4dGVuc2lvbnMgaGVhZGVyIGRvZXMgbm90IG1hdGNoLicpXG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gNi4gSWYgdGhlIHJlc3BvbnNlIGluY2x1ZGVzIGEgfFNlYy1XZWJTb2NrZXQtUHJvdG9jb2x8IGhlYWRlciBmaWVsZFxuICAgICAgLy8gICAgYW5kIHRoaXMgaGVhZGVyIGZpZWxkIGluZGljYXRlcyB0aGUgdXNlIG9mIGEgc3VicHJvdG9jb2wgdGhhdCB3YXNcbiAgICAgIC8vICAgIG5vdCBwcmVzZW50IGluIHRoZSBjbGllbnQncyBoYW5kc2hha2UgKHRoZSBzZXJ2ZXIgaGFzIGluZGljYXRlZCBhXG4gICAgICAvLyAgICBzdWJwcm90b2NvbCBub3QgcmVxdWVzdGVkIGJ5IHRoZSBjbGllbnQpLCB0aGUgY2xpZW50IE1VU1QgX0ZhaWxcbiAgICAgIC8vICAgIHRoZSBXZWJTb2NrZXQgQ29ubmVjdGlvbl8uXG4gICAgICBjb25zdCBzZWNQcm90b2NvbCA9IHJlc3BvbnNlLmhlYWRlcnNMaXN0LmdldCgnU2VjLVdlYlNvY2tldC1Qcm90b2NvbCcpXG5cbiAgICAgIGlmIChzZWNQcm90b2NvbCAhPT0gbnVsbCkge1xuICAgICAgICBjb25zdCByZXF1ZXN0UHJvdG9jb2xzID0gZ2V0RGVjb2RlU3BsaXQoJ3NlYy13ZWJzb2NrZXQtcHJvdG9jb2wnLCByZXF1ZXN0LmhlYWRlcnNMaXN0KVxuXG4gICAgICAgIC8vIFRoZSBjbGllbnQgY2FuIHJlcXVlc3QgdGhhdCB0aGUgc2VydmVyIHVzZSBhIHNwZWNpZmljIHN1YnByb3RvY29sIGJ5XG4gICAgICAgIC8vIGluY2x1ZGluZyB0aGUgfFNlYy1XZWJTb2NrZXQtUHJvdG9jb2x8IGZpZWxkIGluIGl0cyBoYW5kc2hha2UuICBJZiBpdFxuICAgICAgICAvLyBpcyBzcGVjaWZpZWQsIHRoZSBzZXJ2ZXIgbmVlZHMgdG8gaW5jbHVkZSB0aGUgc2FtZSBmaWVsZCBhbmQgb25lIG9mXG4gICAgICAgIC8vIHRoZSBzZWxlY3RlZCBzdWJwcm90b2NvbCB2YWx1ZXMgaW4gaXRzIHJlc3BvbnNlIGZvciB0aGUgY29ubmVjdGlvbiB0b1xuICAgICAgICAvLyBiZSBlc3RhYmxpc2hlZC5cbiAgICAgICAgaWYgKCFyZXF1ZXN0UHJvdG9jb2xzLmluY2x1ZGVzKHNlY1Byb3RvY29sKSkge1xuICAgICAgICAgIGZhaWxXZWJzb2NrZXRDb25uZWN0aW9uKHdzLCAnUHJvdG9jb2wgd2FzIG5vdCBzZXQgaW4gdGhlIG9wZW5pbmcgaGFuZHNoYWtlLicpXG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmVzcG9uc2Uuc29ja2V0Lm9uKCdkYXRhJywgb25Tb2NrZXREYXRhKVxuICAgICAgcmVzcG9uc2Uuc29ja2V0Lm9uKCdjbG9zZScsIG9uU29ja2V0Q2xvc2UpXG4gICAgICByZXNwb25zZS5zb2NrZXQub24oJ2Vycm9yJywgb25Tb2NrZXRFcnJvcilcblxuICAgICAgaWYgKGNoYW5uZWxzLm9wZW4uaGFzU3Vic2NyaWJlcnMpIHtcbiAgICAgICAgY2hhbm5lbHMub3Blbi5wdWJsaXNoKHtcbiAgICAgICAgICBhZGRyZXNzOiByZXNwb25zZS5zb2NrZXQuYWRkcmVzcygpLFxuICAgICAgICAgIHByb3RvY29sOiBzZWNQcm90b2NvbCxcbiAgICAgICAgICBleHRlbnNpb25zOiBzZWNFeHRlbnNpb25cbiAgICAgICAgfSlcbiAgICAgIH1cblxuICAgICAgb25Fc3RhYmxpc2gocmVzcG9uc2UsIGV4dGVuc2lvbnMpXG4gICAgfVxuICB9KVxuXG4gIHJldHVybiBjb250cm9sbGVyXG59XG5cbmZ1bmN0aW9uIGNsb3NlV2ViU29ja2V0Q29ubmVjdGlvbiAod3MsIGNvZGUsIHJlYXNvbiwgcmVhc29uQnl0ZUxlbmd0aCkge1xuICBpZiAoaXNDbG9zaW5nKHdzKSB8fCBpc0Nsb3NlZCh3cykpIHtcbiAgICAvLyBJZiB0aGlzJ3MgcmVhZHkgc3RhdGUgaXMgQ0xPU0lORyAoMikgb3IgQ0xPU0VEICgzKVxuICAgIC8vIERvIG5vdGhpbmcuXG4gIH0gZWxzZSBpZiAoIWlzRXN0YWJsaXNoZWQod3MpKSB7XG4gICAgLy8gSWYgdGhlIFdlYlNvY2tldCBjb25uZWN0aW9uIGlzIG5vdCB5ZXQgZXN0YWJsaXNoZWRcbiAgICAvLyBGYWlsIHRoZSBXZWJTb2NrZXQgY29ubmVjdGlvbiBhbmQgc2V0IHRoaXMncyByZWFkeSBzdGF0ZVxuICAgIC8vIHRvIENMT1NJTkcgKDIpLlxuICAgIGZhaWxXZWJzb2NrZXRDb25uZWN0aW9uKHdzLCAnQ29ubmVjdGlvbiB3YXMgY2xvc2VkIGJlZm9yZSBpdCB3YXMgZXN0YWJsaXNoZWQuJylcbiAgICB3c1trUmVhZHlTdGF0ZV0gPSBzdGF0ZXMuQ0xPU0lOR1xuICB9IGVsc2UgaWYgKHdzW2tTZW50Q2xvc2VdID09PSBzZW50Q2xvc2VGcmFtZVN0YXRlLk5PVF9TRU5UKSB7XG4gICAgLy8gSWYgdGhlIFdlYlNvY2tldCBjbG9zaW5nIGhhbmRzaGFrZSBoYXMgbm90IHlldCBiZWVuIHN0YXJ0ZWRcbiAgICAvLyBTdGFydCB0aGUgV2ViU29ja2V0IGNsb3NpbmcgaGFuZHNoYWtlIGFuZCBzZXQgdGhpcydzIHJlYWR5XG4gICAgLy8gc3RhdGUgdG8gQ0xPU0lORyAoMikuXG4gICAgLy8gLSBJZiBuZWl0aGVyIGNvZGUgbm9yIHJlYXNvbiBpcyBwcmVzZW50LCB0aGUgV2ViU29ja2V0IENsb3NlXG4gICAgLy8gICBtZXNzYWdlIG11c3Qgbm90IGhhdmUgYSBib2R5LlxuICAgIC8vIC0gSWYgY29kZSBpcyBwcmVzZW50LCB0aGVuIHRoZSBzdGF0dXMgY29kZSB0byB1c2UgaW4gdGhlXG4gICAgLy8gICBXZWJTb2NrZXQgQ2xvc2UgbWVzc2FnZSBtdXN0IGJlIHRoZSBpbnRlZ2VyIGdpdmVuIGJ5IGNvZGUuXG4gICAgLy8gLSBJZiByZWFzb24gaXMgYWxzbyBwcmVzZW50LCB0aGVuIHJlYXNvbkJ5dGVzIG11c3QgYmVcbiAgICAvLyAgIHByb3ZpZGVkIGluIHRoZSBDbG9zZSBtZXNzYWdlIGFmdGVyIHRoZSBzdGF0dXMgY29kZS5cblxuICAgIHdzW2tTZW50Q2xvc2VdID0gc2VudENsb3NlRnJhbWVTdGF0ZS5QUk9DRVNTSU5HXG5cbiAgICBjb25zdCBmcmFtZSA9IG5ldyBXZWJzb2NrZXRGcmFtZVNlbmQoKVxuXG4gICAgLy8gSWYgbmVpdGhlciBjb2RlIG5vciByZWFzb24gaXMgcHJlc2VudCwgdGhlIFdlYlNvY2tldCBDbG9zZVxuICAgIC8vIG1lc3NhZ2UgbXVzdCBub3QgaGF2ZSBhIGJvZHkuXG5cbiAgICAvLyBJZiBjb2RlIGlzIHByZXNlbnQsIHRoZW4gdGhlIHN0YXR1cyBjb2RlIHRvIHVzZSBpbiB0aGVcbiAgICAvLyBXZWJTb2NrZXQgQ2xvc2UgbWVzc2FnZSBtdXN0IGJlIHRoZSBpbnRlZ2VyIGdpdmVuIGJ5IGNvZGUuXG4gICAgaWYgKGNvZGUgIT09IHVuZGVmaW5lZCAmJiByZWFzb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgZnJhbWUuZnJhbWVEYXRhID0gQnVmZmVyLmFsbG9jVW5zYWZlKDIpXG4gICAgICBmcmFtZS5mcmFtZURhdGEud3JpdGVVSW50MTZCRShjb2RlLCAwKVxuICAgIH0gZWxzZSBpZiAoY29kZSAhPT0gdW5kZWZpbmVkICYmIHJlYXNvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBJZiByZWFzb24gaXMgYWxzbyBwcmVzZW50LCB0aGVuIHJlYXNvbkJ5dGVzIG11c3QgYmVcbiAgICAgIC8vIHByb3ZpZGVkIGluIHRoZSBDbG9zZSBtZXNzYWdlIGFmdGVyIHRoZSBzdGF0dXMgY29kZS5cbiAgICAgIGZyYW1lLmZyYW1lRGF0YSA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgyICsgcmVhc29uQnl0ZUxlbmd0aClcbiAgICAgIGZyYW1lLmZyYW1lRGF0YS53cml0ZVVJbnQxNkJFKGNvZGUsIDApXG4gICAgICAvLyB0aGUgYm9keSBNQVkgY29udGFpbiBVVEYtOC1lbmNvZGVkIGRhdGEgd2l0aCB2YWx1ZSAvcmVhc29uL1xuICAgICAgZnJhbWUuZnJhbWVEYXRhLndyaXRlKHJlYXNvbiwgMiwgJ3V0Zi04JylcbiAgICB9IGVsc2Uge1xuICAgICAgZnJhbWUuZnJhbWVEYXRhID0gZW1wdHlCdWZmZXJcbiAgICB9XG5cbiAgICAvKiogQHR5cGUge2ltcG9ydCgnc3RyZWFtJykuRHVwbGV4fSAqL1xuICAgIGNvbnN0IHNvY2tldCA9IHdzW2tSZXNwb25zZV0uc29ja2V0XG5cbiAgICBzb2NrZXQud3JpdGUoZnJhbWUuY3JlYXRlRnJhbWUob3Bjb2Rlcy5DTE9TRSkpXG5cbiAgICB3c1trU2VudENsb3NlXSA9IHNlbnRDbG9zZUZyYW1lU3RhdGUuU0VOVFxuXG4gICAgLy8gVXBvbiBlaXRoZXIgc2VuZGluZyBvciByZWNlaXZpbmcgYSBDbG9zZSBjb250cm9sIGZyYW1lLCBpdCBpcyBzYWlkXG4gICAgLy8gdGhhdCBfVGhlIFdlYlNvY2tldCBDbG9zaW5nIEhhbmRzaGFrZSBpcyBTdGFydGVkXyBhbmQgdGhhdCB0aGVcbiAgICAvLyBXZWJTb2NrZXQgY29ubmVjdGlvbiBpcyBpbiB0aGUgQ0xPU0lORyBzdGF0ZS5cbiAgICB3c1trUmVhZHlTdGF0ZV0gPSBzdGF0ZXMuQ0xPU0lOR1xuICB9IGVsc2Uge1xuICAgIC8vIE90aGVyd2lzZVxuICAgIC8vIFNldCB0aGlzJ3MgcmVhZHkgc3RhdGUgdG8gQ0xPU0lORyAoMikuXG4gICAgd3Nba1JlYWR5U3RhdGVdID0gc3RhdGVzLkNMT1NJTkdcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7QnVmZmVyfSBjaHVua1xuICovXG5mdW5jdGlvbiBvblNvY2tldERhdGEgKGNodW5rKSB7XG4gIGlmICghdGhpcy53c1trQnl0ZVBhcnNlcl0ud3JpdGUoY2h1bmspKSB7XG4gICAgdGhpcy5wYXVzZSgpXG4gIH1cbn1cblxuLyoqXG4gKiBAc2VlIGh0dHBzOi8vd2Vic29ja2V0cy5zcGVjLndoYXR3Zy5vcmcvI2ZlZWRiYWNrLWZyb20tdGhlLXByb3RvY29sXG4gKiBAc2VlIGh0dHBzOi8vZGF0YXRyYWNrZXIuaWV0Zi5vcmcvZG9jL2h0bWwvcmZjNjQ1NSNzZWN0aW9uLTcuMS40XG4gKi9cbmZ1bmN0aW9uIG9uU29ja2V0Q2xvc2UgKCkge1xuICBjb25zdCB7IHdzIH0gPSB0aGlzXG4gIGNvbnN0IHsgW2tSZXNwb25zZV06IHJlc3BvbnNlIH0gPSB3c1xuXG4gIHJlc3BvbnNlLnNvY2tldC5vZmYoJ2RhdGEnLCBvblNvY2tldERhdGEpXG4gIHJlc3BvbnNlLnNvY2tldC5vZmYoJ2Nsb3NlJywgb25Tb2NrZXRDbG9zZSlcbiAgcmVzcG9uc2Uuc29ja2V0Lm9mZignZXJyb3InLCBvblNvY2tldEVycm9yKVxuXG4gIC8vIElmIHRoZSBUQ1AgY29ubmVjdGlvbiB3YXMgY2xvc2VkIGFmdGVyIHRoZVxuICAvLyBXZWJTb2NrZXQgY2xvc2luZyBoYW5kc2hha2Ugd2FzIGNvbXBsZXRlZCwgdGhlIFdlYlNvY2tldCBjb25uZWN0aW9uXG4gIC8vIGlzIHNhaWQgdG8gaGF2ZSBiZWVuIGNsb3NlZCBfY2xlYW5seV8uXG4gIGNvbnN0IHdhc0NsZWFuID0gd3Nba1NlbnRDbG9zZV0gPT09IHNlbnRDbG9zZUZyYW1lU3RhdGUuU0VOVCAmJiB3c1trUmVjZWl2ZWRDbG9zZV1cblxuICBsZXQgY29kZSA9IDEwMDVcbiAgbGV0IHJlYXNvbiA9ICcnXG5cbiAgY29uc3QgcmVzdWx0ID0gd3Nba0J5dGVQYXJzZXJdLmNsb3NpbmdJbmZvXG5cbiAgaWYgKHJlc3VsdCAmJiAhcmVzdWx0LmVycm9yKSB7XG4gICAgY29kZSA9IHJlc3VsdC5jb2RlID8/IDEwMDVcbiAgICByZWFzb24gPSByZXN1bHQucmVhc29uXG4gIH0gZWxzZSBpZiAoIXdzW2tSZWNlaXZlZENsb3NlXSkge1xuICAgIC8vIElmIF9UaGUgV2ViU29ja2V0XG4gICAgLy8gQ29ubmVjdGlvbiBpcyBDbG9zZWRfIGFuZCBubyBDbG9zZSBjb250cm9sIGZyYW1lIHdhcyByZWNlaXZlZCBieSB0aGVcbiAgICAvLyBlbmRwb2ludCAoc3VjaCBhcyBjb3VsZCBvY2N1ciBpZiB0aGUgdW5kZXJseWluZyB0cmFuc3BvcnQgY29ubmVjdGlvblxuICAgIC8vIGlzIGxvc3QpLCBfVGhlIFdlYlNvY2tldCBDb25uZWN0aW9uIENsb3NlIENvZGVfIGlzIGNvbnNpZGVyZWQgdG8gYmVcbiAgICAvLyAxMDA2LlxuICAgIGNvZGUgPSAxMDA2XG4gIH1cblxuICAvLyAxLiBDaGFuZ2UgdGhlIHJlYWR5IHN0YXRlIHRvIENMT1NFRCAoMykuXG4gIHdzW2tSZWFkeVN0YXRlXSA9IHN0YXRlcy5DTE9TRURcblxuICAvLyAyLiBJZiB0aGUgdXNlciBhZ2VudCB3YXMgcmVxdWlyZWQgdG8gZmFpbCB0aGUgV2ViU29ja2V0XG4gIC8vICAgIGNvbm5lY3Rpb24sIG9yIGlmIHRoZSBXZWJTb2NrZXQgY29ubmVjdGlvbiB3YXMgY2xvc2VkXG4gIC8vICAgIGFmdGVyIGJlaW5nIGZsYWdnZWQgYXMgZnVsbCwgZmlyZSBhbiBldmVudCBuYW1lZCBlcnJvclxuICAvLyAgICBhdCB0aGUgV2ViU29ja2V0IG9iamVjdC5cbiAgLy8gVE9ET1xuXG4gIC8vIDMuIEZpcmUgYW4gZXZlbnQgbmFtZWQgY2xvc2UgYXQgdGhlIFdlYlNvY2tldCBvYmplY3QsXG4gIC8vICAgIHVzaW5nIENsb3NlRXZlbnQsIHdpdGggdGhlIHdhc0NsZWFuIGF0dHJpYnV0ZVxuICAvLyAgICBpbml0aWFsaXplZCB0byB0cnVlIGlmIHRoZSBjb25uZWN0aW9uIGNsb3NlZCBjbGVhbmx5XG4gIC8vICAgIGFuZCBmYWxzZSBvdGhlcndpc2UsIHRoZSBjb2RlIGF0dHJpYnV0ZSBpbml0aWFsaXplZCB0b1xuICAvLyAgICB0aGUgV2ViU29ja2V0IGNvbm5lY3Rpb24gY2xvc2UgY29kZSwgYW5kIHRoZSByZWFzb25cbiAgLy8gICAgYXR0cmlidXRlIGluaXRpYWxpemVkIHRvIHRoZSByZXN1bHQgb2YgYXBwbHlpbmcgVVRGLThcbiAgLy8gICAgZGVjb2RlIHdpdGhvdXQgQk9NIHRvIHRoZSBXZWJTb2NrZXQgY29ubmVjdGlvbiBjbG9zZVxuICAvLyAgICByZWFzb24uXG4gIC8vIFRPRE86IHByb2Nlc3MubmV4dFRpY2tcbiAgZmlyZUV2ZW50KCdjbG9zZScsIHdzLCAodHlwZSwgaW5pdCkgPT4gbmV3IENsb3NlRXZlbnQodHlwZSwgaW5pdCksIHtcbiAgICB3YXNDbGVhbiwgY29kZSwgcmVhc29uXG4gIH0pXG5cbiAgaWYgKGNoYW5uZWxzLmNsb3NlLmhhc1N1YnNjcmliZXJzKSB7XG4gICAgY2hhbm5lbHMuY2xvc2UucHVibGlzaCh7XG4gICAgICB3ZWJzb2NrZXQ6IHdzLFxuICAgICAgY29kZSxcbiAgICAgIHJlYXNvblxuICAgIH0pXG4gIH1cbn1cblxuZnVuY3Rpb24gb25Tb2NrZXRFcnJvciAoZXJyb3IpIHtcbiAgY29uc3QgeyB3cyB9ID0gdGhpc1xuXG4gIHdzW2tSZWFkeVN0YXRlXSA9IHN0YXRlcy5DTE9TSU5HXG5cbiAgaWYgKGNoYW5uZWxzLnNvY2tldEVycm9yLmhhc1N1YnNjcmliZXJzKSB7XG4gICAgY2hhbm5lbHMuc29ja2V0RXJyb3IucHVibGlzaChlcnJvcilcbiAgfVxuXG4gIHRoaXMuZGVzdHJveSgpXG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBlc3RhYmxpc2hXZWJTb2NrZXRDb25uZWN0aW9uLFxuICBjbG9zZVdlYlNvY2tldENvbm5lY3Rpb25cbn1cbiJdLCJuYW1lcyI6WyJ1aWQiLCJzdGF0ZXMiLCJzZW50Q2xvc2VGcmFtZVN0YXRlIiwiZW1wdHlCdWZmZXIiLCJvcGNvZGVzIiwicmVxdWlyZSIsImtSZWFkeVN0YXRlIiwia1NlbnRDbG9zZSIsImtCeXRlUGFyc2VyIiwia1JlY2VpdmVkQ2xvc2UiLCJrUmVzcG9uc2UiLCJmaXJlRXZlbnQiLCJmYWlsV2Vic29ja2V0Q29ubmVjdGlvbiIsImlzQ2xvc2luZyIsImlzQ2xvc2VkIiwiaXNFc3RhYmxpc2hlZCIsInBhcnNlRXh0ZW5zaW9ucyIsImNoYW5uZWxzIiwiQ2xvc2VFdmVudCIsIm1ha2VSZXF1ZXN0IiwiZmV0Y2hpbmciLCJIZWFkZXJzIiwiZ2V0SGVhZGVyc0xpc3QiLCJnZXREZWNvZGVTcGxpdCIsIldlYnNvY2tldEZyYW1lU2VuZCIsImNyeXB0byIsImVzdGFibGlzaFdlYlNvY2tldENvbm5lY3Rpb24iLCJ1cmwiLCJwcm90b2NvbHMiLCJjbGllbnQiLCJ3cyIsIm9uRXN0YWJsaXNoIiwib3B0aW9ucyIsInJlcXVlc3RVUkwiLCJwcm90b2NvbCIsInJlcXVlc3QiLCJ1cmxMaXN0Iiwic2VydmljZVdvcmtlcnMiLCJyZWZlcnJlciIsIm1vZGUiLCJjcmVkZW50aWFscyIsImNhY2hlIiwicmVkaXJlY3QiLCJoZWFkZXJzIiwiaGVhZGVyc0xpc3QiLCJrZXlWYWx1ZSIsInJhbmRvbUJ5dGVzIiwidG9TdHJpbmciLCJhcHBlbmQiLCJwZXJtZXNzYWdlRGVmbGF0ZSIsImNvbnRyb2xsZXIiLCJ1c2VQYXJhbGxlbFF1ZXVlIiwiZGlzcGF0Y2hlciIsInByb2Nlc3NSZXNwb25zZSIsInJlc3BvbnNlIiwidHlwZSIsInN0YXR1cyIsImxlbmd0aCIsImdldCIsInRvTG93ZXJDYXNlIiwic2VjV1NBY2NlcHQiLCJkaWdlc3QiLCJjcmVhdGVIYXNoIiwidXBkYXRlIiwic2VjRXh0ZW5zaW9uIiwiZXh0ZW5zaW9ucyIsImhhcyIsInNlY1Byb3RvY29sIiwicmVxdWVzdFByb3RvY29scyIsImluY2x1ZGVzIiwic29ja2V0Iiwib24iLCJvblNvY2tldERhdGEiLCJvblNvY2tldENsb3NlIiwib25Tb2NrZXRFcnJvciIsIm9wZW4iLCJoYXNTdWJzY3JpYmVycyIsInB1Ymxpc2giLCJhZGRyZXNzIiwiY2xvc2VXZWJTb2NrZXRDb25uZWN0aW9uIiwiY29kZSIsInJlYXNvbiIsInJlYXNvbkJ5dGVMZW5ndGgiLCJDTE9TSU5HIiwiTk9UX1NFTlQiLCJQUk9DRVNTSU5HIiwiZnJhbWUiLCJ1bmRlZmluZWQiLCJmcmFtZURhdGEiLCJCdWZmZXIiLCJhbGxvY1Vuc2FmZSIsIndyaXRlVUludDE2QkUiLCJ3cml0ZSIsImNyZWF0ZUZyYW1lIiwiQ0xPU0UiLCJTRU5UIiwiY2h1bmsiLCJwYXVzZSIsIm9mZiIsIndhc0NsZWFuIiwicmVzdWx0IiwiY2xvc2luZ0luZm8iLCJlcnJvciIsIkNMT1NFRCIsImluaXQiLCJjbG9zZSIsIndlYnNvY2tldCIsInNvY2tldEVycm9yIiwiZGVzdHJveSIsIm1vZHVsZSIsImV4cG9ydHMiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/websocket/connection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/websocket/constants.js":
/*!************************************************************!*\
  !*** ./node_modules/undici/lib/web/websocket/constants.js ***!
  \************************************************************/
/***/ ((module) => {

eval("\n// This is a Globally Unique Identifier unique used\n// to validate that the endpoint accepts websocket\n// connections.\n// See https://www.rfc-editor.org/rfc/rfc6455.html#section-1.3\nconst uid = '258EAFA5-E914-47DA-95CA-C5AB0DC85B11';\n/** @type {PropertyDescriptor} */ const staticPropertyDescriptors = {\n    enumerable: true,\n    writable: false,\n    configurable: false\n};\nconst states = {\n    CONNECTING: 0,\n    OPEN: 1,\n    CLOSING: 2,\n    CLOSED: 3\n};\nconst sentCloseFrameState = {\n    NOT_SENT: 0,\n    PROCESSING: 1,\n    SENT: 2\n};\nconst opcodes = {\n    CONTINUATION: 0x0,\n    TEXT: 0x1,\n    BINARY: 0x2,\n    CLOSE: 0x8,\n    PING: 0x9,\n    PONG: 0xA\n};\nconst maxUnsigned16Bit = 2 ** 16 - 1 // 65535\n;\nconst parserStates = {\n    INFO: 0,\n    PAYLOADLENGTH_16: 2,\n    PAYLOADLENGTH_64: 3,\n    READ_DATA: 4\n};\nconst emptyBuffer = Buffer.allocUnsafe(0);\nconst sendHints = {\n    string: 1,\n    typedArray: 2,\n    arrayBuffer: 3,\n    blob: 4\n};\nmodule.exports = {\n    uid,\n    sentCloseFrameState,\n    staticPropertyDescriptors,\n    states,\n    opcodes,\n    maxUnsigned16Bit,\n    parserStates,\n    emptyBuffer,\n    sendHints\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi93ZWIvd2Vic29ja2V0L2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLG1EQUFtRDtBQUNuRCxrREFBa0Q7QUFDbEQsZUFBZTtBQUNmLDhEQUE4RDtBQUM5RCxNQUFNQSxNQUFNO0FBRVosK0JBQStCLEdBQy9CLE1BQU1DLDRCQUE0QjtJQUNoQ0MsWUFBWTtJQUNaQyxVQUFVO0lBQ1ZDLGNBQWM7QUFDaEI7QUFFQSxNQUFNQyxTQUFTO0lBQ2JDLFlBQVk7SUFDWkMsTUFBTTtJQUNOQyxTQUFTO0lBQ1RDLFFBQVE7QUFDVjtBQUVBLE1BQU1DLHNCQUFzQjtJQUMxQkMsVUFBVTtJQUNWQyxZQUFZO0lBQ1pDLE1BQU07QUFDUjtBQUVBLE1BQU1DLFVBQVU7SUFDZEMsY0FBYztJQUNkQyxNQUFNO0lBQ05DLFFBQVE7SUFDUkMsT0FBTztJQUNQQyxNQUFNO0lBQ05DLE1BQU07QUFDUjtBQUVBLE1BQU1DLG1CQUFtQixLQUFLLEtBQUssRUFBRSxRQUFROztBQUU3QyxNQUFNQyxlQUFlO0lBQ25CQyxNQUFNO0lBQ05DLGtCQUFrQjtJQUNsQkMsa0JBQWtCO0lBQ2xCQyxXQUFXO0FBQ2I7QUFFQSxNQUFNQyxjQUFjQyxPQUFPQyxXQUFXLENBQUM7QUFFdkMsTUFBTUMsWUFBWTtJQUNoQkMsUUFBUTtJQUNSQyxZQUFZO0lBQ1pDLGFBQWE7SUFDYkMsTUFBTTtBQUNSO0FBRUFDLE9BQU9DLE9BQU8sR0FBRztJQUNmcEM7SUFDQVU7SUFDQVQ7SUFDQUk7SUFDQVM7SUFDQU87SUFDQUM7SUFDQUs7SUFDQUc7QUFDRiIsInNvdXJjZXMiOlsiRDpcXEhlbGl4XFxub2RlX21vZHVsZXNcXHVuZGljaVxcbGliXFx3ZWJcXHdlYnNvY2tldFxcY29uc3RhbnRzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG4vLyBUaGlzIGlzIGEgR2xvYmFsbHkgVW5pcXVlIElkZW50aWZpZXIgdW5pcXVlIHVzZWRcbi8vIHRvIHZhbGlkYXRlIHRoYXQgdGhlIGVuZHBvaW50IGFjY2VwdHMgd2Vic29ja2V0XG4vLyBjb25uZWN0aW9ucy5cbi8vIFNlZSBodHRwczovL3d3dy5yZmMtZWRpdG9yLm9yZy9yZmMvcmZjNjQ1NS5odG1sI3NlY3Rpb24tMS4zXG5jb25zdCB1aWQgPSAnMjU4RUFGQTUtRTkxNC00N0RBLTk1Q0EtQzVBQjBEQzg1QjExJ1xuXG4vKiogQHR5cGUge1Byb3BlcnR5RGVzY3JpcHRvcn0gKi9cbmNvbnN0IHN0YXRpY1Byb3BlcnR5RGVzY3JpcHRvcnMgPSB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIHdyaXRhYmxlOiBmYWxzZSxcbiAgY29uZmlndXJhYmxlOiBmYWxzZVxufVxuXG5jb25zdCBzdGF0ZXMgPSB7XG4gIENPTk5FQ1RJTkc6IDAsXG4gIE9QRU46IDEsXG4gIENMT1NJTkc6IDIsXG4gIENMT1NFRDogM1xufVxuXG5jb25zdCBzZW50Q2xvc2VGcmFtZVN0YXRlID0ge1xuICBOT1RfU0VOVDogMCxcbiAgUFJPQ0VTU0lORzogMSxcbiAgU0VOVDogMlxufVxuXG5jb25zdCBvcGNvZGVzID0ge1xuICBDT05USU5VQVRJT046IDB4MCxcbiAgVEVYVDogMHgxLFxuICBCSU5BUlk6IDB4MixcbiAgQ0xPU0U6IDB4OCxcbiAgUElORzogMHg5LFxuICBQT05HOiAweEFcbn1cblxuY29uc3QgbWF4VW5zaWduZWQxNkJpdCA9IDIgKiogMTYgLSAxIC8vIDY1NTM1XG5cbmNvbnN0IHBhcnNlclN0YXRlcyA9IHtcbiAgSU5GTzogMCxcbiAgUEFZTE9BRExFTkdUSF8xNjogMixcbiAgUEFZTE9BRExFTkdUSF82NDogMyxcbiAgUkVBRF9EQVRBOiA0XG59XG5cbmNvbnN0IGVtcHR5QnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApXG5cbmNvbnN0IHNlbmRIaW50cyA9IHtcbiAgc3RyaW5nOiAxLFxuICB0eXBlZEFycmF5OiAyLFxuICBhcnJheUJ1ZmZlcjogMyxcbiAgYmxvYjogNFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgdWlkLFxuICBzZW50Q2xvc2VGcmFtZVN0YXRlLFxuICBzdGF0aWNQcm9wZXJ0eURlc2NyaXB0b3JzLFxuICBzdGF0ZXMsXG4gIG9wY29kZXMsXG4gIG1heFVuc2lnbmVkMTZCaXQsXG4gIHBhcnNlclN0YXRlcyxcbiAgZW1wdHlCdWZmZXIsXG4gIHNlbmRIaW50c1xufVxuIl0sIm5hbWVzIjpbInVpZCIsInN0YXRpY1Byb3BlcnR5RGVzY3JpcHRvcnMiLCJlbnVtZXJhYmxlIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJzdGF0ZXMiLCJDT05ORUNUSU5HIiwiT1BFTiIsIkNMT1NJTkciLCJDTE9TRUQiLCJzZW50Q2xvc2VGcmFtZVN0YXRlIiwiTk9UX1NFTlQiLCJQUk9DRVNTSU5HIiwiU0VOVCIsIm9wY29kZXMiLCJDT05USU5VQVRJT04iLCJURVhUIiwiQklOQVJZIiwiQ0xPU0UiLCJQSU5HIiwiUE9ORyIsIm1heFVuc2lnbmVkMTZCaXQiLCJwYXJzZXJTdGF0ZXMiLCJJTkZPIiwiUEFZTE9BRExFTkdUSF8xNiIsIlBBWUxPQURMRU5HVEhfNjQiLCJSRUFEX0RBVEEiLCJlbXB0eUJ1ZmZlciIsIkJ1ZmZlciIsImFsbG9jVW5zYWZlIiwic2VuZEhpbnRzIiwic3RyaW5nIiwidHlwZWRBcnJheSIsImFycmF5QnVmZmVyIiwiYmxvYiIsIm1vZHVsZSIsImV4cG9ydHMiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/websocket/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/websocket/events.js":
/*!*********************************************************!*\
  !*** ./node_modules/undici/lib/web/websocket/events.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { webidl } = __webpack_require__(/*! ../fetch/webidl */ \"(ssr)/./node_modules/undici/lib/web/fetch/webidl.js\");\nconst { kEnumerableProperty } = __webpack_require__(/*! ../../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst { kConstruct } = __webpack_require__(/*! ../../core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst { MessagePort } = __webpack_require__(/*! node:worker_threads */ \"node:worker_threads\");\n/**\n * @see https://html.spec.whatwg.org/multipage/comms.html#messageevent\n */ class MessageEvent extends Event {\n    #eventInit;\n    constructor(type, eventInitDict = {}){\n        if (type === kConstruct) {\n            super(arguments[1], arguments[2]);\n            return;\n        }\n        const prefix = 'MessageEvent constructor';\n        webidl.argumentLengthCheck(arguments, 1, prefix);\n        type = webidl.converters.DOMString(type, prefix, 'type');\n        eventInitDict = webidl.converters.MessageEventInit(eventInitDict, prefix, 'eventInitDict');\n        super(type, eventInitDict);\n        this.#eventInit = eventInitDict;\n    }\n    get data() {\n        webidl.brandCheck(this, MessageEvent);\n        return this.#eventInit.data;\n    }\n    get origin() {\n        webidl.brandCheck(this, MessageEvent);\n        return this.#eventInit.origin;\n    }\n    get lastEventId() {\n        webidl.brandCheck(this, MessageEvent);\n        return this.#eventInit.lastEventId;\n    }\n    get source() {\n        webidl.brandCheck(this, MessageEvent);\n        return this.#eventInit.source;\n    }\n    get ports() {\n        webidl.brandCheck(this, MessageEvent);\n        if (!Object.isFrozen(this.#eventInit.ports)) {\n            Object.freeze(this.#eventInit.ports);\n        }\n        return this.#eventInit.ports;\n    }\n    initMessageEvent(type, bubbles = false, cancelable = false, data = null, origin = '', lastEventId = '', source = null, ports = []) {\n        webidl.brandCheck(this, MessageEvent);\n        webidl.argumentLengthCheck(arguments, 1, 'MessageEvent.initMessageEvent');\n        return new MessageEvent(type, {\n            bubbles,\n            cancelable,\n            data,\n            origin,\n            lastEventId,\n            source,\n            ports\n        });\n    }\n    static createFastMessageEvent(type, init) {\n        const messageEvent = new MessageEvent(kConstruct, type, init);\n        messageEvent.#eventInit = init;\n        messageEvent.#eventInit.data ??= null;\n        messageEvent.#eventInit.origin ??= '';\n        messageEvent.#eventInit.lastEventId ??= '';\n        messageEvent.#eventInit.source ??= null;\n        messageEvent.#eventInit.ports ??= [];\n        return messageEvent;\n    }\n}\nconst { createFastMessageEvent } = MessageEvent;\ndelete MessageEvent.createFastMessageEvent;\n/**\n * @see https://websockets.spec.whatwg.org/#the-closeevent-interface\n */ class CloseEvent extends Event {\n    #eventInit;\n    constructor(type, eventInitDict = {}){\n        const prefix = 'CloseEvent constructor';\n        webidl.argumentLengthCheck(arguments, 1, prefix);\n        type = webidl.converters.DOMString(type, prefix, 'type');\n        eventInitDict = webidl.converters.CloseEventInit(eventInitDict);\n        super(type, eventInitDict);\n        this.#eventInit = eventInitDict;\n    }\n    get wasClean() {\n        webidl.brandCheck(this, CloseEvent);\n        return this.#eventInit.wasClean;\n    }\n    get code() {\n        webidl.brandCheck(this, CloseEvent);\n        return this.#eventInit.code;\n    }\n    get reason() {\n        webidl.brandCheck(this, CloseEvent);\n        return this.#eventInit.reason;\n    }\n}\n// https://html.spec.whatwg.org/multipage/webappapis.html#the-errorevent-interface\nclass ErrorEvent extends Event {\n    #eventInit;\n    constructor(type, eventInitDict){\n        const prefix = 'ErrorEvent constructor';\n        webidl.argumentLengthCheck(arguments, 1, prefix);\n        super(type, eventInitDict);\n        type = webidl.converters.DOMString(type, prefix, 'type');\n        eventInitDict = webidl.converters.ErrorEventInit(eventInitDict ?? {});\n        this.#eventInit = eventInitDict;\n    }\n    get message() {\n        webidl.brandCheck(this, ErrorEvent);\n        return this.#eventInit.message;\n    }\n    get filename() {\n        webidl.brandCheck(this, ErrorEvent);\n        return this.#eventInit.filename;\n    }\n    get lineno() {\n        webidl.brandCheck(this, ErrorEvent);\n        return this.#eventInit.lineno;\n    }\n    get colno() {\n        webidl.brandCheck(this, ErrorEvent);\n        return this.#eventInit.colno;\n    }\n    get error() {\n        webidl.brandCheck(this, ErrorEvent);\n        return this.#eventInit.error;\n    }\n}\nObject.defineProperties(MessageEvent.prototype, {\n    [Symbol.toStringTag]: {\n        value: 'MessageEvent',\n        configurable: true\n    },\n    data: kEnumerableProperty,\n    origin: kEnumerableProperty,\n    lastEventId: kEnumerableProperty,\n    source: kEnumerableProperty,\n    ports: kEnumerableProperty,\n    initMessageEvent: kEnumerableProperty\n});\nObject.defineProperties(CloseEvent.prototype, {\n    [Symbol.toStringTag]: {\n        value: 'CloseEvent',\n        configurable: true\n    },\n    reason: kEnumerableProperty,\n    code: kEnumerableProperty,\n    wasClean: kEnumerableProperty\n});\nObject.defineProperties(ErrorEvent.prototype, {\n    [Symbol.toStringTag]: {\n        value: 'ErrorEvent',\n        configurable: true\n    },\n    message: kEnumerableProperty,\n    filename: kEnumerableProperty,\n    lineno: kEnumerableProperty,\n    colno: kEnumerableProperty,\n    error: kEnumerableProperty\n});\nwebidl.converters.MessagePort = webidl.interfaceConverter(MessagePort);\nwebidl.converters['sequence<MessagePort>'] = webidl.sequenceConverter(webidl.converters.MessagePort);\nconst eventInit = [\n    {\n        key: 'bubbles',\n        converter: webidl.converters.boolean,\n        defaultValue: ()=>false\n    },\n    {\n        key: 'cancelable',\n        converter: webidl.converters.boolean,\n        defaultValue: ()=>false\n    },\n    {\n        key: 'composed',\n        converter: webidl.converters.boolean,\n        defaultValue: ()=>false\n    }\n];\nwebidl.converters.MessageEventInit = webidl.dictionaryConverter([\n    ...eventInit,\n    {\n        key: 'data',\n        converter: webidl.converters.any,\n        defaultValue: ()=>null\n    },\n    {\n        key: 'origin',\n        converter: webidl.converters.USVString,\n        defaultValue: ()=>''\n    },\n    {\n        key: 'lastEventId',\n        converter: webidl.converters.DOMString,\n        defaultValue: ()=>''\n    },\n    {\n        key: 'source',\n        // Node doesn't implement WindowProxy or ServiceWorker, so the only\n        // valid value for source is a MessagePort.\n        converter: webidl.nullableConverter(webidl.converters.MessagePort),\n        defaultValue: ()=>null\n    },\n    {\n        key: 'ports',\n        converter: webidl.converters['sequence<MessagePort>'],\n        defaultValue: ()=>new Array(0)\n    }\n]);\nwebidl.converters.CloseEventInit = webidl.dictionaryConverter([\n    ...eventInit,\n    {\n        key: 'wasClean',\n        converter: webidl.converters.boolean,\n        defaultValue: ()=>false\n    },\n    {\n        key: 'code',\n        converter: webidl.converters['unsigned short'],\n        defaultValue: ()=>0\n    },\n    {\n        key: 'reason',\n        converter: webidl.converters.USVString,\n        defaultValue: ()=>''\n    }\n]);\nwebidl.converters.ErrorEventInit = webidl.dictionaryConverter([\n    ...eventInit,\n    {\n        key: 'message',\n        converter: webidl.converters.DOMString,\n        defaultValue: ()=>''\n    },\n    {\n        key: 'filename',\n        converter: webidl.converters.USVString,\n        defaultValue: ()=>''\n    },\n    {\n        key: 'lineno',\n        converter: webidl.converters['unsigned long'],\n        defaultValue: ()=>0\n    },\n    {\n        key: 'colno',\n        converter: webidl.converters['unsigned long'],\n        defaultValue: ()=>0\n    },\n    {\n        key: 'error',\n        converter: webidl.converters.any\n    }\n]);\nmodule.exports = {\n    MessageEvent,\n    CloseEvent,\n    ErrorEvent,\n    createFastMessageEvent\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/websocket/events.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/websocket/frame.js":
/*!********************************************************!*\
  !*** ./node_modules/undici/lib/web/websocket/frame.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { maxUnsigned16Bit } = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/undici/lib/web/websocket/constants.js\");\nconst BUFFER_SIZE = 16386;\n/** @type {import('crypto')} */ let crypto;\nlet buffer = null;\nlet bufIdx = BUFFER_SIZE;\ntry {\n    crypto = __webpack_require__(/*! node:crypto */ \"node:crypto\");\n/* c8 ignore next 3 */ } catch  {\n    crypto = {\n        // not full compatibility, but minimum.\n        randomFillSync: function randomFillSync(buffer, _offset, _size) {\n            for(let i = 0; i < buffer.length; ++i){\n                buffer[i] = Math.random() * 255 | 0;\n            }\n            return buffer;\n        }\n    };\n}\nfunction generateMask() {\n    if (bufIdx === BUFFER_SIZE) {\n        bufIdx = 0;\n        crypto.randomFillSync(buffer ??= Buffer.allocUnsafe(BUFFER_SIZE), 0, BUFFER_SIZE);\n    }\n    return [\n        buffer[bufIdx++],\n        buffer[bufIdx++],\n        buffer[bufIdx++],\n        buffer[bufIdx++]\n    ];\n}\nclass WebsocketFrameSend {\n    /**\n   * @param {Buffer|undefined} data\n   */ constructor(data){\n        this.frameData = data;\n    }\n    createFrame(opcode) {\n        const frameData = this.frameData;\n        const maskKey = generateMask();\n        const bodyLength = frameData?.byteLength ?? 0;\n        /** @type {number} */ let payloadLength = bodyLength // 0-125\n        ;\n        let offset = 6;\n        if (bodyLength > maxUnsigned16Bit) {\n            offset += 8; // payload length is next 8 bytes\n            payloadLength = 127;\n        } else if (bodyLength > 125) {\n            offset += 2; // payload length is next 2 bytes\n            payloadLength = 126;\n        }\n        const buffer = Buffer.allocUnsafe(bodyLength + offset);\n        // Clear first 2 bytes, everything else is overwritten\n        buffer[0] = buffer[1] = 0;\n        buffer[0] |= 0x80; // FIN\n        buffer[0] = (buffer[0] & 0xF0) + opcode; // opcode\n        /*! ws. MIT License. Einar Otto Stangvik <einaros@gmail.com> */ buffer[offset - 4] = maskKey[0];\n        buffer[offset - 3] = maskKey[1];\n        buffer[offset - 2] = maskKey[2];\n        buffer[offset - 1] = maskKey[3];\n        buffer[1] = payloadLength;\n        if (payloadLength === 126) {\n            buffer.writeUInt16BE(bodyLength, 2);\n        } else if (payloadLength === 127) {\n            // Clear extended payload length\n            buffer[2] = buffer[3] = 0;\n            buffer.writeUIntBE(bodyLength, 4, 6);\n        }\n        buffer[1] |= 0x80; // MASK\n        // mask body\n        for(let i = 0; i < bodyLength; ++i){\n            buffer[offset + i] = frameData[i] ^ maskKey[i & 3];\n        }\n        return buffer;\n    }\n}\nmodule.exports = {\n    WebsocketFrameSend\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi93ZWIvd2Vic29ja2V0L2ZyYW1lLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTSxFQUFFQSxnQkFBZ0IsRUFBRSxHQUFHQyxtQkFBT0EsQ0FBQywrRUFBYTtBQUVsRCxNQUFNQyxjQUFjO0FBRXBCLDZCQUE2QixHQUM3QixJQUFJQztBQUNKLElBQUlDLFNBQVM7QUFDYixJQUFJQyxTQUFTSDtBQUViLElBQUk7SUFDRkMsU0FBU0YsbUJBQU9BLENBQUMsZ0NBQWE7QUFDaEMsb0JBQW9CLEdBQ3BCLEVBQUUsT0FBTTtJQUNORSxTQUFTO1FBQ1AsdUNBQXVDO1FBQ3ZDRyxnQkFBZ0IsU0FBU0EsZUFBZ0JGLE1BQU0sRUFBRUcsT0FBTyxFQUFFQyxLQUFLO1lBQzdELElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJTCxPQUFPTSxNQUFNLEVBQUUsRUFBRUQsRUFBRztnQkFDdENMLE1BQU0sQ0FBQ0ssRUFBRSxHQUFHRSxLQUFLQyxNQUFNLEtBQUssTUFBTTtZQUNwQztZQUNBLE9BQU9SO1FBQ1Q7SUFDRjtBQUNGO0FBRUEsU0FBU1M7SUFDUCxJQUFJUixXQUFXSCxhQUFhO1FBQzFCRyxTQUFTO1FBQ1RGLE9BQU9HLGNBQWMsQ0FBRUYsV0FBV1UsT0FBT0MsV0FBVyxDQUFDYixjQUFlLEdBQUdBO0lBQ3pFO0lBQ0EsT0FBTztRQUFDRSxNQUFNLENBQUNDLFNBQVM7UUFBRUQsTUFBTSxDQUFDQyxTQUFTO1FBQUVELE1BQU0sQ0FBQ0MsU0FBUztRQUFFRCxNQUFNLENBQUNDLFNBQVM7S0FBQztBQUNqRjtBQUVBLE1BQU1XO0lBQ0o7O0dBRUMsR0FDRCxZQUFhQyxJQUFJLENBQUU7UUFDakIsSUFBSSxDQUFDQyxTQUFTLEdBQUdEO0lBQ25CO0lBRUFFLFlBQWFDLE1BQU0sRUFBRTtRQUNuQixNQUFNRixZQUFZLElBQUksQ0FBQ0EsU0FBUztRQUNoQyxNQUFNRyxVQUFVUjtRQUNoQixNQUFNUyxhQUFhSixXQUFXSyxjQUFjO1FBRTVDLG1CQUFtQixHQUNuQixJQUFJQyxnQkFBZ0JGLFdBQVcsUUFBUTs7UUFDdkMsSUFBSUcsU0FBUztRQUViLElBQUlILGFBQWF0QixrQkFBa0I7WUFDakN5QixVQUFVLEdBQUUsaUNBQWlDO1lBQzdDRCxnQkFBZ0I7UUFDbEIsT0FBTyxJQUFJRixhQUFhLEtBQUs7WUFDM0JHLFVBQVUsR0FBRSxpQ0FBaUM7WUFDN0NELGdCQUFnQjtRQUNsQjtRQUVBLE1BQU1wQixTQUFTVSxPQUFPQyxXQUFXLENBQUNPLGFBQWFHO1FBRS9DLHNEQUFzRDtRQUN0RHJCLE1BQU0sQ0FBQyxFQUFFLEdBQUdBLE1BQU0sQ0FBQyxFQUFFLEdBQUc7UUFDeEJBLE1BQU0sQ0FBQyxFQUFFLElBQUksTUFBSyxNQUFNO1FBQ3hCQSxNQUFNLENBQUMsRUFBRSxHQUFHLENBQUNBLE1BQU0sQ0FBQyxFQUFFLEdBQUcsSUFBRyxJQUFLZ0IsUUFBTyxTQUFTO1FBRWpELDZEQUE2RCxHQUM3RGhCLE1BQU0sQ0FBQ3FCLFNBQVMsRUFBRSxHQUFHSixPQUFPLENBQUMsRUFBRTtRQUMvQmpCLE1BQU0sQ0FBQ3FCLFNBQVMsRUFBRSxHQUFHSixPQUFPLENBQUMsRUFBRTtRQUMvQmpCLE1BQU0sQ0FBQ3FCLFNBQVMsRUFBRSxHQUFHSixPQUFPLENBQUMsRUFBRTtRQUMvQmpCLE1BQU0sQ0FBQ3FCLFNBQVMsRUFBRSxHQUFHSixPQUFPLENBQUMsRUFBRTtRQUUvQmpCLE1BQU0sQ0FBQyxFQUFFLEdBQUdvQjtRQUVaLElBQUlBLGtCQUFrQixLQUFLO1lBQ3pCcEIsT0FBT3NCLGFBQWEsQ0FBQ0osWUFBWTtRQUNuQyxPQUFPLElBQUlFLGtCQUFrQixLQUFLO1lBQ2hDLGdDQUFnQztZQUNoQ3BCLE1BQU0sQ0FBQyxFQUFFLEdBQUdBLE1BQU0sQ0FBQyxFQUFFLEdBQUc7WUFDeEJBLE9BQU91QixXQUFXLENBQUNMLFlBQVksR0FBRztRQUNwQztRQUVBbEIsTUFBTSxDQUFDLEVBQUUsSUFBSSxNQUFLLE9BQU87UUFFekIsWUFBWTtRQUNaLElBQUssSUFBSUssSUFBSSxHQUFHQSxJQUFJYSxZQUFZLEVBQUViLEVBQUc7WUFDbkNMLE1BQU0sQ0FBQ3FCLFNBQVNoQixFQUFFLEdBQUdTLFNBQVMsQ0FBQ1QsRUFBRSxHQUFHWSxPQUFPLENBQUNaLElBQUksRUFBRTtRQUNwRDtRQUVBLE9BQU9MO0lBQ1Q7QUFDRjtBQUVBd0IsT0FBT0MsT0FBTyxHQUFHO0lBQ2ZiO0FBQ0YiLCJzb3VyY2VzIjpbIkQ6XFxIZWxpeFxcbm9kZV9tb2R1bGVzXFx1bmRpY2lcXGxpYlxcd2ViXFx3ZWJzb2NrZXRcXGZyYW1lLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jb25zdCB7IG1heFVuc2lnbmVkMTZCaXQgfSA9IHJlcXVpcmUoJy4vY29uc3RhbnRzJylcblxuY29uc3QgQlVGRkVSX1NJWkUgPSAxNjM4NlxuXG4vKiogQHR5cGUge2ltcG9ydCgnY3J5cHRvJyl9ICovXG5sZXQgY3J5cHRvXG5sZXQgYnVmZmVyID0gbnVsbFxubGV0IGJ1ZklkeCA9IEJVRkZFUl9TSVpFXG5cbnRyeSB7XG4gIGNyeXB0byA9IHJlcXVpcmUoJ25vZGU6Y3J5cHRvJylcbi8qIGM4IGlnbm9yZSBuZXh0IDMgKi9cbn0gY2F0Y2gge1xuICBjcnlwdG8gPSB7XG4gICAgLy8gbm90IGZ1bGwgY29tcGF0aWJpbGl0eSwgYnV0IG1pbmltdW0uXG4gICAgcmFuZG9tRmlsbFN5bmM6IGZ1bmN0aW9uIHJhbmRvbUZpbGxTeW5jIChidWZmZXIsIF9vZmZzZXQsIF9zaXplKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ1ZmZlci5sZW5ndGg7ICsraSkge1xuICAgICAgICBidWZmZXJbaV0gPSBNYXRoLnJhbmRvbSgpICogMjU1IHwgMFxuICAgICAgfVxuICAgICAgcmV0dXJuIGJ1ZmZlclxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZU1hc2sgKCkge1xuICBpZiAoYnVmSWR4ID09PSBCVUZGRVJfU0laRSkge1xuICAgIGJ1ZklkeCA9IDBcbiAgICBjcnlwdG8ucmFuZG9tRmlsbFN5bmMoKGJ1ZmZlciA/Pz0gQnVmZmVyLmFsbG9jVW5zYWZlKEJVRkZFUl9TSVpFKSksIDAsIEJVRkZFUl9TSVpFKVxuICB9XG4gIHJldHVybiBbYnVmZmVyW2J1ZklkeCsrXSwgYnVmZmVyW2J1ZklkeCsrXSwgYnVmZmVyW2J1ZklkeCsrXSwgYnVmZmVyW2J1ZklkeCsrXV1cbn1cblxuY2xhc3MgV2Vic29ja2V0RnJhbWVTZW5kIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7QnVmZmVyfHVuZGVmaW5lZH0gZGF0YVxuICAgKi9cbiAgY29uc3RydWN0b3IgKGRhdGEpIHtcbiAgICB0aGlzLmZyYW1lRGF0YSA9IGRhdGFcbiAgfVxuXG4gIGNyZWF0ZUZyYW1lIChvcGNvZGUpIHtcbiAgICBjb25zdCBmcmFtZURhdGEgPSB0aGlzLmZyYW1lRGF0YVxuICAgIGNvbnN0IG1hc2tLZXkgPSBnZW5lcmF0ZU1hc2soKVxuICAgIGNvbnN0IGJvZHlMZW5ndGggPSBmcmFtZURhdGE/LmJ5dGVMZW5ndGggPz8gMFxuXG4gICAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4gICAgbGV0IHBheWxvYWRMZW5ndGggPSBib2R5TGVuZ3RoIC8vIDAtMTI1XG4gICAgbGV0IG9mZnNldCA9IDZcblxuICAgIGlmIChib2R5TGVuZ3RoID4gbWF4VW5zaWduZWQxNkJpdCkge1xuICAgICAgb2Zmc2V0ICs9IDggLy8gcGF5bG9hZCBsZW5ndGggaXMgbmV4dCA4IGJ5dGVzXG4gICAgICBwYXlsb2FkTGVuZ3RoID0gMTI3XG4gICAgfSBlbHNlIGlmIChib2R5TGVuZ3RoID4gMTI1KSB7XG4gICAgICBvZmZzZXQgKz0gMiAvLyBwYXlsb2FkIGxlbmd0aCBpcyBuZXh0IDIgYnl0ZXNcbiAgICAgIHBheWxvYWRMZW5ndGggPSAxMjZcbiAgICB9XG5cbiAgICBjb25zdCBidWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUoYm9keUxlbmd0aCArIG9mZnNldClcblxuICAgIC8vIENsZWFyIGZpcnN0IDIgYnl0ZXMsIGV2ZXJ5dGhpbmcgZWxzZSBpcyBvdmVyd3JpdHRlblxuICAgIGJ1ZmZlclswXSA9IGJ1ZmZlclsxXSA9IDBcbiAgICBidWZmZXJbMF0gfD0gMHg4MCAvLyBGSU5cbiAgICBidWZmZXJbMF0gPSAoYnVmZmVyWzBdICYgMHhGMCkgKyBvcGNvZGUgLy8gb3Bjb2RlXG5cbiAgICAvKiEgd3MuIE1JVCBMaWNlbnNlLiBFaW5hciBPdHRvIFN0YW5ndmlrIDxlaW5hcm9zQGdtYWlsLmNvbT4gKi9cbiAgICBidWZmZXJbb2Zmc2V0IC0gNF0gPSBtYXNrS2V5WzBdXG4gICAgYnVmZmVyW29mZnNldCAtIDNdID0gbWFza0tleVsxXVxuICAgIGJ1ZmZlcltvZmZzZXQgLSAyXSA9IG1hc2tLZXlbMl1cbiAgICBidWZmZXJbb2Zmc2V0IC0gMV0gPSBtYXNrS2V5WzNdXG5cbiAgICBidWZmZXJbMV0gPSBwYXlsb2FkTGVuZ3RoXG5cbiAgICBpZiAocGF5bG9hZExlbmd0aCA9PT0gMTI2KSB7XG4gICAgICBidWZmZXIud3JpdGVVSW50MTZCRShib2R5TGVuZ3RoLCAyKVxuICAgIH0gZWxzZSBpZiAocGF5bG9hZExlbmd0aCA9PT0gMTI3KSB7XG4gICAgICAvLyBDbGVhciBleHRlbmRlZCBwYXlsb2FkIGxlbmd0aFxuICAgICAgYnVmZmVyWzJdID0gYnVmZmVyWzNdID0gMFxuICAgICAgYnVmZmVyLndyaXRlVUludEJFKGJvZHlMZW5ndGgsIDQsIDYpXG4gICAgfVxuXG4gICAgYnVmZmVyWzFdIHw9IDB4ODAgLy8gTUFTS1xuXG4gICAgLy8gbWFzayBib2R5XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBib2R5TGVuZ3RoOyArK2kpIHtcbiAgICAgIGJ1ZmZlcltvZmZzZXQgKyBpXSA9IGZyYW1lRGF0YVtpXSBeIG1hc2tLZXlbaSAmIDNdXG4gICAgfVxuXG4gICAgcmV0dXJuIGJ1ZmZlclxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBXZWJzb2NrZXRGcmFtZVNlbmRcbn1cbiJdLCJuYW1lcyI6WyJtYXhVbnNpZ25lZDE2Qml0IiwicmVxdWlyZSIsIkJVRkZFUl9TSVpFIiwiY3J5cHRvIiwiYnVmZmVyIiwiYnVmSWR4IiwicmFuZG9tRmlsbFN5bmMiLCJfb2Zmc2V0IiwiX3NpemUiLCJpIiwibGVuZ3RoIiwiTWF0aCIsInJhbmRvbSIsImdlbmVyYXRlTWFzayIsIkJ1ZmZlciIsImFsbG9jVW5zYWZlIiwiV2Vic29ja2V0RnJhbWVTZW5kIiwiZGF0YSIsImZyYW1lRGF0YSIsImNyZWF0ZUZyYW1lIiwib3Bjb2RlIiwibWFza0tleSIsImJvZHlMZW5ndGgiLCJieXRlTGVuZ3RoIiwicGF5bG9hZExlbmd0aCIsIm9mZnNldCIsIndyaXRlVUludDE2QkUiLCJ3cml0ZVVJbnRCRSIsIm1vZHVsZSIsImV4cG9ydHMiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/websocket/frame.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/websocket/permessage-deflate.js":
/*!*********************************************************************!*\
  !*** ./node_modules/undici/lib/web/websocket/permessage-deflate.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { createInflateRaw, Z_DEFAULT_WINDOWBITS } = __webpack_require__(/*! node:zlib */ \"node:zlib\");\nconst { isValidClientWindowBits } = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/web/websocket/util.js\");\nconst tail = Buffer.from([\n    0x00,\n    0x00,\n    0xff,\n    0xff\n]);\nconst kBuffer = Symbol('kBuffer');\nconst kLength = Symbol('kLength');\nclass PerMessageDeflate {\n    /** @type {import('node:zlib').InflateRaw} */ #inflate;\n    #options;\n    constructor(extensions){\n        this.#options = {};\n        this.#options.serverNoContextTakeover = extensions.has('server_no_context_takeover');\n        this.#options.serverMaxWindowBits = extensions.get('server_max_window_bits');\n    }\n    decompress(chunk, fin, callback) {\n        // An endpoint uses the following algorithm to decompress a message.\n        // 1.  Append 4 octets of 0x00 0x00 0xff 0xff to the tail end of the\n        //     payload of the message.\n        // 2.  Decompress the resulting data using DEFLATE.\n        if (!this.#inflate) {\n            let windowBits = Z_DEFAULT_WINDOWBITS;\n            if (this.#options.serverMaxWindowBits) {\n                if (!isValidClientWindowBits(this.#options.serverMaxWindowBits)) {\n                    callback(new Error('Invalid server_max_window_bits'));\n                    return;\n                }\n                windowBits = Number.parseInt(this.#options.serverMaxWindowBits);\n            }\n            this.#inflate = createInflateRaw({\n                windowBits\n            });\n            this.#inflate[kBuffer] = [];\n            this.#inflate[kLength] = 0;\n            this.#inflate.on('data', (data)=>{\n                this.#inflate[kBuffer].push(data);\n                this.#inflate[kLength] += data.length;\n            });\n            this.#inflate.on('error', (err)=>{\n                this.#inflate = null;\n                callback(err);\n            });\n        }\n        this.#inflate.write(chunk);\n        if (fin) {\n            this.#inflate.write(tail);\n        }\n        this.#inflate.flush(()=>{\n            const full = Buffer.concat(this.#inflate[kBuffer], this.#inflate[kLength]);\n            this.#inflate[kBuffer].length = 0;\n            this.#inflate[kLength] = 0;\n            callback(null, full);\n        });\n    }\n}\nmodule.exports = {\n    PerMessageDeflate\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi93ZWIvd2Vic29ja2V0L3Blcm1lc3NhZ2UtZGVmbGF0ZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU0sRUFBRUEsZ0JBQWdCLEVBQUVDLG9CQUFvQixFQUFFLEdBQUdDLG1CQUFPQSxDQUFDLDRCQUFXO0FBQ3RFLE1BQU0sRUFBRUMsdUJBQXVCLEVBQUUsR0FBR0QsbUJBQU9BLENBQUMscUVBQVE7QUFFcEQsTUFBTUUsT0FBT0MsT0FBT0MsSUFBSSxDQUFDO0lBQUM7SUFBTTtJQUFNO0lBQU07Q0FBSztBQUNqRCxNQUFNQyxVQUFVQyxPQUFPO0FBQ3ZCLE1BQU1DLFVBQVVELE9BQU87QUFFdkIsTUFBTUU7SUFDSiwyQ0FBMkMsR0FDM0MsUUFBUTtJQUVSLFFBQVEsQ0FBSztJQUViLFlBQWFDLFVBQVUsQ0FBRTthQUZ6QixRQUFRLEdBQUcsQ0FBQztRQUdWLElBQUksQ0FBQyxRQUFRLENBQUNDLHVCQUF1QixHQUFHRCxXQUFXRSxHQUFHLENBQUM7UUFDdkQsSUFBSSxDQUFDLFFBQVEsQ0FBQ0MsbUJBQW1CLEdBQUdILFdBQVdJLEdBQUcsQ0FBQztJQUNyRDtJQUVBQyxXQUFZQyxLQUFLLEVBQUVDLEdBQUcsRUFBRUMsUUFBUSxFQUFFO1FBQ2hDLG9FQUFvRTtRQUNwRSxvRUFBb0U7UUFDcEUsOEJBQThCO1FBQzlCLG1EQUFtRDtRQUVuRCxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNsQixJQUFJQyxhQUFhbkI7WUFFakIsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDYSxtQkFBbUIsRUFBRTtnQkFDckMsSUFBSSxDQUFDWCx3QkFBd0IsSUFBSSxDQUFDLFFBQVEsQ0FBQ1csbUJBQW1CLEdBQUc7b0JBQy9ESyxTQUFTLElBQUlFLE1BQU07b0JBQ25CO2dCQUNGO2dCQUVBRCxhQUFhRSxPQUFPQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQ1QsbUJBQW1CO1lBQ2hFO1lBRUEsSUFBSSxDQUFDLFFBQVEsR0FBR2QsaUJBQWlCO2dCQUFFb0I7WUFBVztZQUM5QyxJQUFJLENBQUMsUUFBUSxDQUFDYixRQUFRLEdBQUcsRUFBRTtZQUMzQixJQUFJLENBQUMsUUFBUSxDQUFDRSxRQUFRLEdBQUc7WUFFekIsSUFBSSxDQUFDLFFBQVEsQ0FBQ2UsRUFBRSxDQUFDLFFBQVEsQ0FBQ0M7Z0JBQ3hCLElBQUksQ0FBQyxRQUFRLENBQUNsQixRQUFRLENBQUNtQixJQUFJLENBQUNEO2dCQUM1QixJQUFJLENBQUMsUUFBUSxDQUFDaEIsUUFBUSxJQUFJZ0IsS0FBS0UsTUFBTTtZQUN2QztZQUVBLElBQUksQ0FBQyxRQUFRLENBQUNILEVBQUUsQ0FBQyxTQUFTLENBQUNJO2dCQUN6QixJQUFJLENBQUMsUUFBUSxHQUFHO2dCQUNoQlQsU0FBU1M7WUFDWDtRQUNGO1FBRUEsSUFBSSxDQUFDLFFBQVEsQ0FBQ0MsS0FBSyxDQUFDWjtRQUNwQixJQUFJQyxLQUFLO1lBQ1AsSUFBSSxDQUFDLFFBQVEsQ0FBQ1csS0FBSyxDQUFDekI7UUFDdEI7UUFFQSxJQUFJLENBQUMsUUFBUSxDQUFDMEIsS0FBSyxDQUFDO1lBQ2xCLE1BQU1DLE9BQU8xQixPQUFPMkIsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUN6QixRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQ0UsUUFBUTtZQUV6RSxJQUFJLENBQUMsUUFBUSxDQUFDRixRQUFRLENBQUNvQixNQUFNLEdBQUc7WUFDaEMsSUFBSSxDQUFDLFFBQVEsQ0FBQ2xCLFFBQVEsR0FBRztZQUV6QlUsU0FBUyxNQUFNWTtRQUNqQjtJQUNGO0FBQ0Y7QUFFQUUsT0FBT0MsT0FBTyxHQUFHO0lBQUV4QjtBQUFrQiIsInNvdXJjZXMiOlsiRDpcXEhlbGl4XFxub2RlX21vZHVsZXNcXHVuZGljaVxcbGliXFx3ZWJcXHdlYnNvY2tldFxccGVybWVzc2FnZS1kZWZsYXRlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jb25zdCB7IGNyZWF0ZUluZmxhdGVSYXcsIFpfREVGQVVMVF9XSU5ET1dCSVRTIH0gPSByZXF1aXJlKCdub2RlOnpsaWInKVxuY29uc3QgeyBpc1ZhbGlkQ2xpZW50V2luZG93Qml0cyB9ID0gcmVxdWlyZSgnLi91dGlsJylcblxuY29uc3QgdGFpbCA9IEJ1ZmZlci5mcm9tKFsweDAwLCAweDAwLCAweGZmLCAweGZmXSlcbmNvbnN0IGtCdWZmZXIgPSBTeW1ib2woJ2tCdWZmZXInKVxuY29uc3Qga0xlbmd0aCA9IFN5bWJvbCgna0xlbmd0aCcpXG5cbmNsYXNzIFBlck1lc3NhZ2VEZWZsYXRlIHtcbiAgLyoqIEB0eXBlIHtpbXBvcnQoJ25vZGU6emxpYicpLkluZmxhdGVSYXd9ICovXG4gICNpbmZsYXRlXG5cbiAgI29wdGlvbnMgPSB7fVxuXG4gIGNvbnN0cnVjdG9yIChleHRlbnNpb25zKSB7XG4gICAgdGhpcy4jb3B0aW9ucy5zZXJ2ZXJOb0NvbnRleHRUYWtlb3ZlciA9IGV4dGVuc2lvbnMuaGFzKCdzZXJ2ZXJfbm9fY29udGV4dF90YWtlb3ZlcicpXG4gICAgdGhpcy4jb3B0aW9ucy5zZXJ2ZXJNYXhXaW5kb3dCaXRzID0gZXh0ZW5zaW9ucy5nZXQoJ3NlcnZlcl9tYXhfd2luZG93X2JpdHMnKVxuICB9XG5cbiAgZGVjb21wcmVzcyAoY2h1bmssIGZpbiwgY2FsbGJhY2spIHtcbiAgICAvLyBBbiBlbmRwb2ludCB1c2VzIHRoZSBmb2xsb3dpbmcgYWxnb3JpdGhtIHRvIGRlY29tcHJlc3MgYSBtZXNzYWdlLlxuICAgIC8vIDEuICBBcHBlbmQgNCBvY3RldHMgb2YgMHgwMCAweDAwIDB4ZmYgMHhmZiB0byB0aGUgdGFpbCBlbmQgb2YgdGhlXG4gICAgLy8gICAgIHBheWxvYWQgb2YgdGhlIG1lc3NhZ2UuXG4gICAgLy8gMi4gIERlY29tcHJlc3MgdGhlIHJlc3VsdGluZyBkYXRhIHVzaW5nIERFRkxBVEUuXG5cbiAgICBpZiAoIXRoaXMuI2luZmxhdGUpIHtcbiAgICAgIGxldCB3aW5kb3dCaXRzID0gWl9ERUZBVUxUX1dJTkRPV0JJVFNcblxuICAgICAgaWYgKHRoaXMuI29wdGlvbnMuc2VydmVyTWF4V2luZG93Qml0cykgeyAvLyBlbXB0eSB2YWx1ZXMgZGVmYXVsdCB0byBaX0RFRkFVTFRfV0lORE9XQklUU1xuICAgICAgICBpZiAoIWlzVmFsaWRDbGllbnRXaW5kb3dCaXRzKHRoaXMuI29wdGlvbnMuc2VydmVyTWF4V2luZG93Qml0cykpIHtcbiAgICAgICAgICBjYWxsYmFjayhuZXcgRXJyb3IoJ0ludmFsaWQgc2VydmVyX21heF93aW5kb3dfYml0cycpKVxuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG5cbiAgICAgICAgd2luZG93Qml0cyA9IE51bWJlci5wYXJzZUludCh0aGlzLiNvcHRpb25zLnNlcnZlck1heFdpbmRvd0JpdHMpXG4gICAgICB9XG5cbiAgICAgIHRoaXMuI2luZmxhdGUgPSBjcmVhdGVJbmZsYXRlUmF3KHsgd2luZG93Qml0cyB9KVxuICAgICAgdGhpcy4jaW5mbGF0ZVtrQnVmZmVyXSA9IFtdXG4gICAgICB0aGlzLiNpbmZsYXRlW2tMZW5ndGhdID0gMFxuXG4gICAgICB0aGlzLiNpbmZsYXRlLm9uKCdkYXRhJywgKGRhdGEpID0+IHtcbiAgICAgICAgdGhpcy4jaW5mbGF0ZVtrQnVmZmVyXS5wdXNoKGRhdGEpXG4gICAgICAgIHRoaXMuI2luZmxhdGVba0xlbmd0aF0gKz0gZGF0YS5sZW5ndGhcbiAgICAgIH0pXG5cbiAgICAgIHRoaXMuI2luZmxhdGUub24oJ2Vycm9yJywgKGVycikgPT4ge1xuICAgICAgICB0aGlzLiNpbmZsYXRlID0gbnVsbFxuICAgICAgICBjYWxsYmFjayhlcnIpXG4gICAgICB9KVxuICAgIH1cblxuICAgIHRoaXMuI2luZmxhdGUud3JpdGUoY2h1bmspXG4gICAgaWYgKGZpbikge1xuICAgICAgdGhpcy4jaW5mbGF0ZS53cml0ZSh0YWlsKVxuICAgIH1cblxuICAgIHRoaXMuI2luZmxhdGUuZmx1c2goKCkgPT4ge1xuICAgICAgY29uc3QgZnVsbCA9IEJ1ZmZlci5jb25jYXQodGhpcy4jaW5mbGF0ZVtrQnVmZmVyXSwgdGhpcy4jaW5mbGF0ZVtrTGVuZ3RoXSlcblxuICAgICAgdGhpcy4jaW5mbGF0ZVtrQnVmZmVyXS5sZW5ndGggPSAwXG4gICAgICB0aGlzLiNpbmZsYXRlW2tMZW5ndGhdID0gMFxuXG4gICAgICBjYWxsYmFjayhudWxsLCBmdWxsKVxuICAgIH0pXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7IFBlck1lc3NhZ2VEZWZsYXRlIH1cbiJdLCJuYW1lcyI6WyJjcmVhdGVJbmZsYXRlUmF3IiwiWl9ERUZBVUxUX1dJTkRPV0JJVFMiLCJyZXF1aXJlIiwiaXNWYWxpZENsaWVudFdpbmRvd0JpdHMiLCJ0YWlsIiwiQnVmZmVyIiwiZnJvbSIsImtCdWZmZXIiLCJTeW1ib2wiLCJrTGVuZ3RoIiwiUGVyTWVzc2FnZURlZmxhdGUiLCJleHRlbnNpb25zIiwic2VydmVyTm9Db250ZXh0VGFrZW92ZXIiLCJoYXMiLCJzZXJ2ZXJNYXhXaW5kb3dCaXRzIiwiZ2V0IiwiZGVjb21wcmVzcyIsImNodW5rIiwiZmluIiwiY2FsbGJhY2siLCJ3aW5kb3dCaXRzIiwiRXJyb3IiLCJOdW1iZXIiLCJwYXJzZUludCIsIm9uIiwiZGF0YSIsInB1c2giLCJsZW5ndGgiLCJlcnIiLCJ3cml0ZSIsImZsdXNoIiwiZnVsbCIsImNvbmNhdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/websocket/permessage-deflate.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/websocket/receiver.js":
/*!***********************************************************!*\
  !*** ./node_modules/undici/lib/web/websocket/receiver.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { Writable } = __webpack_require__(/*! node:stream */ \"node:stream\");\nconst assert = __webpack_require__(/*! node:assert */ \"node:assert\");\nconst { parserStates, opcodes, states, emptyBuffer, sentCloseFrameState } = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/undici/lib/web/websocket/constants.js\");\nconst { kReadyState, kSentClose, kResponse, kReceivedClose } = __webpack_require__(/*! ./symbols */ \"(ssr)/./node_modules/undici/lib/web/websocket/symbols.js\");\nconst { channels } = __webpack_require__(/*! ../../core/diagnostics */ \"(ssr)/./node_modules/undici/lib/core/diagnostics.js\");\nconst { isValidStatusCode, isValidOpcode, failWebsocketConnection, websocketMessageReceived, utf8Decode, isControlFrame, isTextBinaryFrame, isContinuationFrame } = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/web/websocket/util.js\");\nconst { WebsocketFrameSend } = __webpack_require__(/*! ./frame */ \"(ssr)/./node_modules/undici/lib/web/websocket/frame.js\");\nconst { closeWebSocketConnection } = __webpack_require__(/*! ./connection */ \"(ssr)/./node_modules/undici/lib/web/websocket/connection.js\");\nconst { PerMessageDeflate } = __webpack_require__(/*! ./permessage-deflate */ \"(ssr)/./node_modules/undici/lib/web/websocket/permessage-deflate.js\");\n// This code was influenced by ws released under the MIT license.\n// Copyright (c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n// Copyright (c) 2013 Arnout Kazemier and contributors\n// Copyright (c) 2016 Luigi Pinca and contributors\nclass ByteParser extends Writable {\n    #buffers;\n    #byteOffset;\n    #loop;\n    #state;\n    #info;\n    #fragments;\n    /** @type {Map<string, PerMessageDeflate>} */ #extensions;\n    constructor(ws, extensions){\n        super(), this.#buffers = [], this.#byteOffset = 0, this.#loop = false, this.#state = parserStates.INFO, this.#info = {}, this.#fragments = [];\n        this.ws = ws;\n        this.#extensions = extensions == null ? new Map() : extensions;\n        if (this.#extensions.has('permessage-deflate')) {\n            this.#extensions.set('permessage-deflate', new PerMessageDeflate(extensions));\n        }\n    }\n    /**\n   * @param {Buffer} chunk\n   * @param {() => void} callback\n   */ _write(chunk, _, callback) {\n        this.#buffers.push(chunk);\n        this.#byteOffset += chunk.length;\n        this.#loop = true;\n        this.run(callback);\n    }\n    /**\n   * Runs whenever a new chunk is received.\n   * Callback is called whenever there are no more chunks buffering,\n   * or not enough bytes are buffered to parse.\n   */ run(callback) {\n        while(this.#loop){\n            if (this.#state === parserStates.INFO) {\n                // If there aren't enough bytes to parse the payload length, etc.\n                if (this.#byteOffset < 2) {\n                    return callback();\n                }\n                const buffer = this.consume(2);\n                const fin = (buffer[0] & 0x80) !== 0;\n                const opcode = buffer[0] & 0x0F;\n                const masked = (buffer[1] & 0x80) === 0x80;\n                const fragmented = !fin && opcode !== opcodes.CONTINUATION;\n                const payloadLength = buffer[1] & 0x7F;\n                const rsv1 = buffer[0] & 0x40;\n                const rsv2 = buffer[0] & 0x20;\n                const rsv3 = buffer[0] & 0x10;\n                if (!isValidOpcode(opcode)) {\n                    failWebsocketConnection(this.ws, 'Invalid opcode received');\n                    return callback();\n                }\n                if (masked) {\n                    failWebsocketConnection(this.ws, 'Frame cannot be masked');\n                    return callback();\n                }\n                // MUST be 0 unless an extension is negotiated that defines meanings\n                // for non-zero values.  If a nonzero value is received and none of\n                // the negotiated extensions defines the meaning of such a nonzero\n                // value, the receiving endpoint MUST _Fail the WebSocket\n                // Connection_.\n                // This document allocates the RSV1 bit of the WebSocket header for\n                // PMCEs and calls the bit the \"Per-Message Compressed\" bit.  On a\n                // WebSocket connection where a PMCE is in use, this bit indicates\n                // whether a message is compressed or not.\n                if (rsv1 !== 0 && !this.#extensions.has('permessage-deflate')) {\n                    failWebsocketConnection(this.ws, 'Expected RSV1 to be clear.');\n                    return;\n                }\n                if (rsv2 !== 0 || rsv3 !== 0) {\n                    failWebsocketConnection(this.ws, 'RSV1, RSV2, RSV3 must be clear');\n                    return;\n                }\n                if (fragmented && !isTextBinaryFrame(opcode)) {\n                    // Only text and binary frames can be fragmented\n                    failWebsocketConnection(this.ws, 'Invalid frame type was fragmented.');\n                    return;\n                }\n                // If we are already parsing a text/binary frame and do not receive either\n                // a continuation frame or close frame, fail the connection.\n                if (isTextBinaryFrame(opcode) && this.#fragments.length > 0) {\n                    failWebsocketConnection(this.ws, 'Expected continuation frame');\n                    return;\n                }\n                if (this.#info.fragmented && fragmented) {\n                    // A fragmented frame can't be fragmented itself\n                    failWebsocketConnection(this.ws, 'Fragmented frame exceeded 125 bytes.');\n                    return;\n                }\n                // \"All control frames MUST have a payload length of 125 bytes or less\n                // and MUST NOT be fragmented.\"\n                if ((payloadLength > 125 || fragmented) && isControlFrame(opcode)) {\n                    failWebsocketConnection(this.ws, 'Control frame either too large or fragmented');\n                    return;\n                }\n                if (isContinuationFrame(opcode) && this.#fragments.length === 0 && !this.#info.compressed) {\n                    failWebsocketConnection(this.ws, 'Unexpected continuation frame');\n                    return;\n                }\n                if (payloadLength <= 125) {\n                    this.#info.payloadLength = payloadLength;\n                    this.#state = parserStates.READ_DATA;\n                } else if (payloadLength === 126) {\n                    this.#state = parserStates.PAYLOADLENGTH_16;\n                } else if (payloadLength === 127) {\n                    this.#state = parserStates.PAYLOADLENGTH_64;\n                }\n                if (isTextBinaryFrame(opcode)) {\n                    this.#info.binaryType = opcode;\n                    this.#info.compressed = rsv1 !== 0;\n                }\n                this.#info.opcode = opcode;\n                this.#info.masked = masked;\n                this.#info.fin = fin;\n                this.#info.fragmented = fragmented;\n            } else if (this.#state === parserStates.PAYLOADLENGTH_16) {\n                if (this.#byteOffset < 2) {\n                    return callback();\n                }\n                const buffer = this.consume(2);\n                this.#info.payloadLength = buffer.readUInt16BE(0);\n                this.#state = parserStates.READ_DATA;\n            } else if (this.#state === parserStates.PAYLOADLENGTH_64) {\n                if (this.#byteOffset < 8) {\n                    return callback();\n                }\n                const buffer = this.consume(8);\n                const upper = buffer.readUInt32BE(0);\n                // 2^31 is the maximum bytes an arraybuffer can contain\n                // on 32-bit systems. Although, on 64-bit systems, this is\n                // 2^53-1 bytes.\n                // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_array_length\n                // https://source.chromium.org/chromium/chromium/src/+/main:v8/src/common/globals.h;drc=1946212ac0100668f14eb9e2843bdd846e510a1e;bpv=1;bpt=1;l=1275\n                // https://source.chromium.org/chromium/chromium/src/+/main:v8/src/objects/js-array-buffer.h;l=34;drc=1946212ac0100668f14eb9e2843bdd846e510a1e\n                if (upper > 2 ** 31 - 1) {\n                    failWebsocketConnection(this.ws, 'Received payload length > 2^31 bytes.');\n                    return;\n                }\n                const lower = buffer.readUInt32BE(4);\n                this.#info.payloadLength = (upper << 8) + lower;\n                this.#state = parserStates.READ_DATA;\n            } else if (this.#state === parserStates.READ_DATA) {\n                if (this.#byteOffset < this.#info.payloadLength) {\n                    return callback();\n                }\n                const body = this.consume(this.#info.payloadLength);\n                if (isControlFrame(this.#info.opcode)) {\n                    this.#loop = this.parseControlFrame(body);\n                    this.#state = parserStates.INFO;\n                } else {\n                    if (!this.#info.compressed) {\n                        this.#fragments.push(body);\n                        // If the frame is not fragmented, a message has been received.\n                        // If the frame is fragmented, it will terminate with a fin bit set\n                        // and an opcode of 0 (continuation), therefore we handle that when\n                        // parsing continuation frames, not here.\n                        if (!this.#info.fragmented && this.#info.fin) {\n                            const fullMessage = Buffer.concat(this.#fragments);\n                            websocketMessageReceived(this.ws, this.#info.binaryType, fullMessage);\n                            this.#fragments.length = 0;\n                        }\n                        this.#state = parserStates.INFO;\n                    } else {\n                        this.#extensions.get('permessage-deflate').decompress(body, this.#info.fin, (error, data)=>{\n                            if (error) {\n                                closeWebSocketConnection(this.ws, 1007, error.message, error.message.length);\n                                return;\n                            }\n                            this.#fragments.push(data);\n                            if (!this.#info.fin) {\n                                this.#state = parserStates.INFO;\n                                this.#loop = true;\n                                this.run(callback);\n                                return;\n                            }\n                            websocketMessageReceived(this.ws, this.#info.binaryType, Buffer.concat(this.#fragments));\n                            this.#loop = true;\n                            this.#state = parserStates.INFO;\n                            this.#fragments.length = 0;\n                            this.run(callback);\n                        });\n                        this.#loop = false;\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    /**\n   * Take n bytes from the buffered Buffers\n   * @param {number} n\n   * @returns {Buffer}\n   */ consume(n) {\n        if (n > this.#byteOffset) {\n            throw new Error('Called consume() before buffers satiated.');\n        } else if (n === 0) {\n            return emptyBuffer;\n        }\n        if (this.#buffers[0].length === n) {\n            this.#byteOffset -= this.#buffers[0].length;\n            return this.#buffers.shift();\n        }\n        const buffer = Buffer.allocUnsafe(n);\n        let offset = 0;\n        while(offset !== n){\n            const next = this.#buffers[0];\n            const { length } = next;\n            if (length + offset === n) {\n                buffer.set(this.#buffers.shift(), offset);\n                break;\n            } else if (length + offset > n) {\n                buffer.set(next.subarray(0, n - offset), offset);\n                this.#buffers[0] = next.subarray(n - offset);\n                break;\n            } else {\n                buffer.set(this.#buffers.shift(), offset);\n                offset += next.length;\n            }\n        }\n        this.#byteOffset -= n;\n        return buffer;\n    }\n    parseCloseBody(data) {\n        assert(data.length !== 1);\n        // https://datatracker.ietf.org/doc/html/rfc6455#section-7.1.5\n        /** @type {number|undefined} */ let code;\n        if (data.length >= 2) {\n            // _The WebSocket Connection Close Code_ is\n            // defined as the status code (Section 7.4) contained in the first Close\n            // control frame received by the application\n            code = data.readUInt16BE(0);\n        }\n        if (code !== undefined && !isValidStatusCode(code)) {\n            return {\n                code: 1002,\n                reason: 'Invalid status code',\n                error: true\n            };\n        }\n        // https://datatracker.ietf.org/doc/html/rfc6455#section-7.1.6\n        /** @type {Buffer} */ let reason = data.subarray(2);\n        // Remove BOM\n        if (reason[0] === 0xEF && reason[1] === 0xBB && reason[2] === 0xBF) {\n            reason = reason.subarray(3);\n        }\n        try {\n            reason = utf8Decode(reason);\n        } catch  {\n            return {\n                code: 1007,\n                reason: 'Invalid UTF-8',\n                error: true\n            };\n        }\n        return {\n            code,\n            reason,\n            error: false\n        };\n    }\n    /**\n   * Parses control frames.\n   * @param {Buffer} body\n   */ parseControlFrame(body) {\n        const { opcode, payloadLength } = this.#info;\n        if (opcode === opcodes.CLOSE) {\n            if (payloadLength === 1) {\n                failWebsocketConnection(this.ws, 'Received close frame with a 1-byte body.');\n                return false;\n            }\n            this.#info.closeInfo = this.parseCloseBody(body);\n            if (this.#info.closeInfo.error) {\n                const { code, reason } = this.#info.closeInfo;\n                closeWebSocketConnection(this.ws, code, reason, reason.length);\n                failWebsocketConnection(this.ws, reason);\n                return false;\n            }\n            if (this.ws[kSentClose] !== sentCloseFrameState.SENT) {\n                // If an endpoint receives a Close frame and did not previously send a\n                // Close frame, the endpoint MUST send a Close frame in response.  (When\n                // sending a Close frame in response, the endpoint typically echos the\n                // status code it received.)\n                let body = emptyBuffer;\n                if (this.#info.closeInfo.code) {\n                    body = Buffer.allocUnsafe(2);\n                    body.writeUInt16BE(this.#info.closeInfo.code, 0);\n                }\n                const closeFrame = new WebsocketFrameSend(body);\n                this.ws[kResponse].socket.write(closeFrame.createFrame(opcodes.CLOSE), (err)=>{\n                    if (!err) {\n                        this.ws[kSentClose] = sentCloseFrameState.SENT;\n                    }\n                });\n            }\n            // Upon either sending or receiving a Close control frame, it is said\n            // that _The WebSocket Closing Handshake is Started_ and that the\n            // WebSocket connection is in the CLOSING state.\n            this.ws[kReadyState] = states.CLOSING;\n            this.ws[kReceivedClose] = true;\n            return false;\n        } else if (opcode === opcodes.PING) {\n            // Upon receipt of a Ping frame, an endpoint MUST send a Pong frame in\n            // response, unless it already received a Close frame.\n            // A Pong frame sent in response to a Ping frame must have identical\n            // \"Application data\"\n            if (!this.ws[kReceivedClose]) {\n                const frame = new WebsocketFrameSend(body);\n                this.ws[kResponse].socket.write(frame.createFrame(opcodes.PONG));\n                if (channels.ping.hasSubscribers) {\n                    channels.ping.publish({\n                        payload: body\n                    });\n                }\n            }\n        } else if (opcode === opcodes.PONG) {\n            // A Pong frame MAY be sent unsolicited.  This serves as a\n            // unidirectional heartbeat.  A response to an unsolicited Pong frame is\n            // not expected.\n            if (channels.pong.hasSubscribers) {\n                channels.pong.publish({\n                    payload: body\n                });\n            }\n        }\n        return true;\n    }\n    get closingInfo() {\n        return this.#info.closeInfo;\n    }\n}\nmodule.exports = {\n    ByteParser\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/websocket/receiver.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/websocket/sender.js":
/*!*********************************************************!*\
  !*** ./node_modules/undici/lib/web/websocket/sender.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { WebsocketFrameSend } = __webpack_require__(/*! ./frame */ \"(ssr)/./node_modules/undici/lib/web/websocket/frame.js\");\nconst { opcodes, sendHints } = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/undici/lib/web/websocket/constants.js\");\nconst FixedQueue = __webpack_require__(/*! ../../dispatcher/fixed-queue */ \"(ssr)/./node_modules/undici/lib/dispatcher/fixed-queue.js\");\n/** @type {typeof Uint8Array} */ const FastBuffer = Buffer[Symbol.species];\n/**\n * @typedef {object} SendQueueNode\n * @property {Promise<void> | null} promise\n * @property {((...args: any[]) => any)} callback\n * @property {Buffer | null} frame\n */ class SendQueue {\n    /**\n   * @type {FixedQueue}\n   */ #queue;\n    /**\n   * @type {boolean}\n   */ #running;\n    /** @type {import('node:net').Socket} */ #socket;\n    constructor(socket){\n        this.#queue = new FixedQueue();\n        this.#running = false;\n        this.#socket = socket;\n    }\n    add(item, cb, hint) {\n        if (hint !== sendHints.blob) {\n            const frame = createFrame(item, hint);\n            if (!this.#running) {\n                // fast-path\n                this.#socket.write(frame, cb);\n            } else {\n                /** @type {SendQueueNode} */ const node = {\n                    promise: null,\n                    callback: cb,\n                    frame\n                };\n                this.#queue.push(node);\n            }\n            return;\n        }\n        /** @type {SendQueueNode} */ const node = {\n            promise: item.arrayBuffer().then((ab)=>{\n                node.promise = null;\n                node.frame = createFrame(ab, hint);\n            }),\n            callback: cb,\n            frame: null\n        };\n        this.#queue.push(node);\n        if (!this.#running) {\n            this.#run();\n        }\n    }\n    async #run() {\n        this.#running = true;\n        const queue = this.#queue;\n        while(!queue.isEmpty()){\n            const node = queue.shift();\n            // wait pending promise\n            if (node.promise !== null) {\n                await node.promise;\n            }\n            // write\n            this.#socket.write(node.frame, node.callback);\n            // cleanup\n            node.callback = node.frame = null;\n        }\n        this.#running = false;\n    }\n}\nfunction createFrame(data, hint) {\n    return new WebsocketFrameSend(toBuffer(data, hint)).createFrame(hint === sendHints.string ? opcodes.TEXT : opcodes.BINARY);\n}\nfunction toBuffer(data, hint) {\n    switch(hint){\n        case sendHints.string:\n            return Buffer.from(data);\n        case sendHints.arrayBuffer:\n        case sendHints.blob:\n            return new FastBuffer(data);\n        case sendHints.typedArray:\n            return new FastBuffer(data.buffer, data.byteOffset, data.byteLength);\n    }\n}\nmodule.exports = {\n    SendQueue\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi93ZWIvd2Vic29ja2V0L3NlbmRlci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU0sRUFBRUEsa0JBQWtCLEVBQUUsR0FBR0MsbUJBQU9BLENBQUMsdUVBQVM7QUFDaEQsTUFBTSxFQUFFQyxPQUFPLEVBQUVDLFNBQVMsRUFBRSxHQUFHRixtQkFBT0EsQ0FBQywrRUFBYTtBQUNwRCxNQUFNRyxhQUFhSCxtQkFBT0EsQ0FBQywrRkFBOEI7QUFFekQsOEJBQThCLEdBQzlCLE1BQU1JLGFBQWFDLE1BQU0sQ0FBQ0MsT0FBT0MsT0FBTyxDQUFDO0FBRXpDOzs7OztDQUtDLEdBRUQsTUFBTUM7SUFDSjs7R0FFQyxHQUNELE1BQU0sQ0FBbUI7SUFFekI7O0dBRUMsR0FDRCxRQUFRLENBQVE7SUFFaEIsc0NBQXNDLEdBQ3RDLE9BQU87SUFFUCxZQUFhQyxNQUFNLENBQUU7YUFWckIsTUFBTSxHQUFHLElBQUlOO2FBS2IsUUFBUSxHQUFHO1FBTVQsSUFBSSxDQUFDLE9BQU8sR0FBR007SUFDakI7SUFFQUMsSUFBS0MsSUFBSSxFQUFFQyxFQUFFLEVBQUVDLElBQUksRUFBRTtRQUNuQixJQUFJQSxTQUFTWCxVQUFVWSxJQUFJLEVBQUU7WUFDM0IsTUFBTUMsUUFBUUMsWUFBWUwsTUFBTUU7WUFDaEMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7Z0JBQ2xCLFlBQVk7Z0JBQ1osSUFBSSxDQUFDLE9BQU8sQ0FBQ0ksS0FBSyxDQUFDRixPQUFPSDtZQUM1QixPQUFPO2dCQUNMLDBCQUEwQixHQUMxQixNQUFNTSxPQUFPO29CQUNYQyxTQUFTO29CQUNUQyxVQUFVUjtvQkFDVkc7Z0JBQ0Y7Z0JBQ0EsSUFBSSxDQUFDLE1BQU0sQ0FBQ00sSUFBSSxDQUFDSDtZQUNuQjtZQUNBO1FBQ0Y7UUFFQSwwQkFBMEIsR0FDMUIsTUFBTUEsT0FBTztZQUNYQyxTQUFTUixLQUFLVyxXQUFXLEdBQUdDLElBQUksQ0FBQyxDQUFDQztnQkFDaENOLEtBQUtDLE9BQU8sR0FBRztnQkFDZkQsS0FBS0gsS0FBSyxHQUFHQyxZQUFZUSxJQUFJWDtZQUMvQjtZQUNBTyxVQUFVUjtZQUNWRyxPQUFPO1FBQ1Q7UUFFQSxJQUFJLENBQUMsTUFBTSxDQUFDTSxJQUFJLENBQUNIO1FBRWpCLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2xCLElBQUksQ0FBQyxJQUFJO1FBQ1g7SUFDRjtJQUVBLE1BQU0sSUFBSTtRQUNSLElBQUksQ0FBQyxRQUFRLEdBQUc7UUFDaEIsTUFBTU8sUUFBUSxJQUFJLENBQUMsTUFBTTtRQUN6QixNQUFPLENBQUNBLE1BQU1DLE9BQU8sR0FBSTtZQUN2QixNQUFNUixPQUFPTyxNQUFNRSxLQUFLO1lBQ3hCLHVCQUF1QjtZQUN2QixJQUFJVCxLQUFLQyxPQUFPLEtBQUssTUFBTTtnQkFDekIsTUFBTUQsS0FBS0MsT0FBTztZQUNwQjtZQUNBLFFBQVE7WUFDUixJQUFJLENBQUMsT0FBTyxDQUFDRixLQUFLLENBQUNDLEtBQUtILEtBQUssRUFBRUcsS0FBS0UsUUFBUTtZQUM1QyxVQUFVO1lBQ1ZGLEtBQUtFLFFBQVEsR0FBR0YsS0FBS0gsS0FBSyxHQUFHO1FBQy9CO1FBQ0EsSUFBSSxDQUFDLFFBQVEsR0FBRztJQUNsQjtBQUNGO0FBRUEsU0FBU0MsWUFBYVksSUFBSSxFQUFFZixJQUFJO0lBQzlCLE9BQU8sSUFBSWQsbUJBQW1COEIsU0FBU0QsTUFBTWYsT0FBT0csV0FBVyxDQUFDSCxTQUFTWCxVQUFVNEIsTUFBTSxHQUFHN0IsUUFBUThCLElBQUksR0FBRzlCLFFBQVErQixNQUFNO0FBQzNIO0FBRUEsU0FBU0gsU0FBVUQsSUFBSSxFQUFFZixJQUFJO0lBQzNCLE9BQVFBO1FBQ04sS0FBS1gsVUFBVTRCLE1BQU07WUFDbkIsT0FBT3pCLE9BQU80QixJQUFJLENBQUNMO1FBQ3JCLEtBQUsxQixVQUFVb0IsV0FBVztRQUMxQixLQUFLcEIsVUFBVVksSUFBSTtZQUNqQixPQUFPLElBQUlWLFdBQVd3QjtRQUN4QixLQUFLMUIsVUFBVWdDLFVBQVU7WUFDdkIsT0FBTyxJQUFJOUIsV0FBV3dCLEtBQUtPLE1BQU0sRUFBRVAsS0FBS1EsVUFBVSxFQUFFUixLQUFLUyxVQUFVO0lBQ3ZFO0FBQ0Y7QUFFQUMsT0FBT0MsT0FBTyxHQUFHO0lBQUUvQjtBQUFVIiwic291cmNlcyI6WyJEOlxcSGVsaXhcXG5vZGVfbW9kdWxlc1xcdW5kaWNpXFxsaWJcXHdlYlxcd2Vic29ja2V0XFxzZW5kZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IHsgV2Vic29ja2V0RnJhbWVTZW5kIH0gPSByZXF1aXJlKCcuL2ZyYW1lJylcbmNvbnN0IHsgb3Bjb2Rlcywgc2VuZEhpbnRzIH0gPSByZXF1aXJlKCcuL2NvbnN0YW50cycpXG5jb25zdCBGaXhlZFF1ZXVlID0gcmVxdWlyZSgnLi4vLi4vZGlzcGF0Y2hlci9maXhlZC1xdWV1ZScpXG5cbi8qKiBAdHlwZSB7dHlwZW9mIFVpbnQ4QXJyYXl9ICovXG5jb25zdCBGYXN0QnVmZmVyID0gQnVmZmVyW1N5bWJvbC5zcGVjaWVzXVxuXG4vKipcbiAqIEB0eXBlZGVmIHtvYmplY3R9IFNlbmRRdWV1ZU5vZGVcbiAqIEBwcm9wZXJ0eSB7UHJvbWlzZTx2b2lkPiB8IG51bGx9IHByb21pc2VcbiAqIEBwcm9wZXJ0eSB7KCguLi5hcmdzOiBhbnlbXSkgPT4gYW55KX0gY2FsbGJhY2tcbiAqIEBwcm9wZXJ0eSB7QnVmZmVyIHwgbnVsbH0gZnJhbWVcbiAqL1xuXG5jbGFzcyBTZW5kUXVldWUge1xuICAvKipcbiAgICogQHR5cGUge0ZpeGVkUXVldWV9XG4gICAqL1xuICAjcXVldWUgPSBuZXcgRml4ZWRRdWV1ZSgpXG5cbiAgLyoqXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cbiAgI3J1bm5pbmcgPSBmYWxzZVxuXG4gIC8qKiBAdHlwZSB7aW1wb3J0KCdub2RlOm5ldCcpLlNvY2tldH0gKi9cbiAgI3NvY2tldFxuXG4gIGNvbnN0cnVjdG9yIChzb2NrZXQpIHtcbiAgICB0aGlzLiNzb2NrZXQgPSBzb2NrZXRcbiAgfVxuXG4gIGFkZCAoaXRlbSwgY2IsIGhpbnQpIHtcbiAgICBpZiAoaGludCAhPT0gc2VuZEhpbnRzLmJsb2IpIHtcbiAgICAgIGNvbnN0IGZyYW1lID0gY3JlYXRlRnJhbWUoaXRlbSwgaGludClcbiAgICAgIGlmICghdGhpcy4jcnVubmluZykge1xuICAgICAgICAvLyBmYXN0LXBhdGhcbiAgICAgICAgdGhpcy4jc29ja2V0LndyaXRlKGZyYW1lLCBjYilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8qKiBAdHlwZSB7U2VuZFF1ZXVlTm9kZX0gKi9cbiAgICAgICAgY29uc3Qgbm9kZSA9IHtcbiAgICAgICAgICBwcm9taXNlOiBudWxsLFxuICAgICAgICAgIGNhbGxiYWNrOiBjYixcbiAgICAgICAgICBmcmFtZVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuI3F1ZXVlLnB1c2gobm9kZSlcbiAgICAgIH1cbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8qKiBAdHlwZSB7U2VuZFF1ZXVlTm9kZX0gKi9cbiAgICBjb25zdCBub2RlID0ge1xuICAgICAgcHJvbWlzZTogaXRlbS5hcnJheUJ1ZmZlcigpLnRoZW4oKGFiKSA9PiB7XG4gICAgICAgIG5vZGUucHJvbWlzZSA9IG51bGxcbiAgICAgICAgbm9kZS5mcmFtZSA9IGNyZWF0ZUZyYW1lKGFiLCBoaW50KVxuICAgICAgfSksXG4gICAgICBjYWxsYmFjazogY2IsXG4gICAgICBmcmFtZTogbnVsbFxuICAgIH1cblxuICAgIHRoaXMuI3F1ZXVlLnB1c2gobm9kZSlcblxuICAgIGlmICghdGhpcy4jcnVubmluZykge1xuICAgICAgdGhpcy4jcnVuKClcbiAgICB9XG4gIH1cblxuICBhc3luYyAjcnVuICgpIHtcbiAgICB0aGlzLiNydW5uaW5nID0gdHJ1ZVxuICAgIGNvbnN0IHF1ZXVlID0gdGhpcy4jcXVldWVcbiAgICB3aGlsZSAoIXF1ZXVlLmlzRW1wdHkoKSkge1xuICAgICAgY29uc3Qgbm9kZSA9IHF1ZXVlLnNoaWZ0KClcbiAgICAgIC8vIHdhaXQgcGVuZGluZyBwcm9taXNlXG4gICAgICBpZiAobm9kZS5wcm9taXNlICE9PSBudWxsKSB7XG4gICAgICAgIGF3YWl0IG5vZGUucHJvbWlzZVxuICAgICAgfVxuICAgICAgLy8gd3JpdGVcbiAgICAgIHRoaXMuI3NvY2tldC53cml0ZShub2RlLmZyYW1lLCBub2RlLmNhbGxiYWNrKVxuICAgICAgLy8gY2xlYW51cFxuICAgICAgbm9kZS5jYWxsYmFjayA9IG5vZGUuZnJhbWUgPSBudWxsXG4gICAgfVxuICAgIHRoaXMuI3J1bm5pbmcgPSBmYWxzZVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUZyYW1lIChkYXRhLCBoaW50KSB7XG4gIHJldHVybiBuZXcgV2Vic29ja2V0RnJhbWVTZW5kKHRvQnVmZmVyKGRhdGEsIGhpbnQpKS5jcmVhdGVGcmFtZShoaW50ID09PSBzZW5kSGludHMuc3RyaW5nID8gb3Bjb2Rlcy5URVhUIDogb3Bjb2Rlcy5CSU5BUlkpXG59XG5cbmZ1bmN0aW9uIHRvQnVmZmVyIChkYXRhLCBoaW50KSB7XG4gIHN3aXRjaCAoaGludCkge1xuICAgIGNhc2Ugc2VuZEhpbnRzLnN0cmluZzpcbiAgICAgIHJldHVybiBCdWZmZXIuZnJvbShkYXRhKVxuICAgIGNhc2Ugc2VuZEhpbnRzLmFycmF5QnVmZmVyOlxuICAgIGNhc2Ugc2VuZEhpbnRzLmJsb2I6XG4gICAgICByZXR1cm4gbmV3IEZhc3RCdWZmZXIoZGF0YSlcbiAgICBjYXNlIHNlbmRIaW50cy50eXBlZEFycmF5OlxuICAgICAgcmV0dXJuIG5ldyBGYXN0QnVmZmVyKGRhdGEuYnVmZmVyLCBkYXRhLmJ5dGVPZmZzZXQsIGRhdGEuYnl0ZUxlbmd0aClcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHsgU2VuZFF1ZXVlIH1cbiJdLCJuYW1lcyI6WyJXZWJzb2NrZXRGcmFtZVNlbmQiLCJyZXF1aXJlIiwib3Bjb2RlcyIsInNlbmRIaW50cyIsIkZpeGVkUXVldWUiLCJGYXN0QnVmZmVyIiwiQnVmZmVyIiwiU3ltYm9sIiwic3BlY2llcyIsIlNlbmRRdWV1ZSIsInNvY2tldCIsImFkZCIsIml0ZW0iLCJjYiIsImhpbnQiLCJibG9iIiwiZnJhbWUiLCJjcmVhdGVGcmFtZSIsIndyaXRlIiwibm9kZSIsInByb21pc2UiLCJjYWxsYmFjayIsInB1c2giLCJhcnJheUJ1ZmZlciIsInRoZW4iLCJhYiIsInF1ZXVlIiwiaXNFbXB0eSIsInNoaWZ0IiwiZGF0YSIsInRvQnVmZmVyIiwic3RyaW5nIiwiVEVYVCIsIkJJTkFSWSIsImZyb20iLCJ0eXBlZEFycmF5IiwiYnVmZmVyIiwiYnl0ZU9mZnNldCIsImJ5dGVMZW5ndGgiLCJtb2R1bGUiLCJleHBvcnRzIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/websocket/sender.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/websocket/symbols.js":
/*!**********************************************************!*\
  !*** ./node_modules/undici/lib/web/websocket/symbols.js ***!
  \**********************************************************/
/***/ ((module) => {

eval("\nmodule.exports = {\n    kWebSocketURL: Symbol('url'),\n    kReadyState: Symbol('ready state'),\n    kController: Symbol('controller'),\n    kResponse: Symbol('response'),\n    kBinaryType: Symbol('binary type'),\n    kSentClose: Symbol('sent close'),\n    kReceivedClose: Symbol('received close'),\n    kByteParser: Symbol('byte parser')\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi93ZWIvd2Vic29ja2V0L3N5bWJvbHMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQUEsT0FBT0MsT0FBTyxHQUFHO0lBQ2ZDLGVBQWVDLE9BQU87SUFDdEJDLGFBQWFELE9BQU87SUFDcEJFLGFBQWFGLE9BQU87SUFDcEJHLFdBQVdILE9BQU87SUFDbEJJLGFBQWFKLE9BQU87SUFDcEJLLFlBQVlMLE9BQU87SUFDbkJNLGdCQUFnQk4sT0FBTztJQUN2Qk8sYUFBYVAsT0FBTztBQUN0QiIsInNvdXJjZXMiOlsiRDpcXEhlbGl4XFxub2RlX21vZHVsZXNcXHVuZGljaVxcbGliXFx3ZWJcXHdlYnNvY2tldFxcc3ltYm9scy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGtXZWJTb2NrZXRVUkw6IFN5bWJvbCgndXJsJyksXG4gIGtSZWFkeVN0YXRlOiBTeW1ib2woJ3JlYWR5IHN0YXRlJyksXG4gIGtDb250cm9sbGVyOiBTeW1ib2woJ2NvbnRyb2xsZXInKSxcbiAga1Jlc3BvbnNlOiBTeW1ib2woJ3Jlc3BvbnNlJyksXG4gIGtCaW5hcnlUeXBlOiBTeW1ib2woJ2JpbmFyeSB0eXBlJyksXG4gIGtTZW50Q2xvc2U6IFN5bWJvbCgnc2VudCBjbG9zZScpLFxuICBrUmVjZWl2ZWRDbG9zZTogU3ltYm9sKCdyZWNlaXZlZCBjbG9zZScpLFxuICBrQnl0ZVBhcnNlcjogU3ltYm9sKCdieXRlIHBhcnNlcicpXG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImtXZWJTb2NrZXRVUkwiLCJTeW1ib2wiLCJrUmVhZHlTdGF0ZSIsImtDb250cm9sbGVyIiwia1Jlc3BvbnNlIiwia0JpbmFyeVR5cGUiLCJrU2VudENsb3NlIiwia1JlY2VpdmVkQ2xvc2UiLCJrQnl0ZVBhcnNlciJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/websocket/symbols.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/websocket/util.js":
/*!*******************************************************!*\
  !*** ./node_modules/undici/lib/web/websocket/util.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { kReadyState, kController, kResponse, kBinaryType, kWebSocketURL } = __webpack_require__(/*! ./symbols */ \"(ssr)/./node_modules/undici/lib/web/websocket/symbols.js\");\nconst { states, opcodes } = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/undici/lib/web/websocket/constants.js\");\nconst { ErrorEvent, createFastMessageEvent } = __webpack_require__(/*! ./events */ \"(ssr)/./node_modules/undici/lib/web/websocket/events.js\");\nconst { isUtf8 } = __webpack_require__(/*! node:buffer */ \"node:buffer\");\nconst { collectASequenceOfCodePointsFast, removeHTTPWhitespace } = __webpack_require__(/*! ../fetch/data-url */ \"(ssr)/./node_modules/undici/lib/web/fetch/data-url.js\");\n/* globals Blob */ /**\n * @param {import('./websocket').WebSocket} ws\n * @returns {boolean}\n */ function isConnecting(ws) {\n    // If the WebSocket connection is not yet established, and the connection\n    // is not yet closed, then the WebSocket connection is in the CONNECTING state.\n    return ws[kReadyState] === states.CONNECTING;\n}\n/**\n * @param {import('./websocket').WebSocket} ws\n * @returns {boolean}\n */ function isEstablished(ws) {\n    // If the server's response is validated as provided for above, it is\n    // said that _The WebSocket Connection is Established_ and that the\n    // WebSocket Connection is in the OPEN state.\n    return ws[kReadyState] === states.OPEN;\n}\n/**\n * @param {import('./websocket').WebSocket} ws\n * @returns {boolean}\n */ function isClosing(ws) {\n    // Upon either sending or receiving a Close control frame, it is said\n    // that _The WebSocket Closing Handshake is Started_ and that the\n    // WebSocket connection is in the CLOSING state.\n    return ws[kReadyState] === states.CLOSING;\n}\n/**\n * @param {import('./websocket').WebSocket} ws\n * @returns {boolean}\n */ function isClosed(ws) {\n    return ws[kReadyState] === states.CLOSED;\n}\n/**\n * @see https://dom.spec.whatwg.org/#concept-event-fire\n * @param {string} e\n * @param {EventTarget} target\n * @param {(...args: ConstructorParameters<typeof Event>) => Event} eventFactory\n * @param {EventInit | undefined} eventInitDict\n */ function fireEvent(e, target, eventFactory = (type, init)=>new Event(type, init), eventInitDict = {}) {\n    // 1. If eventConstructor is not given, then let eventConstructor be Event.\n    // 2. Let event be the result of creating an event given eventConstructor,\n    //    in the relevant realm of target.\n    // 3. Initialize event’s type attribute to e.\n    const event = eventFactory(e, eventInitDict);\n    // 4. Initialize any other IDL attributes of event as described in the\n    //    invocation of this algorithm.\n    // 5. Return the result of dispatching event at target, with legacy target\n    //    override flag set if set.\n    target.dispatchEvent(event);\n}\n/**\n * @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol\n * @param {import('./websocket').WebSocket} ws\n * @param {number} type Opcode\n * @param {Buffer} data application data\n */ function websocketMessageReceived(ws, type, data) {\n    // 1. If ready state is not OPEN (1), then return.\n    if (ws[kReadyState] !== states.OPEN) {\n        return;\n    }\n    // 2. Let dataForEvent be determined by switching on type and binary type:\n    let dataForEvent;\n    if (type === opcodes.TEXT) {\n        // -> type indicates that the data is Text\n        //      a new DOMString containing data\n        try {\n            dataForEvent = utf8Decode(data);\n        } catch  {\n            failWebsocketConnection(ws, 'Received invalid UTF-8 in text frame.');\n            return;\n        }\n    } else if (type === opcodes.BINARY) {\n        if (ws[kBinaryType] === 'blob') {\n            // -> type indicates that the data is Binary and binary type is \"blob\"\n            //      a new Blob object, created in the relevant Realm of the WebSocket\n            //      object, that represents data as its raw data\n            dataForEvent = new Blob([\n                data\n            ]);\n        } else {\n            // -> type indicates that the data is Binary and binary type is \"arraybuffer\"\n            //      a new ArrayBuffer object, created in the relevant Realm of the\n            //      WebSocket object, whose contents are data\n            dataForEvent = toArrayBuffer(data);\n        }\n    }\n    // 3. Fire an event named message at the WebSocket object, using MessageEvent,\n    //    with the origin attribute initialized to the serialization of the WebSocket\n    //    object’s url's origin, and the data attribute initialized to dataForEvent.\n    fireEvent('message', ws, createFastMessageEvent, {\n        origin: ws[kWebSocketURL].origin,\n        data: dataForEvent\n    });\n}\nfunction toArrayBuffer(buffer) {\n    if (buffer.byteLength === buffer.buffer.byteLength) {\n        return buffer.buffer;\n    }\n    return buffer.buffer.slice(buffer.byteOffset, buffer.byteOffset + buffer.byteLength);\n}\n/**\n * @see https://datatracker.ietf.org/doc/html/rfc6455\n * @see https://datatracker.ietf.org/doc/html/rfc2616\n * @see https://bugs.chromium.org/p/chromium/issues/detail?id=398407\n * @param {string} protocol\n */ function isValidSubprotocol(protocol) {\n    // If present, this value indicates one\n    // or more comma-separated subprotocol the client wishes to speak,\n    // ordered by preference.  The elements that comprise this value\n    // MUST be non-empty strings with characters in the range U+0021 to\n    // U+007E not including separator characters as defined in\n    // [RFC2616] and MUST all be unique strings.\n    if (protocol.length === 0) {\n        return false;\n    }\n    for(let i = 0; i < protocol.length; ++i){\n        const code = protocol.charCodeAt(i);\n        if (code < 0x21 || // CTL, contains SP (0x20) and HT (0x09)\n        code > 0x7E || code === 0x22 || // \"\n        code === 0x28 || // (\n        code === 0x29 || // )\n        code === 0x2C || // ,\n        code === 0x2F || // /\n        code === 0x3A || // :\n        code === 0x3B || // ;\n        code === 0x3C || // <\n        code === 0x3D || // =\n        code === 0x3E || // >\n        code === 0x3F || // ?\n        code === 0x40 || // @\n        code === 0x5B || // [\n        code === 0x5C || // \\\n        code === 0x5D || // ]\n        code === 0x7B || // {\n        code === 0x7D // }\n        ) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * @see https://datatracker.ietf.org/doc/html/rfc6455#section-7-4\n * @param {number} code\n */ function isValidStatusCode(code) {\n    if (code >= 1000 && code < 1015) {\n        return code !== 1004 && // reserved\n        code !== 1005 && // \"MUST NOT be set as a status code\"\n        code !== 1006 // \"MUST NOT be set as a status code\"\n        ;\n    }\n    return code >= 3000 && code <= 4999;\n}\n/**\n * @param {import('./websocket').WebSocket} ws\n * @param {string|undefined} reason\n */ function failWebsocketConnection(ws, reason) {\n    const { [kController]: controller, [kResponse]: response } = ws;\n    controller.abort();\n    if (response?.socket && !response.socket.destroyed) {\n        response.socket.destroy();\n    }\n    if (reason) {\n        // TODO: process.nextTick\n        fireEvent('error', ws, (type, init)=>new ErrorEvent(type, init), {\n            error: new Error(reason),\n            message: reason\n        });\n    }\n}\n/**\n * @see https://datatracker.ietf.org/doc/html/rfc6455#section-5.5\n * @param {number} opcode\n */ function isControlFrame(opcode) {\n    return opcode === opcodes.CLOSE || opcode === opcodes.PING || opcode === opcodes.PONG;\n}\nfunction isContinuationFrame(opcode) {\n    return opcode === opcodes.CONTINUATION;\n}\nfunction isTextBinaryFrame(opcode) {\n    return opcode === opcodes.TEXT || opcode === opcodes.BINARY;\n}\nfunction isValidOpcode(opcode) {\n    return isTextBinaryFrame(opcode) || isContinuationFrame(opcode) || isControlFrame(opcode);\n}\n/**\n * Parses a Sec-WebSocket-Extensions header value.\n * @param {string} extensions\n * @returns {Map<string, string>}\n */ // TODO(@Uzlopak, @KhafraDev): make compliant https://datatracker.ietf.org/doc/html/rfc6455#section-9.1\nfunction parseExtensions(extensions) {\n    const position = {\n        position: 0\n    };\n    const extensionList = new Map();\n    while(position.position < extensions.length){\n        const pair = collectASequenceOfCodePointsFast(';', extensions, position);\n        const [name, value = ''] = pair.split('=');\n        extensionList.set(removeHTTPWhitespace(name, true, false), removeHTTPWhitespace(value, false, true));\n        position.position++;\n    }\n    return extensionList;\n}\n/**\n * @see https://www.rfc-editor.org/rfc/rfc7692#section-7.1.2.2\n * @description \"client-max-window-bits = 1*DIGIT\"\n * @param {string} value\n */ function isValidClientWindowBits(value) {\n    for(let i = 0; i < value.length; i++){\n        const byte = value.charCodeAt(i);\n        if (byte < 0x30 || byte > 0x39) {\n            return false;\n        }\n    }\n    return true;\n}\n// https://nodejs.org/api/intl.html#detecting-internationalization-support\nconst hasIntl = typeof process.versions.icu === 'string';\nconst fatalDecoder = hasIntl ? new TextDecoder('utf-8', {\n    fatal: true\n}) : undefined;\n/**\n * Converts a Buffer to utf-8, even on platforms without icu.\n * @param {Buffer} buffer\n */ const utf8Decode = hasIntl ? fatalDecoder.decode.bind(fatalDecoder) : function(buffer) {\n    if (isUtf8(buffer)) {\n        return buffer.toString('utf-8');\n    }\n    throw new TypeError('Invalid utf-8 received.');\n};\nmodule.exports = {\n    isConnecting,\n    isEstablished,\n    isClosing,\n    isClosed,\n    fireEvent,\n    isValidSubprotocol,\n    isValidStatusCode,\n    failWebsocketConnection,\n    websocketMessageReceived,\n    utf8Decode,\n    isControlFrame,\n    isContinuationFrame,\n    isTextBinaryFrame,\n    isValidOpcode,\n    parseExtensions,\n    isValidClientWindowBits\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/websocket/util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/websocket/websocket.js":
/*!************************************************************!*\
  !*** ./node_modules/undici/lib/web/websocket/websocket.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { webidl } = __webpack_require__(/*! ../fetch/webidl */ \"(ssr)/./node_modules/undici/lib/web/fetch/webidl.js\");\nconst { URLSerializer } = __webpack_require__(/*! ../fetch/data-url */ \"(ssr)/./node_modules/undici/lib/web/fetch/data-url.js\");\nconst { environmentSettingsObject } = __webpack_require__(/*! ../fetch/util */ \"(ssr)/./node_modules/undici/lib/web/fetch/util.js\");\nconst { staticPropertyDescriptors, states, sentCloseFrameState, sendHints } = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/undici/lib/web/websocket/constants.js\");\nconst { kWebSocketURL, kReadyState, kController, kBinaryType, kResponse, kSentClose, kByteParser } = __webpack_require__(/*! ./symbols */ \"(ssr)/./node_modules/undici/lib/web/websocket/symbols.js\");\nconst { isConnecting, isEstablished, isClosing, isValidSubprotocol, fireEvent } = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/web/websocket/util.js\");\nconst { establishWebSocketConnection, closeWebSocketConnection } = __webpack_require__(/*! ./connection */ \"(ssr)/./node_modules/undici/lib/web/websocket/connection.js\");\nconst { ByteParser } = __webpack_require__(/*! ./receiver */ \"(ssr)/./node_modules/undici/lib/web/websocket/receiver.js\");\nconst { kEnumerableProperty, isBlobLike } = __webpack_require__(/*! ../../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst { getGlobalDispatcher } = __webpack_require__(/*! ../../global */ \"(ssr)/./node_modules/undici/lib/global.js\");\nconst { types } = __webpack_require__(/*! node:util */ \"node:util\");\nconst { ErrorEvent, CloseEvent } = __webpack_require__(/*! ./events */ \"(ssr)/./node_modules/undici/lib/web/websocket/events.js\");\nconst { SendQueue } = __webpack_require__(/*! ./sender */ \"(ssr)/./node_modules/undici/lib/web/websocket/sender.js\");\n// https://websockets.spec.whatwg.org/#interface-definition\nclass WebSocket extends EventTarget {\n    #events;\n    #bufferedAmount;\n    #protocol;\n    #extensions;\n    /** @type {SendQueue} */ #sendQueue;\n    /**\n   * @param {string} url\n   * @param {string|string[]} protocols\n   */ constructor(url, protocols = []){\n        super(), this.#events = {\n            open: null,\n            error: null,\n            close: null,\n            message: null\n        }, this.#bufferedAmount = 0, this.#protocol = '', this.#extensions = '';\n        const prefix = 'WebSocket constructor';\n        webidl.argumentLengthCheck(arguments, 1, prefix);\n        const options = webidl.converters['DOMString or sequence<DOMString> or WebSocketInit'](protocols, prefix, 'options');\n        url = webidl.converters.USVString(url, prefix, 'url');\n        protocols = options.protocols;\n        // 1. Let baseURL be this's relevant settings object's API base URL.\n        const baseURL = environmentSettingsObject.settingsObject.baseUrl;\n        // 1. Let urlRecord be the result of applying the URL parser to url with baseURL.\n        let urlRecord;\n        try {\n            urlRecord = new URL(url, baseURL);\n        } catch (e) {\n            // 3. If urlRecord is failure, then throw a \"SyntaxError\" DOMException.\n            throw new DOMException(e, 'SyntaxError');\n        }\n        // 4. If urlRecord’s scheme is \"http\", then set urlRecord’s scheme to \"ws\".\n        if (urlRecord.protocol === 'http:') {\n            urlRecord.protocol = 'ws:';\n        } else if (urlRecord.protocol === 'https:') {\n            // 5. Otherwise, if urlRecord’s scheme is \"https\", set urlRecord’s scheme to \"wss\".\n            urlRecord.protocol = 'wss:';\n        }\n        // 6. If urlRecord’s scheme is not \"ws\" or \"wss\", then throw a \"SyntaxError\" DOMException.\n        if (urlRecord.protocol !== 'ws:' && urlRecord.protocol !== 'wss:') {\n            throw new DOMException(`Expected a ws: or wss: protocol, got ${urlRecord.protocol}`, 'SyntaxError');\n        }\n        // 7. If urlRecord’s fragment is non-null, then throw a \"SyntaxError\"\n        //    DOMException.\n        if (urlRecord.hash || urlRecord.href.endsWith('#')) {\n            throw new DOMException('Got fragment', 'SyntaxError');\n        }\n        // 8. If protocols is a string, set protocols to a sequence consisting\n        //    of just that string.\n        if (typeof protocols === 'string') {\n            protocols = [\n                protocols\n            ];\n        }\n        // 9. If any of the values in protocols occur more than once or otherwise\n        //    fail to match the requirements for elements that comprise the value\n        //    of `Sec-WebSocket-Protocol` fields as defined by The WebSocket\n        //    protocol, then throw a \"SyntaxError\" DOMException.\n        if (protocols.length !== new Set(protocols.map((p)=>p.toLowerCase())).size) {\n            throw new DOMException('Invalid Sec-WebSocket-Protocol value', 'SyntaxError');\n        }\n        if (protocols.length > 0 && !protocols.every((p)=>isValidSubprotocol(p))) {\n            throw new DOMException('Invalid Sec-WebSocket-Protocol value', 'SyntaxError');\n        }\n        // 10. Set this's url to urlRecord.\n        this[kWebSocketURL] = new URL(urlRecord.href);\n        // 11. Let client be this's relevant settings object.\n        const client = environmentSettingsObject.settingsObject;\n        // 12. Run this step in parallel:\n        //    1. Establish a WebSocket connection given urlRecord, protocols,\n        //       and client.\n        this[kController] = establishWebSocketConnection(urlRecord, protocols, client, this, (response, extensions)=>this.#onConnectionEstablished(response, extensions), options);\n        // Each WebSocket object has an associated ready state, which is a\n        // number representing the state of the connection. Initially it must\n        // be CONNECTING (0).\n        this[kReadyState] = WebSocket.CONNECTING;\n        this[kSentClose] = sentCloseFrameState.NOT_SENT;\n        // The extensions attribute must initially return the empty string.\n        // The protocol attribute must initially return the empty string.\n        // Each WebSocket object has an associated binary type, which is a\n        // BinaryType. Initially it must be \"blob\".\n        this[kBinaryType] = 'blob';\n    }\n    /**\n   * @see https://websockets.spec.whatwg.org/#dom-websocket-close\n   * @param {number|undefined} code\n   * @param {string|undefined} reason\n   */ close(code = undefined, reason = undefined) {\n        webidl.brandCheck(this, WebSocket);\n        const prefix = 'WebSocket.close';\n        if (code !== undefined) {\n            code = webidl.converters['unsigned short'](code, prefix, 'code', {\n                clamp: true\n            });\n        }\n        if (reason !== undefined) {\n            reason = webidl.converters.USVString(reason, prefix, 'reason');\n        }\n        // 1. If code is present, but is neither an integer equal to 1000 nor an\n        //    integer in the range 3000 to 4999, inclusive, throw an\n        //    \"InvalidAccessError\" DOMException.\n        if (code !== undefined) {\n            if (code !== 1000 && (code < 3000 || code > 4999)) {\n                throw new DOMException('invalid code', 'InvalidAccessError');\n            }\n        }\n        let reasonByteLength = 0;\n        // 2. If reason is present, then run these substeps:\n        if (reason !== undefined) {\n            // 1. Let reasonBytes be the result of encoding reason.\n            // 2. If reasonBytes is longer than 123 bytes, then throw a\n            //    \"SyntaxError\" DOMException.\n            reasonByteLength = Buffer.byteLength(reason);\n            if (reasonByteLength > 123) {\n                throw new DOMException(`Reason must be less than 123 bytes; received ${reasonByteLength}`, 'SyntaxError');\n            }\n        }\n        // 3. Run the first matching steps from the following list:\n        closeWebSocketConnection(this, code, reason, reasonByteLength);\n    }\n    /**\n   * @see https://websockets.spec.whatwg.org/#dom-websocket-send\n   * @param {NodeJS.TypedArray|ArrayBuffer|Blob|string} data\n   */ send(data) {\n        webidl.brandCheck(this, WebSocket);\n        const prefix = 'WebSocket.send';\n        webidl.argumentLengthCheck(arguments, 1, prefix);\n        data = webidl.converters.WebSocketSendData(data, prefix, 'data');\n        // 1. If this's ready state is CONNECTING, then throw an\n        //    \"InvalidStateError\" DOMException.\n        if (isConnecting(this)) {\n            throw new DOMException('Sent before connected.', 'InvalidStateError');\n        }\n        // 2. Run the appropriate set of steps from the following list:\n        // https://datatracker.ietf.org/doc/html/rfc6455#section-6.1\n        // https://datatracker.ietf.org/doc/html/rfc6455#section-5.2\n        if (!isEstablished(this) || isClosing(this)) {\n            return;\n        }\n        // If data is a string\n        if (typeof data === 'string') {\n            // If the WebSocket connection is established and the WebSocket\n            // closing handshake has not yet started, then the user agent\n            // must send a WebSocket Message comprised of the data argument\n            // using a text frame opcode; if the data cannot be sent, e.g.\n            // because it would need to be buffered but the buffer is full,\n            // the user agent must flag the WebSocket as full and then close\n            // the WebSocket connection. Any invocation of this method with a\n            // string argument that does not throw an exception must increase\n            // the bufferedAmount attribute by the number of bytes needed to\n            // express the argument as UTF-8.\n            const length = Buffer.byteLength(data);\n            this.#bufferedAmount += length;\n            this.#sendQueue.add(data, ()=>{\n                this.#bufferedAmount -= length;\n            }, sendHints.string);\n        } else if (types.isArrayBuffer(data)) {\n            // If the WebSocket connection is established, and the WebSocket\n            // closing handshake has not yet started, then the user agent must\n            // send a WebSocket Message comprised of data using a binary frame\n            // opcode; if the data cannot be sent, e.g. because it would need\n            // to be buffered but the buffer is full, the user agent must flag\n            // the WebSocket as full and then close the WebSocket connection.\n            // The data to be sent is the data stored in the buffer described\n            // by the ArrayBuffer object. Any invocation of this method with an\n            // ArrayBuffer argument that does not throw an exception must\n            // increase the bufferedAmount attribute by the length of the\n            // ArrayBuffer in bytes.\n            this.#bufferedAmount += data.byteLength;\n            this.#sendQueue.add(data, ()=>{\n                this.#bufferedAmount -= data.byteLength;\n            }, sendHints.arrayBuffer);\n        } else if (ArrayBuffer.isView(data)) {\n            // If the WebSocket connection is established, and the WebSocket\n            // closing handshake has not yet started, then the user agent must\n            // send a WebSocket Message comprised of data using a binary frame\n            // opcode; if the data cannot be sent, e.g. because it would need to\n            // be buffered but the buffer is full, the user agent must flag the\n            // WebSocket as full and then close the WebSocket connection. The\n            // data to be sent is the data stored in the section of the buffer\n            // described by the ArrayBuffer object that data references. Any\n            // invocation of this method with this kind of argument that does\n            // not throw an exception must increase the bufferedAmount attribute\n            // by the length of data’s buffer in bytes.\n            this.#bufferedAmount += data.byteLength;\n            this.#sendQueue.add(data, ()=>{\n                this.#bufferedAmount -= data.byteLength;\n            }, sendHints.typedArray);\n        } else if (isBlobLike(data)) {\n            // If the WebSocket connection is established, and the WebSocket\n            // closing handshake has not yet started, then the user agent must\n            // send a WebSocket Message comprised of data using a binary frame\n            // opcode; if the data cannot be sent, e.g. because it would need to\n            // be buffered but the buffer is full, the user agent must flag the\n            // WebSocket as full and then close the WebSocket connection. The data\n            // to be sent is the raw data represented by the Blob object. Any\n            // invocation of this method with a Blob argument that does not throw\n            // an exception must increase the bufferedAmount attribute by the size\n            // of the Blob object’s raw data, in bytes.\n            this.#bufferedAmount += data.size;\n            this.#sendQueue.add(data, ()=>{\n                this.#bufferedAmount -= data.size;\n            }, sendHints.blob);\n        }\n    }\n    get readyState() {\n        webidl.brandCheck(this, WebSocket);\n        // The readyState getter steps are to return this's ready state.\n        return this[kReadyState];\n    }\n    get bufferedAmount() {\n        webidl.brandCheck(this, WebSocket);\n        return this.#bufferedAmount;\n    }\n    get url() {\n        webidl.brandCheck(this, WebSocket);\n        // The url getter steps are to return this's url, serialized.\n        return URLSerializer(this[kWebSocketURL]);\n    }\n    get extensions() {\n        webidl.brandCheck(this, WebSocket);\n        return this.#extensions;\n    }\n    get protocol() {\n        webidl.brandCheck(this, WebSocket);\n        return this.#protocol;\n    }\n    get onopen() {\n        webidl.brandCheck(this, WebSocket);\n        return this.#events.open;\n    }\n    set onopen(fn) {\n        webidl.brandCheck(this, WebSocket);\n        if (this.#events.open) {\n            this.removeEventListener('open', this.#events.open);\n        }\n        if (typeof fn === 'function') {\n            this.#events.open = fn;\n            this.addEventListener('open', fn);\n        } else {\n            this.#events.open = null;\n        }\n    }\n    get onerror() {\n        webidl.brandCheck(this, WebSocket);\n        return this.#events.error;\n    }\n    set onerror(fn) {\n        webidl.brandCheck(this, WebSocket);\n        if (this.#events.error) {\n            this.removeEventListener('error', this.#events.error);\n        }\n        if (typeof fn === 'function') {\n            this.#events.error = fn;\n            this.addEventListener('error', fn);\n        } else {\n            this.#events.error = null;\n        }\n    }\n    get onclose() {\n        webidl.brandCheck(this, WebSocket);\n        return this.#events.close;\n    }\n    set onclose(fn) {\n        webidl.brandCheck(this, WebSocket);\n        if (this.#events.close) {\n            this.removeEventListener('close', this.#events.close);\n        }\n        if (typeof fn === 'function') {\n            this.#events.close = fn;\n            this.addEventListener('close', fn);\n        } else {\n            this.#events.close = null;\n        }\n    }\n    get onmessage() {\n        webidl.brandCheck(this, WebSocket);\n        return this.#events.message;\n    }\n    set onmessage(fn) {\n        webidl.brandCheck(this, WebSocket);\n        if (this.#events.message) {\n            this.removeEventListener('message', this.#events.message);\n        }\n        if (typeof fn === 'function') {\n            this.#events.message = fn;\n            this.addEventListener('message', fn);\n        } else {\n            this.#events.message = null;\n        }\n    }\n    get binaryType() {\n        webidl.brandCheck(this, WebSocket);\n        return this[kBinaryType];\n    }\n    set binaryType(type) {\n        webidl.brandCheck(this, WebSocket);\n        if (type !== 'blob' && type !== 'arraybuffer') {\n            this[kBinaryType] = 'blob';\n        } else {\n            this[kBinaryType] = type;\n        }\n    }\n    /**\n   * @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol\n   */ #onConnectionEstablished(response, parsedExtensions) {\n        // processResponse is called when the \"response’s header list has been received and initialized.\"\n        // once this happens, the connection is open\n        this[kResponse] = response;\n        const parser = new ByteParser(this, parsedExtensions);\n        parser.on('drain', onParserDrain);\n        parser.on('error', onParserError.bind(this));\n        response.socket.ws = this;\n        this[kByteParser] = parser;\n        this.#sendQueue = new SendQueue(response.socket);\n        // 1. Change the ready state to OPEN (1).\n        this[kReadyState] = states.OPEN;\n        // 2. Change the extensions attribute’s value to the extensions in use, if\n        //    it is not the null value.\n        // https://datatracker.ietf.org/doc/html/rfc6455#section-9.1\n        const extensions = response.headersList.get('sec-websocket-extensions');\n        if (extensions !== null) {\n            this.#extensions = extensions;\n        }\n        // 3. Change the protocol attribute’s value to the subprotocol in use, if\n        //    it is not the null value.\n        // https://datatracker.ietf.org/doc/html/rfc6455#section-1.9\n        const protocol = response.headersList.get('sec-websocket-protocol');\n        if (protocol !== null) {\n            this.#protocol = protocol;\n        }\n        // 4. Fire an event named open at the WebSocket object.\n        fireEvent('open', this);\n    }\n}\n// https://websockets.spec.whatwg.org/#dom-websocket-connecting\nWebSocket.CONNECTING = WebSocket.prototype.CONNECTING = states.CONNECTING;\n// https://websockets.spec.whatwg.org/#dom-websocket-open\nWebSocket.OPEN = WebSocket.prototype.OPEN = states.OPEN;\n// https://websockets.spec.whatwg.org/#dom-websocket-closing\nWebSocket.CLOSING = WebSocket.prototype.CLOSING = states.CLOSING;\n// https://websockets.spec.whatwg.org/#dom-websocket-closed\nWebSocket.CLOSED = WebSocket.prototype.CLOSED = states.CLOSED;\nObject.defineProperties(WebSocket.prototype, {\n    CONNECTING: staticPropertyDescriptors,\n    OPEN: staticPropertyDescriptors,\n    CLOSING: staticPropertyDescriptors,\n    CLOSED: staticPropertyDescriptors,\n    url: kEnumerableProperty,\n    readyState: kEnumerableProperty,\n    bufferedAmount: kEnumerableProperty,\n    onopen: kEnumerableProperty,\n    onerror: kEnumerableProperty,\n    onclose: kEnumerableProperty,\n    close: kEnumerableProperty,\n    onmessage: kEnumerableProperty,\n    binaryType: kEnumerableProperty,\n    send: kEnumerableProperty,\n    extensions: kEnumerableProperty,\n    protocol: kEnumerableProperty,\n    [Symbol.toStringTag]: {\n        value: 'WebSocket',\n        writable: false,\n        enumerable: false,\n        configurable: true\n    }\n});\nObject.defineProperties(WebSocket, {\n    CONNECTING: staticPropertyDescriptors,\n    OPEN: staticPropertyDescriptors,\n    CLOSING: staticPropertyDescriptors,\n    CLOSED: staticPropertyDescriptors\n});\nwebidl.converters['sequence<DOMString>'] = webidl.sequenceConverter(webidl.converters.DOMString);\nwebidl.converters['DOMString or sequence<DOMString>'] = function(V, prefix, argument) {\n    if (webidl.util.Type(V) === 'Object' && Symbol.iterator in V) {\n        return webidl.converters['sequence<DOMString>'](V);\n    }\n    return webidl.converters.DOMString(V, prefix, argument);\n};\n// This implements the proposal made in https://github.com/whatwg/websockets/issues/42\nwebidl.converters.WebSocketInit = webidl.dictionaryConverter([\n    {\n        key: 'protocols',\n        converter: webidl.converters['DOMString or sequence<DOMString>'],\n        defaultValue: ()=>new Array(0)\n    },\n    {\n        key: 'dispatcher',\n        converter: webidl.converters.any,\n        defaultValue: ()=>getGlobalDispatcher()\n    },\n    {\n        key: 'headers',\n        converter: webidl.nullableConverter(webidl.converters.HeadersInit)\n    }\n]);\nwebidl.converters['DOMString or sequence<DOMString> or WebSocketInit'] = function(V) {\n    if (webidl.util.Type(V) === 'Object' && !(Symbol.iterator in V)) {\n        return webidl.converters.WebSocketInit(V);\n    }\n    return {\n        protocols: webidl.converters['DOMString or sequence<DOMString>'](V)\n    };\n};\nwebidl.converters.WebSocketSendData = function(V) {\n    if (webidl.util.Type(V) === 'Object') {\n        if (isBlobLike(V)) {\n            return webidl.converters.Blob(V, {\n                strict: false\n            });\n        }\n        if (ArrayBuffer.isView(V) || types.isArrayBuffer(V)) {\n            return webidl.converters.BufferSource(V);\n        }\n    }\n    return webidl.converters.USVString(V);\n};\nfunction onParserDrain() {\n    this.ws[kResponse].socket.resume();\n}\nfunction onParserError(err) {\n    let message;\n    let code;\n    if (err instanceof CloseEvent) {\n        message = err.reason;\n        code = err.code;\n    } else {\n        message = err.message;\n    }\n    fireEvent('error', this, ()=>new ErrorEvent('error', {\n            error: err,\n            message\n        }));\n    closeWebSocketConnection(this, code);\n}\nmodule.exports = {\n    WebSocket\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/websocket/websocket.js\n");

/***/ })

};
;