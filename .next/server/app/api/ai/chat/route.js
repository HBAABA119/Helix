/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/ai/chat/route";
exports.ids = ["app/api/ai/chat/route"];
exports.modules = {

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fai%2Fchat%2Froute&page=%2Fapi%2Fai%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fai%2Fchat%2Froute.ts&appDir=D%3A%5CHelix%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CHelix&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!":
/*!********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fai%2Fchat%2Froute&page=%2Fapi%2Fai%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fai%2Fchat%2Froute.ts&appDir=D%3A%5CHelix%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CHelix&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=! ***!
  \********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handler: () => (/* binding */ handler),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/server/request-meta */ \"(rsc)/./node_modules/next/dist/server/request-meta.js\");\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(rsc)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/shared/lib/router/utils/app-paths */ \"next/dist/shared/lib/router/utils/app-paths\");\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/base-http/node */ \"(rsc)/./node_modules/next/dist/server/base-http/node.js\");\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/dist/server/web/spec-extension/adapters/next-request */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/next-request.js\");\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(rsc)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! next/dist/server/instrumentation/utils */ \"(rsc)/./node_modules/next/dist/server/instrumentation/utils.js\");\n/* harmony import */ var next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! next/dist/server/send-response */ \"(rsc)/./node_modules/next/dist/server/send-response.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! next/dist/server/web/utils */ \"(rsc)/./node_modules/next/dist/server/web/utils.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! next/dist/server/lib/cache-control */ \"(rsc)/./node_modules/next/dist/server/lib/cache-control.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! next/dist/lib/constants */ \"(rsc)/./node_modules/next/dist/lib/constants.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! next/dist/shared/lib/no-fallback-error.external */ \"next/dist/shared/lib/no-fallback-error.external\");\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! next/dist/server/response-cache */ \"(rsc)/./node_modules/next/dist/server/response-cache/index.js\");\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var D_Helix_src_app_api_ai_chat_route_ts__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./src/app/api/ai/chat/route.ts */ \"(rsc)/./src/app/api/ai/chat/route.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/ai/chat/route\",\n        pathname: \"/api/ai/chat\",\n        filename: \"route\",\n        bundlePath: \"app/api/ai/chat/route\"\n    },\n    distDir: \".next\" || 0,\n    relativeProjectDir:  false || '',\n    resolvedPagePath: \"D:\\\\Helix\\\\src\\\\app\\\\api\\\\ai\\\\chat\\\\route.ts\",\n    nextConfigOutput,\n    userland: D_Helix_src_app_api_ai_chat_route_ts__WEBPACK_IMPORTED_MODULE_16__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\nasync function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/ai/chat/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {} else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = false;\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = (0,next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__.normalizeAppPath)(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.getTracer)();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                cacheComponents: Boolean(nextConfig.experimental.cacheComponents),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextRequest(req);\n    const nodeNextRes = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextResponse(res);\n    const nextReq = next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.NextRequestAdapter.fromNodeNextRequest(nodeNextReq, (0,next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.signalFromNodeResponse)(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.toNodeOutgoingHttpHeaders)(response.headers);\n                        if (cacheTags) {\n                            headers[next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.fromNodeOutgoingHttpHeaders)(cacheEntry.value.headers);\n            if (!((0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isIsr)) {\n                headers.delete(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', (0,next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__.getCacheControlHeader)(cacheEntry.cacheControl));\n            }\n            await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        // if we aren't wrapped by base-server handle here\n        if (!activeSpan && !(err instanceof next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError)) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fai%2Fchat%2Froute&page=%2Fapi%2Fai%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fai%2Fchat%2Froute.ts&appDir=D%3A%5CHelix%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CHelix&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./src/app/api/ai/chat/route.ts":
/*!**************************************!*\
  !*** ./src/app/api/ai/chat/route.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var child_process__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! child_process */ \"child_process\");\n/* harmony import */ var child_process__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(child_process__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! util */ \"util\");\n/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(util__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\nconst execAsync = (0,util__WEBPACK_IMPORTED_MODULE_2__.promisify)(child_process__WEBPACK_IMPORTED_MODULE_1__.exec);\n// NVIDIA API configuration\nconst NVIDIA_API_KEY = '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';\nconst NVIDIA_BASE_URL = 'https://integrate.api.nvidia.com/v1';\nasync function POST(request) {\n    try {\n        const { message, context, model = 'auto', conversationHistory = [], projectId, chatMode = 'ask' } = await request.json();\n        // Auto model selection logic\n        let selectedModel = model;\n        if (model === 'auto') {\n            // Smart model selection based on context\n            const isCodeRelated = /\\b(code|function|class|import|export|const|let|var|if|for|while|return)\\b/i.test(message);\n            const isLongTask = message.length > 200 || /\\b(build|create|implement|develop|design)\\b/i.test(message);\n            if (isCodeRelated) {\n                selectedModel = 'qwen/qwen3-coder-480b-a35b-instruct';\n            } else if (isLongTask) {\n                selectedModel = 'nvidia/llama-3.3-nemotron-super-49b-v1.5';\n            } else {\n                selectedModel = 'meta/llama-3.2-3b-instruct';\n            }\n        }\n        // Content filtering - only allow coding related questions\n        const codingKeywords = [\n            'code',\n            'programming',\n            'javascript',\n            'typescript',\n            'html',\n            'css',\n            'react',\n            'next',\n            'component',\n            'function',\n            'variable',\n            'api',\n            'database',\n            'frontend',\n            'backend',\n            'debug',\n            'error',\n            'bug',\n            'fix',\n            'build',\n            'deploy',\n            'git',\n            'npm',\n            'yarn',\n            'algorithm',\n            'data structure',\n            'class',\n            'object',\n            'array',\n            'string',\n            'number',\n            'boolean',\n            'async',\n            'await',\n            'promise',\n            'callback',\n            'event',\n            'dom',\n            'json',\n            'xml',\n            'http',\n            'https',\n            'rest',\n            'graphql',\n            'sql',\n            'nosql',\n            'mongodb',\n            'firebase',\n            'auth',\n            'login',\n            'register',\n            'session',\n            'token',\n            'jwt',\n            'oauth',\n            'security',\n            'performance',\n            'optimization',\n            'responsive',\n            'mobile',\n            'desktop',\n            'browser',\n            'server',\n            'client',\n            'framework',\n            'library',\n            'package',\n            'module',\n            'import',\n            'export',\n            'interface',\n            'type',\n            'enum',\n            'generic',\n            'inheritance',\n            'polymorphism',\n            'encapsulation',\n            'abstraction',\n            'design pattern',\n            'mvc',\n            'mvvm',\n            'crud',\n            'game',\n            'animation',\n            'graphics',\n            'canvas',\n            'webgl',\n            'three.js',\n            'socket',\n            'websocket',\n            'real-time',\n            'live',\n            'stream',\n            'video',\n            'audio',\n            'media',\n            'style',\n            'styling',\n            'layout',\n            'responsive',\n            'flexbox',\n            'grid',\n            'bootstrap',\n            'tailwind',\n            'sass',\n            'scss',\n            'less',\n            'webpack',\n            'vite',\n            'rollup',\n            'babel',\n            'eslint',\n            'prettier',\n            'typescript',\n            'testing',\n            'jest',\n            'cypress',\n            'playwright',\n            'docker',\n            'kubernetes',\n            'aws',\n            'azure',\n            'gcp',\n            'heroku',\n            'vercel',\n            'netlify'\n        ];\n        const isCodingRelated = codingKeywords.some((keyword)=>message.toLowerCase().includes(keyword.toLowerCase())) || /\\b(create|build|make|develop|implement|design|write|generate)\\b.*\\b(app|website|game|component|function|script|program|software|system|file|folder|page|route|api|database|ui|interface)\\b/i.test(message) || /\\b(how to|how do I|how can I)\\b.*\\b(code|program|build|create|implement|design|develop)\\b/i.test(message) || /\\b(what is|explain|tutorial|learn)\\b.*\\b(javascript|typescript|react|html|css|programming|coding|development)\\b/i.test(message) || /\\b(help|assist|support)\\b.*\\b(code|coding|programming|development|debug|error|bug)\\b/i.test(message);\n        if (!isCodingRelated && chatMode !== 'agent') {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                response: \"I'm your coding assistant! I specialize in helping with programming, web development, software engineering, and technical implementation. Please ask me questions related to:\\n\\n• Programming languages (JavaScript, TypeScript, Python, etc.)\\n• Web development (HTML, CSS, React, Next.js, etc.)\\n• Software engineering and architecture\\n• Debugging and troubleshooting\\n• Code optimization and best practices\\n• Development tools and workflows\\n• Building apps, websites, and games\\n\\nWhat would you like to code today?\",\n                codeBlocks: [],\n                filesToCreate: [],\n                filesToUpdate: [],\n                fileReadResults: [],\n                fileUpdateResults: [],\n                fileDeletionResults: [],\n                folderCreationResults: [],\n                terminalResults: [],\n                previewRequests: [],\n                userQuestions: [],\n                model: selectedModel\n            });\n        }\n        // Generate system prompt based on project context and chat mode\n        let systemPrompt = '';\n        if (chatMode === 'agent') {\n            systemPrompt = `You are Helix AI Agent, a direct coding assistant that builds what users ask for.\n\nSIMPLE RULES:\n- Be conversational and direct\n- Build complete, working solutions\n- Create multiple files for games/apps (HTML, CSS, JS separately)\n- Use modern JavaScript and best practices\n- Make functional code that actually works\n\nCREATE FILES:\n\\`\\`\\`html\n// [filepath].html\n[complete HTML]\n\\`\\`\\`\n\n\\`\\`\\`css\n// [filepath].css\n[complete CSS]\n\\`\\`\\`\n\n\\`\\`\\`javascript\n// [filepath].js\n[complete JavaScript]\n\\`\\`\\`\n\n\\`\\`\\`tsx\n// [filepath].tsx\n[React component]\n\\`\\`\\`\n\nPROJECT: Next.js 15.5.3, TypeScript, Tailwind CSS, Firebase Auth\nFILES: ${context?.files?.map((f)=>`${f.name}`).join(', ') || 'None'}\n\nBuild it now!`;\n        } else {\n            systemPrompt = `You are Helix AI, a helpful coding assistant that talks like a developer friend.\n\nBE HELPFUL:\n- Answer questions clearly\n- Provide working code examples\n- Explain concepts simply\n- Suggest best practices\n- Be conversational and friendly\n\nPROJECT: Next.js 15.5.3, TypeScript, Tailwind CSS, Firebase Auth\nFILES: ${context?.files?.map((f)=>`${f.name}`).join(', ') || 'None'}\n\nHelp the developer succeed!`;\n        }\n        let response = '';\n        try {\n            // Use NVIDIA API\n            const requestBody = {\n                model: selectedModel,\n                messages: [\n                    {\n                        role: 'system',\n                        content: systemPrompt\n                    },\n                    ...conversationHistory.slice(-5),\n                    {\n                        role: 'user',\n                        content: message\n                    }\n                ],\n                temperature: selectedModel.includes('nemotron') ? 0.6 : 0.7,\n                top_p: selectedModel.includes('nemotron') ? 0.95 : 0.8,\n                max_tokens: selectedModel.includes('nemotron') ? 65536 : 4096,\n                stream: false\n            };\n            const nvidiaResponse = await fetch(`${NVIDIA_BASE_URL}/chat/completions`, {\n                method: 'POST',\n                headers: {\n                    'Authorization': `Bearer ${NVIDIA_API_KEY}`,\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(requestBody)\n            });\n            if (!nvidiaResponse.ok) {\n                throw new Error(`NVIDIA API Error: ${nvidiaResponse.status} ${nvidiaResponse.statusText}`);\n            }\n            const nvidiaData = await nvidiaResponse.json();\n            response = nvidiaData.choices?.[0]?.message?.content || 'No response generated';\n            // Remove any formal structure and robotic language\n            response = response.replace(/<think>[\\s\\S]*?<\\/think>/gi, '');\n            response = response.replace(/\\*\\*Reasoning:\\*\\*[\\s\\S]*?(?=\\n\\n|$)/gi, '');\n            response = response.replace(/^.*?thinking.*?$/gmi, '');\n            response = response.replace(/💻\\s*CODING\\s*MODE\\s*ACTIVATED/gi, '');\n            response = response.replace(/🗣️\\s*CONVERSATION\\s*MODE/gi, '');\n            response = response.replace(/\\*\\*Explanation:\\*\\*/gi, '');\n            response = response.replace(/\\*\\*Next Steps:\\*\\*/gi, '');\n            response = response.replace(/^\\s*-\\s*.*$/gm, (match)=>{\n                // Only remove bullet points that look like formal explanations\n                if (match.includes('file') || match.includes('HTML') || match.includes('CSS') || match.includes('JavaScript')) {\n                    return '';\n                }\n                return match;\n            });\n            response = response.trim();\n        } catch (aiError) {\n            console.error('AI Generation Error:', aiError);\n            response = 'I apologize, but I encountered an error while processing your request. Please try again or rephrase your question.';\n        }\n        // Extract code blocks and commands\n        const codeBlockRegex = /```(?:(\\w+)\\s*)?(?:\\n|\\r\\n)?([\\s\\S]*?)```/g;\n        const codeBlocks = [];\n        const filesToCreate = [];\n        const filesToUpdate = [];\n        const filesToRead = [];\n        const filesToDelete = [];\n        const foldersToCreate = [];\n        const terminalCommands = [];\n        const previewRequests = [];\n        const userQuestions = [];\n        let match;\n        // Extract code blocks\n        while((match = codeBlockRegex.exec(response)) !== null){\n            const language = match[1] || 'text';\n            const code = match[2].trim();\n            // Check if it's a terminal command\n            if (language === 'terminal' || language === 'bash' || language === 'cmd') {\n                terminalCommands.push({\n                    command: code,\n                    language\n                });\n            } else if (language === 'read-file') {\n                // File reading request\n                filesToRead.push(code);\n            } else if (language === 'delete-file') {\n                // File deletion request\n                filesToDelete.push(code);\n            } else if (language === 'create-folder') {\n                // Folder creation request\n                foldersToCreate.push(code);\n            } else if (language === 'preview') {\n                // Preview request\n                previewRequests.push(code);\n            } else if (language === 'question') {\n                // User question\n                userQuestions.push(code);\n            } else {\n                codeBlocks.push({\n                    language,\n                    code\n                });\n            }\n        }\n        // Enhanced file creation and update instructions parsing\n        const fileInstructionPatterns = [\n            /(?:I'll create|I'll make|Creating|Let me create|I'll add|I'll build).*?(?:file|component|function|class|interface|hook|util|page|api|route).*?(?:at|in|to)\\s+([^\\s`\"']+\\.[a-zA-Z0-9]+)/gi,\n            /(?:I'll update|I'll modify|I'll edit|Updating|Modifying).*?(?:file|component|function|class|interface|hook|util|page|api|route).*?(?:at|in|to)?\\s*([^\\s`\"']+\\.[a-zA-Z0-9]+)/gi,\n            /(?:Here's|Here is)\\s+(?:the|a|an)\\s+.*?(?:file|component|function|class|interface|hook|util|page|api|route).*?(?:for|at|in|to)\\s+([^\\s`\"']+\\.[a-zA-Z0-9]+)/gi,\n            /(?:Save this as|Put this in|Add this to)\\s+([^\\s`\"']+\\.[a-zA-Z0-9]+)/gi\n        ];\n        fileInstructionPatterns.forEach((pattern)=>{\n            const fileMatches = response.matchAll(pattern);\n            for (const fileMatch of fileMatches){\n                const filePath = fileMatch[1];\n                const isUpdate = /(?:I'll update|I'll modify|I'll edit|Updating|Modifying)/i.test(fileMatch[0]);\n                // Find the next code block after this instruction\n                const instructionIndex = response.indexOf(fileMatch[0]);\n                const nextCodeBlockStart = response.indexOf('```', instructionIndex);\n                if (nextCodeBlockStart !== -1) {\n                    const correspondingCodeBlock = codeBlocks.find((block)=>{\n                        const blockIndex = response.indexOf('```' + block.language);\n                        return blockIndex >= nextCodeBlockStart;\n                    });\n                    if (correspondingCodeBlock) {\n                        if (isUpdate && !filesToUpdate.some((f)=>f.path === filePath)) {\n                            filesToUpdate.push({\n                                path: filePath,\n                                content: correspondingCodeBlock.code,\n                                language: correspondingCodeBlock.language\n                            });\n                        } else if (!isUpdate && !filesToCreate.some((f)=>f.path === filePath)) {\n                            filesToCreate.push({\n                                path: filePath,\n                                content: correspondingCodeBlock.code,\n                                language: correspondingCodeBlock.language\n                            });\n                        }\n                    }\n                }\n            }\n        });\n        // Auto-detect files from code blocks with common patterns\n        codeBlocks.forEach((block, index)=>{\n            // Look for file path comments or JSX/component patterns\n            const lines = block.code.split('\\n');\n            const firstLine = lines[0]?.trim();\n            // Check for file path comments like // src/components/MyComponent.tsx\n            const pathComment = firstLine?.match(/\\/\\/\\s*([^\\s]+\\.[a-zA-Z0-9]+)/);\n            if (pathComment && !filesToCreate.some((f)=>f.path === pathComment[1]) && !filesToUpdate.some((f)=>f.path === pathComment[1])) {\n                filesToCreate.push({\n                    path: pathComment[1],\n                    content: block.code.replace(firstLine, '').trim(),\n                    language: block.language\n                });\n                return;\n            }\n            // Auto-detect based on language and content patterns\n            let suggestedPath = '';\n            if (block.language === 'tsx' || block.language === 'jsx') {\n                const componentMatch = block.code.match(/(?:export\\s+(?:default\\s+)?(?:function|const)\\s+([A-Z][A-Za-z0-9]+))|(?:function\\s+([A-Z][A-Za-z0-9]+))/);\n                ;\n                if (componentMatch) {\n                    const componentName = componentMatch[1] || componentMatch[2];\n                    suggestedPath = `src/components/${componentName}.${block.language}`;\n                }\n            } else if (block.language === 'ts' || block.language === 'js') {\n                if (block.code.includes('export')) {\n                    // Try to extract meaningful name from exports\n                    const exportMatch = block.code.match(/export\\s+(?:const|function)\\s+([a-zA-Z][a-zA-Z0-9]+)/);\n                    if (exportMatch) {\n                        suggestedPath = `src/lib/${exportMatch[1]}.${block.language}`;\n                    } else {\n                        suggestedPath = `src/lib/utils.${block.language}`;\n                    }\n                }\n            } else if (block.language === 'css') {\n                suggestedPath = `src/styles/generated.css`;\n            } else if (block.language === 'json') {\n                // Check if it's package.json content\n                if (block.code.includes('\\\"dependencies\\\"') || block.code.includes('\\\"scripts\\\"')) {\n                    suggestedPath = 'package.json';\n                } else if (block.code.includes('\\\"compilerOptions\\\"')) {\n                    suggestedPath = 'tsconfig.json';\n                } else {\n                    suggestedPath = 'config.json';\n                }\n            } else if (block.language === 'html') {\n                suggestedPath = 'index.html';\n            } else if (block.language === 'md' || block.language === 'markdown') {\n                suggestedPath = 'README.md';\n            }\n            if (suggestedPath && !filesToCreate.some((f)=>f.path === suggestedPath) && !filesToUpdate.some((f)=>f.path === suggestedPath)) {\n                filesToCreate.push({\n                    path: suggestedPath,\n                    content: block.code,\n                    language: block.language\n                });\n            }\n        });\n        // Execute terminal commands if any\n        const terminalResults = [];\n        for (const terminalCmd of terminalCommands){\n            try {\n                const { stdout, stderr } = await execAsync(terminalCmd.command, {\n                    timeout: 30000,\n                    cwd: process.cwd(),\n                    env: {\n                        ...process.env,\n                        NODE_ENV: 'development'\n                    }\n                });\n                terminalResults.push({\n                    command: terminalCmd.command,\n                    output: stdout || stderr || 'Command executed successfully',\n                    success: true\n                });\n            } catch (execError) {\n                terminalResults.push({\n                    command: terminalCmd.command,\n                    output: execError.message || 'Command execution failed',\n                    success: false\n                });\n            }\n        }\n        // Handle file reading requests\n        const fileReadResults = [];\n        for (const filePath of filesToRead){\n            try {\n                const { readFile } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! fs/promises */ \"fs/promises\", 23));\n                const { join } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! path */ \"path\", 23));\n                const { existsSync } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! fs */ \"fs\", 23));\n                const projectRoot = process.cwd();\n                const fullPath = join(projectRoot, filePath);\n                if (existsSync(fullPath)) {\n                    const content = await readFile(fullPath, 'utf8');\n                    fileReadResults.push({\n                        path: filePath,\n                        content,\n                        success: true\n                    });\n                } else {\n                    fileReadResults.push({\n                        path: filePath,\n                        content: '',\n                        success: false,\n                        error: 'File not found'\n                    });\n                }\n            } catch (error) {\n                fileReadResults.push({\n                    path: filePath,\n                    content: '',\n                    success: false,\n                    error: 'Failed to read file'\n                });\n            }\n        }\n        // Handle file update requests\n        const fileUpdateResults = [];\n        for (const fileUpdate of filesToUpdate){\n            try {\n                const { writeFile } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! fs/promises */ \"fs/promises\", 23));\n                const { join } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! path */ \"path\", 23));\n                const projectRoot = process.cwd();\n                const fullPath = join(projectRoot, fileUpdate.path);\n                await writeFile(fullPath, fileUpdate.content, 'utf8');\n                fileUpdateResults.push({\n                    path: fileUpdate.path,\n                    success: true,\n                    message: 'File updated successfully'\n                });\n            } catch (error) {\n                fileUpdateResults.push({\n                    path: fileUpdate.path,\n                    success: false,\n                    error: 'Failed to update file'\n                });\n            }\n        }\n        // Handle file deletion requests\n        const fileDeletionResults = [];\n        for (const filePath of filesToDelete){\n            try {\n                const { unlink } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! fs/promises */ \"fs/promises\", 23));\n                const { join } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! path */ \"path\", 23));\n                const { existsSync } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! fs */ \"fs\", 23));\n                const projectRoot = process.cwd();\n                const fullPath = join(projectRoot, filePath);\n                if (existsSync(fullPath)) {\n                    await unlink(fullPath);\n                    fileDeletionResults.push({\n                        path: filePath,\n                        success: true,\n                        message: 'File deleted successfully'\n                    });\n                } else {\n                    fileDeletionResults.push({\n                        path: filePath,\n                        success: false,\n                        error: 'File not found'\n                    });\n                }\n            } catch (error) {\n                fileDeletionResults.push({\n                    path: filePath,\n                    success: false,\n                    error: 'Failed to delete file'\n                });\n            }\n        }\n        // Handle folder creation requests\n        const folderCreationResults = [];\n        for (const folderPath of foldersToCreate){\n            try {\n                const { mkdir } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! fs/promises */ \"fs/promises\", 23));\n                const { join } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! path */ \"path\", 23));\n                const projectRoot = process.cwd();\n                const fullPath = join(projectRoot, folderPath);\n                await mkdir(fullPath, {\n                    recursive: true\n                });\n                folderCreationResults.push({\n                    path: folderPath,\n                    success: true,\n                    message: 'Folder created successfully'\n                });\n            } catch (error) {\n                folderCreationResults.push({\n                    path: folderPath,\n                    success: false,\n                    error: 'Failed to create folder'\n                });\n            }\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            response,\n            codeBlocks,\n            filesToCreate,\n            filesToUpdate,\n            fileReadResults,\n            fileUpdateResults,\n            fileDeletionResults,\n            folderCreationResults,\n            terminalResults,\n            previewRequests,\n            userQuestions,\n            model: selectedModel\n        });\n    } catch (error) {\n        console.error('AI API Error:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Failed to process AI request. Please try again.'\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/ai/chat/route.ts\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/action-async-storage.external":
/*!*******************************************************************************!*\
  !*** external "next/dist/server/app-render/action-async-storage.external.js" ***!
  \*******************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/action-async-storage.external.js");

/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "./work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "child_process":
/*!********************************!*\
  !*** external "child_process" ***!
  \********************************/
/***/ ((module) => {

"use strict";
module.exports = require("child_process");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "fs/promises":
/*!******************************!*\
  !*** external "fs/promises" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("fs/promises");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "next/dist/shared/lib/no-fallback-error.external":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/no-fallback-error.external" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/no-fallback-error.external");

/***/ }),

/***/ "next/dist/shared/lib/router/utils/app-paths":
/*!**************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/app-paths" ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/app-paths");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fai%2Fchat%2Froute&page=%2Fapi%2Fai%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fai%2Fchat%2Froute.ts&appDir=D%3A%5CHelix%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CHelix&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!")));
module.exports = __webpack_exports__;

})();